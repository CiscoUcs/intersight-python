# coding: utf-8

"""
    UCS Starship API

    This is the UCS Starship REST API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CondHclStatusAction(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'ancestors': 'list[MoMoRef]',
        'create_time': 'datetime',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'parent': 'MoMoRef',
        'tags': 'list[MoTag]',
        'id': 'str',
        'component': 'MoMoRef',
        'description': 'str',
        'driver_name': 'str',
        'driver_version': 'str',
        'firmware_version': 'str',
        'hcl_status_detail': 'MoMoRef',
        'model': 'str',
        'type': 'str'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'ancestors': 'Ancestors',
        'create_time': 'CreateTime',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'parent': 'Parent',
        'tags': 'Tags',
        'id': 'Id',
        'component': 'Component',
        'description': 'Description',
        'driver_name': 'DriverName',
        'driver_version': 'DriverVersion',
        'firmware_version': 'FirmwareVersion',
        'hcl_status_detail': 'HclStatusDetail',
        'model': 'Model',
        'type': 'Type'
    }

    def __init__(self, account_moid=None, ancestors=None, create_time=None, mod_time=None, moid=None, object_type=None, owners=None, parent=None, tags=None, id=None, component=None, description=None, driver_name=None, driver_version=None, firmware_version=None, hcl_status_detail=None, model=None, type=None):
        """
        CondHclStatusAction - a model defined in Swagger
        """

        self._account_moid = None
        self._ancestors = None
        self._create_time = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._parent = None
        self._tags = None
        self._id = None
        self._component = None
        self._description = None
        self._driver_name = None
        self._driver_version = None
        self._firmware_version = None
        self._hcl_status_detail = None
        self._model = None
        self._type = None

        if account_moid is not None:
          self.account_moid = account_moid
        if ancestors is not None:
          self.ancestors = ancestors
        if create_time is not None:
          self.create_time = create_time
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if parent is not None:
          self.parent = parent
        if tags is not None:
          self.tags = tags
        if id is not None:
          self.id = id
        if component is not None:
          self.component = component
        if description is not None:
          self.description = description
        if driver_name is not None:
          self.driver_name = driver_name
        if driver_version is not None:
          self.driver_version = driver_version
        if firmware_version is not None:
          self.firmware_version = firmware_version
        if hcl_status_detail is not None:
          self.hcl_status_detail = hcl_status_detail
        if model is not None:
          self.model = model
        if type is not None:
          self.type = type

    @property
    def account_moid(self):
        """
        Gets the account_moid of this CondHclStatusAction.
        The Account ID for this managed object.  

        :return: The account_moid of this CondHclStatusAction.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this CondHclStatusAction.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this CondHclStatusAction.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def ancestors(self):
        """
        Gets the ancestors of this CondHclStatusAction.
        Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this CondHclStatusAction.
        :rtype: list[MoMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this CondHclStatusAction.
        Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this CondHclStatusAction.
        :type: list[MoMoRef]
        """

        self._ancestors = ancestors

    @property
    def create_time(self):
        """
        Gets the create_time of this CondHclStatusAction.
        The time when this managed object was created.  

        :return: The create_time of this CondHclStatusAction.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this CondHclStatusAction.
        The time when this managed object was created.  

        :param create_time: The create_time of this CondHclStatusAction.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def mod_time(self):
        """
        Gets the mod_time of this CondHclStatusAction.
        The time when this managed object was last modified.  

        :return: The mod_time of this CondHclStatusAction.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this CondHclStatusAction.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this CondHclStatusAction.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this CondHclStatusAction.
        A unique identifier of this Managed Object instance.  

        :return: The moid of this CondHclStatusAction.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this CondHclStatusAction.
        A unique identifier of this Managed Object instance.  

        :param moid: The moid of this CondHclStatusAction.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this CondHclStatusAction.
        The fully-qualified type of this managed object, e.g. the class name.  

        :return: The object_type of this CondHclStatusAction.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this CondHclStatusAction.
        The fully-qualified type of this managed object, e.g. the class name.  

        :param object_type: The object_type of this CondHclStatusAction.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this CondHclStatusAction.
        An array of owners which represent effective ownership of this object.   

        :return: The owners of this CondHclStatusAction.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this CondHclStatusAction.
        An array of owners which represent effective ownership of this object.   

        :param owners: The owners of this CondHclStatusAction.
        :type: list[str]
        """

        self._owners = owners

    @property
    def parent(self):
        """
        Gets the parent of this CondHclStatusAction.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this CondHclStatusAction.
        :rtype: MoMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this CondHclStatusAction.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this CondHclStatusAction.
        :type: MoMoRef
        """

        self._parent = parent

    @property
    def tags(self):
        """
        Gets the tags of this CondHclStatusAction.
        An array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this CondHclStatusAction.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this CondHclStatusAction.
        An array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this CondHclStatusAction.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def id(self):
        """
        Gets the id of this CondHclStatusAction.
        A unique identifier of this Managed Object instance.  

        :return: The id of this CondHclStatusAction.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CondHclStatusAction.
        A unique identifier of this Managed Object instance.  

        :param id: The id of this CondHclStatusAction.
        :type: str
        """

        self._id = id

    @property
    def component(self):
        """
        Gets the component of this CondHclStatusAction.
        specifies the component associated with this HclStatusAction (adapter or storage controller) 

        :return: The component of this CondHclStatusAction.
        :rtype: MoMoRef
        """
        return self._component

    @component.setter
    def component(self, component):
        """
        Sets the component of this CondHclStatusAction.
        specifies the component associated with this HclStatusAction (adapter or storage controller) 

        :param component: The component of this CondHclStatusAction.
        :type: MoMoRef
        """

        self._component = component

    @property
    def description(self):
        """
        Gets the description of this CondHclStatusAction.
        the description of the component action that could be performed to bring this component in a HCL validated state  

        :return: The description of this CondHclStatusAction.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this CondHclStatusAction.
        the description of the component action that could be performed to bring this component in a HCL validated state  

        :param description: The description of this CondHclStatusAction.
        :type: str
        """

        self._description = description

    @property
    def driver_name(self):
        """
        Gets the driver_name of this CondHclStatusAction.
        the current driver name of the component we are validating as received from inventory  

        :return: The driver_name of this CondHclStatusAction.
        :rtype: str
        """
        return self._driver_name

    @driver_name.setter
    def driver_name(self, driver_name):
        """
        Sets the driver_name of this CondHclStatusAction.
        the current driver name of the component we are validating as received from inventory  

        :param driver_name: The driver_name of this CondHclStatusAction.
        :type: str
        """

        self._driver_name = driver_name

    @property
    def driver_version(self):
        """
        Gets the driver_version of this CondHclStatusAction.
        the current driver version of the component if the type is \"upgrade firmware\" as received from inventory or the driver version to upgrade to if the type is \"upgrade driver\" as foun din the HCL data.  

        :return: The driver_version of this CondHclStatusAction.
        :rtype: str
        """
        return self._driver_version

    @driver_version.setter
    def driver_version(self, driver_version):
        """
        Sets the driver_version of this CondHclStatusAction.
        the current driver version of the component if the type is \"upgrade firmware\" as received from inventory or the driver version to upgrade to if the type is \"upgrade driver\" as foun din the HCL data.  

        :param driver_version: The driver_version of this CondHclStatusAction.
        :type: str
        """

        self._driver_version = driver_version

    @property
    def firmware_version(self):
        """
        Gets the firmware_version of this CondHclStatusAction.
        the current firmware version of the component model if the type is \"upgrade driver\" as received from inventory or the firmware version to upgrade to if the type is \"upgrade firmware\" as found in the HCL data.  

        :return: The firmware_version of this CondHclStatusAction.
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """
        Sets the firmware_version of this CondHclStatusAction.
        the current firmware version of the component model if the type is \"upgrade driver\" as received from inventory or the firmware version to upgrade to if the type is \"upgrade firmware\" as found in the HCL data.  

        :param firmware_version: The firmware_version of this CondHclStatusAction.
        :type: str
        """

        self._firmware_version = firmware_version

    @property
    def hcl_status_detail(self):
        """
        Gets the hcl_status_detail of this CondHclStatusAction.

        :return: The hcl_status_detail of this CondHclStatusAction.
        :rtype: MoMoRef
        """
        return self._hcl_status_detail

    @hcl_status_detail.setter
    def hcl_status_detail(self, hcl_status_detail):
        """
        Sets the hcl_status_detail of this CondHclStatusAction.

        :param hcl_status_detail: The hcl_status_detail of this CondHclStatusAction.
        :type: MoMoRef
        """

        self._hcl_status_detail = hcl_status_detail

    @property
    def model(self):
        """
        Gets the model of this CondHclStatusAction.
        The component model we are validating as received from inventory  

        :return: The model of this CondHclStatusAction.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this CondHclStatusAction.
        The component model we are validating as received from inventory  

        :param model: The model of this CondHclStatusAction.
        :type: str
        """

        self._model = model

    @property
    def type(self):
        """
        Gets the type of this CondHclStatusAction.
        the type of action required to achieve \"validated\" status for the HclStatusDetail. Could be either \"upgrade firmware\" or \"upgrade driver\"   

        :return: The type of this CondHclStatusAction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this CondHclStatusAction.
        the type of action required to achieve \"validated\" status for the HclStatusDetail. Could be either \"upgrade firmware\" or \"upgrade driver\"   

        :param type: The type of this CondHclStatusAction.
        :type: str
        """

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CondHclStatusAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
