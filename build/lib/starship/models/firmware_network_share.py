# coding: utf-8

"""
    UCS Starship API

    This is the UCS Starship REST API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FirmwareNetworkShare(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cifs_server': 'FirmwareCifsServer',
        'http_server': 'FirmwareHttpServer',
        'map_type': 'str',
        'nfs_server': 'FirmwareNfsServer',
        'password': 'str',
        'upgradeoption': 'str',
        'username': 'str'
    }

    attribute_map = {
        'cifs_server': 'CifsServer',
        'http_server': 'HttpServer',
        'map_type': 'MapType',
        'nfs_server': 'NfsServer',
        'password': 'Password',
        'upgradeoption': 'Upgradeoption',
        'username': 'Username'
    }

    def __init__(self, cifs_server=None, http_server=None, map_type='nfs', nfs_server=None, password=None, upgradeoption='nw_upgrade_full', username=None):
        """
        FirmwareNetworkShare - a model defined in Swagger
        """

        self._cifs_server = None
        self._http_server = None
        self._map_type = None
        self._nfs_server = None
        self._password = None
        self._upgradeoption = None
        self._username = None

        if cifs_server is not None:
          self.cifs_server = cifs_server
        if http_server is not None:
          self.http_server = http_server
        if map_type is not None:
          self.map_type = map_type
        if nfs_server is not None:
          self.nfs_server = nfs_server
        if password is not None:
          self.password = password
        if upgradeoption is not None:
          self.upgradeoption = upgradeoption
        if username is not None:
          self.username = username

    @property
    def cifs_server(self):
        """
        Gets the cifs_server of this FirmwareNetworkShare.
        Cifs server access details that holds the image  

        :return: The cifs_server of this FirmwareNetworkShare.
        :rtype: FirmwareCifsServer
        """
        return self._cifs_server

    @cifs_server.setter
    def cifs_server(self, cifs_server):
        """
        Sets the cifs_server of this FirmwareNetworkShare.
        Cifs server access details that holds the image  

        :param cifs_server: The cifs_server of this FirmwareNetworkShare.
        :type: FirmwareCifsServer
        """

        self._cifs_server = cifs_server

    @property
    def http_server(self):
        """
        Gets the http_server of this FirmwareNetworkShare.
        Http server access details that holds the image  

        :return: The http_server of this FirmwareNetworkShare.
        :rtype: FirmwareHttpServer
        """
        return self._http_server

    @http_server.setter
    def http_server(self, http_server):
        """
        Sets the http_server of this FirmwareNetworkShare.
        Http server access details that holds the image  

        :param http_server: The http_server of this FirmwareNetworkShare.
        :type: FirmwareHttpServer
        """

        self._http_server = http_server

    @property
    def map_type(self):
        """
        Gets the map_type of this FirmwareNetworkShare.
        User can have the image already downloaded in a local network in customer premises and initiate the upgrade via Intersight with that network-share information. The image can be in a different mount protocol like cifs,nfs and over http(www). Once this configured, Intersight will configure the mount point in BMC.  

        :return: The map_type of this FirmwareNetworkShare.
        :rtype: str
        """
        return self._map_type

    @map_type.setter
    def map_type(self, map_type):
        """
        Sets the map_type of this FirmwareNetworkShare.
        User can have the image already downloaded in a local network in customer premises and initiate the upgrade via Intersight with that network-share information. The image can be in a different mount protocol like cifs,nfs and over http(www). Once this configured, Intersight will configure the mount point in BMC.  

        :param map_type: The map_type of this FirmwareNetworkShare.
        :type: str
        """
        allowed_values = ["nfs", "cifs", "www"]
        if map_type not in allowed_values:
            raise ValueError(
                "Invalid value for `map_type` ({0}), must be one of {1}"
                .format(map_type, allowed_values)
            )

        self._map_type = map_type

    @property
    def nfs_server(self):
        """
        Gets the nfs_server of this FirmwareNetworkShare.
        Nfs server accessdetails that holds the image  

        :return: The nfs_server of this FirmwareNetworkShare.
        :rtype: FirmwareNfsServer
        """
        return self._nfs_server

    @nfs_server.setter
    def nfs_server(self, nfs_server):
        """
        Sets the nfs_server of this FirmwareNetworkShare.
        Nfs server accessdetails that holds the image  

        :param nfs_server: The nfs_server of this FirmwareNetworkShare.
        :type: FirmwareNfsServer
        """

        self._nfs_server = nfs_server

    @property
    def password(self):
        """
        Gets the password of this FirmwareNetworkShare.
        Based on the mount configurations, credential is required by BMC to mount the image from the network  

        :return: The password of this FirmwareNetworkShare.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this FirmwareNetworkShare.
        Based on the mount configurations, credential is required by BMC to mount the image from the network  

        :param password: The password of this FirmwareNetworkShare.
        :type: str
        """

        self._password = password

    @property
    def upgradeoption(self):
        """
        Gets the upgradeoption of this FirmwareNetworkShare.
        Customer can mount a locally downloaded image on the setup and upgrade later or do both the mount, upgrade in a single window  

        :return: The upgradeoption of this FirmwareNetworkShare.
        :rtype: str
        """
        return self._upgradeoption

    @upgradeoption.setter
    def upgradeoption(self, upgradeoption):
        """
        Sets the upgradeoption of this FirmwareNetworkShare.
        Customer can mount a locally downloaded image on the setup and upgrade later or do both the mount, upgrade in a single window  

        :param upgradeoption: The upgradeoption of this FirmwareNetworkShare.
        :type: str
        """
        allowed_values = ["nw_upgrade_full"]
        if upgradeoption not in allowed_values:
            raise ValueError(
                "Invalid value for `upgradeoption` ({0}), must be one of {1}"
                .format(upgradeoption, allowed_values)
            )

        self._upgradeoption = upgradeoption

    @property
    def username(self):
        """
        Gets the username of this FirmwareNetworkShare.
        Based on the mount configurations, credential is required by BMC to mount the image from the network   

        :return: The username of this FirmwareNetworkShare.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this FirmwareNetworkShare.
        Based on the mount configurations, credential is required by BMC to mount the image from the network   

        :param username: The username of this FirmwareNetworkShare.
        :type: str
        """

        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FirmwareNetworkShare):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
