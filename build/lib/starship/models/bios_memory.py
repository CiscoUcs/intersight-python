# coding: utf-8

"""
    UCS Starship API

    This is the UCS Starship REST API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BiosMemory(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'memory_mapped_io_above4gb': 'str',
        'numa_optimized': 'str',
        'select_memory_ras_configuration': 'str'
    }

    attribute_map = {
        'memory_mapped_io_above4gb': 'MemoryMappedIoAbove4gb',
        'numa_optimized': 'NumaOptimized',
        'select_memory_ras_configuration': 'SelectMemoryRasConfiguration'
    }

    def __init__(self, memory_mapped_io_above4gb='platform-default', numa_optimized='platform-default', select_memory_ras_configuration='platform-default'):
        """
        BiosMemory - a model defined in Swagger
        """

        self._memory_mapped_io_above4gb = None
        self._numa_optimized = None
        self._select_memory_ras_configuration = None

        if memory_mapped_io_above4gb is not None:
          self.memory_mapped_io_above4gb = memory_mapped_io_above4gb
        if numa_optimized is not None:
          self.numa_optimized = numa_optimized
        if select_memory_ras_configuration is not None:
          self.select_memory_ras_configuration = select_memory_ras_configuration

    @property
    def memory_mapped_io_above4gb(self):
        """
        Gets the memory_mapped_io_above4gb of this BiosMemory.
        BIOS Token for setting Above 4G Decoding configuration  

        :return: The memory_mapped_io_above4gb of this BiosMemory.
        :rtype: str
        """
        return self._memory_mapped_io_above4gb

    @memory_mapped_io_above4gb.setter
    def memory_mapped_io_above4gb(self, memory_mapped_io_above4gb):
        """
        Sets the memory_mapped_io_above4gb of this BiosMemory.
        BIOS Token for setting Above 4G Decoding configuration  

        :param memory_mapped_io_above4gb: The memory_mapped_io_above4gb of this BiosMemory.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if memory_mapped_io_above4gb not in allowed_values:
            raise ValueError(
                "Invalid value for `memory_mapped_io_above4gb` ({0}), must be one of {1}"
                .format(memory_mapped_io_above4gb, allowed_values)
            )

        self._memory_mapped_io_above4gb = memory_mapped_io_above4gb

    @property
    def numa_optimized(self):
        """
        Gets the numa_optimized of this BiosMemory.
        BIOS Token for setting NUMA configuration  

        :return: The numa_optimized of this BiosMemory.
        :rtype: str
        """
        return self._numa_optimized

    @numa_optimized.setter
    def numa_optimized(self, numa_optimized):
        """
        Sets the numa_optimized of this BiosMemory.
        BIOS Token for setting NUMA configuration  

        :param numa_optimized: The numa_optimized of this BiosMemory.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if numa_optimized not in allowed_values:
            raise ValueError(
                "Invalid value for `numa_optimized` ({0}), must be one of {1}"
                .format(numa_optimized, allowed_values)
            )

        self._numa_optimized = numa_optimized

    @property
    def select_memory_ras_configuration(self):
        """
        Gets the select_memory_ras_configuration of this BiosMemory.
        BIOS Token for setting SelectMemory RAS configuration configuration   

        :return: The select_memory_ras_configuration of this BiosMemory.
        :rtype: str
        """
        return self._select_memory_ras_configuration

    @select_memory_ras_configuration.setter
    def select_memory_ras_configuration(self, select_memory_ras_configuration):
        """
        Sets the select_memory_ras_configuration of this BiosMemory.
        BIOS Token for setting SelectMemory RAS configuration configuration   

        :param select_memory_ras_configuration: The select_memory_ras_configuration of this BiosMemory.
        :type: str
        """
        allowed_values = ["platform-default", "maximum-performance", "mirror-mode-1lm"]
        if select_memory_ras_configuration not in allowed_values:
            raise ValueError(
                "Invalid value for `select_memory_ras_configuration` ({0}), must be one of {1}"
                .format(select_memory_ras_configuration, allowed_values)
            )

        self._select_memory_ras_configuration = select_memory_ras_configuration

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BiosMemory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
