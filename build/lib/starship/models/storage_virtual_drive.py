# coding: utf-8

"""
    UCS Starship API

    This is the UCS Starship REST API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StorageVirtualDrive(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'ancestors': 'list[MoMoRef]',
        'create_time': 'datetime',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'parent': 'MoMoRef',
        'tags': 'list[MoTag]',
        'id': 'str',
        'device_mo_id': 'str',
        'dn': 'str',
        'rn': 'str',
        'model': 'str',
        'revision': 'str',
        'serial': 'str',
        'vendor': 'str',
        'access_policy': 'str',
        'boot_drive': 'bool',
        'disk_group_policy': 'str',
        'drive_cache': 'str',
        'expand_to_available': 'bool',
        'io_policy': 'str',
        'name': 'str',
        'read_policy': 'str',
        'size': 'int',
        'write_policy': 'str'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'ancestors': 'Ancestors',
        'create_time': 'CreateTime',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'parent': 'Parent',
        'tags': 'Tags',
        'id': 'Id',
        'device_mo_id': 'DeviceMoId',
        'dn': 'Dn',
        'rn': 'Rn',
        'model': 'Model',
        'revision': 'Revision',
        'serial': 'Serial',
        'vendor': 'Vendor',
        'access_policy': 'AccessPolicy',
        'boot_drive': 'BootDrive',
        'disk_group_policy': 'DiskGroupPolicy',
        'drive_cache': 'DriveCache',
        'expand_to_available': 'ExpandToAvailable',
        'io_policy': 'IoPolicy',
        'name': 'Name',
        'read_policy': 'ReadPolicy',
        'size': 'Size',
        'write_policy': 'WritePolicy'
    }

    def __init__(self, account_moid=None, ancestors=None, create_time=None, mod_time=None, moid=None, object_type=None, owners=None, parent=None, tags=None, id=None, device_mo_id=None, dn=None, rn=None, model=None, revision=None, serial=None, vendor=None, access_policy='Default', boot_drive=None, disk_group_policy=None, drive_cache='Default', expand_to_available=None, io_policy='Default', name=None, read_policy='Default', size=None, write_policy='Default'):
        """
        StorageVirtualDrive - a model defined in Swagger
        """

        self._account_moid = None
        self._ancestors = None
        self._create_time = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._parent = None
        self._tags = None
        self._id = None
        self._device_mo_id = None
        self._dn = None
        self._rn = None
        self._model = None
        self._revision = None
        self._serial = None
        self._vendor = None
        self._access_policy = None
        self._boot_drive = None
        self._disk_group_policy = None
        self._drive_cache = None
        self._expand_to_available = None
        self._io_policy = None
        self._name = None
        self._read_policy = None
        self._size = None
        self._write_policy = None

        if account_moid is not None:
          self.account_moid = account_moid
        if ancestors is not None:
          self.ancestors = ancestors
        if create_time is not None:
          self.create_time = create_time
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if parent is not None:
          self.parent = parent
        if tags is not None:
          self.tags = tags
        if id is not None:
          self.id = id
        if device_mo_id is not None:
          self.device_mo_id = device_mo_id
        if dn is not None:
          self.dn = dn
        if rn is not None:
          self.rn = rn
        if model is not None:
          self.model = model
        if revision is not None:
          self.revision = revision
        if serial is not None:
          self.serial = serial
        if vendor is not None:
          self.vendor = vendor
        if access_policy is not None:
          self.access_policy = access_policy
        if boot_drive is not None:
          self.boot_drive = boot_drive
        if disk_group_policy is not None:
          self.disk_group_policy = disk_group_policy
        if drive_cache is not None:
          self.drive_cache = drive_cache
        if expand_to_available is not None:
          self.expand_to_available = expand_to_available
        if io_policy is not None:
          self.io_policy = io_policy
        if name is not None:
          self.name = name
        if read_policy is not None:
          self.read_policy = read_policy
        if size is not None:
          self.size = size
        if write_policy is not None:
          self.write_policy = write_policy

    @property
    def account_moid(self):
        """
        Gets the account_moid of this StorageVirtualDrive.
        The Account ID for this managed object.  

        :return: The account_moid of this StorageVirtualDrive.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this StorageVirtualDrive.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this StorageVirtualDrive.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def ancestors(self):
        """
        Gets the ancestors of this StorageVirtualDrive.
        Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this StorageVirtualDrive.
        :rtype: list[MoMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this StorageVirtualDrive.
        Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this StorageVirtualDrive.
        :type: list[MoMoRef]
        """

        self._ancestors = ancestors

    @property
    def create_time(self):
        """
        Gets the create_time of this StorageVirtualDrive.
        The time when this managed object was created.  

        :return: The create_time of this StorageVirtualDrive.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this StorageVirtualDrive.
        The time when this managed object was created.  

        :param create_time: The create_time of this StorageVirtualDrive.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def mod_time(self):
        """
        Gets the mod_time of this StorageVirtualDrive.
        The time when this managed object was last modified.  

        :return: The mod_time of this StorageVirtualDrive.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this StorageVirtualDrive.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this StorageVirtualDrive.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this StorageVirtualDrive.
        A unique identifier of this Managed Object instance.  

        :return: The moid of this StorageVirtualDrive.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this StorageVirtualDrive.
        A unique identifier of this Managed Object instance.  

        :param moid: The moid of this StorageVirtualDrive.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this StorageVirtualDrive.
        The fully-qualified type of this managed object, e.g. the class name.  

        :return: The object_type of this StorageVirtualDrive.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this StorageVirtualDrive.
        The fully-qualified type of this managed object, e.g. the class name.  

        :param object_type: The object_type of this StorageVirtualDrive.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this StorageVirtualDrive.
        An array of owners which represent effective ownership of this object.   

        :return: The owners of this StorageVirtualDrive.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this StorageVirtualDrive.
        An array of owners which represent effective ownership of this object.   

        :param owners: The owners of this StorageVirtualDrive.
        :type: list[str]
        """

        self._owners = owners

    @property
    def parent(self):
        """
        Gets the parent of this StorageVirtualDrive.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this StorageVirtualDrive.
        :rtype: MoMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this StorageVirtualDrive.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this StorageVirtualDrive.
        :type: MoMoRef
        """

        self._parent = parent

    @property
    def tags(self):
        """
        Gets the tags of this StorageVirtualDrive.
        An array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this StorageVirtualDrive.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this StorageVirtualDrive.
        An array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this StorageVirtualDrive.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def id(self):
        """
        Gets the id of this StorageVirtualDrive.
        A unique identifier of this Managed Object instance.  

        :return: The id of this StorageVirtualDrive.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this StorageVirtualDrive.
        A unique identifier of this Managed Object instance.  

        :param id: The id of this StorageVirtualDrive.
        :type: str
        """

        self._id = id

    @property
    def device_mo_id(self):
        """
        Gets the device_mo_id of this StorageVirtualDrive.

        :return: The device_mo_id of this StorageVirtualDrive.
        :rtype: str
        """
        return self._device_mo_id

    @device_mo_id.setter
    def device_mo_id(self, device_mo_id):
        """
        Sets the device_mo_id of this StorageVirtualDrive.

        :param device_mo_id: The device_mo_id of this StorageVirtualDrive.
        :type: str
        """

        self._device_mo_id = device_mo_id

    @property
    def dn(self):
        """
        Gets the dn of this StorageVirtualDrive.

        :return: The dn of this StorageVirtualDrive.
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """
        Sets the dn of this StorageVirtualDrive.

        :param dn: The dn of this StorageVirtualDrive.
        :type: str
        """

        self._dn = dn

    @property
    def rn(self):
        """
        Gets the rn of this StorageVirtualDrive.

        :return: The rn of this StorageVirtualDrive.
        :rtype: str
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """
        Sets the rn of this StorageVirtualDrive.

        :param rn: The rn of this StorageVirtualDrive.
        :type: str
        """

        self._rn = rn

    @property
    def model(self):
        """
        Gets the model of this StorageVirtualDrive.

        :return: The model of this StorageVirtualDrive.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this StorageVirtualDrive.

        :param model: The model of this StorageVirtualDrive.
        :type: str
        """

        self._model = model

    @property
    def revision(self):
        """
        Gets the revision of this StorageVirtualDrive.

        :return: The revision of this StorageVirtualDrive.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this StorageVirtualDrive.

        :param revision: The revision of this StorageVirtualDrive.
        :type: str
        """

        self._revision = revision

    @property
    def serial(self):
        """
        Gets the serial of this StorageVirtualDrive.

        :return: The serial of this StorageVirtualDrive.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """
        Sets the serial of this StorageVirtualDrive.

        :param serial: The serial of this StorageVirtualDrive.
        :type: str
        """

        self._serial = serial

    @property
    def vendor(self):
        """
        Gets the vendor of this StorageVirtualDrive.

        :return: The vendor of this StorageVirtualDrive.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """
        Sets the vendor of this StorageVirtualDrive.

        :param vendor: The vendor of this StorageVirtualDrive.
        :type: str
        """

        self._vendor = vendor

    @property
    def access_policy(self):
        """
        Gets the access_policy of this StorageVirtualDrive.
        This property holds the access policy that host has on this virtual drive. Accepted values - Default, ReadWrite, ReadOnly, Blocked Default   - use platform default ReadWrite - host can read from and write to the virtual drisk ReadOnlt  - host can only read from the virtual disk Blocked    - host can neither read nor write to the virtual disk  

        :return: The access_policy of this StorageVirtualDrive.
        :rtype: str
        """
        return self._access_policy

    @access_policy.setter
    def access_policy(self, access_policy):
        """
        Sets the access_policy of this StorageVirtualDrive.
        This property holds the access policy that host has on this virtual drive. Accepted values - Default, ReadWrite, ReadOnly, Blocked Default   - use platform default ReadWrite - host can read from and write to the virtual drisk ReadOnlt  - host can only read from the virtual disk Blocked    - host can neither read nor write to the virtual disk  

        :param access_policy: The access_policy of this StorageVirtualDrive.
        :type: str
        """
        allowed_values = ["Default", "ReadWrite", "ReadOnly", "Blocked"]
        if access_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `access_policy` ({0}), must be one of {1}"
                .format(access_policy, allowed_values)
            )

        self._access_policy = access_policy

    @property
    def boot_drive(self):
        """
        Gets the boot_drive of this StorageVirtualDrive.
        This flag enables the use of this virtual drive as a boot drive  

        :return: The boot_drive of this StorageVirtualDrive.
        :rtype: bool
        """
        return self._boot_drive

    @boot_drive.setter
    def boot_drive(self, boot_drive):
        """
        Sets the boot_drive of this StorageVirtualDrive.
        This flag enables the use of this virtual drive as a boot drive  

        :param boot_drive: The boot_drive of this StorageVirtualDrive.
        :type: bool
        """

        self._boot_drive = boot_drive

    @property
    def disk_group_policy(self):
        """
        Gets the disk_group_policy of this StorageVirtualDrive.
        This property expects the Moid of the disk group policy that has the disk group in which this virtual drive needs to be created  

        :return: The disk_group_policy of this StorageVirtualDrive.
        :rtype: str
        """
        return self._disk_group_policy

    @disk_group_policy.setter
    def disk_group_policy(self, disk_group_policy):
        """
        Sets the disk_group_policy of this StorageVirtualDrive.
        This property expects the Moid of the disk group policy that has the disk group in which this virtual drive needs to be created  

        :param disk_group_policy: The disk_group_policy of this StorageVirtualDrive.
        :type: str
        """

        self._disk_group_policy = disk_group_policy

    @property
    def drive_cache(self):
        """
        Gets the drive_cache of this StorageVirtualDrive.
        This property expect disk cache policy. Accepted values - Default, NoChange, Enable, Disable  

        :return: The drive_cache of this StorageVirtualDrive.
        :rtype: str
        """
        return self._drive_cache

    @drive_cache.setter
    def drive_cache(self, drive_cache):
        """
        Sets the drive_cache of this StorageVirtualDrive.
        This property expect disk cache policy. Accepted values - Default, NoChange, Enable, Disable  

        :param drive_cache: The drive_cache of this StorageVirtualDrive.
        :type: str
        """
        allowed_values = ["Default", "NoChange", "Enable", "Disable"]
        if drive_cache not in allowed_values:
            raise ValueError(
                "Invalid value for `drive_cache` ({0}), must be one of {1}"
                .format(drive_cache, allowed_values)
            )

        self._drive_cache = drive_cache

    @property
    def expand_to_available(self):
        """
        Gets the expand_to_available of this StorageVirtualDrive.
        This flag enables this virtual drive to use all the available space in the disk group. When this flag is configured, the size property is ignored.  

        :return: The expand_to_available of this StorageVirtualDrive.
        :rtype: bool
        """
        return self._expand_to_available

    @expand_to_available.setter
    def expand_to_available(self, expand_to_available):
        """
        Sets the expand_to_available of this StorageVirtualDrive.
        This flag enables this virtual drive to use all the available space in the disk group. When this flag is configured, the size property is ignored.  

        :param expand_to_available: The expand_to_available of this StorageVirtualDrive.
        :type: bool
        """

        self._expand_to_available = expand_to_available

    @property
    def io_policy(self):
        """
        Gets the io_policy of this StorageVirtualDrive.
        This property expects the desired io mode - direct io or cached io. Accepted values - Default, DirectIo, CachedIo  

        :return: The io_policy of this StorageVirtualDrive.
        :rtype: str
        """
        return self._io_policy

    @io_policy.setter
    def io_policy(self, io_policy):
        """
        Sets the io_policy of this StorageVirtualDrive.
        This property expects the desired io mode - direct io or cached io. Accepted values - Default, DirectIo, CachedIo  

        :param io_policy: The io_policy of this StorageVirtualDrive.
        :type: str
        """
        allowed_values = ["Default", "Direct", "Cached"]
        if io_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `io_policy` ({0}), must be one of {1}"
                .format(io_policy, allowed_values)
            )

        self._io_policy = io_policy

    @property
    def name(self):
        """
        Gets the name of this StorageVirtualDrive.
        The name of the virtual drive  

        :return: The name of this StorageVirtualDrive.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this StorageVirtualDrive.
        The name of the virtual drive  

        :param name: The name of this StorageVirtualDrive.
        :type: str
        """

        self._name = name

    @property
    def read_policy(self):
        """
        Gets the read_policy of this StorageVirtualDrive.
        This property holds the read ahead mode to be used. Accepted values - Default, ReadAhead, NoReadAhead Default     - use platform default ReadAhead   - always read ahead into cache NoReadAhead - do not read ahead  

        :return: The read_policy of this StorageVirtualDrive.
        :rtype: str
        """
        return self._read_policy

    @read_policy.setter
    def read_policy(self, read_policy):
        """
        Sets the read_policy of this StorageVirtualDrive.
        This property holds the read ahead mode to be used. Accepted values - Default, ReadAhead, NoReadAhead Default     - use platform default ReadAhead   - always read ahead into cache NoReadAhead - do not read ahead  

        :param read_policy: The read_policy of this StorageVirtualDrive.
        :type: str
        """
        allowed_values = ["Default", "ReadAhead", "NoReadAhead"]
        if read_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `read_policy` ({0}), must be one of {1}"
                .format(read_policy, allowed_values)
            )

        self._read_policy = read_policy

    @property
    def size(self):
        """
        Gets the size of this StorageVirtualDrive.
        Virtual drive size in MB. This is a required field unless expandToAvailable is set to true  

        :return: The size of this StorageVirtualDrive.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this StorageVirtualDrive.
        Virtual drive size in MB. This is a required field unless expandToAvailable is set to true  

        :param size: The size of this StorageVirtualDrive.
        :type: int
        """

        self._size = size

    @property
    def write_policy(self):
        """
        Gets the write_policy of this StorageVirtualDrive.
        This property holds the write mode used to write the data in this virtual drive. Accepted values - Default, WriteThrough, WriteBackGoodBbu, AlwaysWriteBack Default          - use platform default WriteThrough     - Data is written through the cache and to the physical drives. Performance is improved, because subsequent reads of that data can be satisfied from the cache. WriteBackGoodBbu - Data is stored in the cache, and is only written to the physical drives when space in the cache is needed. Virtual drives requesting this policy fall back to Write Through caching when the batter backup unit (BBU) cannot guarantee the safety of the cache in the event of a power failure. AlwaysWriteBack  - With this policy, write caching remains Write Back even if the battery backup unit is defective or discharged.   

        :return: The write_policy of this StorageVirtualDrive.
        :rtype: str
        """
        return self._write_policy

    @write_policy.setter
    def write_policy(self, write_policy):
        """
        Sets the write_policy of this StorageVirtualDrive.
        This property holds the write mode used to write the data in this virtual drive. Accepted values - Default, WriteThrough, WriteBackGoodBbu, AlwaysWriteBack Default          - use platform default WriteThrough     - Data is written through the cache and to the physical drives. Performance is improved, because subsequent reads of that data can be satisfied from the cache. WriteBackGoodBbu - Data is stored in the cache, and is only written to the physical drives when space in the cache is needed. Virtual drives requesting this policy fall back to Write Through caching when the batter backup unit (BBU) cannot guarantee the safety of the cache in the event of a power failure. AlwaysWriteBack  - With this policy, write caching remains Write Back even if the battery backup unit is defective or discharged.   

        :param write_policy: The write_policy of this StorageVirtualDrive.
        :type: str
        """
        allowed_values = ["Default", "WriteThrough", "WriteBackGoodBbu", "AlwaysWriteBack"]
        if write_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `write_policy` ({0}), must be one of {1}"
                .format(write_policy, allowed_values)
            )

        self._write_policy = write_policy

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StorageVirtualDrive):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
