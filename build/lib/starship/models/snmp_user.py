# coding: utf-8

"""
    UCS Starship API

    This is the UCS Starship REST API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SnmpUser(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_password': 'str',
        'auth_type': 'str',
        'privacy_password': 'str',
        'privacy_type': 'str',
        'security_level': 'str',
        'snmp_user': 'str'
    }

    attribute_map = {
        'auth_password': 'AuthPassword',
        'auth_type': 'AuthType',
        'privacy_password': 'PrivacyPassword',
        'privacy_type': 'PrivacyType',
        'security_level': 'SecurityLevel',
        'snmp_user': 'SnmpUser'
    }

    def __init__(self, auth_password=None, auth_type='MD5', privacy_password=None, privacy_type='DES', security_level='AuthPriv', snmp_user=None):
        """
        SnmpUser - a model defined in Swagger
        """

        self._auth_password = None
        self._auth_type = None
        self._privacy_password = None
        self._privacy_type = None
        self._security_level = None
        self._snmp_user = None

        if auth_password is not None:
          self.auth_password = auth_password
        if auth_type is not None:
          self.auth_type = auth_type
        if privacy_password is not None:
          self.privacy_password = privacy_password
        if privacy_type is not None:
          self.privacy_type = privacy_type
        if security_level is not None:
          self.security_level = security_level
        if snmp_user is not None:
          self.snmp_user = snmp_user

    @property
    def auth_password(self):
        """
        Gets the auth_password of this SnmpUser.
        Authorization password for the user.  

        :return: The auth_password of this SnmpUser.
        :rtype: str
        """
        return self._auth_password

    @auth_password.setter
    def auth_password(self, auth_password):
        """
        Sets the auth_password of this SnmpUser.
        Authorization password for the user.  

        :param auth_password: The auth_password of this SnmpUser.
        :type: str
        """

        self._auth_password = auth_password

    @property
    def auth_type(self):
        """
        Gets the auth_type of this SnmpUser.
        The protocol to be used for authenticating the user. Accepted values are MD5, SHA.  

        :return: The auth_type of this SnmpUser.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """
        Sets the auth_type of this SnmpUser.
        The protocol to be used for authenticating the user. Accepted values are MD5, SHA.  

        :param auth_type: The auth_type of this SnmpUser.
        :type: str
        """
        allowed_values = ["MD5", "SHA"]
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def privacy_password(self):
        """
        Gets the privacy_password of this SnmpUser.
        Privacy password for SNMP user.  

        :return: The privacy_password of this SnmpUser.
        :rtype: str
        """
        return self._privacy_password

    @privacy_password.setter
    def privacy_password(self, privacy_password):
        """
        Sets the privacy_password of this SnmpUser.
        Privacy password for SNMP user.  

        :param privacy_password: The privacy_password of this SnmpUser.
        :type: str
        """

        self._privacy_password = privacy_password

    @property
    def privacy_type(self):
        """
        Gets the privacy_type of this SnmpUser.
        The privacy protocol for the user. Accepted values are AES, DES.  

        :return: The privacy_type of this SnmpUser.
        :rtype: str
        """
        return self._privacy_type

    @privacy_type.setter
    def privacy_type(self, privacy_type):
        """
        Sets the privacy_type of this SnmpUser.
        The privacy protocol for the user. Accepted values are AES, DES.  

        :param privacy_type: The privacy_type of this SnmpUser.
        :type: str
        """
        allowed_values = ["DES", "AES"]
        if privacy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `privacy_type` ({0}), must be one of {1}"
                .format(privacy_type, allowed_values)
            )

        self._privacy_type = privacy_type

    @property
    def security_level(self):
        """
        Gets the security_level of this SnmpUser.
        The security mechanism to be used for communication between agent and manager. Accepted values are NoAuthNoPriv, AuthNoPriv, AuthPriv.  

        :return: The security_level of this SnmpUser.
        :rtype: str
        """
        return self._security_level

    @security_level.setter
    def security_level(self, security_level):
        """
        Sets the security_level of this SnmpUser.
        The security mechanism to be used for communication between agent and manager. Accepted values are NoAuthNoPriv, AuthNoPriv, AuthPriv.  

        :param security_level: The security_level of this SnmpUser.
        :type: str
        """
        allowed_values = ["AuthPriv", "NoAuthNoPriv", "AuthNoPriv"]
        if security_level not in allowed_values:
            raise ValueError(
                "Invalid value for `security_level` ({0}), must be one of {1}"
                .format(security_level, allowed_values)
            )

        self._security_level = security_level

    @property
    def snmp_user(self):
        """
        Gets the snmp_user of this SnmpUser.
        SNMP user name   

        :return: The snmp_user of this SnmpUser.
        :rtype: str
        """
        return self._snmp_user

    @snmp_user.setter
    def snmp_user(self, snmp_user):
        """
        Sets the snmp_user of this SnmpUser.
        SNMP user name   

        :param snmp_user: The snmp_user of this SnmpUser.
        :type: str
        """

        self._snmp_user = snmp_user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SnmpUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
