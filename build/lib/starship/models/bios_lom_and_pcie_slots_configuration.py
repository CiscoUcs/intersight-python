# coding: utf-8

"""
    UCS Starship API

    This is the UCS Starship REST API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BiosLomAndPcieSlotsConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lom_port0state': 'str',
        'lom_port1state': 'str',
        'lom_port2state': 'str',
        'lom_port3state': 'str',
        'lom_ports_all_state': 'str',
        'slot10link_speed': 'str',
        'slot10state': 'str',
        'slot11link_speed': 'str',
        'slot11state': 'str',
        'slot12link_speed': 'str',
        'slot12state': 'str',
        'slot1link_speed': 'str',
        'slot1state': 'str',
        'slot2link_speed': 'str',
        'slot2state': 'str',
        'slot3link_speed': 'str',
        'slot3state': 'str',
        'slot4link_speed': 'str',
        'slot4state': 'str',
        'slot5link_speed': 'str',
        'slot5state': 'str',
        'slot6link_speed': 'str',
        'slot6state': 'str',
        'slot7link_speed': 'str',
        'slot7state': 'str',
        'slot8link_speed': 'str',
        'slot8state': 'str',
        'slot9link_speed': 'str',
        'slot9state': 'str',
        'slot_front_nvme1link_speed': 'str',
        'slot_front_nvme2link_speed': 'str',
        'slot_mlom_link_speed': 'str',
        'slot_mlom_state': 'str',
        'slot_mraid_link_speed': 'str',
        'slot_mraid_state': 'str',
        'slot_n1state': 'str',
        'slot_n2state': 'str',
        'slot_raid_link_speed': 'str',
        'slot_raid_state': 'str',
        'slot_rear_nvme1link_speed': 'str',
        'slot_rear_nvme1state': 'str',
        'slot_rear_nvme2link_speed': 'str',
        'slot_rear_nvme2state': 'str'
    }

    attribute_map = {
        'lom_port0state': 'LomPort0state',
        'lom_port1state': 'LomPort1state',
        'lom_port2state': 'LomPort2state',
        'lom_port3state': 'LomPort3state',
        'lom_ports_all_state': 'LomPortsAllState',
        'slot10link_speed': 'Slot10linkSpeed',
        'slot10state': 'Slot10state',
        'slot11link_speed': 'Slot11linkSpeed',
        'slot11state': 'Slot11state',
        'slot12link_speed': 'Slot12linkSpeed',
        'slot12state': 'Slot12state',
        'slot1link_speed': 'Slot1linkSpeed',
        'slot1state': 'Slot1state',
        'slot2link_speed': 'Slot2linkSpeed',
        'slot2state': 'Slot2state',
        'slot3link_speed': 'Slot3linkSpeed',
        'slot3state': 'Slot3state',
        'slot4link_speed': 'Slot4linkSpeed',
        'slot4state': 'Slot4state',
        'slot5link_speed': 'Slot5linkSpeed',
        'slot5state': 'Slot5state',
        'slot6link_speed': 'Slot6linkSpeed',
        'slot6state': 'Slot6state',
        'slot7link_speed': 'Slot7linkSpeed',
        'slot7state': 'Slot7state',
        'slot8link_speed': 'Slot8linkSpeed',
        'slot8state': 'Slot8state',
        'slot9link_speed': 'Slot9linkSpeed',
        'slot9state': 'Slot9state',
        'slot_front_nvme1link_speed': 'SlotFrontNvme1linkSpeed',
        'slot_front_nvme2link_speed': 'SlotFrontNvme2linkSpeed',
        'slot_mlom_link_speed': 'SlotMlomLinkSpeed',
        'slot_mlom_state': 'SlotMlomState',
        'slot_mraid_link_speed': 'SlotMraidLinkSpeed',
        'slot_mraid_state': 'SlotMraidState',
        'slot_n1state': 'SlotN1state',
        'slot_n2state': 'SlotN2state',
        'slot_raid_link_speed': 'SlotRaidLinkSpeed',
        'slot_raid_state': 'SlotRaidState',
        'slot_rear_nvme1link_speed': 'SlotRearNvme1linkSpeed',
        'slot_rear_nvme1state': 'SlotRearNvme1state',
        'slot_rear_nvme2link_speed': 'SlotRearNvme2linkSpeed',
        'slot_rear_nvme2state': 'SlotRearNvme2state'
    }

    def __init__(self, lom_port0state='platform-default', lom_port1state='platform-default', lom_port2state='platform-default', lom_port3state='platform-default', lom_ports_all_state='platform-default', slot10link_speed='platform-default', slot10state='platform-default', slot11link_speed='platform-default', slot11state='platform-default', slot12link_speed='platform-default', slot12state='platform-default', slot1link_speed='platform-default', slot1state='platform-default', slot2link_speed='platform-default', slot2state='platform-default', slot3link_speed='platform-default', slot3state='platform-default', slot4link_speed='platform-default', slot4state='platform-default', slot5link_speed='platform-default', slot5state='platform-default', slot6link_speed='platform-default', slot6state='platform-default', slot7link_speed='platform-default', slot7state='platform-default', slot8link_speed='platform-default', slot8state='platform-default', slot9link_speed='platform-default', slot9state='platform-default', slot_front_nvme1link_speed='platform-default', slot_front_nvme2link_speed='platform-default', slot_mlom_link_speed='platform-default', slot_mlom_state='platform-default', slot_mraid_link_speed='platform-default', slot_mraid_state='platform-default', slot_n1state='platform-default', slot_n2state='platform-default', slot_raid_link_speed='platform-default', slot_raid_state='platform-default', slot_rear_nvme1link_speed='platform-default', slot_rear_nvme1state='platform-default', slot_rear_nvme2link_speed='platform-default', slot_rear_nvme2state='platform-default'):
        """
        BiosLomAndPcieSlotsConfiguration - a model defined in Swagger
        """

        self._lom_port0state = None
        self._lom_port1state = None
        self._lom_port2state = None
        self._lom_port3state = None
        self._lom_ports_all_state = None
        self._slot10link_speed = None
        self._slot10state = None
        self._slot11link_speed = None
        self._slot11state = None
        self._slot12link_speed = None
        self._slot12state = None
        self._slot1link_speed = None
        self._slot1state = None
        self._slot2link_speed = None
        self._slot2state = None
        self._slot3link_speed = None
        self._slot3state = None
        self._slot4link_speed = None
        self._slot4state = None
        self._slot5link_speed = None
        self._slot5state = None
        self._slot6link_speed = None
        self._slot6state = None
        self._slot7link_speed = None
        self._slot7state = None
        self._slot8link_speed = None
        self._slot8state = None
        self._slot9link_speed = None
        self._slot9state = None
        self._slot_front_nvme1link_speed = None
        self._slot_front_nvme2link_speed = None
        self._slot_mlom_link_speed = None
        self._slot_mlom_state = None
        self._slot_mraid_link_speed = None
        self._slot_mraid_state = None
        self._slot_n1state = None
        self._slot_n2state = None
        self._slot_raid_link_speed = None
        self._slot_raid_state = None
        self._slot_rear_nvme1link_speed = None
        self._slot_rear_nvme1state = None
        self._slot_rear_nvme2link_speed = None
        self._slot_rear_nvme2state = None

        if lom_port0state is not None:
          self.lom_port0state = lom_port0state
        if lom_port1state is not None:
          self.lom_port1state = lom_port1state
        if lom_port2state is not None:
          self.lom_port2state = lom_port2state
        if lom_port3state is not None:
          self.lom_port3state = lom_port3state
        if lom_ports_all_state is not None:
          self.lom_ports_all_state = lom_ports_all_state
        if slot10link_speed is not None:
          self.slot10link_speed = slot10link_speed
        if slot10state is not None:
          self.slot10state = slot10state
        if slot11link_speed is not None:
          self.slot11link_speed = slot11link_speed
        if slot11state is not None:
          self.slot11state = slot11state
        if slot12link_speed is not None:
          self.slot12link_speed = slot12link_speed
        if slot12state is not None:
          self.slot12state = slot12state
        if slot1link_speed is not None:
          self.slot1link_speed = slot1link_speed
        if slot1state is not None:
          self.slot1state = slot1state
        if slot2link_speed is not None:
          self.slot2link_speed = slot2link_speed
        if slot2state is not None:
          self.slot2state = slot2state
        if slot3link_speed is not None:
          self.slot3link_speed = slot3link_speed
        if slot3state is not None:
          self.slot3state = slot3state
        if slot4link_speed is not None:
          self.slot4link_speed = slot4link_speed
        if slot4state is not None:
          self.slot4state = slot4state
        if slot5link_speed is not None:
          self.slot5link_speed = slot5link_speed
        if slot5state is not None:
          self.slot5state = slot5state
        if slot6link_speed is not None:
          self.slot6link_speed = slot6link_speed
        if slot6state is not None:
          self.slot6state = slot6state
        if slot7link_speed is not None:
          self.slot7link_speed = slot7link_speed
        if slot7state is not None:
          self.slot7state = slot7state
        if slot8link_speed is not None:
          self.slot8link_speed = slot8link_speed
        if slot8state is not None:
          self.slot8state = slot8state
        if slot9link_speed is not None:
          self.slot9link_speed = slot9link_speed
        if slot9state is not None:
          self.slot9state = slot9state
        if slot_front_nvme1link_speed is not None:
          self.slot_front_nvme1link_speed = slot_front_nvme1link_speed
        if slot_front_nvme2link_speed is not None:
          self.slot_front_nvme2link_speed = slot_front_nvme2link_speed
        if slot_mlom_link_speed is not None:
          self.slot_mlom_link_speed = slot_mlom_link_speed
        if slot_mlom_state is not None:
          self.slot_mlom_state = slot_mlom_state
        if slot_mraid_link_speed is not None:
          self.slot_mraid_link_speed = slot_mraid_link_speed
        if slot_mraid_state is not None:
          self.slot_mraid_state = slot_mraid_state
        if slot_n1state is not None:
          self.slot_n1state = slot_n1state
        if slot_n2state is not None:
          self.slot_n2state = slot_n2state
        if slot_raid_link_speed is not None:
          self.slot_raid_link_speed = slot_raid_link_speed
        if slot_raid_state is not None:
          self.slot_raid_state = slot_raid_state
        if slot_rear_nvme1link_speed is not None:
          self.slot_rear_nvme1link_speed = slot_rear_nvme1link_speed
        if slot_rear_nvme1state is not None:
          self.slot_rear_nvme1state = slot_rear_nvme1state
        if slot_rear_nvme2link_speed is not None:
          self.slot_rear_nvme2link_speed = slot_rear_nvme2link_speed
        if slot_rear_nvme2state is not None:
          self.slot_rear_nvme2state = slot_rear_nvme2state

    @property
    def lom_port0state(self):
        """
        Gets the lom_port0state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting LOM Port 0 OptionROM configuration  

        :return: The lom_port0state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._lom_port0state

    @lom_port0state.setter
    def lom_port0state(self, lom_port0state):
        """
        Sets the lom_port0state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting LOM Port 0 OptionROM configuration  

        :param lom_port0state: The lom_port0state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if lom_port0state not in allowed_values:
            raise ValueError(
                "Invalid value for `lom_port0state` ({0}), must be one of {1}"
                .format(lom_port0state, allowed_values)
            )

        self._lom_port0state = lom_port0state

    @property
    def lom_port1state(self):
        """
        Gets the lom_port1state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting LOM Port 1 OptionROM configuration  

        :return: The lom_port1state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._lom_port1state

    @lom_port1state.setter
    def lom_port1state(self, lom_port1state):
        """
        Sets the lom_port1state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting LOM Port 1 OptionROM configuration  

        :param lom_port1state: The lom_port1state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if lom_port1state not in allowed_values:
            raise ValueError(
                "Invalid value for `lom_port1state` ({0}), must be one of {1}"
                .format(lom_port1state, allowed_values)
            )

        self._lom_port1state = lom_port1state

    @property
    def lom_port2state(self):
        """
        Gets the lom_port2state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting LOM Port 2 OptionROM configuration  

        :return: The lom_port2state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._lom_port2state

    @lom_port2state.setter
    def lom_port2state(self, lom_port2state):
        """
        Sets the lom_port2state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting LOM Port 2 OptionROM configuration  

        :param lom_port2state: The lom_port2state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if lom_port2state not in allowed_values:
            raise ValueError(
                "Invalid value for `lom_port2state` ({0}), must be one of {1}"
                .format(lom_port2state, allowed_values)
            )

        self._lom_port2state = lom_port2state

    @property
    def lom_port3state(self):
        """
        Gets the lom_port3state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting LOM Port 3 OptionROM configuration  

        :return: The lom_port3state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._lom_port3state

    @lom_port3state.setter
    def lom_port3state(self, lom_port3state):
        """
        Sets the lom_port3state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting LOM Port 3 OptionROM configuration  

        :param lom_port3state: The lom_port3state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if lom_port3state not in allowed_values:
            raise ValueError(
                "Invalid value for `lom_port3state` ({0}), must be one of {1}"
                .format(lom_port3state, allowed_values)
            )

        self._lom_port3state = lom_port3state

    @property
    def lom_ports_all_state(self):
        """
        Gets the lom_ports_all_state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting All Onboard LOM Ports configuration  

        :return: The lom_ports_all_state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._lom_ports_all_state

    @lom_ports_all_state.setter
    def lom_ports_all_state(self, lom_ports_all_state):
        """
        Sets the lom_ports_all_state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting All Onboard LOM Ports configuration  

        :param lom_ports_all_state: The lom_ports_all_state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if lom_ports_all_state not in allowed_values:
            raise ValueError(
                "Invalid value for `lom_ports_all_state` ({0}), must be one of {1}"
                .format(lom_ports_all_state, allowed_values)
            )

        self._lom_ports_all_state = lom_ports_all_state

    @property
    def slot10link_speed(self):
        """
        Gets the slot10link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:10 Link Speed configuration  

        :return: The slot10link_speed of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot10link_speed

    @slot10link_speed.setter
    def slot10link_speed(self, slot10link_speed):
        """
        Sets the slot10link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:10 Link Speed configuration  

        :param slot10link_speed: The slot10link_speed of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot10link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot10link_speed` ({0}), must be one of {1}"
                .format(slot10link_speed, allowed_values)
            )

        self._slot10link_speed = slot10link_speed

    @property
    def slot10state(self):
        """
        Gets the slot10state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 10 OptionRom configuration  

        :return: The slot10state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot10state

    @slot10state.setter
    def slot10state(self, slot10state):
        """
        Sets the slot10state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 10 OptionRom configuration  

        :param slot10state: The slot10state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot10state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot10state` ({0}), must be one of {1}"
                .format(slot10state, allowed_values)
            )

        self._slot10state = slot10state

    @property
    def slot11link_speed(self):
        """
        Gets the slot11link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:11 Link Speed configuration  

        :return: The slot11link_speed of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot11link_speed

    @slot11link_speed.setter
    def slot11link_speed(self, slot11link_speed):
        """
        Sets the slot11link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:11 Link Speed configuration  

        :param slot11link_speed: The slot11link_speed of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot11link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot11link_speed` ({0}), must be one of {1}"
                .format(slot11link_speed, allowed_values)
            )

        self._slot11link_speed = slot11link_speed

    @property
    def slot11state(self):
        """
        Gets the slot11state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 11 OptionRom configuration  

        :return: The slot11state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot11state

    @slot11state.setter
    def slot11state(self, slot11state):
        """
        Sets the slot11state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 11 OptionRom configuration  

        :param slot11state: The slot11state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot11state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot11state` ({0}), must be one of {1}"
                .format(slot11state, allowed_values)
            )

        self._slot11state = slot11state

    @property
    def slot12link_speed(self):
        """
        Gets the slot12link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:12 Link Speed configuration  

        :return: The slot12link_speed of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot12link_speed

    @slot12link_speed.setter
    def slot12link_speed(self, slot12link_speed):
        """
        Sets the slot12link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:12 Link Speed configuration  

        :param slot12link_speed: The slot12link_speed of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot12link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot12link_speed` ({0}), must be one of {1}"
                .format(slot12link_speed, allowed_values)
            )

        self._slot12link_speed = slot12link_speed

    @property
    def slot12state(self):
        """
        Gets the slot12state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 12 OptionRom configuration  

        :return: The slot12state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot12state

    @slot12state.setter
    def slot12state(self, slot12state):
        """
        Sets the slot12state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 12 OptionRom configuration  

        :param slot12state: The slot12state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot12state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot12state` ({0}), must be one of {1}"
                .format(slot12state, allowed_values)
            )

        self._slot12state = slot12state

    @property
    def slot1link_speed(self):
        """
        Gets the slot1link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:1 Link Speed configuration  

        :return: The slot1link_speed of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot1link_speed

    @slot1link_speed.setter
    def slot1link_speed(self, slot1link_speed):
        """
        Sets the slot1link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:1 Link Speed configuration  

        :param slot1link_speed: The slot1link_speed of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2"]
        if slot1link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot1link_speed` ({0}), must be one of {1}"
                .format(slot1link_speed, allowed_values)
            )

        self._slot1link_speed = slot1link_speed

    @property
    def slot1state(self):
        """
        Gets the slot1state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 1 OptionRom configuration  

        :return: The slot1state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot1state

    @slot1state.setter
    def slot1state(self, slot1state):
        """
        Sets the slot1state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 1 OptionRom configuration  

        :param slot1state: The slot1state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot1state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot1state` ({0}), must be one of {1}"
                .format(slot1state, allowed_values)
            )

        self._slot1state = slot1state

    @property
    def slot2link_speed(self):
        """
        Gets the slot2link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:2 Link Speed configuration  

        :return: The slot2link_speed of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot2link_speed

    @slot2link_speed.setter
    def slot2link_speed(self, slot2link_speed):
        """
        Sets the slot2link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:2 Link Speed configuration  

        :param slot2link_speed: The slot2link_speed of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2"]
        if slot2link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot2link_speed` ({0}), must be one of {1}"
                .format(slot2link_speed, allowed_values)
            )

        self._slot2link_speed = slot2link_speed

    @property
    def slot2state(self):
        """
        Gets the slot2state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 2 OptionRom configuration  

        :return: The slot2state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot2state

    @slot2state.setter
    def slot2state(self, slot2state):
        """
        Sets the slot2state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 2 OptionRom configuration  

        :param slot2state: The slot2state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot2state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot2state` ({0}), must be one of {1}"
                .format(slot2state, allowed_values)
            )

        self._slot2state = slot2state

    @property
    def slot3link_speed(self):
        """
        Gets the slot3link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:3 Link Speed configuration  

        :return: The slot3link_speed of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot3link_speed

    @slot3link_speed.setter
    def slot3link_speed(self, slot3link_speed):
        """
        Sets the slot3link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:3 Link Speed configuration  

        :param slot3link_speed: The slot3link_speed of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2"]
        if slot3link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot3link_speed` ({0}), must be one of {1}"
                .format(slot3link_speed, allowed_values)
            )

        self._slot3link_speed = slot3link_speed

    @property
    def slot3state(self):
        """
        Gets the slot3state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:3 OptionRom configuration  

        :return: The slot3state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot3state

    @slot3state.setter
    def slot3state(self, slot3state):
        """
        Sets the slot3state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:3 OptionRom configuration  

        :param slot3state: The slot3state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot3state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot3state` ({0}), must be one of {1}"
                .format(slot3state, allowed_values)
            )

        self._slot3state = slot3state

    @property
    def slot4link_speed(self):
        """
        Gets the slot4link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:4 Link Speed configuration  

        :return: The slot4link_speed of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot4link_speed

    @slot4link_speed.setter
    def slot4link_speed(self, slot4link_speed):
        """
        Sets the slot4link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:4 Link Speed configuration  

        :param slot4link_speed: The slot4link_speed of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2"]
        if slot4link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot4link_speed` ({0}), must be one of {1}"
                .format(slot4link_speed, allowed_values)
            )

        self._slot4link_speed = slot4link_speed

    @property
    def slot4state(self):
        """
        Gets the slot4state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 4 OptionRom configuration  

        :return: The slot4state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot4state

    @slot4state.setter
    def slot4state(self, slot4state):
        """
        Sets the slot4state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 4 OptionRom configuration  

        :param slot4state: The slot4state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot4state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot4state` ({0}), must be one of {1}"
                .format(slot4state, allowed_values)
            )

        self._slot4state = slot4state

    @property
    def slot5link_speed(self):
        """
        Gets the slot5link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:5 Link Speed configuration  

        :return: The slot5link_speed of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot5link_speed

    @slot5link_speed.setter
    def slot5link_speed(self, slot5link_speed):
        """
        Sets the slot5link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:5 Link Speed configuration  

        :param slot5link_speed: The slot5link_speed of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2"]
        if slot5link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot5link_speed` ({0}), must be one of {1}"
                .format(slot5link_speed, allowed_values)
            )

        self._slot5link_speed = slot5link_speed

    @property
    def slot5state(self):
        """
        Gets the slot5state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 5 OptionRom configuration  

        :return: The slot5state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot5state

    @slot5state.setter
    def slot5state(self, slot5state):
        """
        Sets the slot5state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 5 OptionRom configuration  

        :param slot5state: The slot5state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot5state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot5state` ({0}), must be one of {1}"
                .format(slot5state, allowed_values)
            )

        self._slot5state = slot5state

    @property
    def slot6link_speed(self):
        """
        Gets the slot6link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:6 Link Speed configuration  

        :return: The slot6link_speed of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot6link_speed

    @slot6link_speed.setter
    def slot6link_speed(self, slot6link_speed):
        """
        Sets the slot6link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:6 Link Speed configuration  

        :param slot6link_speed: The slot6link_speed of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2"]
        if slot6link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot6link_speed` ({0}), must be one of {1}"
                .format(slot6link_speed, allowed_values)
            )

        self._slot6link_speed = slot6link_speed

    @property
    def slot6state(self):
        """
        Gets the slot6state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 6 OptionRom configuration  

        :return: The slot6state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot6state

    @slot6state.setter
    def slot6state(self, slot6state):
        """
        Sets the slot6state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 6 OptionRom configuration  

        :param slot6state: The slot6state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot6state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot6state` ({0}), must be one of {1}"
                .format(slot6state, allowed_values)
            )

        self._slot6state = slot6state

    @property
    def slot7link_speed(self):
        """
        Gets the slot7link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:7 Link Speed configuration  

        :return: The slot7link_speed of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot7link_speed

    @slot7link_speed.setter
    def slot7link_speed(self, slot7link_speed):
        """
        Sets the slot7link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:7 Link Speed configuration  

        :param slot7link_speed: The slot7link_speed of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot7link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot7link_speed` ({0}), must be one of {1}"
                .format(slot7link_speed, allowed_values)
            )

        self._slot7link_speed = slot7link_speed

    @property
    def slot7state(self):
        """
        Gets the slot7state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 7 OptionRom configuration  

        :return: The slot7state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot7state

    @slot7state.setter
    def slot7state(self, slot7state):
        """
        Sets the slot7state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 7 OptionRom configuration  

        :param slot7state: The slot7state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot7state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot7state` ({0}), must be one of {1}"
                .format(slot7state, allowed_values)
            )

        self._slot7state = slot7state

    @property
    def slot8link_speed(self):
        """
        Gets the slot8link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:8 Link Speed configuration  

        :return: The slot8link_speed of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot8link_speed

    @slot8link_speed.setter
    def slot8link_speed(self, slot8link_speed):
        """
        Sets the slot8link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:8 Link Speed configuration  

        :param slot8link_speed: The slot8link_speed of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot8link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot8link_speed` ({0}), must be one of {1}"
                .format(slot8link_speed, allowed_values)
            )

        self._slot8link_speed = slot8link_speed

    @property
    def slot8state(self):
        """
        Gets the slot8state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 8 OptionRom configuration  

        :return: The slot8state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot8state

    @slot8state.setter
    def slot8state(self, slot8state):
        """
        Sets the slot8state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 8 OptionRom configuration  

        :param slot8state: The slot8state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot8state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot8state` ({0}), must be one of {1}"
                .format(slot8state, allowed_values)
            )

        self._slot8state = slot8state

    @property
    def slot9link_speed(self):
        """
        Gets the slot9link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:9 Link Speed configuration  

        :return: The slot9link_speed of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot9link_speed

    @slot9link_speed.setter
    def slot9link_speed(self, slot9link_speed):
        """
        Sets the slot9link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:9 Link Speed configuration  

        :param slot9link_speed: The slot9link_speed of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot9link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot9link_speed` ({0}), must be one of {1}"
                .format(slot9link_speed, allowed_values)
            )

        self._slot9link_speed = slot9link_speed

    @property
    def slot9state(self):
        """
        Gets the slot9state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 9 OptionRom configuration  

        :return: The slot9state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot9state

    @slot9state.setter
    def slot9state(self, slot9state):
        """
        Sets the slot9state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot 9 OptionRom configuration  

        :param slot9state: The slot9state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot9state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot9state` ({0}), must be one of {1}"
                .format(slot9state, allowed_values)
            )

        self._slot9state = slot9state

    @property
    def slot_front_nvme1link_speed(self):
        """
        Gets the slot_front_nvme1link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:Front Nvm1 Link Speed configuration  

        :return: The slot_front_nvme1link_speed of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot_front_nvme1link_speed

    @slot_front_nvme1link_speed.setter
    def slot_front_nvme1link_speed(self, slot_front_nvme1link_speed):
        """
        Sets the slot_front_nvme1link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:Front Nvm1 Link Speed configuration  

        :param slot_front_nvme1link_speed: The slot_front_nvme1link_speed of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2"]
        if slot_front_nvme1link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_front_nvme1link_speed` ({0}), must be one of {1}"
                .format(slot_front_nvme1link_speed, allowed_values)
            )

        self._slot_front_nvme1link_speed = slot_front_nvme1link_speed

    @property
    def slot_front_nvme2link_speed(self):
        """
        Gets the slot_front_nvme2link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:Front Nvme2 Link Speed configuration  

        :return: The slot_front_nvme2link_speed of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot_front_nvme2link_speed

    @slot_front_nvme2link_speed.setter
    def slot_front_nvme2link_speed(self, slot_front_nvme2link_speed):
        """
        Sets the slot_front_nvme2link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:Front Nvme2 Link Speed configuration  

        :param slot_front_nvme2link_speed: The slot_front_nvme2link_speed of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2"]
        if slot_front_nvme2link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_front_nvme2link_speed` ({0}), must be one of {1}"
                .format(slot_front_nvme2link_speed, allowed_values)
            )

        self._slot_front_nvme2link_speed = slot_front_nvme2link_speed

    @property
    def slot_mlom_link_speed(self):
        """
        Gets the slot_mlom_link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:MLOM Link Speed configuration  

        :return: The slot_mlom_link_speed of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot_mlom_link_speed

    @slot_mlom_link_speed.setter
    def slot_mlom_link_speed(self, slot_mlom_link_speed):
        """
        Sets the slot_mlom_link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:MLOM Link Speed configuration  

        :param slot_mlom_link_speed: The slot_mlom_link_speed of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2"]
        if slot_mlom_link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_mlom_link_speed` ({0}), must be one of {1}"
                .format(slot_mlom_link_speed, allowed_values)
            )

        self._slot_mlom_link_speed = slot_mlom_link_speed

    @property
    def slot_mlom_state(self):
        """
        Gets the slot_mlom_state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting MLOM OptionRom configuration  

        :return: The slot_mlom_state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot_mlom_state

    @slot_mlom_state.setter
    def slot_mlom_state(self, slot_mlom_state):
        """
        Sets the slot_mlom_state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting MLOM OptionRom configuration  

        :param slot_mlom_state: The slot_mlom_state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_mlom_state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_mlom_state` ({0}), must be one of {1}"
                .format(slot_mlom_state, allowed_values)
            )

        self._slot_mlom_state = slot_mlom_state

    @property
    def slot_mraid_link_speed(self):
        """
        Gets the slot_mraid_link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting MRAID Link Speed configuration  

        :return: The slot_mraid_link_speed of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot_mraid_link_speed

    @slot_mraid_link_speed.setter
    def slot_mraid_link_speed(self, slot_mraid_link_speed):
        """
        Sets the slot_mraid_link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting MRAID Link Speed configuration  

        :param slot_mraid_link_speed: The slot_mraid_link_speed of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_mraid_link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_mraid_link_speed` ({0}), must be one of {1}"
                .format(slot_mraid_link_speed, allowed_values)
            )

        self._slot_mraid_link_speed = slot_mraid_link_speed

    @property
    def slot_mraid_state(self):
        """
        Gets the slot_mraid_state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting MRAID OptionRom configuration  

        :return: The slot_mraid_state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot_mraid_state

    @slot_mraid_state.setter
    def slot_mraid_state(self, slot_mraid_state):
        """
        Sets the slot_mraid_state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting MRAID OptionRom configuration  

        :param slot_mraid_state: The slot_mraid_state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_mraid_state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_mraid_state` ({0}), must be one of {1}"
                .format(slot_mraid_state, allowed_values)
            )

        self._slot_mraid_state = slot_mraid_state

    @property
    def slot_n1state(self):
        """
        Gets the slot_n1state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting Front NVME 1 OptionRom configuration  

        :return: The slot_n1state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot_n1state

    @slot_n1state.setter
    def slot_n1state(self, slot_n1state):
        """
        Sets the slot_n1state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting Front NVME 1 OptionRom configuration  

        :param slot_n1state: The slot_n1state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n1state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n1state` ({0}), must be one of {1}"
                .format(slot_n1state, allowed_values)
            )

        self._slot_n1state = slot_n1state

    @property
    def slot_n2state(self):
        """
        Gets the slot_n2state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting Front NVME 2 OptionRom configuration  

        :return: The slot_n2state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot_n2state

    @slot_n2state.setter
    def slot_n2state(self, slot_n2state):
        """
        Sets the slot_n2state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting Front NVME 2 OptionRom configuration  

        :param slot_n2state: The slot_n2state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n2state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n2state` ({0}), must be one of {1}"
                .format(slot_n2state, allowed_values)
            )

        self._slot_n2state = slot_n2state

    @property
    def slot_raid_link_speed(self):
        """
        Gets the slot_raid_link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting RAID Link Speed configuration  

        :return: The slot_raid_link_speed of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot_raid_link_speed

    @slot_raid_link_speed.setter
    def slot_raid_link_speed(self, slot_raid_link_speed):
        """
        Sets the slot_raid_link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting RAID Link Speed configuration  

        :param slot_raid_link_speed: The slot_raid_link_speed of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_raid_link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_raid_link_speed` ({0}), must be one of {1}"
                .format(slot_raid_link_speed, allowed_values)
            )

        self._slot_raid_link_speed = slot_raid_link_speed

    @property
    def slot_raid_state(self):
        """
        Gets the slot_raid_state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting RAID OptionRom configuration  

        :return: The slot_raid_state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot_raid_state

    @slot_raid_state.setter
    def slot_raid_state(self, slot_raid_state):
        """
        Sets the slot_raid_state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting RAID OptionRom configuration  

        :param slot_raid_state: The slot_raid_state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_raid_state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_raid_state` ({0}), must be one of {1}"
                .format(slot_raid_state, allowed_values)
            )

        self._slot_raid_state = slot_raid_state

    @property
    def slot_rear_nvme1link_speed(self):
        """
        Gets the slot_rear_nvme1link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:Rear Nvme1 Link Speed configuration  

        :return: The slot_rear_nvme1link_speed of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot_rear_nvme1link_speed

    @slot_rear_nvme1link_speed.setter
    def slot_rear_nvme1link_speed(self, slot_rear_nvme1link_speed):
        """
        Sets the slot_rear_nvme1link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:Rear Nvme1 Link Speed configuration  

        :param slot_rear_nvme1link_speed: The slot_rear_nvme1link_speed of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2"]
        if slot_rear_nvme1link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_rear_nvme1link_speed` ({0}), must be one of {1}"
                .format(slot_rear_nvme1link_speed, allowed_values)
            )

        self._slot_rear_nvme1link_speed = slot_rear_nvme1link_speed

    @property
    def slot_rear_nvme1state(self):
        """
        Gets the slot_rear_nvme1state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting Rear NVME 1 OptionRom configuration  

        :return: The slot_rear_nvme1state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot_rear_nvme1state

    @slot_rear_nvme1state.setter
    def slot_rear_nvme1state(self, slot_rear_nvme1state):
        """
        Sets the slot_rear_nvme1state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting Rear NVME 1 OptionRom configuration  

        :param slot_rear_nvme1state: The slot_rear_nvme1state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_rear_nvme1state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_rear_nvme1state` ({0}), must be one of {1}"
                .format(slot_rear_nvme1state, allowed_values)
            )

        self._slot_rear_nvme1state = slot_rear_nvme1state

    @property
    def slot_rear_nvme2link_speed(self):
        """
        Gets the slot_rear_nvme2link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:Rear Nvme2 Link Speed configuration  

        :return: The slot_rear_nvme2link_speed of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot_rear_nvme2link_speed

    @slot_rear_nvme2link_speed.setter
    def slot_rear_nvme2link_speed(self, slot_rear_nvme2link_speed):
        """
        Sets the slot_rear_nvme2link_speed of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting PCIe Slot:Rear Nvme2 Link Speed configuration  

        :param slot_rear_nvme2link_speed: The slot_rear_nvme2link_speed of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2"]
        if slot_rear_nvme2link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_rear_nvme2link_speed` ({0}), must be one of {1}"
                .format(slot_rear_nvme2link_speed, allowed_values)
            )

        self._slot_rear_nvme2link_speed = slot_rear_nvme2link_speed

    @property
    def slot_rear_nvme2state(self):
        """
        Gets the slot_rear_nvme2state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting Rear NVME 2 OptionRom configuration   

        :return: The slot_rear_nvme2state of this BiosLomAndPcieSlotsConfiguration.
        :rtype: str
        """
        return self._slot_rear_nvme2state

    @slot_rear_nvme2state.setter
    def slot_rear_nvme2state(self, slot_rear_nvme2state):
        """
        Sets the slot_rear_nvme2state of this BiosLomAndPcieSlotsConfiguration.
        BIOS Token for setting Rear NVME 2 OptionRom configuration   

        :param slot_rear_nvme2state: The slot_rear_nvme2state of this BiosLomAndPcieSlotsConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_rear_nvme2state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_rear_nvme2state` ({0}), must be one of {1}"
                .format(slot_rear_nvme2state, allowed_values)
            )

        self._slot_rear_nvme2state = slot_rear_nvme2state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BiosLomAndPcieSlotsConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
