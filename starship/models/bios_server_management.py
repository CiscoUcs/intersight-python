# coding: utf-8

"""
    UCS Starship API

    This is the UCS Starship REST API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BiosServerManagement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boot_option_num_retry': 'str',
        'boot_option_re_cool_down': 'str',
        'boot_option_retry': 'str',
        'cdn_enable': 'str',
        'frb2enable': 'str',
        'os_boot_watchdog_timer': 'str',
        'os_boot_watchdog_timer_policy': 'str',
        'os_boot_watchdog_timer_timeout': 'str'
    }

    attribute_map = {
        'boot_option_num_retry': 'BootOptionNumRetry',
        'boot_option_re_cool_down': 'BootOptionReCoolDown',
        'boot_option_retry': 'BootOptionRetry',
        'cdn_enable': 'CdnEnable',
        'frb2enable': 'Frb2enable',
        'os_boot_watchdog_timer': 'OsBootWatchdogTimer',
        'os_boot_watchdog_timer_policy': 'OsBootWatchdogTimerPolicy',
        'os_boot_watchdog_timer_timeout': 'OsBootWatchdogTimerTimeout'
    }

    def __init__(self, boot_option_num_retry='platform-default', boot_option_re_cool_down='platform-default', boot_option_retry='platform-default', cdn_enable='platform-default', frb2enable='platform-default', os_boot_watchdog_timer='platform-default', os_boot_watchdog_timer_policy='platform-default', os_boot_watchdog_timer_timeout='platform-default'):
        """
        BiosServerManagement - a model defined in Swagger
        """

        self._boot_option_num_retry = None
        self._boot_option_re_cool_down = None
        self._boot_option_retry = None
        self._cdn_enable = None
        self._frb2enable = None
        self._os_boot_watchdog_timer = None
        self._os_boot_watchdog_timer_policy = None
        self._os_boot_watchdog_timer_timeout = None

        if boot_option_num_retry is not None:
          self.boot_option_num_retry = boot_option_num_retry
        if boot_option_re_cool_down is not None:
          self.boot_option_re_cool_down = boot_option_re_cool_down
        if boot_option_retry is not None:
          self.boot_option_retry = boot_option_retry
        if cdn_enable is not None:
          self.cdn_enable = cdn_enable
        if frb2enable is not None:
          self.frb2enable = frb2enable
        if os_boot_watchdog_timer is not None:
          self.os_boot_watchdog_timer = os_boot_watchdog_timer
        if os_boot_watchdog_timer_policy is not None:
          self.os_boot_watchdog_timer_policy = os_boot_watchdog_timer_policy
        if os_boot_watchdog_timer_timeout is not None:
          self.os_boot_watchdog_timer_timeout = os_boot_watchdog_timer_timeout

    @property
    def boot_option_num_retry(self):
        """
        Gets the boot_option_num_retry of this BiosServerManagement.
        BIOS Token for setting Number of Retries configuration  

        :return: The boot_option_num_retry of this BiosServerManagement.
        :rtype: str
        """
        return self._boot_option_num_retry

    @boot_option_num_retry.setter
    def boot_option_num_retry(self, boot_option_num_retry):
        """
        Sets the boot_option_num_retry of this BiosServerManagement.
        BIOS Token for setting Number of Retries configuration  

        :param boot_option_num_retry: The boot_option_num_retry of this BiosServerManagement.
        :type: str
        """
        allowed_values = ["platform-default", "13", "5", "Infinite"]
        if boot_option_num_retry not in allowed_values:
            raise ValueError(
                "Invalid value for `boot_option_num_retry` ({0}), must be one of {1}"
                .format(boot_option_num_retry, allowed_values)
            )

        self._boot_option_num_retry = boot_option_num_retry

    @property
    def boot_option_re_cool_down(self):
        """
        Gets the boot_option_re_cool_down of this BiosServerManagement.
        BIOS Token for setting Cool Down Time (sec) configuration  

        :return: The boot_option_re_cool_down of this BiosServerManagement.
        :rtype: str
        """
        return self._boot_option_re_cool_down

    @boot_option_re_cool_down.setter
    def boot_option_re_cool_down(self, boot_option_re_cool_down):
        """
        Sets the boot_option_re_cool_down of this BiosServerManagement.
        BIOS Token for setting Cool Down Time (sec) configuration  

        :param boot_option_re_cool_down: The boot_option_re_cool_down of this BiosServerManagement.
        :type: str
        """
        allowed_values = ["platform-default", "15", "45", "90"]
        if boot_option_re_cool_down not in allowed_values:
            raise ValueError(
                "Invalid value for `boot_option_re_cool_down` ({0}), must be one of {1}"
                .format(boot_option_re_cool_down, allowed_values)
            )

        self._boot_option_re_cool_down = boot_option_re_cool_down

    @property
    def boot_option_retry(self):
        """
        Gets the boot_option_retry of this BiosServerManagement.
        BIOS Token for setting Boot Option Retry configuration  

        :return: The boot_option_retry of this BiosServerManagement.
        :rtype: str
        """
        return self._boot_option_retry

    @boot_option_retry.setter
    def boot_option_retry(self, boot_option_retry):
        """
        Sets the boot_option_retry of this BiosServerManagement.
        BIOS Token for setting Boot Option Retry configuration  

        :param boot_option_retry: The boot_option_retry of this BiosServerManagement.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if boot_option_retry not in allowed_values:
            raise ValueError(
                "Invalid value for `boot_option_retry` ({0}), must be one of {1}"
                .format(boot_option_retry, allowed_values)
            )

        self._boot_option_retry = boot_option_retry

    @property
    def cdn_enable(self):
        """
        Gets the cdn_enable of this BiosServerManagement.
        BIOS Token for setting Consistent Device Naming configuration  

        :return: The cdn_enable of this BiosServerManagement.
        :rtype: str
        """
        return self._cdn_enable

    @cdn_enable.setter
    def cdn_enable(self, cdn_enable):
        """
        Sets the cdn_enable of this BiosServerManagement.
        BIOS Token for setting Consistent Device Naming configuration  

        :param cdn_enable: The cdn_enable of this BiosServerManagement.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if cdn_enable not in allowed_values:
            raise ValueError(
                "Invalid value for `cdn_enable` ({0}), must be one of {1}"
                .format(cdn_enable, allowed_values)
            )

        self._cdn_enable = cdn_enable

    @property
    def frb2enable(self):
        """
        Gets the frb2enable of this BiosServerManagement.
        BIOS Token for setting FRB-2 Timer configuration  

        :return: The frb2enable of this BiosServerManagement.
        :rtype: str
        """
        return self._frb2enable

    @frb2enable.setter
    def frb2enable(self, frb2enable):
        """
        Sets the frb2enable of this BiosServerManagement.
        BIOS Token for setting FRB-2 Timer configuration  

        :param frb2enable: The frb2enable of this BiosServerManagement.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if frb2enable not in allowed_values:
            raise ValueError(
                "Invalid value for `frb2enable` ({0}), must be one of {1}"
                .format(frb2enable, allowed_values)
            )

        self._frb2enable = frb2enable

    @property
    def os_boot_watchdog_timer(self):
        """
        Gets the os_boot_watchdog_timer of this BiosServerManagement.
        BIOS Token for setting OS Watchdog Timer configuration  

        :return: The os_boot_watchdog_timer of this BiosServerManagement.
        :rtype: str
        """
        return self._os_boot_watchdog_timer

    @os_boot_watchdog_timer.setter
    def os_boot_watchdog_timer(self, os_boot_watchdog_timer):
        """
        Sets the os_boot_watchdog_timer of this BiosServerManagement.
        BIOS Token for setting OS Watchdog Timer configuration  

        :param os_boot_watchdog_timer: The os_boot_watchdog_timer of this BiosServerManagement.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if os_boot_watchdog_timer not in allowed_values:
            raise ValueError(
                "Invalid value for `os_boot_watchdog_timer` ({0}), must be one of {1}"
                .format(os_boot_watchdog_timer, allowed_values)
            )

        self._os_boot_watchdog_timer = os_boot_watchdog_timer

    @property
    def os_boot_watchdog_timer_policy(self):
        """
        Gets the os_boot_watchdog_timer_policy of this BiosServerManagement.
        BIOS Token for setting OS Watchdog Timer Policy configuration  

        :return: The os_boot_watchdog_timer_policy of this BiosServerManagement.
        :rtype: str
        """
        return self._os_boot_watchdog_timer_policy

    @os_boot_watchdog_timer_policy.setter
    def os_boot_watchdog_timer_policy(self, os_boot_watchdog_timer_policy):
        """
        Sets the os_boot_watchdog_timer_policy of this BiosServerManagement.
        BIOS Token for setting OS Watchdog Timer Policy configuration  

        :param os_boot_watchdog_timer_policy: The os_boot_watchdog_timer_policy of this BiosServerManagement.
        :type: str
        """
        allowed_values = ["platform-default", "power-off", "reset"]
        if os_boot_watchdog_timer_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `os_boot_watchdog_timer_policy` ({0}), must be one of {1}"
                .format(os_boot_watchdog_timer_policy, allowed_values)
            )

        self._os_boot_watchdog_timer_policy = os_boot_watchdog_timer_policy

    @property
    def os_boot_watchdog_timer_timeout(self):
        """
        Gets the os_boot_watchdog_timer_timeout of this BiosServerManagement.
        BIOS Token for setting OS Watchdog Timer Timeout configuration   

        :return: The os_boot_watchdog_timer_timeout of this BiosServerManagement.
        :rtype: str
        """
        return self._os_boot_watchdog_timer_timeout

    @os_boot_watchdog_timer_timeout.setter
    def os_boot_watchdog_timer_timeout(self, os_boot_watchdog_timer_timeout):
        """
        Sets the os_boot_watchdog_timer_timeout of this BiosServerManagement.
        BIOS Token for setting OS Watchdog Timer Timeout configuration   

        :param os_boot_watchdog_timer_timeout: The os_boot_watchdog_timer_timeout of this BiosServerManagement.
        :type: str
        """
        allowed_values = ["platform-default", "10-minutes", "15-minutes", "20-minutes", "5-minutes"]
        if os_boot_watchdog_timer_timeout not in allowed_values:
            raise ValueError(
                "Invalid value for `os_boot_watchdog_timer_timeout` ({0}), must be one of {1}"
                .format(os_boot_watchdog_timer_timeout, allowed_values)
            )

        self._os_boot_watchdog_timer_timeout = os_boot_watchdog_timer_timeout

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BiosServerManagement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
