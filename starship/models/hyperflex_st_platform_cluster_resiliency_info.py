# coding: utf-8

"""
    UCS Starship API

    This is the UCS Starship REST API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class HyperflexStPlatformClusterResiliencyInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hdd_failures_tolerable': 'int',
        'messages': 'list[str]',
        'messages_iterator': 'HyperflexIteratorString',
        'messages_size': 'int',
        'node_failures_tolerable': 'int',
        'ssd_failures_tolerable': 'int',
        'state': 'str'
    }

    attribute_map = {
        'hdd_failures_tolerable': 'HddFailuresTolerable',
        'messages': 'Messages',
        'messages_iterator': 'MessagesIterator',
        'messages_size': 'MessagesSize',
        'node_failures_tolerable': 'NodeFailuresTolerable',
        'ssd_failures_tolerable': 'SsdFailuresTolerable',
        'state': 'State'
    }

    def __init__(self, hdd_failures_tolerable=None, messages=None, messages_iterator=None, messages_size=None, node_failures_tolerable=None, ssd_failures_tolerable=None, state=None):
        """
        HyperflexStPlatformClusterResiliencyInfo - a model defined in Swagger
        """

        self._hdd_failures_tolerable = None
        self._messages = None
        self._messages_iterator = None
        self._messages_size = None
        self._node_failures_tolerable = None
        self._ssd_failures_tolerable = None
        self._state = None

        if hdd_failures_tolerable is not None:
          self.hdd_failures_tolerable = hdd_failures_tolerable
        if messages is not None:
          self.messages = messages
        if messages_iterator is not None:
          self.messages_iterator = messages_iterator
        if messages_size is not None:
          self.messages_size = messages_size
        if node_failures_tolerable is not None:
          self.node_failures_tolerable = node_failures_tolerable
        if ssd_failures_tolerable is not None:
          self.ssd_failures_tolerable = ssd_failures_tolerable
        if state is not None:
          self.state = state

    @property
    def hdd_failures_tolerable(self):
        """
        Gets the hdd_failures_tolerable of this HyperflexStPlatformClusterResiliencyInfo.

        :return: The hdd_failures_tolerable of this HyperflexStPlatformClusterResiliencyInfo.
        :rtype: int
        """
        return self._hdd_failures_tolerable

    @hdd_failures_tolerable.setter
    def hdd_failures_tolerable(self, hdd_failures_tolerable):
        """
        Sets the hdd_failures_tolerable of this HyperflexStPlatformClusterResiliencyInfo.

        :param hdd_failures_tolerable: The hdd_failures_tolerable of this HyperflexStPlatformClusterResiliencyInfo.
        :type: int
        """

        self._hdd_failures_tolerable = hdd_failures_tolerable

    @property
    def messages(self):
        """
        Gets the messages of this HyperflexStPlatformClusterResiliencyInfo.

        :return: The messages of this HyperflexStPlatformClusterResiliencyInfo.
        :rtype: list[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """
        Sets the messages of this HyperflexStPlatformClusterResiliencyInfo.

        :param messages: The messages of this HyperflexStPlatformClusterResiliencyInfo.
        :type: list[str]
        """

        self._messages = messages

    @property
    def messages_iterator(self):
        """
        Gets the messages_iterator of this HyperflexStPlatformClusterResiliencyInfo.

        :return: The messages_iterator of this HyperflexStPlatformClusterResiliencyInfo.
        :rtype: HyperflexIteratorString
        """
        return self._messages_iterator

    @messages_iterator.setter
    def messages_iterator(self, messages_iterator):
        """
        Sets the messages_iterator of this HyperflexStPlatformClusterResiliencyInfo.

        :param messages_iterator: The messages_iterator of this HyperflexStPlatformClusterResiliencyInfo.
        :type: HyperflexIteratorString
        """

        self._messages_iterator = messages_iterator

    @property
    def messages_size(self):
        """
        Gets the messages_size of this HyperflexStPlatformClusterResiliencyInfo.

        :return: The messages_size of this HyperflexStPlatformClusterResiliencyInfo.
        :rtype: int
        """
        return self._messages_size

    @messages_size.setter
    def messages_size(self, messages_size):
        """
        Sets the messages_size of this HyperflexStPlatformClusterResiliencyInfo.

        :param messages_size: The messages_size of this HyperflexStPlatformClusterResiliencyInfo.
        :type: int
        """

        self._messages_size = messages_size

    @property
    def node_failures_tolerable(self):
        """
        Gets the node_failures_tolerable of this HyperflexStPlatformClusterResiliencyInfo.

        :return: The node_failures_tolerable of this HyperflexStPlatformClusterResiliencyInfo.
        :rtype: int
        """
        return self._node_failures_tolerable

    @node_failures_tolerable.setter
    def node_failures_tolerable(self, node_failures_tolerable):
        """
        Sets the node_failures_tolerable of this HyperflexStPlatformClusterResiliencyInfo.

        :param node_failures_tolerable: The node_failures_tolerable of this HyperflexStPlatformClusterResiliencyInfo.
        :type: int
        """

        self._node_failures_tolerable = node_failures_tolerable

    @property
    def ssd_failures_tolerable(self):
        """
        Gets the ssd_failures_tolerable of this HyperflexStPlatformClusterResiliencyInfo.

        :return: The ssd_failures_tolerable of this HyperflexStPlatformClusterResiliencyInfo.
        :rtype: int
        """
        return self._ssd_failures_tolerable

    @ssd_failures_tolerable.setter
    def ssd_failures_tolerable(self, ssd_failures_tolerable):
        """
        Sets the ssd_failures_tolerable of this HyperflexStPlatformClusterResiliencyInfo.

        :param ssd_failures_tolerable: The ssd_failures_tolerable of this HyperflexStPlatformClusterResiliencyInfo.
        :type: int
        """

        self._ssd_failures_tolerable = ssd_failures_tolerable

    @property
    def state(self):
        """
        Gets the state of this HyperflexStPlatformClusterResiliencyInfo.

        :return: The state of this HyperflexStPlatformClusterResiliencyInfo.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this HyperflexStPlatformClusterResiliencyInfo.

        :param state: The state of this HyperflexStPlatformClusterResiliencyInfo.
        :type: str
        """

        self._state = state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HyperflexStPlatformClusterResiliencyInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
