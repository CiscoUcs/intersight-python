# coding: utf-8

"""
    UCS Starship API

    This is the UCS Starship REST API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BiosSerialConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'baud_rate': 'str',
        'console_redirection': 'str',
        'flow_control': 'str',
        'legacy_os_redirection': 'str',
        'putty_key_pad': 'str',
        'redirection_after_post': 'str',
        'terminal_type': 'str'
    }

    attribute_map = {
        'baud_rate': 'BaudRate',
        'console_redirection': 'ConsoleRedirection',
        'flow_control': 'FlowControl',
        'legacy_os_redirection': 'LegacyOsRedirection',
        'putty_key_pad': 'PuttyKeyPad',
        'redirection_after_post': 'RedirectionAfterPost',
        'terminal_type': 'TerminalType'
    }

    def __init__(self, baud_rate='platform-default', console_redirection='platform-default', flow_control='platform-default', legacy_os_redirection='platform-default', putty_key_pad='platform-default', redirection_after_post='platform-default', terminal_type='platform-default'):
        """
        BiosSerialConfiguration - a model defined in Swagger
        """

        self._baud_rate = None
        self._console_redirection = None
        self._flow_control = None
        self._legacy_os_redirection = None
        self._putty_key_pad = None
        self._redirection_after_post = None
        self._terminal_type = None

        if baud_rate is not None:
          self.baud_rate = baud_rate
        if console_redirection is not None:
          self.console_redirection = console_redirection
        if flow_control is not None:
          self.flow_control = flow_control
        if legacy_os_redirection is not None:
          self.legacy_os_redirection = legacy_os_redirection
        if putty_key_pad is not None:
          self.putty_key_pad = putty_key_pad
        if redirection_after_post is not None:
          self.redirection_after_post = redirection_after_post
        if terminal_type is not None:
          self.terminal_type = terminal_type

    @property
    def baud_rate(self):
        """
        Gets the baud_rate of this BiosSerialConfiguration.
        BIOS Token for setting Bits per second configuration  

        :return: The baud_rate of this BiosSerialConfiguration.
        :rtype: str
        """
        return self._baud_rate

    @baud_rate.setter
    def baud_rate(self, baud_rate):
        """
        Sets the baud_rate of this BiosSerialConfiguration.
        BIOS Token for setting Bits per second configuration  

        :param baud_rate: The baud_rate of this BiosSerialConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "115200", "19200", "38400", "57600", "9600"]
        if baud_rate not in allowed_values:
            raise ValueError(
                "Invalid value for `baud_rate` ({0}), must be one of {1}"
                .format(baud_rate, allowed_values)
            )

        self._baud_rate = baud_rate

    @property
    def console_redirection(self):
        """
        Gets the console_redirection of this BiosSerialConfiguration.
        BIOS Token for setting Console Redirection configuration  

        :return: The console_redirection of this BiosSerialConfiguration.
        :rtype: str
        """
        return self._console_redirection

    @console_redirection.setter
    def console_redirection(self, console_redirection):
        """
        Sets the console_redirection of this BiosSerialConfiguration.
        BIOS Token for setting Console Redirection configuration  

        :param console_redirection: The console_redirection of this BiosSerialConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "com-0", "com-1", "disabled"]
        if console_redirection not in allowed_values:
            raise ValueError(
                "Invalid value for `console_redirection` ({0}), must be one of {1}"
                .format(console_redirection, allowed_values)
            )

        self._console_redirection = console_redirection

    @property
    def flow_control(self):
        """
        Gets the flow_control of this BiosSerialConfiguration.
        BIOS Token for setting Flow Control configuration  

        :return: The flow_control of this BiosSerialConfiguration.
        :rtype: str
        """
        return self._flow_control

    @flow_control.setter
    def flow_control(self, flow_control):
        """
        Sets the flow_control of this BiosSerialConfiguration.
        BIOS Token for setting Flow Control configuration  

        :param flow_control: The flow_control of this BiosSerialConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "none", "rts-cts"]
        if flow_control not in allowed_values:
            raise ValueError(
                "Invalid value for `flow_control` ({0}), must be one of {1}"
                .format(flow_control, allowed_values)
            )

        self._flow_control = flow_control

    @property
    def legacy_os_redirection(self):
        """
        Gets the legacy_os_redirection of this BiosSerialConfiguration.
        BIOS Token for setting Legacy OS Redirection configuration  

        :return: The legacy_os_redirection of this BiosSerialConfiguration.
        :rtype: str
        """
        return self._legacy_os_redirection

    @legacy_os_redirection.setter
    def legacy_os_redirection(self, legacy_os_redirection):
        """
        Sets the legacy_os_redirection of this BiosSerialConfiguration.
        BIOS Token for setting Legacy OS Redirection configuration  

        :param legacy_os_redirection: The legacy_os_redirection of this BiosSerialConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if legacy_os_redirection not in allowed_values:
            raise ValueError(
                "Invalid value for `legacy_os_redirection` ({0}), must be one of {1}"
                .format(legacy_os_redirection, allowed_values)
            )

        self._legacy_os_redirection = legacy_os_redirection

    @property
    def putty_key_pad(self):
        """
        Gets the putty_key_pad of this BiosSerialConfiguration.
        BIOS Token for setting Putty KeyPad configuration  

        :return: The putty_key_pad of this BiosSerialConfiguration.
        :rtype: str
        """
        return self._putty_key_pad

    @putty_key_pad.setter
    def putty_key_pad(self, putty_key_pad):
        """
        Sets the putty_key_pad of this BiosSerialConfiguration.
        BIOS Token for setting Putty KeyPad configuration  

        :param putty_key_pad: The putty_key_pad of this BiosSerialConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "ESCN", "LINUX", "SCO", "VT100", "VT400", "XTERMR6"]
        if putty_key_pad not in allowed_values:
            raise ValueError(
                "Invalid value for `putty_key_pad` ({0}), must be one of {1}"
                .format(putty_key_pad, allowed_values)
            )

        self._putty_key_pad = putty_key_pad

    @property
    def redirection_after_post(self):
        """
        Gets the redirection_after_post of this BiosSerialConfiguration.
        BIOS Token for setting Redirection After BIOS POST configuration  

        :return: The redirection_after_post of this BiosSerialConfiguration.
        :rtype: str
        """
        return self._redirection_after_post

    @redirection_after_post.setter
    def redirection_after_post(self, redirection_after_post):
        """
        Sets the redirection_after_post of this BiosSerialConfiguration.
        BIOS Token for setting Redirection After BIOS POST configuration  

        :param redirection_after_post: The redirection_after_post of this BiosSerialConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "Always Enable", "Bootloader"]
        if redirection_after_post not in allowed_values:
            raise ValueError(
                "Invalid value for `redirection_after_post` ({0}), must be one of {1}"
                .format(redirection_after_post, allowed_values)
            )

        self._redirection_after_post = redirection_after_post

    @property
    def terminal_type(self):
        """
        Gets the terminal_type of this BiosSerialConfiguration.
        BIOS Token for setting Terminal Type configuration   

        :return: The terminal_type of this BiosSerialConfiguration.
        :rtype: str
        """
        return self._terminal_type

    @terminal_type.setter
    def terminal_type(self, terminal_type):
        """
        Sets the terminal_type of this BiosSerialConfiguration.
        BIOS Token for setting Terminal Type configuration   

        :param terminal_type: The terminal_type of this BiosSerialConfiguration.
        :type: str
        """
        allowed_values = ["platform-default", "pc-ansi", "vt-utf8", "vt100", "vt100-plus"]
        if terminal_type not in allowed_values:
            raise ValueError(
                "Invalid value for `terminal_type` ({0}), must be one of {1}"
                .format(terminal_type, allowed_values)
            )

        self._terminal_type = terminal_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BiosSerialConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
