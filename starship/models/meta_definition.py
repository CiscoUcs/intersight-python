# coding: utf-8

"""
    UCS Starship API

    This is the UCS Starship REST API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MetaDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'ancestors': 'list[MoMoRef]',
        'create_time': 'datetime',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'parent': 'MoMoRef',
        'tags': 'list[MoTag]',
        'ancestor_classes': 'list[str]',
        'external_type': 'bool',
        'is_concrete': 'bool',
        'name': 'str',
        'namespace': 'str',
        'observe': 'bool',
        'parent_class': 'str',
        'properties': 'list[MetaPropDefinition]',
        'relationships': 'list[MetaRelationshipDefinition]',
        'rest_path': 'str',
        'version': 'str'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'ancestors': 'Ancestors',
        'create_time': 'CreateTime',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'parent': 'Parent',
        'tags': 'Tags',
        'ancestor_classes': 'AncestorClasses',
        'external_type': 'ExternalType',
        'is_concrete': 'IsConcrete',
        'name': 'Name',
        'namespace': 'Namespace',
        'observe': 'Observe',
        'parent_class': 'ParentClass',
        'properties': 'Properties',
        'relationships': 'Relationships',
        'rest_path': 'RestPath',
        'version': 'Version'
    }

    def __init__(self, account_moid=None, ancestors=None, create_time=None, mod_time=None, moid=None, object_type=None, owners=None, parent=None, tags=None, ancestor_classes=None, external_type=None, is_concrete=None, name=None, namespace=None, observe=None, parent_class=None, properties=None, relationships=None, rest_path=None, version=None):
        """
        MetaDefinition - a model defined in Swagger
        """

        self._account_moid = None
        self._ancestors = None
        self._create_time = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._parent = None
        self._tags = None
        self._ancestor_classes = None
        self._external_type = None
        self._is_concrete = None
        self._name = None
        self._namespace = None
        self._observe = None
        self._parent_class = None
        self._properties = None
        self._relationships = None
        self._rest_path = None
        self._version = None

        if account_moid is not None:
          self.account_moid = account_moid
        if ancestors is not None:
          self.ancestors = ancestors
        if create_time is not None:
          self.create_time = create_time
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if parent is not None:
          self.parent = parent
        if tags is not None:
          self.tags = tags
        if ancestor_classes is not None:
          self.ancestor_classes = ancestor_classes
        if external_type is not None:
          self.external_type = external_type
        if is_concrete is not None:
          self.is_concrete = is_concrete
        if name is not None:
          self.name = name
        if namespace is not None:
          self.namespace = namespace
        if observe is not None:
          self.observe = observe
        if parent_class is not None:
          self.parent_class = parent_class
        if properties is not None:
          self.properties = properties
        if relationships is not None:
          self.relationships = relationships
        if rest_path is not None:
          self.rest_path = rest_path
        if version is not None:
          self.version = version

    @property
    def account_moid(self):
        """
        Gets the account_moid of this MetaDefinition.
        The Account ID for this managed object.  

        :return: The account_moid of this MetaDefinition.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this MetaDefinition.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this MetaDefinition.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def ancestors(self):
        """
        Gets the ancestors of this MetaDefinition.
        Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this MetaDefinition.
        :rtype: list[MoMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this MetaDefinition.
        Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this MetaDefinition.
        :type: list[MoMoRef]
        """

        self._ancestors = ancestors

    @property
    def create_time(self):
        """
        Gets the create_time of this MetaDefinition.
        The time when this managed object was created.  

        :return: The create_time of this MetaDefinition.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this MetaDefinition.
        The time when this managed object was created.  

        :param create_time: The create_time of this MetaDefinition.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def mod_time(self):
        """
        Gets the mod_time of this MetaDefinition.
        The time when this managed object was last modified.  

        :return: The mod_time of this MetaDefinition.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this MetaDefinition.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this MetaDefinition.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this MetaDefinition.
        A unique identifier of this Managed Object instance.  

        :return: The moid of this MetaDefinition.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this MetaDefinition.
        A unique identifier of this Managed Object instance.  

        :param moid: The moid of this MetaDefinition.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this MetaDefinition.
        The fully-qualified type of this managed object, e.g. the class name.  

        :return: The object_type of this MetaDefinition.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this MetaDefinition.
        The fully-qualified type of this managed object, e.g. the class name.  

        :param object_type: The object_type of this MetaDefinition.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this MetaDefinition.
        An array of owners which represent effective ownership of this object.   

        :return: The owners of this MetaDefinition.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this MetaDefinition.
        An array of owners which represent effective ownership of this object.   

        :param owners: The owners of this MetaDefinition.
        :type: list[str]
        """

        self._owners = owners

    @property
    def parent(self):
        """
        Gets the parent of this MetaDefinition.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this MetaDefinition.
        :rtype: MoMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this MetaDefinition.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this MetaDefinition.
        :type: MoMoRef
        """

        self._parent = parent

    @property
    def tags(self):
        """
        Gets the tags of this MetaDefinition.
        An array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this MetaDefinition.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this MetaDefinition.
        An array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this MetaDefinition.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def ancestor_classes(self):
        """
        Gets the ancestor_classes of this MetaDefinition.
        An array of parent metaclasses in the class inheritance hierarchy. The first element in the array is the parent class. The next element is the grand-parent, etc. The last element in the array is the mo.BaseMo class.   

        :return: The ancestor_classes of this MetaDefinition.
        :rtype: list[str]
        """
        return self._ancestor_classes

    @ancestor_classes.setter
    def ancestor_classes(self, ancestor_classes):
        """
        Sets the ancestor_classes of this MetaDefinition.
        An array of parent metaclasses in the class inheritance hierarchy. The first element in the array is the parent class. The next element is the grand-parent, etc. The last element in the array is the mo.BaseMo class.   

        :param ancestor_classes: The ancestor_classes of this MetaDefinition.
        :type: list[str]
        """

        self._ancestor_classes = ancestor_classes

    @property
    def external_type(self):
        """
        Gets the external_type of this MetaDefinition.
        Boolean flag to specify whether the meta class is defined in a separate micro-service.  

        :return: The external_type of this MetaDefinition.
        :rtype: bool
        """
        return self._external_type

    @external_type.setter
    def external_type(self, external_type):
        """
        Sets the external_type of this MetaDefinition.
        Boolean flag to specify whether the meta class is defined in a separate micro-service.  

        :param external_type: The external_type of this MetaDefinition.
        :type: bool
        """

        self._external_type = external_type

    @property
    def is_concrete(self):
        """
        Gets the is_concrete of this MetaDefinition.
        Boolean flag to specify whether this class is a concrete class or not.  

        :return: The is_concrete of this MetaDefinition.
        :rtype: bool
        """
        return self._is_concrete

    @is_concrete.setter
    def is_concrete(self, is_concrete):
        """
        Sets the is_concrete of this MetaDefinition.
        Boolean flag to specify whether this class is a concrete class or not.  

        :param is_concrete: The is_concrete of this MetaDefinition.
        :type: bool
        """

        self._is_concrete = is_concrete

    @property
    def name(self):
        """
        Gets the name of this MetaDefinition.
        The fully-qualified name of the meta class. For example, \"compute:Blade\" where the Managed Object is \"Blade\" and the package is 'compute'.  

        :return: The name of this MetaDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this MetaDefinition.
        The fully-qualified name of the meta class. For example, \"compute:Blade\" where the Managed Object is \"Blade\" and the package is 'compute'.  

        :param name: The name of this MetaDefinition.
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """
        Gets the namespace of this MetaDefinition.
        Namespace of the meta class.  

        :return: The namespace of this MetaDefinition.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """
        Sets the namespace of this MetaDefinition.
        Namespace of the meta class.  

        :param namespace: The namespace of this MetaDefinition.
        :type: str
        """

        self._namespace = namespace

    @property
    def observe(self):
        """
        Gets the observe of this MetaDefinition.
        Boolean flag to subscribe for mo change notifications if this meta class is an external type.  

        :return: The observe of this MetaDefinition.
        :rtype: bool
        """
        return self._observe

    @observe.setter
    def observe(self, observe):
        """
        Sets the observe of this MetaDefinition.
        Boolean flag to subscribe for mo change notifications if this meta class is an external type.  

        :param observe: The observe of this MetaDefinition.
        :type: bool
        """

        self._observe = observe

    @property
    def parent_class(self):
        """
        Gets the parent_class of this MetaDefinition.
        The fully-qualified name of the parent metaclass in the class inheritance hierarchy.  

        :return: The parent_class of this MetaDefinition.
        :rtype: str
        """
        return self._parent_class

    @parent_class.setter
    def parent_class(self, parent_class):
        """
        Sets the parent_class of this MetaDefinition.
        The fully-qualified name of the parent metaclass in the class inheritance hierarchy.  

        :param parent_class: The parent_class of this MetaDefinition.
        :type: str
        """

        self._parent_class = parent_class

    @property
    def properties(self):
        """
        Gets the properties of this MetaDefinition.
        Meta definition for the properties in the meta class and from all classes in the inheritance hierarchy.  

        :return: The properties of this MetaDefinition.
        :rtype: list[MetaPropDefinition]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this MetaDefinition.
        Meta definition for the properties in the meta class and from all classes in the inheritance hierarchy.  

        :param properties: The properties of this MetaDefinition.
        :type: list[MetaPropDefinition]
        """

        self._properties = properties

    @property
    def relationships(self):
        """
        Gets the relationships of this MetaDefinition.
        Meta definition for the relationship in the meta class.  

        :return: The relationships of this MetaDefinition.
        :rtype: list[MetaRelationshipDefinition]
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships):
        """
        Sets the relationships of this MetaDefinition.
        Meta definition for the relationship in the meta class.  

        :param relationships: The relationships of this MetaDefinition.
        :type: list[MetaRelationshipDefinition]
        """

        self._relationships = relationships

    @property
    def rest_path(self):
        """
        Gets the rest_path of this MetaDefinition.
        Restful URL path for the meta class.  

        :return: The rest_path of this MetaDefinition.
        :rtype: str
        """
        return self._rest_path

    @rest_path.setter
    def rest_path(self, rest_path):
        """
        Sets the rest_path of this MetaDefinition.
        Restful URL path for the meta class.  

        :param rest_path: The rest_path of this MetaDefinition.
        :type: str
        """

        self._rest_path = rest_path

    @property
    def version(self):
        """
        Gets the version of this MetaDefinition.
        Version of the service that defines the meta class.   

        :return: The version of this MetaDefinition.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this MetaDefinition.
        Version of the service that defines the meta class.   

        :param version: The version of this MetaDefinition.
        :type: str
        """

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MetaDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
