# coding: utf-8

"""
    UCS Starship API

    This is the UCS Starship REST API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BiosInputOutput(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'intel_vt_for_directed_io': 'str',
        'intel_vtd_coherency_support': 'str',
        'intel_vtdats_support': 'str',
        'ipv6pxe': 'str',
        'legacy_usb_support': 'str',
        'psata': 'str',
        'sata_mode_select': 'str',
        'usb_port_front': 'str',
        'usb_port_internal': 'str',
        'usb_port_kvm': 'str',
        'usb_port_rear': 'str',
        'usb_port_sd_card': 'str',
        'usb_port_vmedia': 'str',
        'vga_priority': 'str'
    }

    attribute_map = {
        'intel_vt_for_directed_io': 'IntelVtForDirectedIo',
        'intel_vtd_coherency_support': 'IntelVtdCoherencySupport',
        'intel_vtdats_support': 'IntelVtdatsSupport',
        'ipv6pxe': 'Ipv6pxe',
        'legacy_usb_support': 'LegacyUsbSupport',
        'psata': 'Psata',
        'sata_mode_select': 'SataModeSelect',
        'usb_port_front': 'UsbPortFront',
        'usb_port_internal': 'UsbPortInternal',
        'usb_port_kvm': 'UsbPortKvm',
        'usb_port_rear': 'UsbPortRear',
        'usb_port_sd_card': 'UsbPortSdCard',
        'usb_port_vmedia': 'UsbPortVmedia',
        'vga_priority': 'VgaPriority'
    }

    def __init__(self, intel_vt_for_directed_io='platform-default', intel_vtd_coherency_support='platform-default', intel_vtdats_support='platform-default', ipv6pxe='platform-default', legacy_usb_support='platform-default', psata='platform-default', sata_mode_select='platform-default', usb_port_front='platform-default', usb_port_internal='platform-default', usb_port_kvm='platform-default', usb_port_rear='platform-default', usb_port_sd_card='platform-default', usb_port_vmedia='platform-default', vga_priority='platform-default'):
        """
        BiosInputOutput - a model defined in Swagger
        """

        self._intel_vt_for_directed_io = None
        self._intel_vtd_coherency_support = None
        self._intel_vtdats_support = None
        self._ipv6pxe = None
        self._legacy_usb_support = None
        self._psata = None
        self._sata_mode_select = None
        self._usb_port_front = None
        self._usb_port_internal = None
        self._usb_port_kvm = None
        self._usb_port_rear = None
        self._usb_port_sd_card = None
        self._usb_port_vmedia = None
        self._vga_priority = None

        if intel_vt_for_directed_io is not None:
          self.intel_vt_for_directed_io = intel_vt_for_directed_io
        if intel_vtd_coherency_support is not None:
          self.intel_vtd_coherency_support = intel_vtd_coherency_support
        if intel_vtdats_support is not None:
          self.intel_vtdats_support = intel_vtdats_support
        if ipv6pxe is not None:
          self.ipv6pxe = ipv6pxe
        if legacy_usb_support is not None:
          self.legacy_usb_support = legacy_usb_support
        if psata is not None:
          self.psata = psata
        if sata_mode_select is not None:
          self.sata_mode_select = sata_mode_select
        if usb_port_front is not None:
          self.usb_port_front = usb_port_front
        if usb_port_internal is not None:
          self.usb_port_internal = usb_port_internal
        if usb_port_kvm is not None:
          self.usb_port_kvm = usb_port_kvm
        if usb_port_rear is not None:
          self.usb_port_rear = usb_port_rear
        if usb_port_sd_card is not None:
          self.usb_port_sd_card = usb_port_sd_card
        if usb_port_vmedia is not None:
          self.usb_port_vmedia = usb_port_vmedia
        if vga_priority is not None:
          self.vga_priority = vga_priority

    @property
    def intel_vt_for_directed_io(self):
        """
        Gets the intel_vt_for_directed_io of this BiosInputOutput.
        BIOS Token for setting Intel VT for directed IO configuration  

        :return: The intel_vt_for_directed_io of this BiosInputOutput.
        :rtype: str
        """
        return self._intel_vt_for_directed_io

    @intel_vt_for_directed_io.setter
    def intel_vt_for_directed_io(self, intel_vt_for_directed_io):
        """
        Sets the intel_vt_for_directed_io of this BiosInputOutput.
        BIOS Token for setting Intel VT for directed IO configuration  

        :param intel_vt_for_directed_io: The intel_vt_for_directed_io of this BiosInputOutput.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if intel_vt_for_directed_io not in allowed_values:
            raise ValueError(
                "Invalid value for `intel_vt_for_directed_io` ({0}), must be one of {1}"
                .format(intel_vt_for_directed_io, allowed_values)
            )

        self._intel_vt_for_directed_io = intel_vt_for_directed_io

    @property
    def intel_vtd_coherency_support(self):
        """
        Gets the intel_vtd_coherency_support of this BiosInputOutput.
        BIOS Token for setting Intel(R) VT-d Coherency Support configuration  

        :return: The intel_vtd_coherency_support of this BiosInputOutput.
        :rtype: str
        """
        return self._intel_vtd_coherency_support

    @intel_vtd_coherency_support.setter
    def intel_vtd_coherency_support(self, intel_vtd_coherency_support):
        """
        Sets the intel_vtd_coherency_support of this BiosInputOutput.
        BIOS Token for setting Intel(R) VT-d Coherency Support configuration  

        :param intel_vtd_coherency_support: The intel_vtd_coherency_support of this BiosInputOutput.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if intel_vtd_coherency_support not in allowed_values:
            raise ValueError(
                "Invalid value for `intel_vtd_coherency_support` ({0}), must be one of {1}"
                .format(intel_vtd_coherency_support, allowed_values)
            )

        self._intel_vtd_coherency_support = intel_vtd_coherency_support

    @property
    def intel_vtdats_support(self):
        """
        Gets the intel_vtdats_support of this BiosInputOutput.
        BIOS Token for setting Intel VTD ATS support configuration  

        :return: The intel_vtdats_support of this BiosInputOutput.
        :rtype: str
        """
        return self._intel_vtdats_support

    @intel_vtdats_support.setter
    def intel_vtdats_support(self, intel_vtdats_support):
        """
        Sets the intel_vtdats_support of this BiosInputOutput.
        BIOS Token for setting Intel VTD ATS support configuration  

        :param intel_vtdats_support: The intel_vtdats_support of this BiosInputOutput.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if intel_vtdats_support not in allowed_values:
            raise ValueError(
                "Invalid value for `intel_vtdats_support` ({0}), must be one of {1}"
                .format(intel_vtdats_support, allowed_values)
            )

        self._intel_vtdats_support = intel_vtdats_support

    @property
    def ipv6pxe(self):
        """
        Gets the ipv6pxe of this BiosInputOutput.
        BIOS Token for setting IPV6 PXE Support configuration  

        :return: The ipv6pxe of this BiosInputOutput.
        :rtype: str
        """
        return self._ipv6pxe

    @ipv6pxe.setter
    def ipv6pxe(self, ipv6pxe):
        """
        Sets the ipv6pxe of this BiosInputOutput.
        BIOS Token for setting IPV6 PXE Support configuration  

        :param ipv6pxe: The ipv6pxe of this BiosInputOutput.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if ipv6pxe not in allowed_values:
            raise ValueError(
                "Invalid value for `ipv6pxe` ({0}), must be one of {1}"
                .format(ipv6pxe, allowed_values)
            )

        self._ipv6pxe = ipv6pxe

    @property
    def legacy_usb_support(self):
        """
        Gets the legacy_usb_support of this BiosInputOutput.
        BIOS Token for setting Legacy USB Support configuration  

        :return: The legacy_usb_support of this BiosInputOutput.
        :rtype: str
        """
        return self._legacy_usb_support

    @legacy_usb_support.setter
    def legacy_usb_support(self, legacy_usb_support):
        """
        Sets the legacy_usb_support of this BiosInputOutput.
        BIOS Token for setting Legacy USB Support configuration  

        :param legacy_usb_support: The legacy_usb_support of this BiosInputOutput.
        :type: str
        """
        allowed_values = ["platform-default", "auto", "disabled", "enabled"]
        if legacy_usb_support not in allowed_values:
            raise ValueError(
                "Invalid value for `legacy_usb_support` ({0}), must be one of {1}"
                .format(legacy_usb_support, allowed_values)
            )

        self._legacy_usb_support = legacy_usb_support

    @property
    def psata(self):
        """
        Gets the psata of this BiosInputOutput.
        BIOS Token for setting P-SATA OptionROM configuration  

        :return: The psata of this BiosInputOutput.
        :rtype: str
        """
        return self._psata

    @psata.setter
    def psata(self, psata):
        """
        Sets the psata of this BiosInputOutput.
        BIOS Token for setting P-SATA OptionROM configuration  

        :param psata: The psata of this BiosInputOutput.
        :type: str
        """
        allowed_values = ["platform-default", "Disabled", "LSI SW RAID"]
        if psata not in allowed_values:
            raise ValueError(
                "Invalid value for `psata` ({0}), must be one of {1}"
                .format(psata, allowed_values)
            )

        self._psata = psata

    @property
    def sata_mode_select(self):
        """
        Gets the sata_mode_select of this BiosInputOutput.
        BIOS Token for setting M.2 SATA OptionROM configuration  

        :return: The sata_mode_select of this BiosInputOutput.
        :rtype: str
        """
        return self._sata_mode_select

    @sata_mode_select.setter
    def sata_mode_select(self, sata_mode_select):
        """
        Sets the sata_mode_select of this BiosInputOutput.
        BIOS Token for setting M.2 SATA OptionROM configuration  

        :param sata_mode_select: The sata_mode_select of this BiosInputOutput.
        :type: str
        """
        allowed_values = ["platform-default", "AHCI", "Disabled", "LSI SW RAID"]
        if sata_mode_select not in allowed_values:
            raise ValueError(
                "Invalid value for `sata_mode_select` ({0}), must be one of {1}"
                .format(sata_mode_select, allowed_values)
            )

        self._sata_mode_select = sata_mode_select

    @property
    def usb_port_front(self):
        """
        Gets the usb_port_front of this BiosInputOutput.
        BIOS Token for setting USB Port Front configuration  

        :return: The usb_port_front of this BiosInputOutput.
        :rtype: str
        """
        return self._usb_port_front

    @usb_port_front.setter
    def usb_port_front(self, usb_port_front):
        """
        Sets the usb_port_front of this BiosInputOutput.
        BIOS Token for setting USB Port Front configuration  

        :param usb_port_front: The usb_port_front of this BiosInputOutput.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if usb_port_front not in allowed_values:
            raise ValueError(
                "Invalid value for `usb_port_front` ({0}), must be one of {1}"
                .format(usb_port_front, allowed_values)
            )

        self._usb_port_front = usb_port_front

    @property
    def usb_port_internal(self):
        """
        Gets the usb_port_internal of this BiosInputOutput.
        BIOS Token for setting USB Port Internal configuration  

        :return: The usb_port_internal of this BiosInputOutput.
        :rtype: str
        """
        return self._usb_port_internal

    @usb_port_internal.setter
    def usb_port_internal(self, usb_port_internal):
        """
        Sets the usb_port_internal of this BiosInputOutput.
        BIOS Token for setting USB Port Internal configuration  

        :param usb_port_internal: The usb_port_internal of this BiosInputOutput.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if usb_port_internal not in allowed_values:
            raise ValueError(
                "Invalid value for `usb_port_internal` ({0}), must be one of {1}"
                .format(usb_port_internal, allowed_values)
            )

        self._usb_port_internal = usb_port_internal

    @property
    def usb_port_kvm(self):
        """
        Gets the usb_port_kvm of this BiosInputOutput.
        BIOS Token for setting USB Port KVM configuration  

        :return: The usb_port_kvm of this BiosInputOutput.
        :rtype: str
        """
        return self._usb_port_kvm

    @usb_port_kvm.setter
    def usb_port_kvm(self, usb_port_kvm):
        """
        Sets the usb_port_kvm of this BiosInputOutput.
        BIOS Token for setting USB Port KVM configuration  

        :param usb_port_kvm: The usb_port_kvm of this BiosInputOutput.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if usb_port_kvm not in allowed_values:
            raise ValueError(
                "Invalid value for `usb_port_kvm` ({0}), must be one of {1}"
                .format(usb_port_kvm, allowed_values)
            )

        self._usb_port_kvm = usb_port_kvm

    @property
    def usb_port_rear(self):
        """
        Gets the usb_port_rear of this BiosInputOutput.
        BIOS Token for setting USB Port Rear configuration  

        :return: The usb_port_rear of this BiosInputOutput.
        :rtype: str
        """
        return self._usb_port_rear

    @usb_port_rear.setter
    def usb_port_rear(self, usb_port_rear):
        """
        Sets the usb_port_rear of this BiosInputOutput.
        BIOS Token for setting USB Port Rear configuration  

        :param usb_port_rear: The usb_port_rear of this BiosInputOutput.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if usb_port_rear not in allowed_values:
            raise ValueError(
                "Invalid value for `usb_port_rear` ({0}), must be one of {1}"
                .format(usb_port_rear, allowed_values)
            )

        self._usb_port_rear = usb_port_rear

    @property
    def usb_port_sd_card(self):
        """
        Gets the usb_port_sd_card of this BiosInputOutput.
        BIOS Token for setting USB Port:M.2 Storage configuration  

        :return: The usb_port_sd_card of this BiosInputOutput.
        :rtype: str
        """
        return self._usb_port_sd_card

    @usb_port_sd_card.setter
    def usb_port_sd_card(self, usb_port_sd_card):
        """
        Sets the usb_port_sd_card of this BiosInputOutput.
        BIOS Token for setting USB Port:M.2 Storage configuration  

        :param usb_port_sd_card: The usb_port_sd_card of this BiosInputOutput.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if usb_port_sd_card not in allowed_values:
            raise ValueError(
                "Invalid value for `usb_port_sd_card` ({0}), must be one of {1}"
                .format(usb_port_sd_card, allowed_values)
            )

        self._usb_port_sd_card = usb_port_sd_card

    @property
    def usb_port_vmedia(self):
        """
        Gets the usb_port_vmedia of this BiosInputOutput.
        BIOS Token for setting USB Port VMedia configuration  

        :return: The usb_port_vmedia of this BiosInputOutput.
        :rtype: str
        """
        return self._usb_port_vmedia

    @usb_port_vmedia.setter
    def usb_port_vmedia(self, usb_port_vmedia):
        """
        Sets the usb_port_vmedia of this BiosInputOutput.
        BIOS Token for setting USB Port VMedia configuration  

        :param usb_port_vmedia: The usb_port_vmedia of this BiosInputOutput.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if usb_port_vmedia not in allowed_values:
            raise ValueError(
                "Invalid value for `usb_port_vmedia` ({0}), must be one of {1}"
                .format(usb_port_vmedia, allowed_values)
            )

        self._usb_port_vmedia = usb_port_vmedia

    @property
    def vga_priority(self):
        """
        Gets the vga_priority of this BiosInputOutput.
        BIOS Token for setting VGA Priority configuration   

        :return: The vga_priority of this BiosInputOutput.
        :rtype: str
        """
        return self._vga_priority

    @vga_priority.setter
    def vga_priority(self, vga_priority):
        """
        Sets the vga_priority of this BiosInputOutput.
        BIOS Token for setting VGA Priority configuration   

        :param vga_priority: The vga_priority of this BiosInputOutput.
        :type: str
        """
        allowed_values = ["platform-default", "Offboard", "Onboard", "Onboard VGA Disabled"]
        if vga_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `vga_priority` ({0}), must be one of {1}"
                .format(vga_priority, allowed_values)
            )

        self._vga_priority = vga_priority

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BiosInputOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
