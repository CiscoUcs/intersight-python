# coding: utf-8

"""
    UCS Starship API

    This is the UCS Starship REST API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class HclDataImportLog(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'ancestors': 'list[MoMoRef]',
        'create_time': 'datetime',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'parent': 'MoMoRef',
        'tags': 'list[MoTag]',
        'catalog_name': 'str',
        'catalog_updated_date': 'str',
        'catalog_version': 'str',
        'check_sum': 'str',
        'file_create_date': 'str',
        'import_start_time': 'datetime',
        'import_state': 'str',
        'last_update_time': 'datetime'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'ancestors': 'Ancestors',
        'create_time': 'CreateTime',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'parent': 'Parent',
        'tags': 'Tags',
        'catalog_name': 'CatalogName',
        'catalog_updated_date': 'CatalogUpdatedDate',
        'catalog_version': 'CatalogVersion',
        'check_sum': 'CheckSum',
        'file_create_date': 'FileCreateDate',
        'import_start_time': 'ImportStartTime',
        'import_state': 'ImportState',
        'last_update_time': 'LastUpdateTime'
    }

    def __init__(self, account_moid=None, ancestors=None, create_time=None, mod_time=None, moid=None, object_type=None, owners=None, parent=None, tags=None, catalog_name=None, catalog_updated_date=None, catalog_version=None, check_sum=None, file_create_date=None, import_start_time=None, import_state='None', last_update_time=None):
        """
        HclDataImportLog - a model defined in Swagger
        """

        self._account_moid = None
        self._ancestors = None
        self._create_time = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._parent = None
        self._tags = None
        self._catalog_name = None
        self._catalog_updated_date = None
        self._catalog_version = None
        self._check_sum = None
        self._file_create_date = None
        self._import_start_time = None
        self._import_state = None
        self._last_update_time = None

        if account_moid is not None:
          self.account_moid = account_moid
        if ancestors is not None:
          self.ancestors = ancestors
        if create_time is not None:
          self.create_time = create_time
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if parent is not None:
          self.parent = parent
        if tags is not None:
          self.tags = tags
        if catalog_name is not None:
          self.catalog_name = catalog_name
        if catalog_updated_date is not None:
          self.catalog_updated_date = catalog_updated_date
        if catalog_version is not None:
          self.catalog_version = catalog_version
        if check_sum is not None:
          self.check_sum = check_sum
        if file_create_date is not None:
          self.file_create_date = file_create_date
        if import_start_time is not None:
          self.import_start_time = import_start_time
        if import_state is not None:
          self.import_state = import_state
        if last_update_time is not None:
          self.last_update_time = last_update_time

    @property
    def account_moid(self):
        """
        Gets the account_moid of this HclDataImportLog.
        The Account ID for this managed object.  

        :return: The account_moid of this HclDataImportLog.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this HclDataImportLog.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this HclDataImportLog.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def ancestors(self):
        """
        Gets the ancestors of this HclDataImportLog.
        Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this HclDataImportLog.
        :rtype: list[MoMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this HclDataImportLog.
        Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this HclDataImportLog.
        :type: list[MoMoRef]
        """

        self._ancestors = ancestors

    @property
    def create_time(self):
        """
        Gets the create_time of this HclDataImportLog.
        The time when this managed object was created.  

        :return: The create_time of this HclDataImportLog.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this HclDataImportLog.
        The time when this managed object was created.  

        :param create_time: The create_time of this HclDataImportLog.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def mod_time(self):
        """
        Gets the mod_time of this HclDataImportLog.
        The time when this managed object was last modified.  

        :return: The mod_time of this HclDataImportLog.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this HclDataImportLog.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this HclDataImportLog.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this HclDataImportLog.
        A unique identifier of this Managed Object instance.  

        :return: The moid of this HclDataImportLog.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this HclDataImportLog.
        A unique identifier of this Managed Object instance.  

        :param moid: The moid of this HclDataImportLog.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this HclDataImportLog.
        The fully-qualified type of this managed object, e.g. the class name.  

        :return: The object_type of this HclDataImportLog.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this HclDataImportLog.
        The fully-qualified type of this managed object, e.g. the class name.  

        :param object_type: The object_type of this HclDataImportLog.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this HclDataImportLog.
        An array of owners which represent effective ownership of this object.   

        :return: The owners of this HclDataImportLog.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this HclDataImportLog.
        An array of owners which represent effective ownership of this object.   

        :param owners: The owners of this HclDataImportLog.
        :type: list[str]
        """

        self._owners = owners

    @property
    def parent(self):
        """
        Gets the parent of this HclDataImportLog.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this HclDataImportLog.
        :rtype: MoMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this HclDataImportLog.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this HclDataImportLog.
        :type: MoMoRef
        """

        self._parent = parent

    @property
    def tags(self):
        """
        Gets the tags of this HclDataImportLog.
        An array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this HclDataImportLog.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this HclDataImportLog.
        An array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this HclDataImportLog.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def catalog_name(self):
        """
        Gets the catalog_name of this HclDataImportLog.
        Name of the HCL Data File  

        :return: The catalog_name of this HclDataImportLog.
        :rtype: str
        """
        return self._catalog_name

    @catalog_name.setter
    def catalog_name(self, catalog_name):
        """
        Sets the catalog_name of this HclDataImportLog.
        Name of the HCL Data File  

        :param catalog_name: The catalog_name of this HclDataImportLog.
        :type: str
        """

        self._catalog_name = catalog_name

    @property
    def catalog_updated_date(self):
        """
        Gets the catalog_updated_date of this HclDataImportLog.
        Date of the HCL Data update  

        :return: The catalog_updated_date of this HclDataImportLog.
        :rtype: str
        """
        return self._catalog_updated_date

    @catalog_updated_date.setter
    def catalog_updated_date(self, catalog_updated_date):
        """
        Sets the catalog_updated_date of this HclDataImportLog.
        Date of the HCL Data update  

        :param catalog_updated_date: The catalog_updated_date of this HclDataImportLog.
        :type: str
        """

        self._catalog_updated_date = catalog_updated_date

    @property
    def catalog_version(self):
        """
        Gets the catalog_version of this HclDataImportLog.
        Version of the HCL Data  

        :return: The catalog_version of this HclDataImportLog.
        :rtype: str
        """
        return self._catalog_version

    @catalog_version.setter
    def catalog_version(self, catalog_version):
        """
        Sets the catalog_version of this HclDataImportLog.
        Version of the HCL Data  

        :param catalog_version: The catalog_version of this HclDataImportLog.
        :type: str
        """

        self._catalog_version = catalog_version

    @property
    def check_sum(self):
        """
        Gets the check_sum of this HclDataImportLog.
        Checksum of the HCL Data file MD5 checksum  

        :return: The check_sum of this HclDataImportLog.
        :rtype: str
        """
        return self._check_sum

    @check_sum.setter
    def check_sum(self, check_sum):
        """
        Sets the check_sum of this HclDataImportLog.
        Checksum of the HCL Data file MD5 checksum  

        :param check_sum: The check_sum of this HclDataImportLog.
        :type: str
        """

        self._check_sum = check_sum

    @property
    def file_create_date(self):
        """
        Gets the file_create_date of this HclDataImportLog.
        Date of the HCL Data file creation  

        :return: The file_create_date of this HclDataImportLog.
        :rtype: str
        """
        return self._file_create_date

    @file_create_date.setter
    def file_create_date(self, file_create_date):
        """
        Sets the file_create_date of this HclDataImportLog.
        Date of the HCL Data file creation  

        :param file_create_date: The file_create_date of this HclDataImportLog.
        :type: str
        """

        self._file_create_date = file_create_date

    @property
    def import_start_time(self):
        """
        Gets the import_start_time of this HclDataImportLog.
        Timestamp of the data import process  

        :return: The import_start_time of this HclDataImportLog.
        :rtype: datetime
        """
        return self._import_start_time

    @import_start_time.setter
    def import_start_time(self, import_start_time):
        """
        Sets the import_start_time of this HclDataImportLog.
        Timestamp of the data import process  

        :param import_start_time: The import_start_time of this HclDataImportLog.
        :type: datetime
        """

        self._import_start_time = import_start_time

    @property
    def import_state(self):
        """
        Gets the import_state of this HclDataImportLog.
        Status of the import process  

        :return: The import_state of this HclDataImportLog.
        :rtype: str
        """
        return self._import_state

    @import_state.setter
    def import_state(self, import_state):
        """
        Sets the import_state of this HclDataImportLog.
        Status of the import process  

        :param import_state: The import_state of this HclDataImportLog.
        :type: str
        """
        allowed_values = ["None", "InProgress", "Success", "Started", "Failed"]
        if import_state not in allowed_values:
            raise ValueError(
                "Invalid value for `import_state` ({0}), must be one of {1}"
                .format(import_state, allowed_values)
            )

        self._import_state = import_state

    @property
    def last_update_time(self):
        """
        Gets the last_update_time of this HclDataImportLog.
        Timestamp of the last sucessful commit   

        :return: The last_update_time of this HclDataImportLog.
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """
        Sets the last_update_time of this HclDataImportLog.
        Timestamp of the last sucessful commit   

        :param last_update_time: The last_update_time of this HclDataImportLog.
        :type: datetime
        """

        self._last_update_time = last_update_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HclDataImportLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
