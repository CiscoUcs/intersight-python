# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class GraphicsCardAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'card_id': 'int',
        'device_id': 'int',
        'expander_slot': 'str',
        'firmware_version': 'str',
        'mode': 'str',
        'num_gpus': 'str',
        'oper_state': 'str',
        'pci_address': 'str',
        'pci_address_list': 'str',
        'pci_slot': 'str',
        'compute_board': 'ComputeBoard',
        'graphics_controllers': 'list[GraphicsController]',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'card_id': 'CardId',
        'device_id': 'DeviceId',
        'expander_slot': 'ExpanderSlot',
        'firmware_version': 'FirmwareVersion',
        'mode': 'Mode',
        'num_gpus': 'NumGpus',
        'oper_state': 'OperState',
        'pci_address': 'PciAddress',
        'pci_address_list': 'PciAddressList',
        'pci_slot': 'PciSlot',
        'compute_board': 'ComputeBoard',
        'graphics_controllers': 'GraphicsControllers',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 card_id=None,
                 device_id=None,
                 expander_slot=None,
                 firmware_version=None,
                 mode=None,
                 num_gpus=None,
                 oper_state=None,
                 pci_address=None,
                 pci_address_list=None,
                 pci_slot=None,
                 compute_board=None,
                 graphics_controllers=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """GraphicsCardAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._card_id = None
        self._device_id = None
        self._expander_slot = None
        self._firmware_version = None
        self._mode = None
        self._num_gpus = None
        self._oper_state = None
        self._pci_address = None
        self._pci_address_list = None
        self._pci_slot = None
        self._compute_board = None
        self._graphics_controllers = None
        self._registered_device = None
        self.discriminator = None

        if card_id is not None:
            self.card_id = card_id
        if device_id is not None:
            self.device_id = device_id
        if expander_slot is not None:
            self.expander_slot = expander_slot
        if firmware_version is not None:
            self.firmware_version = firmware_version
        if mode is not None:
            self.mode = mode
        if num_gpus is not None:
            self.num_gpus = num_gpus
        if oper_state is not None:
            self.oper_state = oper_state
        if pci_address is not None:
            self.pci_address = pci_address
        if pci_address_list is not None:
            self.pci_address_list = pci_address_list
        if pci_slot is not None:
            self.pci_slot = pci_slot
        if compute_board is not None:
            self.compute_board = compute_board
        if graphics_controllers is not None:
            self.graphics_controllers = graphics_controllers
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def card_id(self):
        """Gets the card_id of this GraphicsCardAllOf.  # noqa: E501

        It shows the id of graphics card.    # noqa: E501

        :return: The card_id of this GraphicsCardAllOf.  # noqa: E501
        :rtype: int
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this GraphicsCardAllOf.

        It shows the id of graphics card.    # noqa: E501

        :param card_id: The card_id of this GraphicsCardAllOf.  # noqa: E501
        :type: int
        """

        self._card_id = card_id

    @property
    def device_id(self):
        """Gets the device_id of this GraphicsCardAllOf.  # noqa: E501

        It shows the device id of grphics card.    # noqa: E501

        :return: The device_id of this GraphicsCardAllOf.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this GraphicsCardAllOf.

        It shows the device id of grphics card.    # noqa: E501

        :param device_id: The device_id of this GraphicsCardAllOf.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def expander_slot(self):
        """Gets the expander_slot of this GraphicsCardAllOf.  # noqa: E501

        It shows the expander slot inforamtion for the card.    # noqa: E501

        :return: The expander_slot of this GraphicsCardAllOf.  # noqa: E501
        :rtype: str
        """
        return self._expander_slot

    @expander_slot.setter
    def expander_slot(self, expander_slot):
        """Sets the expander_slot of this GraphicsCardAllOf.

        It shows the expander slot inforamtion for the card.    # noqa: E501

        :param expander_slot: The expander_slot of this GraphicsCardAllOf.  # noqa: E501
        :type: str
        """

        self._expander_slot = expander_slot

    @property
    def firmware_version(self):
        """Gets the firmware_version of this GraphicsCardAllOf.  # noqa: E501

        It shows current firmware version of graphics card.    # noqa: E501

        :return: The firmware_version of this GraphicsCardAllOf.  # noqa: E501
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this GraphicsCardAllOf.

        It shows current firmware version of graphics card.    # noqa: E501

        :param firmware_version: The firmware_version of this GraphicsCardAllOf.  # noqa: E501
        :type: str
        """

        self._firmware_version = firmware_version

    @property
    def mode(self):
        """Gets the mode of this GraphicsCardAllOf.  # noqa: E501

        It shows the current mode of graphics card.    # noqa: E501

        :return: The mode of this GraphicsCardAllOf.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this GraphicsCardAllOf.

        It shows the current mode of graphics card.    # noqa: E501

        :param mode: The mode of this GraphicsCardAllOf.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def num_gpus(self):
        """Gets the num_gpus of this GraphicsCardAllOf.  # noqa: E501

        It shows number of controllers under each card.    # noqa: E501

        :return: The num_gpus of this GraphicsCardAllOf.  # noqa: E501
        :rtype: str
        """
        return self._num_gpus

    @num_gpus.setter
    def num_gpus(self, num_gpus):
        """Sets the num_gpus of this GraphicsCardAllOf.

        It shows number of controllers under each card.    # noqa: E501

        :param num_gpus: The num_gpus of this GraphicsCardAllOf.  # noqa: E501
        :type: str
        """

        self._num_gpus = num_gpus

    @property
    def oper_state(self):
        """Gets the oper_state of this GraphicsCardAllOf.  # noqa: E501

        It shows the current operational state of graphics card.    # noqa: E501

        :return: The oper_state of this GraphicsCardAllOf.  # noqa: E501
        :rtype: str
        """
        return self._oper_state

    @oper_state.setter
    def oper_state(self, oper_state):
        """Sets the oper_state of this GraphicsCardAllOf.

        It shows the current operational state of graphics card.    # noqa: E501

        :param oper_state: The oper_state of this GraphicsCardAllOf.  # noqa: E501
        :type: str
        """

        self._oper_state = oper_state

    @property
    def pci_address(self):
        """Gets the pci_address of this GraphicsCardAllOf.  # noqa: E501

        It shows the pci address of graphics card.    # noqa: E501

        :return: The pci_address of this GraphicsCardAllOf.  # noqa: E501
        :rtype: str
        """
        return self._pci_address

    @pci_address.setter
    def pci_address(self, pci_address):
        """Sets the pci_address of this GraphicsCardAllOf.

        It shows the pci address of graphics card.    # noqa: E501

        :param pci_address: The pci_address of this GraphicsCardAllOf.  # noqa: E501
        :type: str
        """

        self._pci_address = pci_address

    @property
    def pci_address_list(self):
        """Gets the pci_address_list of this GraphicsCardAllOf.  # noqa: E501

        This list contains the pci address of all controllers for corresponding card.    # noqa: E501

        :return: The pci_address_list of this GraphicsCardAllOf.  # noqa: E501
        :rtype: str
        """
        return self._pci_address_list

    @pci_address_list.setter
    def pci_address_list(self, pci_address_list):
        """Sets the pci_address_list of this GraphicsCardAllOf.

        This list contains the pci address of all controllers for corresponding card.    # noqa: E501

        :param pci_address_list: The pci_address_list of this GraphicsCardAllOf.  # noqa: E501
        :type: str
        """

        self._pci_address_list = pci_address_list

    @property
    def pci_slot(self):
        """Gets the pci_slot of this GraphicsCardAllOf.  # noqa: E501

        It shows the pci slot name for grapchics card.     # noqa: E501

        :return: The pci_slot of this GraphicsCardAllOf.  # noqa: E501
        :rtype: str
        """
        return self._pci_slot

    @pci_slot.setter
    def pci_slot(self, pci_slot):
        """Sets the pci_slot of this GraphicsCardAllOf.

        It shows the pci slot name for grapchics card.     # noqa: E501

        :param pci_slot: The pci_slot of this GraphicsCardAllOf.  # noqa: E501
        :type: str
        """

        self._pci_slot = pci_slot

    @property
    def compute_board(self):
        """Gets the compute_board of this GraphicsCardAllOf.  # noqa: E501


        :return: The compute_board of this GraphicsCardAllOf.  # noqa: E501
        :rtype: ComputeBoard
        """
        return self._compute_board

    @compute_board.setter
    def compute_board(self, compute_board):
        """Sets the compute_board of this GraphicsCardAllOf.


        :param compute_board: The compute_board of this GraphicsCardAllOf.  # noqa: E501
        :type: ComputeBoard
        """

        self._compute_board = compute_board

    @property
    def graphics_controllers(self):
        """Gets the graphics_controllers of this GraphicsCardAllOf.  # noqa: E501

        A reference to a graphicsController resource. When the $expand query parameter is specified, the referenced resource is returned inline. It shows the controllers under each graphics card.   # noqa: E501

        :return: The graphics_controllers of this GraphicsCardAllOf.  # noqa: E501
        :rtype: list[GraphicsController]
        """
        return self._graphics_controllers

    @graphics_controllers.setter
    def graphics_controllers(self, graphics_controllers):
        """Sets the graphics_controllers of this GraphicsCardAllOf.

        A reference to a graphicsController resource. When the $expand query parameter is specified, the referenced resource is returned inline. It shows the controllers under each graphics card.   # noqa: E501

        :param graphics_controllers: The graphics_controllers of this GraphicsCardAllOf.  # noqa: E501
        :type: list[GraphicsController]
        """

        self._graphics_controllers = graphics_controllers

    @property
    def registered_device(self):
        """Gets the registered_device of this GraphicsCardAllOf.  # noqa: E501


        :return: The registered_device of this GraphicsCardAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this GraphicsCardAllOf.


        :param registered_device: The registered_device of this GraphicsCardAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GraphicsCardAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GraphicsCardAllOf):
            return True

        return self.to_dict() != other.to_dict()
