# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.5-612
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class HclCompatibilityInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'ancestors': 'list[MoBaseMoRef]',
        'create_time': 'datetime',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'parent': 'MoBaseMoRef',
        'tags': 'list[MoTag]',
        'adapter_bios': 'str',
        'driver_protocol': 'str',
        'driver_vendor': 'str',
        'driver_version': 'str',
        'firmware': 'str',
        'notes': 'list[HclNoteRef]',
        'os_vendor': 'str',
        'os_version': 'str',
        'processor_name': 'str',
        'product_id': 'str',
        'product_model': 'str',
        'server_model': 'str',
        'server_pid': 'str',
        'ucs_version': 'str',
        'version_type': 'str'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'ancestors': 'Ancestors',
        'create_time': 'CreateTime',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'parent': 'Parent',
        'tags': 'Tags',
        'adapter_bios': 'AdapterBios',
        'driver_protocol': 'DriverProtocol',
        'driver_vendor': 'DriverVendor',
        'driver_version': 'DriverVersion',
        'firmware': 'Firmware',
        'notes': 'Notes',
        'os_vendor': 'OsVendor',
        'os_version': 'OsVersion',
        'processor_name': 'ProcessorName',
        'product_id': 'ProductId',
        'product_model': 'ProductModel',
        'server_model': 'ServerModel',
        'server_pid': 'ServerPid',
        'ucs_version': 'UcsVersion',
        'version_type': 'VersionType'
    }

    def __init__(self, account_moid=None, ancestors=None, create_time=None, mod_time=None, moid=None, object_type=None, owners=None, parent=None, tags=None, adapter_bios=None, driver_protocol=None, driver_vendor=None, driver_version=None, firmware=None, notes=None, os_vendor=None, os_version=None, processor_name=None, product_id=None, product_model=None, server_model=None, server_pid=None, ucs_version=None, version_type=None):
        """
        HclCompatibilityInfo - a model defined in Swagger
        """

        self._account_moid = None
        self._ancestors = None
        self._create_time = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._parent = None
        self._tags = None
        self._adapter_bios = None
        self._driver_protocol = None
        self._driver_vendor = None
        self._driver_version = None
        self._firmware = None
        self._notes = None
        self._os_vendor = None
        self._os_version = None
        self._processor_name = None
        self._product_id = None
        self._product_model = None
        self._server_model = None
        self._server_pid = None
        self._ucs_version = None
        self._version_type = None

        if account_moid is not None:
          self.account_moid = account_moid
        if ancestors is not None:
          self.ancestors = ancestors
        if create_time is not None:
          self.create_time = create_time
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if parent is not None:
          self.parent = parent
        if tags is not None:
          self.tags = tags
        if adapter_bios is not None:
          self.adapter_bios = adapter_bios
        if driver_protocol is not None:
          self.driver_protocol = driver_protocol
        if driver_vendor is not None:
          self.driver_vendor = driver_vendor
        if driver_version is not None:
          self.driver_version = driver_version
        if firmware is not None:
          self.firmware = firmware
        if notes is not None:
          self.notes = notes
        if os_vendor is not None:
          self.os_vendor = os_vendor
        if os_version is not None:
          self.os_version = os_version
        if processor_name is not None:
          self.processor_name = processor_name
        if product_id is not None:
          self.product_id = product_id
        if product_model is not None:
          self.product_model = product_model
        if server_model is not None:
          self.server_model = server_model
        if server_pid is not None:
          self.server_pid = server_pid
        if ucs_version is not None:
          self.ucs_version = ucs_version
        if version_type is not None:
          self.version_type = version_type

    @property
    def account_moid(self):
        """
        Gets the account_moid of this HclCompatibilityInfo.
        The Account ID for this managed object.  

        :return: The account_moid of this HclCompatibilityInfo.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this HclCompatibilityInfo.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this HclCompatibilityInfo.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def ancestors(self):
        """
        Gets the ancestors of this HclCompatibilityInfo.
        Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this HclCompatibilityInfo.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this HclCompatibilityInfo.
        Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this HclCompatibilityInfo.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def create_time(self):
        """
        Gets the create_time of this HclCompatibilityInfo.
        The time when this managed object was created.  

        :return: The create_time of this HclCompatibilityInfo.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this HclCompatibilityInfo.
        The time when this managed object was created.  

        :param create_time: The create_time of this HclCompatibilityInfo.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def mod_time(self):
        """
        Gets the mod_time of this HclCompatibilityInfo.
        The time when this managed object was last modified.  

        :return: The mod_time of this HclCompatibilityInfo.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this HclCompatibilityInfo.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this HclCompatibilityInfo.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this HclCompatibilityInfo.
        A unique identifier of this Managed Object instance.  

        :return: The moid of this HclCompatibilityInfo.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this HclCompatibilityInfo.
        A unique identifier of this Managed Object instance.  

        :param moid: The moid of this HclCompatibilityInfo.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this HclCompatibilityInfo.
        The fully-qualified type of this managed object, e.g. the class name.  

        :return: The object_type of this HclCompatibilityInfo.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this HclCompatibilityInfo.
        The fully-qualified type of this managed object, e.g. the class name.  

        :param object_type: The object_type of this HclCompatibilityInfo.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this HclCompatibilityInfo.
        An array of owners which represent effective ownership of this object.   

        :return: The owners of this HclCompatibilityInfo.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this HclCompatibilityInfo.
        An array of owners which represent effective ownership of this object.   

        :param owners: The owners of this HclCompatibilityInfo.
        :type: list[str]
        """

        self._owners = owners

    @property
    def parent(self):
        """
        Gets the parent of this HclCompatibilityInfo.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this HclCompatibilityInfo.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this HclCompatibilityInfo.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this HclCompatibilityInfo.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def tags(self):
        """
        Gets the tags of this HclCompatibilityInfo.
        An array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this HclCompatibilityInfo.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this HclCompatibilityInfo.
        An array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this HclCompatibilityInfo.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def adapter_bios(self):
        """
        Gets the adapter_bios of this HclCompatibilityInfo.

        :return: The adapter_bios of this HclCompatibilityInfo.
        :rtype: str
        """
        return self._adapter_bios

    @adapter_bios.setter
    def adapter_bios(self, adapter_bios):
        """
        Sets the adapter_bios of this HclCompatibilityInfo.

        :param adapter_bios: The adapter_bios of this HclCompatibilityInfo.
        :type: str
        """

        self._adapter_bios = adapter_bios

    @property
    def driver_protocol(self):
        """
        Gets the driver_protocol of this HclCompatibilityInfo.
        Protocol of the driver supported  

        :return: The driver_protocol of this HclCompatibilityInfo.
        :rtype: str
        """
        return self._driver_protocol

    @driver_protocol.setter
    def driver_protocol(self, driver_protocol):
        """
        Sets the driver_protocol of this HclCompatibilityInfo.
        Protocol of the driver supported  

        :param driver_protocol: The driver_protocol of this HclCompatibilityInfo.
        :type: str
        """

        self._driver_protocol = driver_protocol

    @property
    def driver_vendor(self):
        """
        Gets the driver_vendor of this HclCompatibilityInfo.
        Vendor of the driver supported  

        :return: The driver_vendor of this HclCompatibilityInfo.
        :rtype: str
        """
        return self._driver_vendor

    @driver_vendor.setter
    def driver_vendor(self, driver_vendor):
        """
        Sets the driver_vendor of this HclCompatibilityInfo.
        Vendor of the driver supported  

        :param driver_vendor: The driver_vendor of this HclCompatibilityInfo.
        :type: str
        """

        self._driver_vendor = driver_vendor

    @property
    def driver_version(self):
        """
        Gets the driver_version of this HclCompatibilityInfo.
        Version of the driver supported  

        :return: The driver_version of this HclCompatibilityInfo.
        :rtype: str
        """
        return self._driver_version

    @driver_version.setter
    def driver_version(self, driver_version):
        """
        Sets the driver_version of this HclCompatibilityInfo.
        Version of the driver supported  

        :param driver_version: The driver_version of this HclCompatibilityInfo.
        :type: str
        """

        self._driver_version = driver_version

    @property
    def firmware(self):
        """
        Gets the firmware of this HclCompatibilityInfo.
        firmware version of the product/adapter supported   

        :return: The firmware of this HclCompatibilityInfo.
        :rtype: str
        """
        return self._firmware

    @firmware.setter
    def firmware(self, firmware):
        """
        Sets the firmware of this HclCompatibilityInfo.
        firmware version of the product/adapter supported   

        :param firmware: The firmware of this HclCompatibilityInfo.
        :type: str
        """

        self._firmware = firmware

    @property
    def notes(self):
        """
        Gets the notes of this HclCompatibilityInfo.
        a relation to the notes collection 

        :return: The notes of this HclCompatibilityInfo.
        :rtype: list[HclNoteRef]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """
        Sets the notes of this HclCompatibilityInfo.
        a relation to the notes collection 

        :param notes: The notes of this HclCompatibilityInfo.
        :type: list[HclNoteRef]
        """

        self._notes = notes

    @property
    def os_vendor(self):
        """
        Gets the os_vendor of this HclCompatibilityInfo.
        Vendor of the OS  

        :return: The os_vendor of this HclCompatibilityInfo.
        :rtype: str
        """
        return self._os_vendor

    @os_vendor.setter
    def os_vendor(self, os_vendor):
        """
        Sets the os_vendor of this HclCompatibilityInfo.
        Vendor of the OS  

        :param os_vendor: The os_vendor of this HclCompatibilityInfo.
        :type: str
        """

        self._os_vendor = os_vendor

    @property
    def os_version(self):
        """
        Gets the os_version of this HclCompatibilityInfo.
        Version of the OS  

        :return: The os_version of this HclCompatibilityInfo.
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """
        Sets the os_version of this HclCompatibilityInfo.
        Version of the OS  

        :param os_version: The os_version of this HclCompatibilityInfo.
        :type: str
        """

        self._os_version = os_version

    @property
    def processor_name(self):
        """
        Gets the processor_name of this HclCompatibilityInfo.
        Name of the processor  

        :return: The processor_name of this HclCompatibilityInfo.
        :rtype: str
        """
        return self._processor_name

    @processor_name.setter
    def processor_name(self, processor_name):
        """
        Sets the processor_name of this HclCompatibilityInfo.
        Name of the processor  

        :param processor_name: The processor_name of this HclCompatibilityInfo.
        :type: str
        """

        self._processor_name = processor_name

    @property
    def product_id(self):
        """
        Gets the product_id of this HclCompatibilityInfo.
        PID of the product/adapter  

        :return: The product_id of this HclCompatibilityInfo.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this HclCompatibilityInfo.
        PID of the product/adapter  

        :param product_id: The product_id of this HclCompatibilityInfo.
        :type: str
        """

        self._product_id = product_id

    @property
    def product_model(self):
        """
        Gets the product_model of this HclCompatibilityInfo.
        Model of the product/adapter  

        :return: The product_model of this HclCompatibilityInfo.
        :rtype: str
        """
        return self._product_model

    @product_model.setter
    def product_model(self, product_model):
        """
        Sets the product_model of this HclCompatibilityInfo.
        Model of the product/adapter  

        :param product_model: The product_model of this HclCompatibilityInfo.
        :type: str
        """

        self._product_model = product_model

    @property
    def server_model(self):
        """
        Gets the server_model of this HclCompatibilityInfo.
        Server Model  

        :return: The server_model of this HclCompatibilityInfo.
        :rtype: str
        """
        return self._server_model

    @server_model.setter
    def server_model(self, server_model):
        """
        Sets the server_model of this HclCompatibilityInfo.
        Server Model  

        :param server_model: The server_model of this HclCompatibilityInfo.
        :type: str
        """

        self._server_model = server_model

    @property
    def server_pid(self):
        """
        Gets the server_pid of this HclCompatibilityInfo.
        Server PID  

        :return: The server_pid of this HclCompatibilityInfo.
        :rtype: str
        """
        return self._server_pid

    @server_pid.setter
    def server_pid(self, server_pid):
        """
        Sets the server_pid of this HclCompatibilityInfo.
        Server PID  

        :param server_pid: The server_pid of this HclCompatibilityInfo.
        :type: str
        """

        self._server_pid = server_pid

    @property
    def ucs_version(self):
        """
        Gets the ucs_version of this HclCompatibilityInfo.
        ucs version  

        :return: The ucs_version of this HclCompatibilityInfo.
        :rtype: str
        """
        return self._ucs_version

    @ucs_version.setter
    def ucs_version(self, ucs_version):
        """
        Sets the ucs_version of this HclCompatibilityInfo.
        ucs version  

        :param ucs_version: The ucs_version of this HclCompatibilityInfo.
        :type: str
        """

        self._ucs_version = ucs_version

    @property
    def version_type(self):
        """
        Gets the version_type of this HclCompatibilityInfo.
        Type of the UCS version indicating whether it is a UCSM release vesion or a IMC release   

        :return: The version_type of this HclCompatibilityInfo.
        :rtype: str
        """
        return self._version_type

    @version_type.setter
    def version_type(self, version_type):
        """
        Sets the version_type of this HclCompatibilityInfo.
        Type of the UCS version indicating whether it is a UCSM release vesion or a IMC release   

        :param version_type: The version_type of this HclCompatibilityInfo.
        :type: str
        """

        self._version_type = version_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HclCompatibilityInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
