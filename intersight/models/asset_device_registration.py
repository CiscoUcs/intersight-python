# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class AssetDeviceRegistration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_key_id': 'str',
        'claimed_by_user_name': 'str',
        'claimed_time': 'datetime',
        'device_hostname': 'list[str]',
        'device_ip_address': 'list[str]',
        'execution_mode': 'str',
        'parent_signature': 'AssetParentConnectionSignature',
        'pid': 'list[str]',
        'platform_type': 'str',
        'public_access_key': 'str',
        'read_only': 'bool',
        'serial': 'list[str]',
        'vendor': 'str',
        'account': 'IamAccount',
        'claimed_by_user': 'IamUser',
        'cluster_members': 'list[AssetClusterMember]',
        'device_claim': 'AssetDeviceClaim',
        'device_configuration': 'AssetDeviceConfiguration',
        'domain_group': 'IamDomainGroup',
        'parent_connection': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'access_key_id': 'AccessKeyId',
        'claimed_by_user_name': 'ClaimedByUserName',
        'claimed_time': 'ClaimedTime',
        'device_hostname': 'DeviceHostname',
        'device_ip_address': 'DeviceIpAddress',
        'execution_mode': 'ExecutionMode',
        'parent_signature': 'ParentSignature',
        'pid': 'Pid',
        'platform_type': 'PlatformType',
        'public_access_key': 'PublicAccessKey',
        'read_only': 'ReadOnly',
        'serial': 'Serial',
        'vendor': 'Vendor',
        'account': 'Account',
        'claimed_by_user': 'ClaimedByUser',
        'cluster_members': 'ClusterMembers',
        'device_claim': 'DeviceClaim',
        'device_configuration': 'DeviceConfiguration',
        'domain_group': 'DomainGroup',
        'parent_connection': 'ParentConnection'
    }

    def __init__(self,
                 access_key_id=None,
                 claimed_by_user_name=None,
                 claimed_time=None,
                 device_hostname=None,
                 device_ip_address=None,
                 execution_mode='',
                 parent_signature=None,
                 pid=None,
                 platform_type='',
                 public_access_key=None,
                 read_only=None,
                 serial=None,
                 vendor=None,
                 account=None,
                 claimed_by_user=None,
                 cluster_members=None,
                 device_claim=None,
                 device_configuration=None,
                 domain_group=None,
                 parent_connection=None,
                 local_vars_configuration=None):  # noqa: E501
        """AssetDeviceRegistration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_key_id = None
        self._claimed_by_user_name = None
        self._claimed_time = None
        self._device_hostname = None
        self._device_ip_address = None
        self._execution_mode = None
        self._parent_signature = None
        self._pid = None
        self._platform_type = None
        self._public_access_key = None
        self._read_only = None
        self._serial = None
        self._vendor = None
        self._account = None
        self._claimed_by_user = None
        self._cluster_members = None
        self._device_claim = None
        self._device_configuration = None
        self._domain_group = None
        self._parent_connection = None
        self.discriminator = None

        if access_key_id is not None:
            self.access_key_id = access_key_id
        if claimed_by_user_name is not None:
            self.claimed_by_user_name = claimed_by_user_name
        if claimed_time is not None:
            self.claimed_time = claimed_time
        if device_hostname is not None:
            self.device_hostname = device_hostname
        if device_ip_address is not None:
            self.device_ip_address = device_ip_address
        if execution_mode is not None:
            self.execution_mode = execution_mode
        if parent_signature is not None:
            self.parent_signature = parent_signature
        if pid is not None:
            self.pid = pid
        if platform_type is not None:
            self.platform_type = platform_type
        if public_access_key is not None:
            self.public_access_key = public_access_key
        if read_only is not None:
            self.read_only = read_only
        if serial is not None:
            self.serial = serial
        if vendor is not None:
            self.vendor = vendor
        if account is not None:
            self.account = account
        if claimed_by_user is not None:
            self.claimed_by_user = claimed_by_user
        if cluster_members is not None:
            self.cluster_members = cluster_members
        if device_claim is not None:
            self.device_claim = device_claim
        if device_configuration is not None:
            self.device_configuration = device_configuration
        if domain_group is not None:
            self.domain_group = domain_group
        if parent_connection is not None:
            self.parent_connection = parent_connection

    @property
    def access_key_id(self):
        """Gets the access_key_id of this AssetDeviceRegistration.  # noqa: E501

        An identifier for the credential used by the device connector to authenticate with the Intersight web socket gateway.    # noqa: E501

        :return: The access_key_id of this AssetDeviceRegistration.  # noqa: E501
        :rtype: str
        """
        return self._access_key_id

    @access_key_id.setter
    def access_key_id(self, access_key_id):
        """Sets the access_key_id of this AssetDeviceRegistration.

        An identifier for the credential used by the device connector to authenticate with the Intersight web socket gateway.    # noqa: E501

        :param access_key_id: The access_key_id of this AssetDeviceRegistration.  # noqa: E501
        :type: str
        """

        self._access_key_id = access_key_id

    @property
    def claimed_by_user_name(self):
        """Gets the claimed_by_user_name of this AssetDeviceRegistration.  # noqa: E501

        The name of the user who claimed the device for the account.    # noqa: E501

        :return: The claimed_by_user_name of this AssetDeviceRegistration.  # noqa: E501
        :rtype: str
        """
        return self._claimed_by_user_name

    @claimed_by_user_name.setter
    def claimed_by_user_name(self, claimed_by_user_name):
        """Sets the claimed_by_user_name of this AssetDeviceRegistration.

        The name of the user who claimed the device for the account.    # noqa: E501

        :param claimed_by_user_name: The claimed_by_user_name of this AssetDeviceRegistration.  # noqa: E501
        :type: str
        """

        self._claimed_by_user_name = claimed_by_user_name

    @property
    def claimed_time(self):
        """Gets the claimed_time of this AssetDeviceRegistration.  # noqa: E501

        The date and time at which the device was claimed to this account.    # noqa: E501

        :return: The claimed_time of this AssetDeviceRegistration.  # noqa: E501
        :rtype: datetime
        """
        return self._claimed_time

    @claimed_time.setter
    def claimed_time(self, claimed_time):
        """Sets the claimed_time of this AssetDeviceRegistration.

        The date and time at which the device was claimed to this account.    # noqa: E501

        :param claimed_time: The claimed_time of this AssetDeviceRegistration.  # noqa: E501
        :type: datetime
        """

        self._claimed_time = claimed_time

    @property
    def device_hostname(self):
        """Gets the device_hostname of this AssetDeviceRegistration.  # noqa: E501


        :return: The device_hostname of this AssetDeviceRegistration.  # noqa: E501
        :rtype: list[str]
        """
        return self._device_hostname

    @device_hostname.setter
    def device_hostname(self, device_hostname):
        """Sets the device_hostname of this AssetDeviceRegistration.


        :param device_hostname: The device_hostname of this AssetDeviceRegistration.  # noqa: E501
        :type: list[str]
        """

        self._device_hostname = device_hostname

    @property
    def device_ip_address(self):
        """Gets the device_ip_address of this AssetDeviceRegistration.  # noqa: E501


        :return: The device_ip_address of this AssetDeviceRegistration.  # noqa: E501
        :rtype: list[str]
        """
        return self._device_ip_address

    @device_ip_address.setter
    def device_ip_address(self, device_ip_address):
        """Sets the device_ip_address of this AssetDeviceRegistration.


        :param device_ip_address: The device_ip_address of this AssetDeviceRegistration.  # noqa: E501
        :type: list[str]
        """

        self._device_ip_address = device_ip_address

    @property
    def execution_mode(self):
        """Gets the execution_mode of this AssetDeviceRegistration.  # noqa: E501

        Indicates if the platform is an actual device or an emulated device for testing, demos, etc. Permitted values are [Normal, Emulator, ContainerEmulator].    # noqa: E501

        :return: The execution_mode of this AssetDeviceRegistration.  # noqa: E501
        :rtype: str
        """
        return self._execution_mode

    @execution_mode.setter
    def execution_mode(self, execution_mode):
        """Sets the execution_mode of this AssetDeviceRegistration.

        Indicates if the platform is an actual device or an emulated device for testing, demos, etc. Permitted values are [Normal, Emulator, ContainerEmulator].    # noqa: E501

        :param execution_mode: The execution_mode of this AssetDeviceRegistration.  # noqa: E501
        :type: str
        """
        allowed_values = ["", "Normal", "Emulator",
                          "ContainerEmulator"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and execution_mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `execution_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(execution_mode, allowed_values))

        self._execution_mode = execution_mode

    @property
    def parent_signature(self):
        """Gets the parent_signature of this AssetDeviceRegistration.  # noqa: E501


        :return: The parent_signature of this AssetDeviceRegistration.  # noqa: E501
        :rtype: AssetParentConnectionSignature
        """
        return self._parent_signature

    @parent_signature.setter
    def parent_signature(self, parent_signature):
        """Sets the parent_signature of this AssetDeviceRegistration.


        :param parent_signature: The parent_signature of this AssetDeviceRegistration.  # noqa: E501
        :type: AssetParentConnectionSignature
        """

        self._parent_signature = parent_signature

    @property
    def pid(self):
        """Gets the pid of this AssetDeviceRegistration.  # noqa: E501


        :return: The pid of this AssetDeviceRegistration.  # noqa: E501
        :rtype: list[str]
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this AssetDeviceRegistration.


        :param pid: The pid of this AssetDeviceRegistration.  # noqa: E501
        :type: list[str]
        """

        self._pid = pid

    @property
    def platform_type(self):
        """Gets the platform_type of this AssetDeviceRegistration.  # noqa: E501

        The platform type on which device connector is executing.    # noqa: E501

        :return: The platform_type of this AssetDeviceRegistration.  # noqa: E501
        :rtype: str
        """
        return self._platform_type

    @platform_type.setter
    def platform_type(self, platform_type):
        """Sets the platform_type of this AssetDeviceRegistration.

        The platform type on which device connector is executing.    # noqa: E501

        :param platform_type: The platform_type of this AssetDeviceRegistration.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "", "APIC", "DCNM", "UCSFI", "IMC", "IMCM4", "IMCM5", "HX",
            "HXTriton", "UCSD", "IntersightAppliance", "PureStorage", "VMware",
            "ServiceEngine"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and platform_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `platform_type` ({0}), must be one of {1}"  # noqa: E501
                .format(platform_type, allowed_values))

        self._platform_type = platform_type

    @property
    def public_access_key(self):
        """Gets the public_access_key of this AssetDeviceRegistration.  # noqa: E501

        The device connector's public key used by the cloud to authenticate a connection from the device connector. The public key is used to verify that the signature a device connector sends on connect has been signed by the connector's private key stored on the device's filesystem. Must be a PEM encoded RSA public key string.     # noqa: E501

        :return: The public_access_key of this AssetDeviceRegistration.  # noqa: E501
        :rtype: str
        """
        return self._public_access_key

    @public_access_key.setter
    def public_access_key(self, public_access_key):
        """Sets the public_access_key of this AssetDeviceRegistration.

        The device connector's public key used by the cloud to authenticate a connection from the device connector. The public key is used to verify that the signature a device connector sends on connect has been signed by the connector's private key stored on the device's filesystem. Must be a PEM encoded RSA public key string.     # noqa: E501

        :param public_access_key: The public_access_key of this AssetDeviceRegistration.  # noqa: E501
        :type: str
        """

        self._public_access_key = public_access_key

    @property
    def read_only(self):
        """Gets the read_only of this AssetDeviceRegistration.  # noqa: E501

        Flag reported by devices to indicate an administrator of the device has disabled management operations of the device connector and only monitoring is permitted.    # noqa: E501

        :return: The read_only of this AssetDeviceRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this AssetDeviceRegistration.

        Flag reported by devices to indicate an administrator of the device has disabled management operations of the device connector and only monitoring is permitted.    # noqa: E501

        :param read_only: The read_only of this AssetDeviceRegistration.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def serial(self):
        """Gets the serial of this AssetDeviceRegistration.  # noqa: E501


        :return: The serial of this AssetDeviceRegistration.  # noqa: E501
        :rtype: list[str]
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this AssetDeviceRegistration.


        :param serial: The serial of this AssetDeviceRegistration.  # noqa: E501
        :type: list[str]
        """

        self._serial = serial

    @property
    def vendor(self):
        """Gets the vendor of this AssetDeviceRegistration.  # noqa: E501

        The vendor of the managed device.     # noqa: E501

        :return: The vendor of this AssetDeviceRegistration.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this AssetDeviceRegistration.

        The vendor of the managed device.     # noqa: E501

        :param vendor: The vendor of this AssetDeviceRegistration.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def account(self):
        """Gets the account of this AssetDeviceRegistration.  # noqa: E501


        :return: The account of this AssetDeviceRegistration.  # noqa: E501
        :rtype: IamAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AssetDeviceRegistration.


        :param account: The account of this AssetDeviceRegistration.  # noqa: E501
        :type: IamAccount
        """

        self._account = account

    @property
    def claimed_by_user(self):
        """Gets the claimed_by_user of this AssetDeviceRegistration.  # noqa: E501


        :return: The claimed_by_user of this AssetDeviceRegistration.  # noqa: E501
        :rtype: IamUser
        """
        return self._claimed_by_user

    @claimed_by_user.setter
    def claimed_by_user(self, claimed_by_user):
        """Sets the claimed_by_user of this AssetDeviceRegistration.


        :param claimed_by_user: The claimed_by_user of this AssetDeviceRegistration.  # noqa: E501
        :type: IamUser
        """

        self._claimed_by_user = claimed_by_user

    @property
    def cluster_members(self):
        """Gets the cluster_members of this AssetDeviceRegistration.  # noqa: E501

        A reference to a assetClusterMember resource. When the $expand query parameter is specified, the referenced resource is returned inline. The set of nodes within the devices cluster.   # noqa: E501

        :return: The cluster_members of this AssetDeviceRegistration.  # noqa: E501
        :rtype: list[AssetClusterMember]
        """
        return self._cluster_members

    @cluster_members.setter
    def cluster_members(self, cluster_members):
        """Sets the cluster_members of this AssetDeviceRegistration.

        A reference to a assetClusterMember resource. When the $expand query parameter is specified, the referenced resource is returned inline. The set of nodes within the devices cluster.   # noqa: E501

        :param cluster_members: The cluster_members of this AssetDeviceRegistration.  # noqa: E501
        :type: list[AssetClusterMember]
        """

        self._cluster_members = cluster_members

    @property
    def device_claim(self):
        """Gets the device_claim of this AssetDeviceRegistration.  # noqa: E501


        :return: The device_claim of this AssetDeviceRegistration.  # noqa: E501
        :rtype: AssetDeviceClaim
        """
        return self._device_claim

    @device_claim.setter
    def device_claim(self, device_claim):
        """Sets the device_claim of this AssetDeviceRegistration.


        :param device_claim: The device_claim of this AssetDeviceRegistration.  # noqa: E501
        :type: AssetDeviceClaim
        """

        self._device_claim = device_claim

    @property
    def device_configuration(self):
        """Gets the device_configuration of this AssetDeviceRegistration.  # noqa: E501


        :return: The device_configuration of this AssetDeviceRegistration.  # noqa: E501
        :rtype: AssetDeviceConfiguration
        """
        return self._device_configuration

    @device_configuration.setter
    def device_configuration(self, device_configuration):
        """Sets the device_configuration of this AssetDeviceRegistration.


        :param device_configuration: The device_configuration of this AssetDeviceRegistration.  # noqa: E501
        :type: AssetDeviceConfiguration
        """

        self._device_configuration = device_configuration

    @property
    def domain_group(self):
        """Gets the domain_group of this AssetDeviceRegistration.  # noqa: E501


        :return: The domain_group of this AssetDeviceRegistration.  # noqa: E501
        :rtype: IamDomainGroup
        """
        return self._domain_group

    @domain_group.setter
    def domain_group(self, domain_group):
        """Sets the domain_group of this AssetDeviceRegistration.


        :param domain_group: The domain_group of this AssetDeviceRegistration.  # noqa: E501
        :type: IamDomainGroup
        """

        self._domain_group = domain_group

    @property
    def parent_connection(self):
        """Gets the parent_connection of this AssetDeviceRegistration.  # noqa: E501


        :return: The parent_connection of this AssetDeviceRegistration.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._parent_connection

    @parent_connection.setter
    def parent_connection(self, parent_connection):
        """Sets the parent_connection of this AssetDeviceRegistration.


        :param parent_connection: The parent_connection of this AssetDeviceRegistration.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._parent_connection = parent_connection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetDeviceRegistration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetDeviceRegistration):
            return True

        return self.to_dict() != other.to_dict()
