# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StorageArrayDisk(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'part_number': 'str',
        'protocol': 'str',
        'speed': 'int',
        'status': 'str',
        'storage_utilization': 'StorageCapacity',
        'type': 'str',
        'version': 'str',
        'storage_array': 'StorageGenericArray'
    }

    attribute_map = {
        'name': 'Name',
        'part_number': 'PartNumber',
        'protocol': 'Protocol',
        'speed': 'Speed',
        'status': 'Status',
        'storage_utilization': 'StorageUtilization',
        'type': 'Type',
        'version': 'Version',
        'storage_array': 'StorageArray'
    }

    def __init__(self,
                 name=None,
                 part_number=None,
                 protocol='Unknown',
                 speed=None,
                 status='Unknown',
                 storage_utilization=None,
                 type='Unknown',
                 version=None,
                 storage_array=None,
                 local_vars_configuration=None):  # noqa: E501
        """StorageArrayDisk - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._part_number = None
        self._protocol = None
        self._speed = None
        self._status = None
        self._storage_utilization = None
        self._type = None
        self._version = None
        self._storage_array = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if part_number is not None:
            self.part_number = part_number
        if protocol is not None:
            self.protocol = protocol
        if speed is not None:
            self.speed = speed
        if status is not None:
            self.status = status
        if storage_utilization is not None:
            self.storage_utilization = storage_utilization
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version
        if storage_array is not None:
            self.storage_array = storage_array

    @property
    def name(self):
        """Gets the name of this StorageArrayDisk.  # noqa: E501

        Disk name available in storage array.    # noqa: E501

        :return: The name of this StorageArrayDisk.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageArrayDisk.

        Disk name available in storage array.    # noqa: E501

        :param name: The name of this StorageArrayDisk.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def part_number(self):
        """Gets the part_number of this StorageArrayDisk.  # noqa: E501

        Storage disk part number.    # noqa: E501

        :return: The part_number of this StorageArrayDisk.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this StorageArrayDisk.

        Storage disk part number.    # noqa: E501

        :param part_number: The part_number of this StorageArrayDisk.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def protocol(self):
        """Gets the protocol of this StorageArrayDisk.  # noqa: E501

        Storage protocol used in disk for communication. Possible values are SAS, SATA and NVMe.    # noqa: E501

        :return: The protocol of this StorageArrayDisk.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this StorageArrayDisk.

        Storage protocol used in disk for communication. Possible values are SAS, SATA and NVMe.    # noqa: E501

        :param protocol: The protocol of this StorageArrayDisk.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "SAS", "NVMe", "SATA"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and protocol not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values))

        self._protocol = protocol

    @property
    def speed(self):
        """Gets the speed of this StorageArrayDisk.  # noqa: E501

        Disk speed for read or write operation measured in rpm.    # noqa: E501

        :return: The speed of this StorageArrayDisk.  # noqa: E501
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this StorageArrayDisk.

        Disk speed for read or write operation measured in rpm.    # noqa: E501

        :param speed: The speed of this StorageArrayDisk.  # noqa: E501
        :type: int
        """

        self._speed = speed

    @property
    def status(self):
        """Gets the status of this StorageArrayDisk.  # noqa: E501

        Storage disk health status.    # noqa: E501

        :return: The status of this StorageArrayDisk.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StorageArrayDisk.

        Storage disk health status.    # noqa: E501

        :param status: The status of this StorageArrayDisk.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "Unknown", "Ok", "Degraded", "Critical", "Offline", "Identifying",
            "NotAvailable", "Updating", "Unrecognized"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values))

        self._status = status

    @property
    def storage_utilization(self):
        """Gets the storage_utilization of this StorageArrayDisk.  # noqa: E501


        :return: The storage_utilization of this StorageArrayDisk.  # noqa: E501
        :rtype: StorageCapacity
        """
        return self._storage_utilization

    @storage_utilization.setter
    def storage_utilization(self, storage_utilization):
        """Sets the storage_utilization of this StorageArrayDisk.


        :param storage_utilization: The storage_utilization of this StorageArrayDisk.  # noqa: E501
        :type: StorageCapacity
        """

        self._storage_utilization = storage_utilization

    @property
    def type(self):
        """Gets the type of this StorageArrayDisk.  # noqa: E501

        Storage disk type, it can be SSD, HDD, NVRAM.    # noqa: E501

        :return: The type of this StorageArrayDisk.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StorageArrayDisk.

        Storage disk type, it can be SSD, HDD, NVRAM.    # noqa: E501

        :param type: The type of this StorageArrayDisk.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "SSD", "HDD", "NVRAM"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values))

        self._type = type

    @property
    def version(self):
        """Gets the version of this StorageArrayDisk.  # noqa: E501

        Storage disk version number.     # noqa: E501

        :return: The version of this StorageArrayDisk.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this StorageArrayDisk.

        Storage disk version number.     # noqa: E501

        :param version: The version of this StorageArrayDisk.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def storage_array(self):
        """Gets the storage_array of this StorageArrayDisk.  # noqa: E501


        :return: The storage_array of this StorageArrayDisk.  # noqa: E501
        :rtype: StorageGenericArray
        """
        return self._storage_array

    @storage_array.setter
    def storage_array(self, storage_array):
        """Sets the storage_array of this StorageArrayDisk.


        :param storage_array: The storage_array of this StorageArrayDisk.  # noqa: E501
        :type: StorageGenericArray
        """

        self._storage_array = storage_array

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageArrayDisk):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageArrayDisk):
            return True

        return self.to_dict() != other.to_dict()
