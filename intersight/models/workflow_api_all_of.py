# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class WorkflowApiAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'body': 'str',
        'content_type': 'str',
        'name': 'str',
        'outcomes': 'object',
        'response_spec': 'ContentGrammar',
        'skip_on_condition': 'str',
        'timeout': 'int'
    }

    attribute_map = {
        'body': 'Body',
        'content_type': 'ContentType',
        'name': 'Name',
        'outcomes': 'Outcomes',
        'response_spec': 'ResponseSpec',
        'skip_on_condition': 'SkipOnCondition',
        'timeout': 'Timeout'
    }

    def __init__(self,
                 body=None,
                 content_type='json',
                 name=None,
                 outcomes=None,
                 response_spec=None,
                 skip_on_condition=None,
                 timeout=None,
                 local_vars_configuration=None):  # noqa: E501
        """WorkflowApiAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._body = None
        self._content_type = None
        self._name = None
        self._outcomes = None
        self._response_spec = None
        self._skip_on_condition = None
        self._timeout = None
        self.discriminator = None

        if body is not None:
            self.body = body
        if content_type is not None:
            self.content_type = content_type
        if name is not None:
            self.name = name
        if outcomes is not None:
            self.outcomes = outcomes
        if response_spec is not None:
            self.response_spec = response_spec
        if skip_on_condition is not None:
            self.skip_on_condition = skip_on_condition
        if timeout is not None:
            self.timeout = timeout

    @property
    def body(self):
        """Gets the body of this WorkflowApiAllOf.  # noqa: E501

        The optional request body that is sent as part of this API request.  The request body can contain a golang template that can be populated with task input parameters and previous API output parameters.     # noqa: E501

        :return: The body of this WorkflowApiAllOf.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this WorkflowApiAllOf.

        The optional request body that is sent as part of this API request.  The request body can contain a golang template that can be populated with task input parameters and previous API output parameters.     # noqa: E501

        :param body: The body of this WorkflowApiAllOf.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def content_type(self):
        """Gets the content_type of this WorkflowApiAllOf.  # noqa: E501

        Intersight Orchestrator, with the support of response parser specification, can extract the values from API responses and map them to task output parameters. The value extraction is supported for response content types XML and JSON.  The type of the content that gets passed as payload and response in this API.     # noqa: E501

        :return: The content_type of this WorkflowApiAllOf.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this WorkflowApiAllOf.

        Intersight Orchestrator, with the support of response parser specification, can extract the values from API responses and map them to task output parameters. The value extraction is supported for response content types XML and JSON.  The type of the content that gets passed as payload and response in this API.     # noqa: E501

        :param content_type: The content_type of this WorkflowApiAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["json", "xml", "text"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and content_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"  # noqa: E501
                .format(content_type, allowed_values))

        self._content_type = content_type

    @property
    def name(self):
        """Gets the name of this WorkflowApiAllOf.  # noqa: E501

        A reference name for this API request within the batch API request.  This name shall be used to map the API output parameters to subsequent API input parameters within a batch API task.     # noqa: E501

        :return: The name of this WorkflowApiAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowApiAllOf.

        A reference name for this API request within the batch API request.  This name shall be used to map the API output parameters to subsequent API input parameters within a batch API task.     # noqa: E501

        :param name: The name of this WorkflowApiAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def outcomes(self):
        """Gets the outcomes of this WorkflowApiAllOf.  # noqa: E501

        All the possible outcomes of this API are captured here. Outcomes property is a collection property of type workflow.Outcome objects.  The outcomes can be mapped to the message to be shown. The outcomes are evaluated in the order they are given. At the end of the outcomes list, an catchall success/fail outcome can be added with condition as 'true'.  This is an optional property and if not specified the task will be marked as success.     # noqa: E501

        :return: The outcomes of this WorkflowApiAllOf.  # noqa: E501
        :rtype: object
        """
        return self._outcomes

    @outcomes.setter
    def outcomes(self, outcomes):
        """Sets the outcomes of this WorkflowApiAllOf.

        All the possible outcomes of this API are captured here. Outcomes property is a collection property of type workflow.Outcome objects.  The outcomes can be mapped to the message to be shown. The outcomes are evaluated in the order they are given. At the end of the outcomes list, an catchall success/fail outcome can be added with condition as 'true'.  This is an optional property and if not specified the task will be marked as success.     # noqa: E501

        :param outcomes: The outcomes of this WorkflowApiAllOf.  # noqa: E501
        :type: object
        """

        self._outcomes = outcomes

    @property
    def response_spec(self):
        """Gets the response_spec of this WorkflowApiAllOf.  # noqa: E501


        :return: The response_spec of this WorkflowApiAllOf.  # noqa: E501
        :rtype: ContentGrammar
        """
        return self._response_spec

    @response_spec.setter
    def response_spec(self, response_spec):
        """Sets the response_spec of this WorkflowApiAllOf.


        :param response_spec: The response_spec of this WorkflowApiAllOf.  # noqa: E501
        :type: ContentGrammar
        """

        self._response_spec = response_spec

    @property
    def skip_on_condition(self):
        """Gets the skip_on_condition of this WorkflowApiAllOf.  # noqa: E501

        The skip expression, if provided, allows the batch API executor to skip the api execution when the given expression evaluates to true.  The expression is given as such a golang template that has to be evaluated to a final content true/false. The expression is an optional and in case not provided, the API will always be executed.     # noqa: E501

        :return: The skip_on_condition of this WorkflowApiAllOf.  # noqa: E501
        :rtype: str
        """
        return self._skip_on_condition

    @skip_on_condition.setter
    def skip_on_condition(self, skip_on_condition):
        """Sets the skip_on_condition of this WorkflowApiAllOf.

        The skip expression, if provided, allows the batch API executor to skip the api execution when the given expression evaluates to true.  The expression is given as such a golang template that has to be evaluated to a final content true/false. The expression is an optional and in case not provided, the API will always be executed.     # noqa: E501

        :param skip_on_condition: The skip_on_condition of this WorkflowApiAllOf.  # noqa: E501
        :type: str
        """

        self._skip_on_condition = skip_on_condition

    @property
    def timeout(self):
        """Gets the timeout of this WorkflowApiAllOf.  # noqa: E501

        The duration in seconds by which the API response is expected from the API target.  If the end point does not respond for the API request within this timeout duration, the task will be marked as failed.      # noqa: E501

        :return: The timeout of this WorkflowApiAllOf.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this WorkflowApiAllOf.

        The duration in seconds by which the API response is expected from the API target.  If the end point does not respond for the API request within this timeout duration, the task will be marked as failed.      # noqa: E501

        :param timeout: The timeout of this WorkflowApiAllOf.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowApiAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowApiAllOf):
            return True

        return self.to_dict() != other.to_dict()
