# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-961
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorkflowWorkflowDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'ancestors': 'list[MoBaseMoRef]',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'parent': 'MoBaseMoRef',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'catalog': 'WorkflowCatalogRef',
        'default_version': 'bool',
        'description': 'str',
        'input_definition': 'list[WorkflowBaseDataType]',
        'label': 'str',
        'name': 'str',
        'output_definition': 'list[WorkflowBaseDataType]',
        'output_parameters': 'object',
        'tasks': 'list[WorkflowWorkflowTask]',
        'ui_rendering_data': 'object',
        'validation_information': 'WorkflowValidationInformation',
        'version': 'int'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'ancestors': 'Ancestors',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'parent': 'Parent',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'catalog': 'Catalog',
        'default_version': 'DefaultVersion',
        'description': 'Description',
        'input_definition': 'InputDefinition',
        'label': 'Label',
        'name': 'Name',
        'output_definition': 'OutputDefinition',
        'output_parameters': 'OutputParameters',
        'tasks': 'Tasks',
        'ui_rendering_data': 'UiRenderingData',
        'validation_information': 'ValidationInformation',
        'version': 'Version'
    }

    def __init__(self, account_moid=None, ancestors=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, parent=None, shared_scope=None, tags=None, version_context=None, catalog=None, default_version=None, description=None, input_definition=None, label=None, name=None, output_definition=None, output_parameters=None, tasks=None, ui_rendering_data=None, validation_information=None, version=None):
        """
        WorkflowWorkflowDefinition - a model defined in Swagger
        """

        self._account_moid = None
        self._ancestors = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._parent = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._catalog = None
        self._default_version = None
        self._description = None
        self._input_definition = None
        self._label = None
        self._name = None
        self._output_definition = None
        self._output_parameters = None
        self._tasks = None
        self._ui_rendering_data = None
        self._validation_information = None
        self._version = None

        if account_moid is not None:
          self.account_moid = account_moid
        if ancestors is not None:
          self.ancestors = ancestors
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if parent is not None:
          self.parent = parent
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if catalog is not None:
          self.catalog = catalog
        if default_version is not None:
          self.default_version = default_version
        if description is not None:
          self.description = description
        if input_definition is not None:
          self.input_definition = input_definition
        if label is not None:
          self.label = label
        if name is not None:
          self.name = name
        if output_definition is not None:
          self.output_definition = output_definition
        if output_parameters is not None:
          self.output_parameters = output_parameters
        if tasks is not None:
          self.tasks = tasks
        if ui_rendering_data is not None:
          self.ui_rendering_data = ui_rendering_data
        if validation_information is not None:
          self.validation_information = validation_information
        if version is not None:
          self.version = version

    @property
    def account_moid(self):
        """
        Gets the account_moid of this WorkflowWorkflowDefinition.
        The Account ID for this managed object.  

        :return: The account_moid of this WorkflowWorkflowDefinition.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this WorkflowWorkflowDefinition.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this WorkflowWorkflowDefinition.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def ancestors(self):
        """
        Gets the ancestors of this WorkflowWorkflowDefinition.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this WorkflowWorkflowDefinition.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this WorkflowWorkflowDefinition.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this WorkflowWorkflowDefinition.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def create_time(self):
        """
        Gets the create_time of this WorkflowWorkflowDefinition.
        The time when this managed object was created.  

        :return: The create_time of this WorkflowWorkflowDefinition.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this WorkflowWorkflowDefinition.
        The time when this managed object was created.  

        :param create_time: The create_time of this WorkflowWorkflowDefinition.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this WorkflowWorkflowDefinition.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this WorkflowWorkflowDefinition.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this WorkflowWorkflowDefinition.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this WorkflowWorkflowDefinition.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this WorkflowWorkflowDefinition.
        The time when this managed object was last modified.  

        :return: The mod_time of this WorkflowWorkflowDefinition.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this WorkflowWorkflowDefinition.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this WorkflowWorkflowDefinition.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this WorkflowWorkflowDefinition.
        The unique identifier of this Managed Object instance.  

        :return: The moid of this WorkflowWorkflowDefinition.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this WorkflowWorkflowDefinition.
        The unique identifier of this Managed Object instance.  

        :param moid: The moid of this WorkflowWorkflowDefinition.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this WorkflowWorkflowDefinition.
        The fully-qualified type of this managed object, e.g. the class name.  

        :return: The object_type of this WorkflowWorkflowDefinition.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this WorkflowWorkflowDefinition.
        The fully-qualified type of this managed object, e.g. the class name.  

        :param object_type: The object_type of this WorkflowWorkflowDefinition.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this WorkflowWorkflowDefinition.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this WorkflowWorkflowDefinition.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this WorkflowWorkflowDefinition.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this WorkflowWorkflowDefinition.
        :type: list[str]
        """

        self._owners = owners

    @property
    def parent(self):
        """
        Gets the parent of this WorkflowWorkflowDefinition.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this WorkflowWorkflowDefinition.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this WorkflowWorkflowDefinition.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this WorkflowWorkflowDefinition.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this WorkflowWorkflowDefinition.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this WorkflowWorkflowDefinition.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this WorkflowWorkflowDefinition.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this WorkflowWorkflowDefinition.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this WorkflowWorkflowDefinition.
        The array of tags, which allow to add key, value meta-data to managed objects.  

        :return: The tags of this WorkflowWorkflowDefinition.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this WorkflowWorkflowDefinition.
        The array of tags, which allow to add key, value meta-data to managed objects.  

        :param tags: The tags of this WorkflowWorkflowDefinition.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this WorkflowWorkflowDefinition.
        The versioning info for this managed object.   

        :return: The version_context of this WorkflowWorkflowDefinition.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this WorkflowWorkflowDefinition.
        The versioning info for this managed object.   

        :param version_context: The version_context of this WorkflowWorkflowDefinition.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def catalog(self):
        """
        Gets the catalog of this WorkflowWorkflowDefinition.
        The catalog under which the definition is present. 

        :return: The catalog of this WorkflowWorkflowDefinition.
        :rtype: WorkflowCatalogRef
        """
        return self._catalog

    @catalog.setter
    def catalog(self, catalog):
        """
        Sets the catalog of this WorkflowWorkflowDefinition.
        The catalog under which the definition is present. 

        :param catalog: The catalog of this WorkflowWorkflowDefinition.
        :type: WorkflowCatalogRef
        """

        self._catalog = catalog

    @property
    def default_version(self):
        """
        Gets the default_version of this WorkflowWorkflowDefinition.
        When true this will be the workflow version that is used when a specific workflow definition version is not specified. The default version is used when user executes a workflow without specifying a version or when workflow is included in another workflow without a specific version. The very first workflow definition created with a name will be set as the default version, after that user can explicitly set any version of the workflow definition as the default version.  

        :return: The default_version of this WorkflowWorkflowDefinition.
        :rtype: bool
        """
        return self._default_version

    @default_version.setter
    def default_version(self, default_version):
        """
        Sets the default_version of this WorkflowWorkflowDefinition.
        When true this will be the workflow version that is used when a specific workflow definition version is not specified. The default version is used when user executes a workflow without specifying a version or when workflow is included in another workflow without a specific version. The very first workflow definition created with a name will be set as the default version, after that user can explicitly set any version of the workflow definition as the default version.  

        :param default_version: The default_version of this WorkflowWorkflowDefinition.
        :type: bool
        """

        self._default_version = default_version

    @property
    def description(self):
        """
        Gets the description of this WorkflowWorkflowDefinition.
        The description for this workflow.  

        :return: The description of this WorkflowWorkflowDefinition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this WorkflowWorkflowDefinition.
        The description for this workflow.  

        :param description: The description of this WorkflowWorkflowDefinition.
        :type: str
        """

        self._description = description

    @property
    def input_definition(self):
        """
        Gets the input_definition of this WorkflowWorkflowDefinition.
        The schema expected for input parameters for this workflow.  

        :return: The input_definition of this WorkflowWorkflowDefinition.
        :rtype: list[WorkflowBaseDataType]
        """
        return self._input_definition

    @input_definition.setter
    def input_definition(self, input_definition):
        """
        Sets the input_definition of this WorkflowWorkflowDefinition.
        The schema expected for input parameters for this workflow.  

        :param input_definition: The input_definition of this WorkflowWorkflowDefinition.
        :type: list[WorkflowBaseDataType]
        """

        self._input_definition = input_definition

    @property
    def label(self):
        """
        Gets the label of this WorkflowWorkflowDefinition.
        A user friendly short name to identify the workflow.  

        :return: The label of this WorkflowWorkflowDefinition.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this WorkflowWorkflowDefinition.
        A user friendly short name to identify the workflow.  

        :param label: The label of this WorkflowWorkflowDefinition.
        :type: str
        """

        self._label = label

    @property
    def name(self):
        """
        Gets the name of this WorkflowWorkflowDefinition.
        The name for this workflow. You can have multiple version of the workflow with the same name.  

        :return: The name of this WorkflowWorkflowDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WorkflowWorkflowDefinition.
        The name for this workflow. You can have multiple version of the workflow with the same name.  

        :param name: The name of this WorkflowWorkflowDefinition.
        :type: str
        """

        self._name = name

    @property
    def output_definition(self):
        """
        Gets the output_definition of this WorkflowWorkflowDefinition.
        The schema expected for output parameters for this workflow.  

        :return: The output_definition of this WorkflowWorkflowDefinition.
        :rtype: list[WorkflowBaseDataType]
        """
        return self._output_definition

    @output_definition.setter
    def output_definition(self, output_definition):
        """
        Sets the output_definition of this WorkflowWorkflowDefinition.
        The schema expected for output parameters for this workflow.  

        :param output_definition: The output_definition of this WorkflowWorkflowDefinition.
        :type: list[WorkflowBaseDataType]
        """

        self._output_definition = output_definition

    @property
    def output_parameters(self):
        """
        Gets the output_parameters of this WorkflowWorkflowDefinition.
        The output mappings for the workflow. The outputs for worflows will generally be task output variables that we want to export out at the end of the workflow. The format to specify the mapping is '${Source.output.JsonPath}'. 'Source' is the name of the task within the workflow. You can map any task output to a workflow output as long as the types are compatible. Following this is JSON path expression to extract JSON fragment from source's output.  

        :return: The output_parameters of this WorkflowWorkflowDefinition.
        :rtype: object
        """
        return self._output_parameters

    @output_parameters.setter
    def output_parameters(self, output_parameters):
        """
        Sets the output_parameters of this WorkflowWorkflowDefinition.
        The output mappings for the workflow. The outputs for worflows will generally be task output variables that we want to export out at the end of the workflow. The format to specify the mapping is '${Source.output.JsonPath}'. 'Source' is the name of the task within the workflow. You can map any task output to a workflow output as long as the types are compatible. Following this is JSON path expression to extract JSON fragment from source's output.  

        :param output_parameters: The output_parameters of this WorkflowWorkflowDefinition.
        :type: object
        """

        self._output_parameters = output_parameters

    @property
    def tasks(self):
        """
        Gets the tasks of this WorkflowWorkflowDefinition.
        The tasks contained inside of the workflow.  

        :return: The tasks of this WorkflowWorkflowDefinition.
        :rtype: list[WorkflowWorkflowTask]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """
        Sets the tasks of this WorkflowWorkflowDefinition.
        The tasks contained inside of the workflow.  

        :param tasks: The tasks of this WorkflowWorkflowDefinition.
        :type: list[WorkflowWorkflowTask]
        """

        self._tasks = tasks

    @property
    def ui_rendering_data(self):
        """
        Gets the ui_rendering_data of this WorkflowWorkflowDefinition.
        This will hold the data needed for workflow to be rendered in the user interface.  

        :return: The ui_rendering_data of this WorkflowWorkflowDefinition.
        :rtype: object
        """
        return self._ui_rendering_data

    @ui_rendering_data.setter
    def ui_rendering_data(self, ui_rendering_data):
        """
        Sets the ui_rendering_data of this WorkflowWorkflowDefinition.
        This will hold the data needed for workflow to be rendered in the user interface.  

        :param ui_rendering_data: The ui_rendering_data of this WorkflowWorkflowDefinition.
        :type: object
        """

        self._ui_rendering_data = ui_rendering_data

    @property
    def validation_information(self):
        """
        Gets the validation_information of this WorkflowWorkflowDefinition.
        The current validation state and associated information for this workflow.  

        :return: The validation_information of this WorkflowWorkflowDefinition.
        :rtype: WorkflowValidationInformation
        """
        return self._validation_information

    @validation_information.setter
    def validation_information(self, validation_information):
        """
        Sets the validation_information of this WorkflowWorkflowDefinition.
        The current validation state and associated information for this workflow.  

        :param validation_information: The validation_information of this WorkflowWorkflowDefinition.
        :type: WorkflowValidationInformation
        """

        self._validation_information = validation_information

    @property
    def version(self):
        """
        Gets the version of this WorkflowWorkflowDefinition.
        The version of the workflow to support multiple versions.   

        :return: The version of this WorkflowWorkflowDefinition.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this WorkflowWorkflowDefinition.
        The version of the workflow to support multiple versions.   

        :param version: The version of this WorkflowWorkflowDefinition.
        :type: int
        """

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkflowWorkflowDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
