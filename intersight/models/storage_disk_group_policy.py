# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-228
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StorageDiskGroupPolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'ancestors': 'list[MoBaseMoRef]',
        'create_time': 'datetime',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'parent': 'MoBaseMoRef',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'description': 'str',
        'name': 'str',
        'dedicated_hot_spares': 'list[StorageLocalDisk]',
        'organization': 'IamAccountRef',
        'raid_level': 'str',
        'span_groups': 'list[StorageSpanGroup]',
        'storage_policies': 'list[StorageStoragePolicyRef]',
        'use_jbods': 'bool'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'ancestors': 'Ancestors',
        'create_time': 'CreateTime',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'parent': 'Parent',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'description': 'Description',
        'name': 'Name',
        'dedicated_hot_spares': 'DedicatedHotSpares',
        'organization': 'Organization',
        'raid_level': 'RaidLevel',
        'span_groups': 'SpanGroups',
        'storage_policies': 'StoragePolicies',
        'use_jbods': 'UseJbods'
    }

    def __init__(self, account_moid=None, ancestors=None, create_time=None, mod_time=None, moid=None, object_type=None, owners=None, parent=None, tags=None, version_context=None, description=None, name=None, dedicated_hot_spares=None, organization=None, raid_level='Raid0', span_groups=None, storage_policies=None, use_jbods=None):
        """
        StorageDiskGroupPolicy - a model defined in Swagger
        """

        self._account_moid = None
        self._ancestors = None
        self._create_time = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._parent = None
        self._tags = None
        self._version_context = None
        self._description = None
        self._name = None
        self._dedicated_hot_spares = None
        self._organization = None
        self._raid_level = None
        self._span_groups = None
        self._storage_policies = None
        self._use_jbods = None

        if account_moid is not None:
          self.account_moid = account_moid
        if ancestors is not None:
          self.ancestors = ancestors
        if create_time is not None:
          self.create_time = create_time
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if parent is not None:
          self.parent = parent
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if description is not None:
          self.description = description
        if name is not None:
          self.name = name
        if dedicated_hot_spares is not None:
          self.dedicated_hot_spares = dedicated_hot_spares
        if organization is not None:
          self.organization = organization
        if raid_level is not None:
          self.raid_level = raid_level
        if span_groups is not None:
          self.span_groups = span_groups
        if storage_policies is not None:
          self.storage_policies = storage_policies
        if use_jbods is not None:
          self.use_jbods = use_jbods

    @property
    def account_moid(self):
        """
        Gets the account_moid of this StorageDiskGroupPolicy.
        The Account ID for this managed object.  

        :return: The account_moid of this StorageDiskGroupPolicy.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this StorageDiskGroupPolicy.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this StorageDiskGroupPolicy.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def ancestors(self):
        """
        Gets the ancestors of this StorageDiskGroupPolicy.
        Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this StorageDiskGroupPolicy.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this StorageDiskGroupPolicy.
        Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this StorageDiskGroupPolicy.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def create_time(self):
        """
        Gets the create_time of this StorageDiskGroupPolicy.
        The time when this managed object was created.  

        :return: The create_time of this StorageDiskGroupPolicy.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this StorageDiskGroupPolicy.
        The time when this managed object was created.  

        :param create_time: The create_time of this StorageDiskGroupPolicy.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def mod_time(self):
        """
        Gets the mod_time of this StorageDiskGroupPolicy.
        The time when this managed object was last modified.  

        :return: The mod_time of this StorageDiskGroupPolicy.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this StorageDiskGroupPolicy.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this StorageDiskGroupPolicy.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this StorageDiskGroupPolicy.
        A unique identifier of this Managed Object instance.  

        :return: The moid of this StorageDiskGroupPolicy.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this StorageDiskGroupPolicy.
        A unique identifier of this Managed Object instance.  

        :param moid: The moid of this StorageDiskGroupPolicy.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this StorageDiskGroupPolicy.
        The fully-qualified type of this managed object, e.g. the class name.  

        :return: The object_type of this StorageDiskGroupPolicy.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this StorageDiskGroupPolicy.
        The fully-qualified type of this managed object, e.g. the class name.  

        :param object_type: The object_type of this StorageDiskGroupPolicy.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this StorageDiskGroupPolicy.
        An array of owners which represent effective ownership of this object.   

        :return: The owners of this StorageDiskGroupPolicy.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this StorageDiskGroupPolicy.
        An array of owners which represent effective ownership of this object.   

        :param owners: The owners of this StorageDiskGroupPolicy.
        :type: list[str]
        """

        self._owners = owners

    @property
    def parent(self):
        """
        Gets the parent of this StorageDiskGroupPolicy.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this StorageDiskGroupPolicy.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this StorageDiskGroupPolicy.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this StorageDiskGroupPolicy.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def tags(self):
        """
        Gets the tags of this StorageDiskGroupPolicy.
        An array of tags, which allow to add key, value meta-data to managed objects.  

        :return: The tags of this StorageDiskGroupPolicy.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this StorageDiskGroupPolicy.
        An array of tags, which allow to add key, value meta-data to managed objects.  

        :param tags: The tags of this StorageDiskGroupPolicy.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this StorageDiskGroupPolicy.
        The versioning info for this managed object   

        :return: The version_context of this StorageDiskGroupPolicy.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this StorageDiskGroupPolicy.
        The versioning info for this managed object   

        :param version_context: The version_context of this StorageDiskGroupPolicy.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def description(self):
        """
        Gets the description of this StorageDiskGroupPolicy.
        Description of the policy.  

        :return: The description of this StorageDiskGroupPolicy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this StorageDiskGroupPolicy.
        Description of the policy.  

        :param description: The description of this StorageDiskGroupPolicy.
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """
        Gets the name of this StorageDiskGroupPolicy.
        Name of the policy.   

        :return: The name of this StorageDiskGroupPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this StorageDiskGroupPolicy.
        Name of the policy.   

        :param name: The name of this StorageDiskGroupPolicy.
        :type: str
        """

        self._name = name

    @property
    def dedicated_hot_spares(self):
        """
        Gets the dedicated_hot_spares of this StorageDiskGroupPolicy.
        A collection of disks used as hot spares for this RAID group   

        :return: The dedicated_hot_spares of this StorageDiskGroupPolicy.
        :rtype: list[StorageLocalDisk]
        """
        return self._dedicated_hot_spares

    @dedicated_hot_spares.setter
    def dedicated_hot_spares(self, dedicated_hot_spares):
        """
        Sets the dedicated_hot_spares of this StorageDiskGroupPolicy.
        A collection of disks used as hot spares for this RAID group   

        :param dedicated_hot_spares: The dedicated_hot_spares of this StorageDiskGroupPolicy.
        :type: list[StorageLocalDisk]
        """

        self._dedicated_hot_spares = dedicated_hot_spares

    @property
    def organization(self):
        """
        Gets the organization of this StorageDiskGroupPolicy.
        Organization 

        :return: The organization of this StorageDiskGroupPolicy.
        :rtype: IamAccountRef
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this StorageDiskGroupPolicy.
        Organization 

        :param organization: The organization of this StorageDiskGroupPolicy.
        :type: IamAccountRef
        """

        self._organization = organization

    @property
    def raid_level(self):
        """
        Gets the raid_level of this StorageDiskGroupPolicy.
        The supported RAID level for the disk group  

        :return: The raid_level of this StorageDiskGroupPolicy.
        :rtype: str
        """
        return self._raid_level

    @raid_level.setter
    def raid_level(self, raid_level):
        """
        Sets the raid_level of this StorageDiskGroupPolicy.
        The supported RAID level for the disk group  

        :param raid_level: The raid_level of this StorageDiskGroupPolicy.
        :type: str
        """
        allowed_values = ["Raid0", "Raid1", "Raid5", "Raid6", "Raid10", "Raid50", "Raid60"]
        if raid_level not in allowed_values:
            raise ValueError(
                "Invalid value for `raid_level` ({0}), must be one of {1}"
                .format(raid_level, allowed_values)
            )

        self._raid_level = raid_level

    @property
    def span_groups(self):
        """
        Gets the span_groups of this StorageDiskGroupPolicy.
        Non spanned RAID levels like Raid0, Raid1, Raid5 and Raid6 expect a single group of disks whereas spanned RAID levels need multiple groups of disks with each group representing a span group. Non spanned RAID levels expect one span group and spanned RAID levels accept minimum 2 span groups and up to 8  

        :return: The span_groups of this StorageDiskGroupPolicy.
        :rtype: list[StorageSpanGroup]
        """
        return self._span_groups

    @span_groups.setter
    def span_groups(self, span_groups):
        """
        Sets the span_groups of this StorageDiskGroupPolicy.
        Non spanned RAID levels like Raid0, Raid1, Raid5 and Raid6 expect a single group of disks whereas spanned RAID levels need multiple groups of disks with each group representing a span group. Non spanned RAID levels expect one span group and spanned RAID levels accept minimum 2 span groups and up to 8  

        :param span_groups: The span_groups of this StorageDiskGroupPolicy.
        :type: list[StorageSpanGroup]
        """

        self._span_groups = span_groups

    @property
    def storage_policies(self):
        """
        Gets the storage_policies of this StorageDiskGroupPolicy.

        :return: The storage_policies of this StorageDiskGroupPolicy.
        :rtype: list[StorageStoragePolicyRef]
        """
        return self._storage_policies

    @storage_policies.setter
    def storage_policies(self, storage_policies):
        """
        Sets the storage_policies of this StorageDiskGroupPolicy.

        :param storage_policies: The storage_policies of this StorageDiskGroupPolicy.
        :type: list[StorageStoragePolicyRef]
        """

        self._storage_policies = storage_policies

    @property
    def use_jbods(self):
        """
        Gets the use_jbods of this StorageDiskGroupPolicy.
        Selected disks in the disk group in JBOD state will be set to Unconfigured Good state before they are used in virtual drive creation   

        :return: The use_jbods of this StorageDiskGroupPolicy.
        :rtype: bool
        """
        return self._use_jbods

    @use_jbods.setter
    def use_jbods(self, use_jbods):
        """
        Sets the use_jbods of this StorageDiskGroupPolicy.
        Selected disks in the disk group in JBOD state will be set to Unconfigured Good state before they are used in virtual drive creation   

        :param use_jbods: The use_jbods of this StorageDiskGroupPolicy.
        :type: bool
        """

        self._use_jbods = use_jbods

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StorageDiskGroupPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
