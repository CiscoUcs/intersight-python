# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class OsInstallAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'configuration_file': 'OsConfigurationFile',
        'image': 'SoftwarerepositoryOperatingSystemFile',
        'organization': 'OrganizationOrganization',
        'osdu_image': 'FirmwareServerConfigurationUtilityDistributable',
        'server': 'ComputePhysical',
        'workflow_info': 'WorkflowWorkflowInfo'
    }

    attribute_map = {
        'name': 'Name',
        'configuration_file': 'ConfigurationFile',
        'image': 'Image',
        'organization': 'Organization',
        'osdu_image': 'OsduImage',
        'server': 'Server',
        'workflow_info': 'WorkflowInfo'
    }

    def __init__(self,
                 name=None,
                 configuration_file=None,
                 image=None,
                 organization=None,
                 osdu_image=None,
                 server=None,
                 workflow_info=None,
                 local_vars_configuration=None):  # noqa: E501
        """OsInstallAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._configuration_file = None
        self._image = None
        self._organization = None
        self._osdu_image = None
        self._server = None
        self._workflow_info = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if configuration_file is not None:
            self.configuration_file = configuration_file
        if image is not None:
            self.image = image
        if organization is not None:
            self.organization = organization
        if osdu_image is not None:
            self.osdu_image = osdu_image
        if server is not None:
            self.server = server
        if workflow_info is not None:
            self.workflow_info = workflow_info

    @property
    def name(self):
        """Gets the name of this OsInstallAllOf.  # noqa: E501

        The name of the OS install configuration.      # noqa: E501

        :return: The name of this OsInstallAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OsInstallAllOf.

        The name of the OS install configuration.      # noqa: E501

        :param name: The name of this OsInstallAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def configuration_file(self):
        """Gets the configuration_file of this OsInstallAllOf.  # noqa: E501


        :return: The configuration_file of this OsInstallAllOf.  # noqa: E501
        :rtype: OsConfigurationFile
        """
        return self._configuration_file

    @configuration_file.setter
    def configuration_file(self, configuration_file):
        """Sets the configuration_file of this OsInstallAllOf.


        :param configuration_file: The configuration_file of this OsInstallAllOf.  # noqa: E501
        :type: OsConfigurationFile
        """

        self._configuration_file = configuration_file

    @property
    def image(self):
        """Gets the image of this OsInstallAllOf.  # noqa: E501


        :return: The image of this OsInstallAllOf.  # noqa: E501
        :rtype: SoftwarerepositoryOperatingSystemFile
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this OsInstallAllOf.


        :param image: The image of this OsInstallAllOf.  # noqa: E501
        :type: SoftwarerepositoryOperatingSystemFile
        """

        self._image = image

    @property
    def organization(self):
        """Gets the organization of this OsInstallAllOf.  # noqa: E501


        :return: The organization of this OsInstallAllOf.  # noqa: E501
        :rtype: OrganizationOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this OsInstallAllOf.


        :param organization: The organization of this OsInstallAllOf.  # noqa: E501
        :type: OrganizationOrganization
        """

        self._organization = organization

    @property
    def osdu_image(self):
        """Gets the osdu_image of this OsInstallAllOf.  # noqa: E501


        :return: The osdu_image of this OsInstallAllOf.  # noqa: E501
        :rtype: FirmwareServerConfigurationUtilityDistributable
        """
        return self._osdu_image

    @osdu_image.setter
    def osdu_image(self, osdu_image):
        """Sets the osdu_image of this OsInstallAllOf.


        :param osdu_image: The osdu_image of this OsInstallAllOf.  # noqa: E501
        :type: FirmwareServerConfigurationUtilityDistributable
        """

        self._osdu_image = osdu_image

    @property
    def server(self):
        """Gets the server of this OsInstallAllOf.  # noqa: E501


        :return: The server of this OsInstallAllOf.  # noqa: E501
        :rtype: ComputePhysical
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this OsInstallAllOf.


        :param server: The server of this OsInstallAllOf.  # noqa: E501
        :type: ComputePhysical
        """

        self._server = server

    @property
    def workflow_info(self):
        """Gets the workflow_info of this OsInstallAllOf.  # noqa: E501


        :return: The workflow_info of this OsInstallAllOf.  # noqa: E501
        :rtype: WorkflowWorkflowInfo
        """
        return self._workflow_info

    @workflow_info.setter
    def workflow_info(self, workflow_info):
        """Sets the workflow_info of this OsInstallAllOf.


        :param workflow_info: The workflow_info of this OsInstallAllOf.  # noqa: E501
        :type: WorkflowWorkflowInfo
        """

        self._workflow_info = workflow_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OsInstallAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OsInstallAllOf):
            return True

        return self.to_dict() != other.to_dict()
