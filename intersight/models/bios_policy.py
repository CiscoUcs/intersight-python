# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1295
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BiosPolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'description': 'str',
        'name': 'str',
        'acs_control_gpu1state': 'str',
        'acs_control_gpu2state': 'str',
        'acs_control_gpu3state': 'str',
        'acs_control_gpu4state': 'str',
        'acs_control_gpu5state': 'str',
        'acs_control_gpu6state': 'str',
        'acs_control_gpu7state': 'str',
        'acs_control_gpu8state': 'str',
        'acs_control_slot11state': 'str',
        'acs_control_slot12state': 'str',
        'acs_control_slot13state': 'str',
        'acs_control_slot14state': 'str',
        'adjacent_cache_line_prefetch': 'str',
        'all_usb_devices': 'str',
        'altitude': 'str',
        'aspm_support': 'str',
        'assert_nmi_on_perr': 'str',
        'assert_nmi_on_serr': 'str',
        'auto_cc_state': 'str',
        'autonumous_cstate_enable': 'str',
        'baud_rate': 'str',
        'bme_dma_mitigation': 'str',
        'boot_option_num_retry': 'str',
        'boot_option_re_cool_down': 'str',
        'boot_option_retry': 'str',
        'boot_performance_mode': 'str',
        'cbs_cmn_cpu_cpb': 'str',
        'cbs_cmn_cpu_gen_downcore_ctrl': 'str',
        'cbs_cmn_cpu_global_cstate_ctrl': 'str',
        'cbs_cmn_cpu_l1stream_hw_prefetcher': 'str',
        'cbs_cmn_cpu_l2stream_hw_prefetcher': 'str',
        'cbs_cmn_determinism_slider': 'str',
        'cbs_cmn_gnb_nb_iommu': 'str',
        'cbs_cmn_mem_ctrl_bank_group_swap_ddr4': 'str',
        'cbs_cmn_mem_map_bank_interleave_ddr4': 'str',
        'cbs_cmnc_tdp_ctl': 'str',
        'cbs_df_cmn_mem_intlv': 'str',
        'cbs_df_cmn_mem_intlv_size': 'str',
        'cdn_enable': 'str',
        'cdn_support': 'str',
        'channel_inter_leave': 'str',
        'cisco_adaptive_mem_training': 'str',
        'cisco_debug_level': 'str',
        'cisco_oprom_launch_optimization': 'str',
        'cke_low_policy': 'str',
        'closed_loop_therm_throtl': 'str',
        'cmci_enable': 'str',
        'config_tdp': 'str',
        'console_redirection': 'str',
        'core_multi_processing': 'str',
        'cpu_energy_performance': 'str',
        'cpu_frequency_floor': 'str',
        'cpu_performance': 'str',
        'cpu_power_management': 'str',
        'dcpmm_firmware_downgrade': 'str',
        'demand_scrub': 'str',
        'direct_cache_access': 'str',
        'dram_clock_throttling': 'str',
        'dram_refresh_rate': 'str',
        'energy_efficient_turbo': 'str',
        'eng_perf_tuning': 'str',
        'enhanced_intel_speed_step_tech': 'str',
        'epp_profile': 'str',
        'execute_disable_bit': 'str',
        'extended_apic': 'str',
        'flow_control': 'str',
        'frb2enable': 'str',
        'hardware_prefetch': 'str',
        'hwpm_enable': 'str',
        'imc_interleave': 'str',
        'intel_hyper_threading_tech': 'str',
        'intel_speed_select': 'str',
        'intel_turbo_boost_tech': 'str',
        'intel_virtualization_technology': 'str',
        'intel_vt_for_directed_io': 'str',
        'intel_vtd_coherency_support': 'str',
        'intel_vtd_interrupt_remapping': 'str',
        'intel_vtd_pass_through_dma_support': 'str',
        'intel_vtdats_support': 'str',
        'ioh_error_enable': 'str',
        'ioh_resource': 'str',
        'ip_prefetch': 'str',
        'ipv6pxe': 'str',
        'kti_prefetch': 'str',
        'legacy_os_redirection': 'str',
        'legacy_usb_support': 'str',
        'llc_prefetch': 'str',
        'lom_port0state': 'str',
        'lom_port1state': 'str',
        'lom_port2state': 'str',
        'lom_port3state': 'str',
        'lom_ports_all_state': 'str',
        'lv_ddr_mode': 'str',
        'make_device_non_bootable': 'str',
        'memory_inter_leave': 'str',
        'memory_mapped_io_above4gb': 'str',
        'mirroring_mode': 'str',
        'mmcfg_base': 'str',
        'numa_optimized': 'str',
        'onboard10gbit_lom': 'str',
        'onboard_gbit_lom': 'str',
        'onboard_scu_storage_support': 'str',
        'onboard_scu_storage_sw_stack': 'str',
        'os_boot_watchdog_timer': 'str',
        'os_boot_watchdog_timer_policy': 'str',
        'os_boot_watchdog_timer_timeout': 'str',
        'out_of_band_mgmt_port': 'str',
        'package_cstate_limit': 'str',
        'patrol_scrub': 'str',
        'patrol_scrub_duration': 'str',
        'pc_ie_ssd_hot_plug_support': 'str',
        'pch_usb30mode': 'str',
        'pci_option_ro_ms': 'str',
        'pci_rom_clp': 'str',
        'pop_support': 'str',
        'post_error_pause': 'str',
        'processor_c1e': 'str',
        'processor_c3report': 'str',
        'processor_c6report': 'str',
        'processor_cstate': 'str',
        'psata': 'str',
        'pstate_coord_type': 'str',
        'putty_key_pad': 'str',
        'pwr_perf_tuning': 'str',
        'qpi_link_frequency': 'str',
        'qpi_snoop_mode': 'str',
        'rank_inter_leave': 'str',
        'redirection_after_post': 'str',
        'sata_mode_select': 'str',
        'select_memory_ras_configuration': 'str',
        'serial_port_aenable': 'str',
        'single_pctl_enable': 'str',
        'slot10link_speed': 'str',
        'slot10state': 'str',
        'slot11link_speed': 'str',
        'slot11state': 'str',
        'slot12link_speed': 'str',
        'slot12state': 'str',
        'slot13state': 'str',
        'slot14state': 'str',
        'slot1link_speed': 'str',
        'slot1state': 'str',
        'slot2link_speed': 'str',
        'slot2state': 'str',
        'slot3link_speed': 'str',
        'slot3state': 'str',
        'slot4link_speed': 'str',
        'slot4state': 'str',
        'slot5link_speed': 'str',
        'slot5state': 'str',
        'slot6link_speed': 'str',
        'slot6state': 'str',
        'slot7link_speed': 'str',
        'slot7state': 'str',
        'slot8link_speed': 'str',
        'slot8state': 'str',
        'slot9link_speed': 'str',
        'slot9state': 'str',
        'slot_flom_link_speed': 'str',
        'slot_front_nvme1link_speed': 'str',
        'slot_front_nvme2link_speed': 'str',
        'slot_front_slot5link_speed': 'str',
        'slot_front_slot6link_speed': 'str',
        'slot_gpu1state': 'str',
        'slot_gpu2state': 'str',
        'slot_gpu3state': 'str',
        'slot_gpu4state': 'str',
        'slot_gpu5state': 'str',
        'slot_gpu6state': 'str',
        'slot_gpu7state': 'str',
        'slot_gpu8state': 'str',
        'slot_hba_link_speed': 'str',
        'slot_hba_state': 'str',
        'slot_lom1link': 'str',
        'slot_lom2link': 'str',
        'slot_mezz_state': 'str',
        'slot_mlom_link_speed': 'str',
        'slot_mlom_state': 'str',
        'slot_mraid_link_speed': 'str',
        'slot_mraid_state': 'str',
        'slot_n10state': 'str',
        'slot_n11state': 'str',
        'slot_n12state': 'str',
        'slot_n13state': 'str',
        'slot_n14state': 'str',
        'slot_n15state': 'str',
        'slot_n16state': 'str',
        'slot_n17state': 'str',
        'slot_n18state': 'str',
        'slot_n19state': 'str',
        'slot_n1state': 'str',
        'slot_n20state': 'str',
        'slot_n21state': 'str',
        'slot_n22state': 'str',
        'slot_n23state': 'str',
        'slot_n24state': 'str',
        'slot_n2state': 'str',
        'slot_n3state': 'str',
        'slot_n4state': 'str',
        'slot_n5state': 'str',
        'slot_n6state': 'str',
        'slot_n7state': 'str',
        'slot_n8state': 'str',
        'slot_n9state': 'str',
        'slot_raid_link_speed': 'str',
        'slot_raid_state': 'str',
        'slot_rear_nvme1link_speed': 'str',
        'slot_rear_nvme1state': 'str',
        'slot_rear_nvme2link_speed': 'str',
        'slot_rear_nvme2state': 'str',
        'slot_rear_nvme3state': 'str',
        'slot_rear_nvme4state': 'str',
        'slot_rear_nvme5state': 'str',
        'slot_rear_nvme6state': 'str',
        'slot_rear_nvme7state': 'str',
        'slot_rear_nvme8state': 'str',
        'slot_riser1link_speed': 'str',
        'slot_riser1slot1link_speed': 'str',
        'slot_riser1slot2link_speed': 'str',
        'slot_riser1slot3link_speed': 'str',
        'slot_riser2link_speed': 'str',
        'slot_riser2slot4link_speed': 'str',
        'slot_riser2slot5link_speed': 'str',
        'slot_riser2slot6link_speed': 'str',
        'slot_sas_state': 'str',
        'slot_ssd_slot1link_speed': 'str',
        'slot_ssd_slot2link_speed': 'str',
        'smee': 'str',
        'smt_mode': 'str',
        'snc': 'str',
        'sparing_mode': 'str',
        'sr_iov': 'str',
        'streamer_prefetch': 'str',
        'svm_mode': 'str',
        'terminal_type': 'str',
        'tpm_control': 'str',
        'tpm_support': 'str',
        'txt_support': 'str',
        'ucsm_boot_order_rule': 'str',
        'usb_emul6064': 'str',
        'usb_port_front': 'str',
        'usb_port_internal': 'str',
        'usb_port_kvm': 'str',
        'usb_port_rear': 'str',
        'usb_port_sd_card': 'str',
        'usb_port_vmedia': 'str',
        'usb_xhci_support': 'str',
        'vga_priority': 'str',
        'vmd_enable': 'str',
        'work_load_config': 'str',
        'xpt_prefetch': 'str',
        'organization': 'OrganizationOrganizationRef',
        'profiles': 'list[PolicyAbstractConfigProfileRef]'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'description': 'Description',
        'name': 'Name',
        'acs_control_gpu1state': 'AcsControlGpu1state',
        'acs_control_gpu2state': 'AcsControlGpu2state',
        'acs_control_gpu3state': 'AcsControlGpu3state',
        'acs_control_gpu4state': 'AcsControlGpu4state',
        'acs_control_gpu5state': 'AcsControlGpu5state',
        'acs_control_gpu6state': 'AcsControlGpu6state',
        'acs_control_gpu7state': 'AcsControlGpu7state',
        'acs_control_gpu8state': 'AcsControlGpu8state',
        'acs_control_slot11state': 'AcsControlSlot11state',
        'acs_control_slot12state': 'AcsControlSlot12state',
        'acs_control_slot13state': 'AcsControlSlot13state',
        'acs_control_slot14state': 'AcsControlSlot14state',
        'adjacent_cache_line_prefetch': 'AdjacentCacheLinePrefetch',
        'all_usb_devices': 'AllUsbDevices',
        'altitude': 'Altitude',
        'aspm_support': 'AspmSupport',
        'assert_nmi_on_perr': 'AssertNmiOnPerr',
        'assert_nmi_on_serr': 'AssertNmiOnSerr',
        'auto_cc_state': 'AutoCcState',
        'autonumous_cstate_enable': 'AutonumousCstateEnable',
        'baud_rate': 'BaudRate',
        'bme_dma_mitigation': 'BmeDmaMitigation',
        'boot_option_num_retry': 'BootOptionNumRetry',
        'boot_option_re_cool_down': 'BootOptionReCoolDown',
        'boot_option_retry': 'BootOptionRetry',
        'boot_performance_mode': 'BootPerformanceMode',
        'cbs_cmn_cpu_cpb': 'CbsCmnCpuCpb',
        'cbs_cmn_cpu_gen_downcore_ctrl': 'CbsCmnCpuGenDowncoreCtrl',
        'cbs_cmn_cpu_global_cstate_ctrl': 'CbsCmnCpuGlobalCstateCtrl',
        'cbs_cmn_cpu_l1stream_hw_prefetcher': 'CbsCmnCpuL1streamHwPrefetcher',
        'cbs_cmn_cpu_l2stream_hw_prefetcher': 'CbsCmnCpuL2streamHwPrefetcher',
        'cbs_cmn_determinism_slider': 'CbsCmnDeterminismSlider',
        'cbs_cmn_gnb_nb_iommu': 'CbsCmnGnbNbIommu',
        'cbs_cmn_mem_ctrl_bank_group_swap_ddr4': 'CbsCmnMemCtrlBankGroupSwapDdr4',
        'cbs_cmn_mem_map_bank_interleave_ddr4': 'CbsCmnMemMapBankInterleaveDdr4',
        'cbs_cmnc_tdp_ctl': 'CbsCmncTdpCtl',
        'cbs_df_cmn_mem_intlv': 'CbsDfCmnMemIntlv',
        'cbs_df_cmn_mem_intlv_size': 'CbsDfCmnMemIntlvSize',
        'cdn_enable': 'CdnEnable',
        'cdn_support': 'CdnSupport',
        'channel_inter_leave': 'ChannelInterLeave',
        'cisco_adaptive_mem_training': 'CiscoAdaptiveMemTraining',
        'cisco_debug_level': 'CiscoDebugLevel',
        'cisco_oprom_launch_optimization': 'CiscoOpromLaunchOptimization',
        'cke_low_policy': 'CkeLowPolicy',
        'closed_loop_therm_throtl': 'ClosedLoopThermThrotl',
        'cmci_enable': 'CmciEnable',
        'config_tdp': 'ConfigTdp',
        'console_redirection': 'ConsoleRedirection',
        'core_multi_processing': 'CoreMultiProcessing',
        'cpu_energy_performance': 'CpuEnergyPerformance',
        'cpu_frequency_floor': 'CpuFrequencyFloor',
        'cpu_performance': 'CpuPerformance',
        'cpu_power_management': 'CpuPowerManagement',
        'dcpmm_firmware_downgrade': 'DcpmmFirmwareDowngrade',
        'demand_scrub': 'DemandScrub',
        'direct_cache_access': 'DirectCacheAccess',
        'dram_clock_throttling': 'DramClockThrottling',
        'dram_refresh_rate': 'DramRefreshRate',
        'energy_efficient_turbo': 'EnergyEfficientTurbo',
        'eng_perf_tuning': 'EngPerfTuning',
        'enhanced_intel_speed_step_tech': 'EnhancedIntelSpeedStepTech',
        'epp_profile': 'EppProfile',
        'execute_disable_bit': 'ExecuteDisableBit',
        'extended_apic': 'ExtendedApic',
        'flow_control': 'FlowControl',
        'frb2enable': 'Frb2enable',
        'hardware_prefetch': 'HardwarePrefetch',
        'hwpm_enable': 'HwpmEnable',
        'imc_interleave': 'ImcInterleave',
        'intel_hyper_threading_tech': 'IntelHyperThreadingTech',
        'intel_speed_select': 'IntelSpeedSelect',
        'intel_turbo_boost_tech': 'IntelTurboBoostTech',
        'intel_virtualization_technology': 'IntelVirtualizationTechnology',
        'intel_vt_for_directed_io': 'IntelVtForDirectedIo',
        'intel_vtd_coherency_support': 'IntelVtdCoherencySupport',
        'intel_vtd_interrupt_remapping': 'IntelVtdInterruptRemapping',
        'intel_vtd_pass_through_dma_support': 'IntelVtdPassThroughDmaSupport',
        'intel_vtdats_support': 'IntelVtdatsSupport',
        'ioh_error_enable': 'IohErrorEnable',
        'ioh_resource': 'IohResource',
        'ip_prefetch': 'IpPrefetch',
        'ipv6pxe': 'Ipv6pxe',
        'kti_prefetch': 'KtiPrefetch',
        'legacy_os_redirection': 'LegacyOsRedirection',
        'legacy_usb_support': 'LegacyUsbSupport',
        'llc_prefetch': 'LlcPrefetch',
        'lom_port0state': 'LomPort0state',
        'lom_port1state': 'LomPort1state',
        'lom_port2state': 'LomPort2state',
        'lom_port3state': 'LomPort3state',
        'lom_ports_all_state': 'LomPortsAllState',
        'lv_ddr_mode': 'LvDdrMode',
        'make_device_non_bootable': 'MakeDeviceNonBootable',
        'memory_inter_leave': 'MemoryInterLeave',
        'memory_mapped_io_above4gb': 'MemoryMappedIoAbove4gb',
        'mirroring_mode': 'MirroringMode',
        'mmcfg_base': 'MmcfgBase',
        'numa_optimized': 'NumaOptimized',
        'onboard10gbit_lom': 'Onboard10gbitLom',
        'onboard_gbit_lom': 'OnboardGbitLom',
        'onboard_scu_storage_support': 'OnboardScuStorageSupport',
        'onboard_scu_storage_sw_stack': 'OnboardScuStorageSwStack',
        'os_boot_watchdog_timer': 'OsBootWatchdogTimer',
        'os_boot_watchdog_timer_policy': 'OsBootWatchdogTimerPolicy',
        'os_boot_watchdog_timer_timeout': 'OsBootWatchdogTimerTimeout',
        'out_of_band_mgmt_port': 'OutOfBandMgmtPort',
        'package_cstate_limit': 'PackageCstateLimit',
        'patrol_scrub': 'PatrolScrub',
        'patrol_scrub_duration': 'PatrolScrubDuration',
        'pc_ie_ssd_hot_plug_support': 'PcIeSsdHotPlugSupport',
        'pch_usb30mode': 'PchUsb30mode',
        'pci_option_ro_ms': 'PciOptionRoMs',
        'pci_rom_clp': 'PciRomClp',
        'pop_support': 'PopSupport',
        'post_error_pause': 'PostErrorPause',
        'processor_c1e': 'ProcessorC1e',
        'processor_c3report': 'ProcessorC3report',
        'processor_c6report': 'ProcessorC6report',
        'processor_cstate': 'ProcessorCstate',
        'psata': 'Psata',
        'pstate_coord_type': 'PstateCoordType',
        'putty_key_pad': 'PuttyKeyPad',
        'pwr_perf_tuning': 'PwrPerfTuning',
        'qpi_link_frequency': 'QpiLinkFrequency',
        'qpi_snoop_mode': 'QpiSnoopMode',
        'rank_inter_leave': 'RankInterLeave',
        'redirection_after_post': 'RedirectionAfterPost',
        'sata_mode_select': 'SataModeSelect',
        'select_memory_ras_configuration': 'SelectMemoryRasConfiguration',
        'serial_port_aenable': 'SerialPortAenable',
        'single_pctl_enable': 'SinglePctlEnable',
        'slot10link_speed': 'Slot10linkSpeed',
        'slot10state': 'Slot10state',
        'slot11link_speed': 'Slot11linkSpeed',
        'slot11state': 'Slot11state',
        'slot12link_speed': 'Slot12linkSpeed',
        'slot12state': 'Slot12state',
        'slot13state': 'Slot13state',
        'slot14state': 'Slot14state',
        'slot1link_speed': 'Slot1linkSpeed',
        'slot1state': 'Slot1state',
        'slot2link_speed': 'Slot2linkSpeed',
        'slot2state': 'Slot2state',
        'slot3link_speed': 'Slot3linkSpeed',
        'slot3state': 'Slot3state',
        'slot4link_speed': 'Slot4linkSpeed',
        'slot4state': 'Slot4state',
        'slot5link_speed': 'Slot5linkSpeed',
        'slot5state': 'Slot5state',
        'slot6link_speed': 'Slot6linkSpeed',
        'slot6state': 'Slot6state',
        'slot7link_speed': 'Slot7linkSpeed',
        'slot7state': 'Slot7state',
        'slot8link_speed': 'Slot8linkSpeed',
        'slot8state': 'Slot8state',
        'slot9link_speed': 'Slot9linkSpeed',
        'slot9state': 'Slot9state',
        'slot_flom_link_speed': 'SlotFlomLinkSpeed',
        'slot_front_nvme1link_speed': 'SlotFrontNvme1linkSpeed',
        'slot_front_nvme2link_speed': 'SlotFrontNvme2linkSpeed',
        'slot_front_slot5link_speed': 'SlotFrontSlot5linkSpeed',
        'slot_front_slot6link_speed': 'SlotFrontSlot6linkSpeed',
        'slot_gpu1state': 'SlotGpu1state',
        'slot_gpu2state': 'SlotGpu2state',
        'slot_gpu3state': 'SlotGpu3state',
        'slot_gpu4state': 'SlotGpu4state',
        'slot_gpu5state': 'SlotGpu5state',
        'slot_gpu6state': 'SlotGpu6state',
        'slot_gpu7state': 'SlotGpu7state',
        'slot_gpu8state': 'SlotGpu8state',
        'slot_hba_link_speed': 'SlotHbaLinkSpeed',
        'slot_hba_state': 'SlotHbaState',
        'slot_lom1link': 'SlotLom1link',
        'slot_lom2link': 'SlotLom2link',
        'slot_mezz_state': 'SlotMezzState',
        'slot_mlom_link_speed': 'SlotMlomLinkSpeed',
        'slot_mlom_state': 'SlotMlomState',
        'slot_mraid_link_speed': 'SlotMraidLinkSpeed',
        'slot_mraid_state': 'SlotMraidState',
        'slot_n10state': 'SlotN10state',
        'slot_n11state': 'SlotN11state',
        'slot_n12state': 'SlotN12state',
        'slot_n13state': 'SlotN13state',
        'slot_n14state': 'SlotN14state',
        'slot_n15state': 'SlotN15state',
        'slot_n16state': 'SlotN16state',
        'slot_n17state': 'SlotN17state',
        'slot_n18state': 'SlotN18state',
        'slot_n19state': 'SlotN19state',
        'slot_n1state': 'SlotN1state',
        'slot_n20state': 'SlotN20state',
        'slot_n21state': 'SlotN21state',
        'slot_n22state': 'SlotN22state',
        'slot_n23state': 'SlotN23state',
        'slot_n24state': 'SlotN24state',
        'slot_n2state': 'SlotN2state',
        'slot_n3state': 'SlotN3state',
        'slot_n4state': 'SlotN4state',
        'slot_n5state': 'SlotN5state',
        'slot_n6state': 'SlotN6state',
        'slot_n7state': 'SlotN7state',
        'slot_n8state': 'SlotN8state',
        'slot_n9state': 'SlotN9state',
        'slot_raid_link_speed': 'SlotRaidLinkSpeed',
        'slot_raid_state': 'SlotRaidState',
        'slot_rear_nvme1link_speed': 'SlotRearNvme1linkSpeed',
        'slot_rear_nvme1state': 'SlotRearNvme1state',
        'slot_rear_nvme2link_speed': 'SlotRearNvme2linkSpeed',
        'slot_rear_nvme2state': 'SlotRearNvme2state',
        'slot_rear_nvme3state': 'SlotRearNvme3state',
        'slot_rear_nvme4state': 'SlotRearNvme4state',
        'slot_rear_nvme5state': 'SlotRearNvme5state',
        'slot_rear_nvme6state': 'SlotRearNvme6state',
        'slot_rear_nvme7state': 'SlotRearNvme7state',
        'slot_rear_nvme8state': 'SlotRearNvme8state',
        'slot_riser1link_speed': 'SlotRiser1linkSpeed',
        'slot_riser1slot1link_speed': 'SlotRiser1slot1linkSpeed',
        'slot_riser1slot2link_speed': 'SlotRiser1slot2linkSpeed',
        'slot_riser1slot3link_speed': 'SlotRiser1slot3linkSpeed',
        'slot_riser2link_speed': 'SlotRiser2linkSpeed',
        'slot_riser2slot4link_speed': 'SlotRiser2slot4linkSpeed',
        'slot_riser2slot5link_speed': 'SlotRiser2slot5linkSpeed',
        'slot_riser2slot6link_speed': 'SlotRiser2slot6linkSpeed',
        'slot_sas_state': 'SlotSasState',
        'slot_ssd_slot1link_speed': 'SlotSsdSlot1linkSpeed',
        'slot_ssd_slot2link_speed': 'SlotSsdSlot2linkSpeed',
        'smee': 'Smee',
        'smt_mode': 'SmtMode',
        'snc': 'Snc',
        'sparing_mode': 'SparingMode',
        'sr_iov': 'SrIov',
        'streamer_prefetch': 'StreamerPrefetch',
        'svm_mode': 'SvmMode',
        'terminal_type': 'TerminalType',
        'tpm_control': 'TpmControl',
        'tpm_support': 'TpmSupport',
        'txt_support': 'TxtSupport',
        'ucsm_boot_order_rule': 'UcsmBootOrderRule',
        'usb_emul6064': 'UsbEmul6064',
        'usb_port_front': 'UsbPortFront',
        'usb_port_internal': 'UsbPortInternal',
        'usb_port_kvm': 'UsbPortKvm',
        'usb_port_rear': 'UsbPortRear',
        'usb_port_sd_card': 'UsbPortSdCard',
        'usb_port_vmedia': 'UsbPortVmedia',
        'usb_xhci_support': 'UsbXhciSupport',
        'vga_priority': 'VgaPriority',
        'vmd_enable': 'VmdEnable',
        'work_load_config': 'WorkLoadConfig',
        'xpt_prefetch': 'XptPrefetch',
        'organization': 'Organization',
        'profiles': 'Profiles'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, description=None, name=None, acs_control_gpu1state='platform-default', acs_control_gpu2state='platform-default', acs_control_gpu3state='platform-default', acs_control_gpu4state='platform-default', acs_control_gpu5state='platform-default', acs_control_gpu6state='platform-default', acs_control_gpu7state='platform-default', acs_control_gpu8state='platform-default', acs_control_slot11state='platform-default', acs_control_slot12state='platform-default', acs_control_slot13state='platform-default', acs_control_slot14state='platform-default', adjacent_cache_line_prefetch='platform-default', all_usb_devices='platform-default', altitude='platform-default', aspm_support='platform-default', assert_nmi_on_perr='platform-default', assert_nmi_on_serr='platform-default', auto_cc_state='platform-default', autonumous_cstate_enable='platform-default', baud_rate='platform-default', bme_dma_mitigation='platform-default', boot_option_num_retry='platform-default', boot_option_re_cool_down='platform-default', boot_option_retry='platform-default', boot_performance_mode='platform-default', cbs_cmn_cpu_cpb='platform-default', cbs_cmn_cpu_gen_downcore_ctrl='platform-default', cbs_cmn_cpu_global_cstate_ctrl='platform-default', cbs_cmn_cpu_l1stream_hw_prefetcher='platform-default', cbs_cmn_cpu_l2stream_hw_prefetcher='platform-default', cbs_cmn_determinism_slider='platform-default', cbs_cmn_gnb_nb_iommu='platform-default', cbs_cmn_mem_ctrl_bank_group_swap_ddr4='platform-default', cbs_cmn_mem_map_bank_interleave_ddr4='platform-default', cbs_cmnc_tdp_ctl='platform-default', cbs_df_cmn_mem_intlv='platform-default', cbs_df_cmn_mem_intlv_size='platform-default', cdn_enable='platform-default', cdn_support='platform-default', channel_inter_leave='platform-default', cisco_adaptive_mem_training='platform-default', cisco_debug_level='platform-default', cisco_oprom_launch_optimization='platform-default', cke_low_policy='platform-default', closed_loop_therm_throtl='platform-default', cmci_enable='platform-default', config_tdp='platform-default', console_redirection='platform-default', core_multi_processing='platform-default', cpu_energy_performance='platform-default', cpu_frequency_floor='platform-default', cpu_performance='platform-default', cpu_power_management='platform-default', dcpmm_firmware_downgrade='platform-default', demand_scrub='platform-default', direct_cache_access='platform-default', dram_clock_throttling='platform-default', dram_refresh_rate='platform-default', energy_efficient_turbo='platform-default', eng_perf_tuning='platform-default', enhanced_intel_speed_step_tech='platform-default', epp_profile='platform-default', execute_disable_bit='platform-default', extended_apic='platform-default', flow_control='platform-default', frb2enable='platform-default', hardware_prefetch='platform-default', hwpm_enable='platform-default', imc_interleave='platform-default', intel_hyper_threading_tech='platform-default', intel_speed_select='platform-default', intel_turbo_boost_tech='platform-default', intel_virtualization_technology='platform-default', intel_vt_for_directed_io='platform-default', intel_vtd_coherency_support='platform-default', intel_vtd_interrupt_remapping='platform-default', intel_vtd_pass_through_dma_support='platform-default', intel_vtdats_support='platform-default', ioh_error_enable='platform-default', ioh_resource='platform-default', ip_prefetch='platform-default', ipv6pxe='platform-default', kti_prefetch='platform-default', legacy_os_redirection='platform-default', legacy_usb_support='platform-default', llc_prefetch='platform-default', lom_port0state='platform-default', lom_port1state='platform-default', lom_port2state='platform-default', lom_port3state='platform-default', lom_ports_all_state='platform-default', lv_ddr_mode='platform-default', make_device_non_bootable='platform-default', memory_inter_leave='platform-default', memory_mapped_io_above4gb='platform-default', mirroring_mode='platform-default', mmcfg_base='platform-default', numa_optimized='platform-default', onboard10gbit_lom='platform-default', onboard_gbit_lom='platform-default', onboard_scu_storage_support='platform-default', onboard_scu_storage_sw_stack='platform-default', os_boot_watchdog_timer='platform-default', os_boot_watchdog_timer_policy='platform-default', os_boot_watchdog_timer_timeout='platform-default', out_of_band_mgmt_port='platform-default', package_cstate_limit='platform-default', patrol_scrub='platform-default', patrol_scrub_duration='platform-default', pc_ie_ssd_hot_plug_support='platform-default', pch_usb30mode='platform-default', pci_option_ro_ms='platform-default', pci_rom_clp='platform-default', pop_support='platform-default', post_error_pause='platform-default', processor_c1e='platform-default', processor_c3report='platform-default', processor_c6report='platform-default', processor_cstate='platform-default', psata='platform-default', pstate_coord_type='platform-default', putty_key_pad='platform-default', pwr_perf_tuning='platform-default', qpi_link_frequency='platform-default', qpi_snoop_mode='platform-default', rank_inter_leave='platform-default', redirection_after_post='platform-default', sata_mode_select='platform-default', select_memory_ras_configuration='platform-default', serial_port_aenable='platform-default', single_pctl_enable='platform-default', slot10link_speed='platform-default', slot10state='platform-default', slot11link_speed='platform-default', slot11state='platform-default', slot12link_speed='platform-default', slot12state='platform-default', slot13state='platform-default', slot14state='platform-default', slot1link_speed='platform-default', slot1state='platform-default', slot2link_speed='platform-default', slot2state='platform-default', slot3link_speed='platform-default', slot3state='platform-default', slot4link_speed='platform-default', slot4state='platform-default', slot5link_speed='platform-default', slot5state='platform-default', slot6link_speed='platform-default', slot6state='platform-default', slot7link_speed='platform-default', slot7state='platform-default', slot8link_speed='platform-default', slot8state='platform-default', slot9link_speed='platform-default', slot9state='platform-default', slot_flom_link_speed='platform-default', slot_front_nvme1link_speed='platform-default', slot_front_nvme2link_speed='platform-default', slot_front_slot5link_speed='platform-default', slot_front_slot6link_speed='platform-default', slot_gpu1state='platform-default', slot_gpu2state='platform-default', slot_gpu3state='platform-default', slot_gpu4state='platform-default', slot_gpu5state='platform-default', slot_gpu6state='platform-default', slot_gpu7state='platform-default', slot_gpu8state='platform-default', slot_hba_link_speed='platform-default', slot_hba_state='platform-default', slot_lom1link='platform-default', slot_lom2link='platform-default', slot_mezz_state='platform-default', slot_mlom_link_speed='platform-default', slot_mlom_state='platform-default', slot_mraid_link_speed='platform-default', slot_mraid_state='platform-default', slot_n10state='platform-default', slot_n11state='platform-default', slot_n12state='platform-default', slot_n13state='platform-default', slot_n14state='platform-default', slot_n15state='platform-default', slot_n16state='platform-default', slot_n17state='platform-default', slot_n18state='platform-default', slot_n19state='platform-default', slot_n1state='platform-default', slot_n20state='platform-default', slot_n21state='platform-default', slot_n22state='platform-default', slot_n23state='platform-default', slot_n24state='platform-default', slot_n2state='platform-default', slot_n3state='platform-default', slot_n4state='platform-default', slot_n5state='platform-default', slot_n6state='platform-default', slot_n7state='platform-default', slot_n8state='platform-default', slot_n9state='platform-default', slot_raid_link_speed='platform-default', slot_raid_state='platform-default', slot_rear_nvme1link_speed='platform-default', slot_rear_nvme1state='platform-default', slot_rear_nvme2link_speed='platform-default', slot_rear_nvme2state='platform-default', slot_rear_nvme3state='platform-default', slot_rear_nvme4state='platform-default', slot_rear_nvme5state='platform-default', slot_rear_nvme6state='platform-default', slot_rear_nvme7state='platform-default', slot_rear_nvme8state='platform-default', slot_riser1link_speed='platform-default', slot_riser1slot1link_speed='platform-default', slot_riser1slot2link_speed='platform-default', slot_riser1slot3link_speed='platform-default', slot_riser2link_speed='platform-default', slot_riser2slot4link_speed='platform-default', slot_riser2slot5link_speed='platform-default', slot_riser2slot6link_speed='platform-default', slot_sas_state='platform-default', slot_ssd_slot1link_speed='platform-default', slot_ssd_slot2link_speed='platform-default', smee='platform-default', smt_mode='platform-default', snc='platform-default', sparing_mode='platform-default', sr_iov='platform-default', streamer_prefetch='platform-default', svm_mode='platform-default', terminal_type='platform-default', tpm_control='platform-default', tpm_support='platform-default', txt_support='platform-default', ucsm_boot_order_rule='platform-default', usb_emul6064='platform-default', usb_port_front='platform-default', usb_port_internal='platform-default', usb_port_kvm='platform-default', usb_port_rear='platform-default', usb_port_sd_card='platform-default', usb_port_vmedia='platform-default', usb_xhci_support='platform-default', vga_priority='platform-default', vmd_enable='platform-default', work_load_config='platform-default', xpt_prefetch='platform-default', organization=None, profiles=None):
        """
        BiosPolicy - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._description = None
        self._name = None
        self._acs_control_gpu1state = None
        self._acs_control_gpu2state = None
        self._acs_control_gpu3state = None
        self._acs_control_gpu4state = None
        self._acs_control_gpu5state = None
        self._acs_control_gpu6state = None
        self._acs_control_gpu7state = None
        self._acs_control_gpu8state = None
        self._acs_control_slot11state = None
        self._acs_control_slot12state = None
        self._acs_control_slot13state = None
        self._acs_control_slot14state = None
        self._adjacent_cache_line_prefetch = None
        self._all_usb_devices = None
        self._altitude = None
        self._aspm_support = None
        self._assert_nmi_on_perr = None
        self._assert_nmi_on_serr = None
        self._auto_cc_state = None
        self._autonumous_cstate_enable = None
        self._baud_rate = None
        self._bme_dma_mitigation = None
        self._boot_option_num_retry = None
        self._boot_option_re_cool_down = None
        self._boot_option_retry = None
        self._boot_performance_mode = None
        self._cbs_cmn_cpu_cpb = None
        self._cbs_cmn_cpu_gen_downcore_ctrl = None
        self._cbs_cmn_cpu_global_cstate_ctrl = None
        self._cbs_cmn_cpu_l1stream_hw_prefetcher = None
        self._cbs_cmn_cpu_l2stream_hw_prefetcher = None
        self._cbs_cmn_determinism_slider = None
        self._cbs_cmn_gnb_nb_iommu = None
        self._cbs_cmn_mem_ctrl_bank_group_swap_ddr4 = None
        self._cbs_cmn_mem_map_bank_interleave_ddr4 = None
        self._cbs_cmnc_tdp_ctl = None
        self._cbs_df_cmn_mem_intlv = None
        self._cbs_df_cmn_mem_intlv_size = None
        self._cdn_enable = None
        self._cdn_support = None
        self._channel_inter_leave = None
        self._cisco_adaptive_mem_training = None
        self._cisco_debug_level = None
        self._cisco_oprom_launch_optimization = None
        self._cke_low_policy = None
        self._closed_loop_therm_throtl = None
        self._cmci_enable = None
        self._config_tdp = None
        self._console_redirection = None
        self._core_multi_processing = None
        self._cpu_energy_performance = None
        self._cpu_frequency_floor = None
        self._cpu_performance = None
        self._cpu_power_management = None
        self._dcpmm_firmware_downgrade = None
        self._demand_scrub = None
        self._direct_cache_access = None
        self._dram_clock_throttling = None
        self._dram_refresh_rate = None
        self._energy_efficient_turbo = None
        self._eng_perf_tuning = None
        self._enhanced_intel_speed_step_tech = None
        self._epp_profile = None
        self._execute_disable_bit = None
        self._extended_apic = None
        self._flow_control = None
        self._frb2enable = None
        self._hardware_prefetch = None
        self._hwpm_enable = None
        self._imc_interleave = None
        self._intel_hyper_threading_tech = None
        self._intel_speed_select = None
        self._intel_turbo_boost_tech = None
        self._intel_virtualization_technology = None
        self._intel_vt_for_directed_io = None
        self._intel_vtd_coherency_support = None
        self._intel_vtd_interrupt_remapping = None
        self._intel_vtd_pass_through_dma_support = None
        self._intel_vtdats_support = None
        self._ioh_error_enable = None
        self._ioh_resource = None
        self._ip_prefetch = None
        self._ipv6pxe = None
        self._kti_prefetch = None
        self._legacy_os_redirection = None
        self._legacy_usb_support = None
        self._llc_prefetch = None
        self._lom_port0state = None
        self._lom_port1state = None
        self._lom_port2state = None
        self._lom_port3state = None
        self._lom_ports_all_state = None
        self._lv_ddr_mode = None
        self._make_device_non_bootable = None
        self._memory_inter_leave = None
        self._memory_mapped_io_above4gb = None
        self._mirroring_mode = None
        self._mmcfg_base = None
        self._numa_optimized = None
        self._onboard10gbit_lom = None
        self._onboard_gbit_lom = None
        self._onboard_scu_storage_support = None
        self._onboard_scu_storage_sw_stack = None
        self._os_boot_watchdog_timer = None
        self._os_boot_watchdog_timer_policy = None
        self._os_boot_watchdog_timer_timeout = None
        self._out_of_band_mgmt_port = None
        self._package_cstate_limit = None
        self._patrol_scrub = None
        self._patrol_scrub_duration = None
        self._pc_ie_ssd_hot_plug_support = None
        self._pch_usb30mode = None
        self._pci_option_ro_ms = None
        self._pci_rom_clp = None
        self._pop_support = None
        self._post_error_pause = None
        self._processor_c1e = None
        self._processor_c3report = None
        self._processor_c6report = None
        self._processor_cstate = None
        self._psata = None
        self._pstate_coord_type = None
        self._putty_key_pad = None
        self._pwr_perf_tuning = None
        self._qpi_link_frequency = None
        self._qpi_snoop_mode = None
        self._rank_inter_leave = None
        self._redirection_after_post = None
        self._sata_mode_select = None
        self._select_memory_ras_configuration = None
        self._serial_port_aenable = None
        self._single_pctl_enable = None
        self._slot10link_speed = None
        self._slot10state = None
        self._slot11link_speed = None
        self._slot11state = None
        self._slot12link_speed = None
        self._slot12state = None
        self._slot13state = None
        self._slot14state = None
        self._slot1link_speed = None
        self._slot1state = None
        self._slot2link_speed = None
        self._slot2state = None
        self._slot3link_speed = None
        self._slot3state = None
        self._slot4link_speed = None
        self._slot4state = None
        self._slot5link_speed = None
        self._slot5state = None
        self._slot6link_speed = None
        self._slot6state = None
        self._slot7link_speed = None
        self._slot7state = None
        self._slot8link_speed = None
        self._slot8state = None
        self._slot9link_speed = None
        self._slot9state = None
        self._slot_flom_link_speed = None
        self._slot_front_nvme1link_speed = None
        self._slot_front_nvme2link_speed = None
        self._slot_front_slot5link_speed = None
        self._slot_front_slot6link_speed = None
        self._slot_gpu1state = None
        self._slot_gpu2state = None
        self._slot_gpu3state = None
        self._slot_gpu4state = None
        self._slot_gpu5state = None
        self._slot_gpu6state = None
        self._slot_gpu7state = None
        self._slot_gpu8state = None
        self._slot_hba_link_speed = None
        self._slot_hba_state = None
        self._slot_lom1link = None
        self._slot_lom2link = None
        self._slot_mezz_state = None
        self._slot_mlom_link_speed = None
        self._slot_mlom_state = None
        self._slot_mraid_link_speed = None
        self._slot_mraid_state = None
        self._slot_n10state = None
        self._slot_n11state = None
        self._slot_n12state = None
        self._slot_n13state = None
        self._slot_n14state = None
        self._slot_n15state = None
        self._slot_n16state = None
        self._slot_n17state = None
        self._slot_n18state = None
        self._slot_n19state = None
        self._slot_n1state = None
        self._slot_n20state = None
        self._slot_n21state = None
        self._slot_n22state = None
        self._slot_n23state = None
        self._slot_n24state = None
        self._slot_n2state = None
        self._slot_n3state = None
        self._slot_n4state = None
        self._slot_n5state = None
        self._slot_n6state = None
        self._slot_n7state = None
        self._slot_n8state = None
        self._slot_n9state = None
        self._slot_raid_link_speed = None
        self._slot_raid_state = None
        self._slot_rear_nvme1link_speed = None
        self._slot_rear_nvme1state = None
        self._slot_rear_nvme2link_speed = None
        self._slot_rear_nvme2state = None
        self._slot_rear_nvme3state = None
        self._slot_rear_nvme4state = None
        self._slot_rear_nvme5state = None
        self._slot_rear_nvme6state = None
        self._slot_rear_nvme7state = None
        self._slot_rear_nvme8state = None
        self._slot_riser1link_speed = None
        self._slot_riser1slot1link_speed = None
        self._slot_riser1slot2link_speed = None
        self._slot_riser1slot3link_speed = None
        self._slot_riser2link_speed = None
        self._slot_riser2slot4link_speed = None
        self._slot_riser2slot5link_speed = None
        self._slot_riser2slot6link_speed = None
        self._slot_sas_state = None
        self._slot_ssd_slot1link_speed = None
        self._slot_ssd_slot2link_speed = None
        self._smee = None
        self._smt_mode = None
        self._snc = None
        self._sparing_mode = None
        self._sr_iov = None
        self._streamer_prefetch = None
        self._svm_mode = None
        self._terminal_type = None
        self._tpm_control = None
        self._tpm_support = None
        self._txt_support = None
        self._ucsm_boot_order_rule = None
        self._usb_emul6064 = None
        self._usb_port_front = None
        self._usb_port_internal = None
        self._usb_port_kvm = None
        self._usb_port_rear = None
        self._usb_port_sd_card = None
        self._usb_port_vmedia = None
        self._usb_xhci_support = None
        self._vga_priority = None
        self._vmd_enable = None
        self._work_load_config = None
        self._xpt_prefetch = None
        self._organization = None
        self._profiles = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if description is not None:
          self.description = description
        if name is not None:
          self.name = name
        if acs_control_gpu1state is not None:
          self.acs_control_gpu1state = acs_control_gpu1state
        if acs_control_gpu2state is not None:
          self.acs_control_gpu2state = acs_control_gpu2state
        if acs_control_gpu3state is not None:
          self.acs_control_gpu3state = acs_control_gpu3state
        if acs_control_gpu4state is not None:
          self.acs_control_gpu4state = acs_control_gpu4state
        if acs_control_gpu5state is not None:
          self.acs_control_gpu5state = acs_control_gpu5state
        if acs_control_gpu6state is not None:
          self.acs_control_gpu6state = acs_control_gpu6state
        if acs_control_gpu7state is not None:
          self.acs_control_gpu7state = acs_control_gpu7state
        if acs_control_gpu8state is not None:
          self.acs_control_gpu8state = acs_control_gpu8state
        if acs_control_slot11state is not None:
          self.acs_control_slot11state = acs_control_slot11state
        if acs_control_slot12state is not None:
          self.acs_control_slot12state = acs_control_slot12state
        if acs_control_slot13state is not None:
          self.acs_control_slot13state = acs_control_slot13state
        if acs_control_slot14state is not None:
          self.acs_control_slot14state = acs_control_slot14state
        if adjacent_cache_line_prefetch is not None:
          self.adjacent_cache_line_prefetch = adjacent_cache_line_prefetch
        if all_usb_devices is not None:
          self.all_usb_devices = all_usb_devices
        if altitude is not None:
          self.altitude = altitude
        if aspm_support is not None:
          self.aspm_support = aspm_support
        if assert_nmi_on_perr is not None:
          self.assert_nmi_on_perr = assert_nmi_on_perr
        if assert_nmi_on_serr is not None:
          self.assert_nmi_on_serr = assert_nmi_on_serr
        if auto_cc_state is not None:
          self.auto_cc_state = auto_cc_state
        if autonumous_cstate_enable is not None:
          self.autonumous_cstate_enable = autonumous_cstate_enable
        if baud_rate is not None:
          self.baud_rate = baud_rate
        if bme_dma_mitigation is not None:
          self.bme_dma_mitigation = bme_dma_mitigation
        if boot_option_num_retry is not None:
          self.boot_option_num_retry = boot_option_num_retry
        if boot_option_re_cool_down is not None:
          self.boot_option_re_cool_down = boot_option_re_cool_down
        if boot_option_retry is not None:
          self.boot_option_retry = boot_option_retry
        if boot_performance_mode is not None:
          self.boot_performance_mode = boot_performance_mode
        if cbs_cmn_cpu_cpb is not None:
          self.cbs_cmn_cpu_cpb = cbs_cmn_cpu_cpb
        if cbs_cmn_cpu_gen_downcore_ctrl is not None:
          self.cbs_cmn_cpu_gen_downcore_ctrl = cbs_cmn_cpu_gen_downcore_ctrl
        if cbs_cmn_cpu_global_cstate_ctrl is not None:
          self.cbs_cmn_cpu_global_cstate_ctrl = cbs_cmn_cpu_global_cstate_ctrl
        if cbs_cmn_cpu_l1stream_hw_prefetcher is not None:
          self.cbs_cmn_cpu_l1stream_hw_prefetcher = cbs_cmn_cpu_l1stream_hw_prefetcher
        if cbs_cmn_cpu_l2stream_hw_prefetcher is not None:
          self.cbs_cmn_cpu_l2stream_hw_prefetcher = cbs_cmn_cpu_l2stream_hw_prefetcher
        if cbs_cmn_determinism_slider is not None:
          self.cbs_cmn_determinism_slider = cbs_cmn_determinism_slider
        if cbs_cmn_gnb_nb_iommu is not None:
          self.cbs_cmn_gnb_nb_iommu = cbs_cmn_gnb_nb_iommu
        if cbs_cmn_mem_ctrl_bank_group_swap_ddr4 is not None:
          self.cbs_cmn_mem_ctrl_bank_group_swap_ddr4 = cbs_cmn_mem_ctrl_bank_group_swap_ddr4
        if cbs_cmn_mem_map_bank_interleave_ddr4 is not None:
          self.cbs_cmn_mem_map_bank_interleave_ddr4 = cbs_cmn_mem_map_bank_interleave_ddr4
        if cbs_cmnc_tdp_ctl is not None:
          self.cbs_cmnc_tdp_ctl = cbs_cmnc_tdp_ctl
        if cbs_df_cmn_mem_intlv is not None:
          self.cbs_df_cmn_mem_intlv = cbs_df_cmn_mem_intlv
        if cbs_df_cmn_mem_intlv_size is not None:
          self.cbs_df_cmn_mem_intlv_size = cbs_df_cmn_mem_intlv_size
        if cdn_enable is not None:
          self.cdn_enable = cdn_enable
        if cdn_support is not None:
          self.cdn_support = cdn_support
        if channel_inter_leave is not None:
          self.channel_inter_leave = channel_inter_leave
        if cisco_adaptive_mem_training is not None:
          self.cisco_adaptive_mem_training = cisco_adaptive_mem_training
        if cisco_debug_level is not None:
          self.cisco_debug_level = cisco_debug_level
        if cisco_oprom_launch_optimization is not None:
          self.cisco_oprom_launch_optimization = cisco_oprom_launch_optimization
        if cke_low_policy is not None:
          self.cke_low_policy = cke_low_policy
        if closed_loop_therm_throtl is not None:
          self.closed_loop_therm_throtl = closed_loop_therm_throtl
        if cmci_enable is not None:
          self.cmci_enable = cmci_enable
        if config_tdp is not None:
          self.config_tdp = config_tdp
        if console_redirection is not None:
          self.console_redirection = console_redirection
        if core_multi_processing is not None:
          self.core_multi_processing = core_multi_processing
        if cpu_energy_performance is not None:
          self.cpu_energy_performance = cpu_energy_performance
        if cpu_frequency_floor is not None:
          self.cpu_frequency_floor = cpu_frequency_floor
        if cpu_performance is not None:
          self.cpu_performance = cpu_performance
        if cpu_power_management is not None:
          self.cpu_power_management = cpu_power_management
        if dcpmm_firmware_downgrade is not None:
          self.dcpmm_firmware_downgrade = dcpmm_firmware_downgrade
        if demand_scrub is not None:
          self.demand_scrub = demand_scrub
        if direct_cache_access is not None:
          self.direct_cache_access = direct_cache_access
        if dram_clock_throttling is not None:
          self.dram_clock_throttling = dram_clock_throttling
        if dram_refresh_rate is not None:
          self.dram_refresh_rate = dram_refresh_rate
        if energy_efficient_turbo is not None:
          self.energy_efficient_turbo = energy_efficient_turbo
        if eng_perf_tuning is not None:
          self.eng_perf_tuning = eng_perf_tuning
        if enhanced_intel_speed_step_tech is not None:
          self.enhanced_intel_speed_step_tech = enhanced_intel_speed_step_tech
        if epp_profile is not None:
          self.epp_profile = epp_profile
        if execute_disable_bit is not None:
          self.execute_disable_bit = execute_disable_bit
        if extended_apic is not None:
          self.extended_apic = extended_apic
        if flow_control is not None:
          self.flow_control = flow_control
        if frb2enable is not None:
          self.frb2enable = frb2enable
        if hardware_prefetch is not None:
          self.hardware_prefetch = hardware_prefetch
        if hwpm_enable is not None:
          self.hwpm_enable = hwpm_enable
        if imc_interleave is not None:
          self.imc_interleave = imc_interleave
        if intel_hyper_threading_tech is not None:
          self.intel_hyper_threading_tech = intel_hyper_threading_tech
        if intel_speed_select is not None:
          self.intel_speed_select = intel_speed_select
        if intel_turbo_boost_tech is not None:
          self.intel_turbo_boost_tech = intel_turbo_boost_tech
        if intel_virtualization_technology is not None:
          self.intel_virtualization_technology = intel_virtualization_technology
        if intel_vt_for_directed_io is not None:
          self.intel_vt_for_directed_io = intel_vt_for_directed_io
        if intel_vtd_coherency_support is not None:
          self.intel_vtd_coherency_support = intel_vtd_coherency_support
        if intel_vtd_interrupt_remapping is not None:
          self.intel_vtd_interrupt_remapping = intel_vtd_interrupt_remapping
        if intel_vtd_pass_through_dma_support is not None:
          self.intel_vtd_pass_through_dma_support = intel_vtd_pass_through_dma_support
        if intel_vtdats_support is not None:
          self.intel_vtdats_support = intel_vtdats_support
        if ioh_error_enable is not None:
          self.ioh_error_enable = ioh_error_enable
        if ioh_resource is not None:
          self.ioh_resource = ioh_resource
        if ip_prefetch is not None:
          self.ip_prefetch = ip_prefetch
        if ipv6pxe is not None:
          self.ipv6pxe = ipv6pxe
        if kti_prefetch is not None:
          self.kti_prefetch = kti_prefetch
        if legacy_os_redirection is not None:
          self.legacy_os_redirection = legacy_os_redirection
        if legacy_usb_support is not None:
          self.legacy_usb_support = legacy_usb_support
        if llc_prefetch is not None:
          self.llc_prefetch = llc_prefetch
        if lom_port0state is not None:
          self.lom_port0state = lom_port0state
        if lom_port1state is not None:
          self.lom_port1state = lom_port1state
        if lom_port2state is not None:
          self.lom_port2state = lom_port2state
        if lom_port3state is not None:
          self.lom_port3state = lom_port3state
        if lom_ports_all_state is not None:
          self.lom_ports_all_state = lom_ports_all_state
        if lv_ddr_mode is not None:
          self.lv_ddr_mode = lv_ddr_mode
        if make_device_non_bootable is not None:
          self.make_device_non_bootable = make_device_non_bootable
        if memory_inter_leave is not None:
          self.memory_inter_leave = memory_inter_leave
        if memory_mapped_io_above4gb is not None:
          self.memory_mapped_io_above4gb = memory_mapped_io_above4gb
        if mirroring_mode is not None:
          self.mirroring_mode = mirroring_mode
        if mmcfg_base is not None:
          self.mmcfg_base = mmcfg_base
        if numa_optimized is not None:
          self.numa_optimized = numa_optimized
        if onboard10gbit_lom is not None:
          self.onboard10gbit_lom = onboard10gbit_lom
        if onboard_gbit_lom is not None:
          self.onboard_gbit_lom = onboard_gbit_lom
        if onboard_scu_storage_support is not None:
          self.onboard_scu_storage_support = onboard_scu_storage_support
        if onboard_scu_storage_sw_stack is not None:
          self.onboard_scu_storage_sw_stack = onboard_scu_storage_sw_stack
        if os_boot_watchdog_timer is not None:
          self.os_boot_watchdog_timer = os_boot_watchdog_timer
        if os_boot_watchdog_timer_policy is not None:
          self.os_boot_watchdog_timer_policy = os_boot_watchdog_timer_policy
        if os_boot_watchdog_timer_timeout is not None:
          self.os_boot_watchdog_timer_timeout = os_boot_watchdog_timer_timeout
        if out_of_band_mgmt_port is not None:
          self.out_of_band_mgmt_port = out_of_band_mgmt_port
        if package_cstate_limit is not None:
          self.package_cstate_limit = package_cstate_limit
        if patrol_scrub is not None:
          self.patrol_scrub = patrol_scrub
        if patrol_scrub_duration is not None:
          self.patrol_scrub_duration = patrol_scrub_duration
        if pc_ie_ssd_hot_plug_support is not None:
          self.pc_ie_ssd_hot_plug_support = pc_ie_ssd_hot_plug_support
        if pch_usb30mode is not None:
          self.pch_usb30mode = pch_usb30mode
        if pci_option_ro_ms is not None:
          self.pci_option_ro_ms = pci_option_ro_ms
        if pci_rom_clp is not None:
          self.pci_rom_clp = pci_rom_clp
        if pop_support is not None:
          self.pop_support = pop_support
        if post_error_pause is not None:
          self.post_error_pause = post_error_pause
        if processor_c1e is not None:
          self.processor_c1e = processor_c1e
        if processor_c3report is not None:
          self.processor_c3report = processor_c3report
        if processor_c6report is not None:
          self.processor_c6report = processor_c6report
        if processor_cstate is not None:
          self.processor_cstate = processor_cstate
        if psata is not None:
          self.psata = psata
        if pstate_coord_type is not None:
          self.pstate_coord_type = pstate_coord_type
        if putty_key_pad is not None:
          self.putty_key_pad = putty_key_pad
        if pwr_perf_tuning is not None:
          self.pwr_perf_tuning = pwr_perf_tuning
        if qpi_link_frequency is not None:
          self.qpi_link_frequency = qpi_link_frequency
        if qpi_snoop_mode is not None:
          self.qpi_snoop_mode = qpi_snoop_mode
        if rank_inter_leave is not None:
          self.rank_inter_leave = rank_inter_leave
        if redirection_after_post is not None:
          self.redirection_after_post = redirection_after_post
        if sata_mode_select is not None:
          self.sata_mode_select = sata_mode_select
        if select_memory_ras_configuration is not None:
          self.select_memory_ras_configuration = select_memory_ras_configuration
        if serial_port_aenable is not None:
          self.serial_port_aenable = serial_port_aenable
        if single_pctl_enable is not None:
          self.single_pctl_enable = single_pctl_enable
        if slot10link_speed is not None:
          self.slot10link_speed = slot10link_speed
        if slot10state is not None:
          self.slot10state = slot10state
        if slot11link_speed is not None:
          self.slot11link_speed = slot11link_speed
        if slot11state is not None:
          self.slot11state = slot11state
        if slot12link_speed is not None:
          self.slot12link_speed = slot12link_speed
        if slot12state is not None:
          self.slot12state = slot12state
        if slot13state is not None:
          self.slot13state = slot13state
        if slot14state is not None:
          self.slot14state = slot14state
        if slot1link_speed is not None:
          self.slot1link_speed = slot1link_speed
        if slot1state is not None:
          self.slot1state = slot1state
        if slot2link_speed is not None:
          self.slot2link_speed = slot2link_speed
        if slot2state is not None:
          self.slot2state = slot2state
        if slot3link_speed is not None:
          self.slot3link_speed = slot3link_speed
        if slot3state is not None:
          self.slot3state = slot3state
        if slot4link_speed is not None:
          self.slot4link_speed = slot4link_speed
        if slot4state is not None:
          self.slot4state = slot4state
        if slot5link_speed is not None:
          self.slot5link_speed = slot5link_speed
        if slot5state is not None:
          self.slot5state = slot5state
        if slot6link_speed is not None:
          self.slot6link_speed = slot6link_speed
        if slot6state is not None:
          self.slot6state = slot6state
        if slot7link_speed is not None:
          self.slot7link_speed = slot7link_speed
        if slot7state is not None:
          self.slot7state = slot7state
        if slot8link_speed is not None:
          self.slot8link_speed = slot8link_speed
        if slot8state is not None:
          self.slot8state = slot8state
        if slot9link_speed is not None:
          self.slot9link_speed = slot9link_speed
        if slot9state is not None:
          self.slot9state = slot9state
        if slot_flom_link_speed is not None:
          self.slot_flom_link_speed = slot_flom_link_speed
        if slot_front_nvme1link_speed is not None:
          self.slot_front_nvme1link_speed = slot_front_nvme1link_speed
        if slot_front_nvme2link_speed is not None:
          self.slot_front_nvme2link_speed = slot_front_nvme2link_speed
        if slot_front_slot5link_speed is not None:
          self.slot_front_slot5link_speed = slot_front_slot5link_speed
        if slot_front_slot6link_speed is not None:
          self.slot_front_slot6link_speed = slot_front_slot6link_speed
        if slot_gpu1state is not None:
          self.slot_gpu1state = slot_gpu1state
        if slot_gpu2state is not None:
          self.slot_gpu2state = slot_gpu2state
        if slot_gpu3state is not None:
          self.slot_gpu3state = slot_gpu3state
        if slot_gpu4state is not None:
          self.slot_gpu4state = slot_gpu4state
        if slot_gpu5state is not None:
          self.slot_gpu5state = slot_gpu5state
        if slot_gpu6state is not None:
          self.slot_gpu6state = slot_gpu6state
        if slot_gpu7state is not None:
          self.slot_gpu7state = slot_gpu7state
        if slot_gpu8state is not None:
          self.slot_gpu8state = slot_gpu8state
        if slot_hba_link_speed is not None:
          self.slot_hba_link_speed = slot_hba_link_speed
        if slot_hba_state is not None:
          self.slot_hba_state = slot_hba_state
        if slot_lom1link is not None:
          self.slot_lom1link = slot_lom1link
        if slot_lom2link is not None:
          self.slot_lom2link = slot_lom2link
        if slot_mezz_state is not None:
          self.slot_mezz_state = slot_mezz_state
        if slot_mlom_link_speed is not None:
          self.slot_mlom_link_speed = slot_mlom_link_speed
        if slot_mlom_state is not None:
          self.slot_mlom_state = slot_mlom_state
        if slot_mraid_link_speed is not None:
          self.slot_mraid_link_speed = slot_mraid_link_speed
        if slot_mraid_state is not None:
          self.slot_mraid_state = slot_mraid_state
        if slot_n10state is not None:
          self.slot_n10state = slot_n10state
        if slot_n11state is not None:
          self.slot_n11state = slot_n11state
        if slot_n12state is not None:
          self.slot_n12state = slot_n12state
        if slot_n13state is not None:
          self.slot_n13state = slot_n13state
        if slot_n14state is not None:
          self.slot_n14state = slot_n14state
        if slot_n15state is not None:
          self.slot_n15state = slot_n15state
        if slot_n16state is not None:
          self.slot_n16state = slot_n16state
        if slot_n17state is not None:
          self.slot_n17state = slot_n17state
        if slot_n18state is not None:
          self.slot_n18state = slot_n18state
        if slot_n19state is not None:
          self.slot_n19state = slot_n19state
        if slot_n1state is not None:
          self.slot_n1state = slot_n1state
        if slot_n20state is not None:
          self.slot_n20state = slot_n20state
        if slot_n21state is not None:
          self.slot_n21state = slot_n21state
        if slot_n22state is not None:
          self.slot_n22state = slot_n22state
        if slot_n23state is not None:
          self.slot_n23state = slot_n23state
        if slot_n24state is not None:
          self.slot_n24state = slot_n24state
        if slot_n2state is not None:
          self.slot_n2state = slot_n2state
        if slot_n3state is not None:
          self.slot_n3state = slot_n3state
        if slot_n4state is not None:
          self.slot_n4state = slot_n4state
        if slot_n5state is not None:
          self.slot_n5state = slot_n5state
        if slot_n6state is not None:
          self.slot_n6state = slot_n6state
        if slot_n7state is not None:
          self.slot_n7state = slot_n7state
        if slot_n8state is not None:
          self.slot_n8state = slot_n8state
        if slot_n9state is not None:
          self.slot_n9state = slot_n9state
        if slot_raid_link_speed is not None:
          self.slot_raid_link_speed = slot_raid_link_speed
        if slot_raid_state is not None:
          self.slot_raid_state = slot_raid_state
        if slot_rear_nvme1link_speed is not None:
          self.slot_rear_nvme1link_speed = slot_rear_nvme1link_speed
        if slot_rear_nvme1state is not None:
          self.slot_rear_nvme1state = slot_rear_nvme1state
        if slot_rear_nvme2link_speed is not None:
          self.slot_rear_nvme2link_speed = slot_rear_nvme2link_speed
        if slot_rear_nvme2state is not None:
          self.slot_rear_nvme2state = slot_rear_nvme2state
        if slot_rear_nvme3state is not None:
          self.slot_rear_nvme3state = slot_rear_nvme3state
        if slot_rear_nvme4state is not None:
          self.slot_rear_nvme4state = slot_rear_nvme4state
        if slot_rear_nvme5state is not None:
          self.slot_rear_nvme5state = slot_rear_nvme5state
        if slot_rear_nvme6state is not None:
          self.slot_rear_nvme6state = slot_rear_nvme6state
        if slot_rear_nvme7state is not None:
          self.slot_rear_nvme7state = slot_rear_nvme7state
        if slot_rear_nvme8state is not None:
          self.slot_rear_nvme8state = slot_rear_nvme8state
        if slot_riser1link_speed is not None:
          self.slot_riser1link_speed = slot_riser1link_speed
        if slot_riser1slot1link_speed is not None:
          self.slot_riser1slot1link_speed = slot_riser1slot1link_speed
        if slot_riser1slot2link_speed is not None:
          self.slot_riser1slot2link_speed = slot_riser1slot2link_speed
        if slot_riser1slot3link_speed is not None:
          self.slot_riser1slot3link_speed = slot_riser1slot3link_speed
        if slot_riser2link_speed is not None:
          self.slot_riser2link_speed = slot_riser2link_speed
        if slot_riser2slot4link_speed is not None:
          self.slot_riser2slot4link_speed = slot_riser2slot4link_speed
        if slot_riser2slot5link_speed is not None:
          self.slot_riser2slot5link_speed = slot_riser2slot5link_speed
        if slot_riser2slot6link_speed is not None:
          self.slot_riser2slot6link_speed = slot_riser2slot6link_speed
        if slot_sas_state is not None:
          self.slot_sas_state = slot_sas_state
        if slot_ssd_slot1link_speed is not None:
          self.slot_ssd_slot1link_speed = slot_ssd_slot1link_speed
        if slot_ssd_slot2link_speed is not None:
          self.slot_ssd_slot2link_speed = slot_ssd_slot2link_speed
        if smee is not None:
          self.smee = smee
        if smt_mode is not None:
          self.smt_mode = smt_mode
        if snc is not None:
          self.snc = snc
        if sparing_mode is not None:
          self.sparing_mode = sparing_mode
        if sr_iov is not None:
          self.sr_iov = sr_iov
        if streamer_prefetch is not None:
          self.streamer_prefetch = streamer_prefetch
        if svm_mode is not None:
          self.svm_mode = svm_mode
        if terminal_type is not None:
          self.terminal_type = terminal_type
        if tpm_control is not None:
          self.tpm_control = tpm_control
        if tpm_support is not None:
          self.tpm_support = tpm_support
        if txt_support is not None:
          self.txt_support = txt_support
        if ucsm_boot_order_rule is not None:
          self.ucsm_boot_order_rule = ucsm_boot_order_rule
        if usb_emul6064 is not None:
          self.usb_emul6064 = usb_emul6064
        if usb_port_front is not None:
          self.usb_port_front = usb_port_front
        if usb_port_internal is not None:
          self.usb_port_internal = usb_port_internal
        if usb_port_kvm is not None:
          self.usb_port_kvm = usb_port_kvm
        if usb_port_rear is not None:
          self.usb_port_rear = usb_port_rear
        if usb_port_sd_card is not None:
          self.usb_port_sd_card = usb_port_sd_card
        if usb_port_vmedia is not None:
          self.usb_port_vmedia = usb_port_vmedia
        if usb_xhci_support is not None:
          self.usb_xhci_support = usb_xhci_support
        if vga_priority is not None:
          self.vga_priority = vga_priority
        if vmd_enable is not None:
          self.vmd_enable = vmd_enable
        if work_load_config is not None:
          self.work_load_config = work_load_config
        if xpt_prefetch is not None:
          self.xpt_prefetch = xpt_prefetch
        if organization is not None:
          self.organization = organization
        if profiles is not None:
          self.profiles = profiles

    @property
    def account_moid(self):
        """
        Gets the account_moid of this BiosPolicy.
        The Account ID for this managed object.  

        :return: The account_moid of this BiosPolicy.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this BiosPolicy.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this BiosPolicy.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this BiosPolicy.
        The time when this managed object was created.  

        :return: The create_time of this BiosPolicy.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this BiosPolicy.
        The time when this managed object was created.  

        :param create_time: The create_time of this BiosPolicy.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this BiosPolicy.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this BiosPolicy.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this BiosPolicy.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this BiosPolicy.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this BiosPolicy.
        The time when this managed object was last modified.  

        :return: The mod_time of this BiosPolicy.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this BiosPolicy.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this BiosPolicy.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this BiosPolicy.
        The unique identifier of this Managed Object instance.   

        :return: The moid of this BiosPolicy.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this BiosPolicy.
        The unique identifier of this Managed Object instance.   

        :param moid: The moid of this BiosPolicy.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this BiosPolicy.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :return: The object_type of this BiosPolicy.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this BiosPolicy.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :param object_type: The object_type of this BiosPolicy.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this BiosPolicy.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this BiosPolicy.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this BiosPolicy.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this BiosPolicy.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this BiosPolicy.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this BiosPolicy.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this BiosPolicy.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this BiosPolicy.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this BiosPolicy.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this BiosPolicy.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this BiosPolicy.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this BiosPolicy.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this BiosPolicy.
        The versioning info for this managed object.   

        :return: The version_context of this BiosPolicy.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this BiosPolicy.
        The versioning info for this managed object.   

        :param version_context: The version_context of this BiosPolicy.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this BiosPolicy.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this BiosPolicy.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this BiosPolicy.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this BiosPolicy.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this BiosPolicy.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this BiosPolicy.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this BiosPolicy.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this BiosPolicy.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this BiosPolicy.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :return: The permission_resources of this BiosPolicy.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this BiosPolicy.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :param permission_resources: The permission_resources of this BiosPolicy.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def description(self):
        """
        Gets the description of this BiosPolicy.
        Description of the policy.  

        :return: The description of this BiosPolicy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this BiosPolicy.
        Description of the policy.  

        :param description: The description of this BiosPolicy.
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """
        Gets the name of this BiosPolicy.
        Name of the concrete policy.   

        :return: The name of this BiosPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this BiosPolicy.
        Name of the concrete policy.   

        :param name: The name of this BiosPolicy.
        :type: str
        """

        self._name = name

    @property
    def acs_control_gpu1state(self):
        """
        Gets the acs_control_gpu1state of this BiosPolicy.
        BIOS Token for setting ACS Control GPU-1 configuration.  

        :return: The acs_control_gpu1state of this BiosPolicy.
        :rtype: str
        """
        return self._acs_control_gpu1state

    @acs_control_gpu1state.setter
    def acs_control_gpu1state(self, acs_control_gpu1state):
        """
        Sets the acs_control_gpu1state of this BiosPolicy.
        BIOS Token for setting ACS Control GPU-1 configuration.  

        :param acs_control_gpu1state: The acs_control_gpu1state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if acs_control_gpu1state not in allowed_values:
            raise ValueError(
                "Invalid value for `acs_control_gpu1state` ({0}), must be one of {1}"
                .format(acs_control_gpu1state, allowed_values)
            )

        self._acs_control_gpu1state = acs_control_gpu1state

    @property
    def acs_control_gpu2state(self):
        """
        Gets the acs_control_gpu2state of this BiosPolicy.
        BIOS Token for setting ACS Control GPU-2 configuration.  

        :return: The acs_control_gpu2state of this BiosPolicy.
        :rtype: str
        """
        return self._acs_control_gpu2state

    @acs_control_gpu2state.setter
    def acs_control_gpu2state(self, acs_control_gpu2state):
        """
        Sets the acs_control_gpu2state of this BiosPolicy.
        BIOS Token for setting ACS Control GPU-2 configuration.  

        :param acs_control_gpu2state: The acs_control_gpu2state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if acs_control_gpu2state not in allowed_values:
            raise ValueError(
                "Invalid value for `acs_control_gpu2state` ({0}), must be one of {1}"
                .format(acs_control_gpu2state, allowed_values)
            )

        self._acs_control_gpu2state = acs_control_gpu2state

    @property
    def acs_control_gpu3state(self):
        """
        Gets the acs_control_gpu3state of this BiosPolicy.
        BIOS Token for setting ACS Control GPU-3 configuration.  

        :return: The acs_control_gpu3state of this BiosPolicy.
        :rtype: str
        """
        return self._acs_control_gpu3state

    @acs_control_gpu3state.setter
    def acs_control_gpu3state(self, acs_control_gpu3state):
        """
        Sets the acs_control_gpu3state of this BiosPolicy.
        BIOS Token for setting ACS Control GPU-3 configuration.  

        :param acs_control_gpu3state: The acs_control_gpu3state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if acs_control_gpu3state not in allowed_values:
            raise ValueError(
                "Invalid value for `acs_control_gpu3state` ({0}), must be one of {1}"
                .format(acs_control_gpu3state, allowed_values)
            )

        self._acs_control_gpu3state = acs_control_gpu3state

    @property
    def acs_control_gpu4state(self):
        """
        Gets the acs_control_gpu4state of this BiosPolicy.
        BIOS Token for setting ACS Control GPU-4 configuration.  

        :return: The acs_control_gpu4state of this BiosPolicy.
        :rtype: str
        """
        return self._acs_control_gpu4state

    @acs_control_gpu4state.setter
    def acs_control_gpu4state(self, acs_control_gpu4state):
        """
        Sets the acs_control_gpu4state of this BiosPolicy.
        BIOS Token for setting ACS Control GPU-4 configuration.  

        :param acs_control_gpu4state: The acs_control_gpu4state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if acs_control_gpu4state not in allowed_values:
            raise ValueError(
                "Invalid value for `acs_control_gpu4state` ({0}), must be one of {1}"
                .format(acs_control_gpu4state, allowed_values)
            )

        self._acs_control_gpu4state = acs_control_gpu4state

    @property
    def acs_control_gpu5state(self):
        """
        Gets the acs_control_gpu5state of this BiosPolicy.
        BIOS Token for setting ACS Control GPU-5 configuration.  

        :return: The acs_control_gpu5state of this BiosPolicy.
        :rtype: str
        """
        return self._acs_control_gpu5state

    @acs_control_gpu5state.setter
    def acs_control_gpu5state(self, acs_control_gpu5state):
        """
        Sets the acs_control_gpu5state of this BiosPolicy.
        BIOS Token for setting ACS Control GPU-5 configuration.  

        :param acs_control_gpu5state: The acs_control_gpu5state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if acs_control_gpu5state not in allowed_values:
            raise ValueError(
                "Invalid value for `acs_control_gpu5state` ({0}), must be one of {1}"
                .format(acs_control_gpu5state, allowed_values)
            )

        self._acs_control_gpu5state = acs_control_gpu5state

    @property
    def acs_control_gpu6state(self):
        """
        Gets the acs_control_gpu6state of this BiosPolicy.
        BIOS Token for setting ACS Control GPU-6 configuration.  

        :return: The acs_control_gpu6state of this BiosPolicy.
        :rtype: str
        """
        return self._acs_control_gpu6state

    @acs_control_gpu6state.setter
    def acs_control_gpu6state(self, acs_control_gpu6state):
        """
        Sets the acs_control_gpu6state of this BiosPolicy.
        BIOS Token for setting ACS Control GPU-6 configuration.  

        :param acs_control_gpu6state: The acs_control_gpu6state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if acs_control_gpu6state not in allowed_values:
            raise ValueError(
                "Invalid value for `acs_control_gpu6state` ({0}), must be one of {1}"
                .format(acs_control_gpu6state, allowed_values)
            )

        self._acs_control_gpu6state = acs_control_gpu6state

    @property
    def acs_control_gpu7state(self):
        """
        Gets the acs_control_gpu7state of this BiosPolicy.
        BIOS Token for setting ACS Control GPU-7 configuration.  

        :return: The acs_control_gpu7state of this BiosPolicy.
        :rtype: str
        """
        return self._acs_control_gpu7state

    @acs_control_gpu7state.setter
    def acs_control_gpu7state(self, acs_control_gpu7state):
        """
        Sets the acs_control_gpu7state of this BiosPolicy.
        BIOS Token for setting ACS Control GPU-7 configuration.  

        :param acs_control_gpu7state: The acs_control_gpu7state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if acs_control_gpu7state not in allowed_values:
            raise ValueError(
                "Invalid value for `acs_control_gpu7state` ({0}), must be one of {1}"
                .format(acs_control_gpu7state, allowed_values)
            )

        self._acs_control_gpu7state = acs_control_gpu7state

    @property
    def acs_control_gpu8state(self):
        """
        Gets the acs_control_gpu8state of this BiosPolicy.
        BIOS Token for setting ACS Control GPU-8 configuration.  

        :return: The acs_control_gpu8state of this BiosPolicy.
        :rtype: str
        """
        return self._acs_control_gpu8state

    @acs_control_gpu8state.setter
    def acs_control_gpu8state(self, acs_control_gpu8state):
        """
        Sets the acs_control_gpu8state of this BiosPolicy.
        BIOS Token for setting ACS Control GPU-8 configuration.  

        :param acs_control_gpu8state: The acs_control_gpu8state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if acs_control_gpu8state not in allowed_values:
            raise ValueError(
                "Invalid value for `acs_control_gpu8state` ({0}), must be one of {1}"
                .format(acs_control_gpu8state, allowed_values)
            )

        self._acs_control_gpu8state = acs_control_gpu8state

    @property
    def acs_control_slot11state(self):
        """
        Gets the acs_control_slot11state of this BiosPolicy.
        BIOS Token for setting ACS Control Slot 11 configuration.  

        :return: The acs_control_slot11state of this BiosPolicy.
        :rtype: str
        """
        return self._acs_control_slot11state

    @acs_control_slot11state.setter
    def acs_control_slot11state(self, acs_control_slot11state):
        """
        Sets the acs_control_slot11state of this BiosPolicy.
        BIOS Token for setting ACS Control Slot 11 configuration.  

        :param acs_control_slot11state: The acs_control_slot11state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if acs_control_slot11state not in allowed_values:
            raise ValueError(
                "Invalid value for `acs_control_slot11state` ({0}), must be one of {1}"
                .format(acs_control_slot11state, allowed_values)
            )

        self._acs_control_slot11state = acs_control_slot11state

    @property
    def acs_control_slot12state(self):
        """
        Gets the acs_control_slot12state of this BiosPolicy.
        BIOS Token for setting ACS Control Slot 12 configuration.  

        :return: The acs_control_slot12state of this BiosPolicy.
        :rtype: str
        """
        return self._acs_control_slot12state

    @acs_control_slot12state.setter
    def acs_control_slot12state(self, acs_control_slot12state):
        """
        Sets the acs_control_slot12state of this BiosPolicy.
        BIOS Token for setting ACS Control Slot 12 configuration.  

        :param acs_control_slot12state: The acs_control_slot12state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if acs_control_slot12state not in allowed_values:
            raise ValueError(
                "Invalid value for `acs_control_slot12state` ({0}), must be one of {1}"
                .format(acs_control_slot12state, allowed_values)
            )

        self._acs_control_slot12state = acs_control_slot12state

    @property
    def acs_control_slot13state(self):
        """
        Gets the acs_control_slot13state of this BiosPolicy.
        BIOS Token for setting ACS Control Slot 13 configuration.  

        :return: The acs_control_slot13state of this BiosPolicy.
        :rtype: str
        """
        return self._acs_control_slot13state

    @acs_control_slot13state.setter
    def acs_control_slot13state(self, acs_control_slot13state):
        """
        Sets the acs_control_slot13state of this BiosPolicy.
        BIOS Token for setting ACS Control Slot 13 configuration.  

        :param acs_control_slot13state: The acs_control_slot13state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if acs_control_slot13state not in allowed_values:
            raise ValueError(
                "Invalid value for `acs_control_slot13state` ({0}), must be one of {1}"
                .format(acs_control_slot13state, allowed_values)
            )

        self._acs_control_slot13state = acs_control_slot13state

    @property
    def acs_control_slot14state(self):
        """
        Gets the acs_control_slot14state of this BiosPolicy.
        BIOS Token for setting ACS Control Slot 14 configuration.  

        :return: The acs_control_slot14state of this BiosPolicy.
        :rtype: str
        """
        return self._acs_control_slot14state

    @acs_control_slot14state.setter
    def acs_control_slot14state(self, acs_control_slot14state):
        """
        Sets the acs_control_slot14state of this BiosPolicy.
        BIOS Token for setting ACS Control Slot 14 configuration.  

        :param acs_control_slot14state: The acs_control_slot14state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if acs_control_slot14state not in allowed_values:
            raise ValueError(
                "Invalid value for `acs_control_slot14state` ({0}), must be one of {1}"
                .format(acs_control_slot14state, allowed_values)
            )

        self._acs_control_slot14state = acs_control_slot14state

    @property
    def adjacent_cache_line_prefetch(self):
        """
        Gets the adjacent_cache_line_prefetch of this BiosPolicy.
        BIOS Token for setting Adjacent Cache Line Prefetcher configuration.  

        :return: The adjacent_cache_line_prefetch of this BiosPolicy.
        :rtype: str
        """
        return self._adjacent_cache_line_prefetch

    @adjacent_cache_line_prefetch.setter
    def adjacent_cache_line_prefetch(self, adjacent_cache_line_prefetch):
        """
        Sets the adjacent_cache_line_prefetch of this BiosPolicy.
        BIOS Token for setting Adjacent Cache Line Prefetcher configuration.  

        :param adjacent_cache_line_prefetch: The adjacent_cache_line_prefetch of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if adjacent_cache_line_prefetch not in allowed_values:
            raise ValueError(
                "Invalid value for `adjacent_cache_line_prefetch` ({0}), must be one of {1}"
                .format(adjacent_cache_line_prefetch, allowed_values)
            )

        self._adjacent_cache_line_prefetch = adjacent_cache_line_prefetch

    @property
    def all_usb_devices(self):
        """
        Gets the all_usb_devices of this BiosPolicy.
        BIOS Token for setting All USB Devices configuration.  

        :return: The all_usb_devices of this BiosPolicy.
        :rtype: str
        """
        return self._all_usb_devices

    @all_usb_devices.setter
    def all_usb_devices(self, all_usb_devices):
        """
        Sets the all_usb_devices of this BiosPolicy.
        BIOS Token for setting All USB Devices configuration.  

        :param all_usb_devices: The all_usb_devices of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if all_usb_devices not in allowed_values:
            raise ValueError(
                "Invalid value for `all_usb_devices` ({0}), must be one of {1}"
                .format(all_usb_devices, allowed_values)
            )

        self._all_usb_devices = all_usb_devices

    @property
    def altitude(self):
        """
        Gets the altitude of this BiosPolicy.
        BIOS Token for setting Altitude configuration.  

        :return: The altitude of this BiosPolicy.
        :rtype: str
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """
        Sets the altitude of this BiosPolicy.
        BIOS Token for setting Altitude configuration.  

        :param altitude: The altitude of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "1500-m", "300-m", "3000-m", "900-m", "auto"]
        if altitude not in allowed_values:
            raise ValueError(
                "Invalid value for `altitude` ({0}), must be one of {1}"
                .format(altitude, allowed_values)
            )

        self._altitude = altitude

    @property
    def aspm_support(self):
        """
        Gets the aspm_support of this BiosPolicy.
        BIOS Token for setting ASPM Support configuration.  

        :return: The aspm_support of this BiosPolicy.
        :rtype: str
        """
        return self._aspm_support

    @aspm_support.setter
    def aspm_support(self, aspm_support):
        """
        Sets the aspm_support of this BiosPolicy.
        BIOS Token for setting ASPM Support configuration.  

        :param aspm_support: The aspm_support of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "Force L0s", "L1 Only"]
        if aspm_support not in allowed_values:
            raise ValueError(
                "Invalid value for `aspm_support` ({0}), must be one of {1}"
                .format(aspm_support, allowed_values)
            )

        self._aspm_support = aspm_support

    @property
    def assert_nmi_on_perr(self):
        """
        Gets the assert_nmi_on_perr of this BiosPolicy.
        BIOS Token for setting Assert NMI on PERR configuration.  

        :return: The assert_nmi_on_perr of this BiosPolicy.
        :rtype: str
        """
        return self._assert_nmi_on_perr

    @assert_nmi_on_perr.setter
    def assert_nmi_on_perr(self, assert_nmi_on_perr):
        """
        Sets the assert_nmi_on_perr of this BiosPolicy.
        BIOS Token for setting Assert NMI on PERR configuration.  

        :param assert_nmi_on_perr: The assert_nmi_on_perr of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if assert_nmi_on_perr not in allowed_values:
            raise ValueError(
                "Invalid value for `assert_nmi_on_perr` ({0}), must be one of {1}"
                .format(assert_nmi_on_perr, allowed_values)
            )

        self._assert_nmi_on_perr = assert_nmi_on_perr

    @property
    def assert_nmi_on_serr(self):
        """
        Gets the assert_nmi_on_serr of this BiosPolicy.
        BIOS Token for setting Assert NMI on SERR configuration.  

        :return: The assert_nmi_on_serr of this BiosPolicy.
        :rtype: str
        """
        return self._assert_nmi_on_serr

    @assert_nmi_on_serr.setter
    def assert_nmi_on_serr(self, assert_nmi_on_serr):
        """
        Sets the assert_nmi_on_serr of this BiosPolicy.
        BIOS Token for setting Assert NMI on SERR configuration.  

        :param assert_nmi_on_serr: The assert_nmi_on_serr of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if assert_nmi_on_serr not in allowed_values:
            raise ValueError(
                "Invalid value for `assert_nmi_on_serr` ({0}), must be one of {1}"
                .format(assert_nmi_on_serr, allowed_values)
            )

        self._assert_nmi_on_serr = assert_nmi_on_serr

    @property
    def auto_cc_state(self):
        """
        Gets the auto_cc_state of this BiosPolicy.
        BIOS Token for setting Autonomous Core C-state configuration.  

        :return: The auto_cc_state of this BiosPolicy.
        :rtype: str
        """
        return self._auto_cc_state

    @auto_cc_state.setter
    def auto_cc_state(self, auto_cc_state):
        """
        Sets the auto_cc_state of this BiosPolicy.
        BIOS Token for setting Autonomous Core C-state configuration.  

        :param auto_cc_state: The auto_cc_state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if auto_cc_state not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_cc_state` ({0}), must be one of {1}"
                .format(auto_cc_state, allowed_values)
            )

        self._auto_cc_state = auto_cc_state

    @property
    def autonumous_cstate_enable(self):
        """
        Gets the autonumous_cstate_enable of this BiosPolicy.
        BIOS Token for setting CPU Autonomous Cstate configuration.  

        :return: The autonumous_cstate_enable of this BiosPolicy.
        :rtype: str
        """
        return self._autonumous_cstate_enable

    @autonumous_cstate_enable.setter
    def autonumous_cstate_enable(self, autonumous_cstate_enable):
        """
        Sets the autonumous_cstate_enable of this BiosPolicy.
        BIOS Token for setting CPU Autonomous Cstate configuration.  

        :param autonumous_cstate_enable: The autonumous_cstate_enable of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if autonumous_cstate_enable not in allowed_values:
            raise ValueError(
                "Invalid value for `autonumous_cstate_enable` ({0}), must be one of {1}"
                .format(autonumous_cstate_enable, allowed_values)
            )

        self._autonumous_cstate_enable = autonumous_cstate_enable

    @property
    def baud_rate(self):
        """
        Gets the baud_rate of this BiosPolicy.
        BIOS Token for setting Baud rate configuration.  

        :return: The baud_rate of this BiosPolicy.
        :rtype: str
        """
        return self._baud_rate

    @baud_rate.setter
    def baud_rate(self, baud_rate):
        """
        Sets the baud_rate of this BiosPolicy.
        BIOS Token for setting Baud rate configuration.  

        :param baud_rate: The baud_rate of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "115200", "19200", "38400", "57600", "9600"]
        if baud_rate not in allowed_values:
            raise ValueError(
                "Invalid value for `baud_rate` ({0}), must be one of {1}"
                .format(baud_rate, allowed_values)
            )

        self._baud_rate = baud_rate

    @property
    def bme_dma_mitigation(self):
        """
        Gets the bme_dma_mitigation of this BiosPolicy.
        BIOS Token for setting BME DMA Mitigation configuration.  

        :return: The bme_dma_mitigation of this BiosPolicy.
        :rtype: str
        """
        return self._bme_dma_mitigation

    @bme_dma_mitigation.setter
    def bme_dma_mitigation(self, bme_dma_mitigation):
        """
        Sets the bme_dma_mitigation of this BiosPolicy.
        BIOS Token for setting BME DMA Mitigation configuration.  

        :param bme_dma_mitigation: The bme_dma_mitigation of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if bme_dma_mitigation not in allowed_values:
            raise ValueError(
                "Invalid value for `bme_dma_mitigation` ({0}), must be one of {1}"
                .format(bme_dma_mitigation, allowed_values)
            )

        self._bme_dma_mitigation = bme_dma_mitigation

    @property
    def boot_option_num_retry(self):
        """
        Gets the boot_option_num_retry of this BiosPolicy.
        BIOS Token for setting Number of Retries configuration.  

        :return: The boot_option_num_retry of this BiosPolicy.
        :rtype: str
        """
        return self._boot_option_num_retry

    @boot_option_num_retry.setter
    def boot_option_num_retry(self, boot_option_num_retry):
        """
        Sets the boot_option_num_retry of this BiosPolicy.
        BIOS Token for setting Number of Retries configuration.  

        :param boot_option_num_retry: The boot_option_num_retry of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "13", "5", "Infinite"]
        if boot_option_num_retry not in allowed_values:
            raise ValueError(
                "Invalid value for `boot_option_num_retry` ({0}), must be one of {1}"
                .format(boot_option_num_retry, allowed_values)
            )

        self._boot_option_num_retry = boot_option_num_retry

    @property
    def boot_option_re_cool_down(self):
        """
        Gets the boot_option_re_cool_down of this BiosPolicy.
        BIOS Token for setting Cool Down Time  (sec) configuration.  

        :return: The boot_option_re_cool_down of this BiosPolicy.
        :rtype: str
        """
        return self._boot_option_re_cool_down

    @boot_option_re_cool_down.setter
    def boot_option_re_cool_down(self, boot_option_re_cool_down):
        """
        Sets the boot_option_re_cool_down of this BiosPolicy.
        BIOS Token for setting Cool Down Time  (sec) configuration.  

        :param boot_option_re_cool_down: The boot_option_re_cool_down of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "15", "45", "90"]
        if boot_option_re_cool_down not in allowed_values:
            raise ValueError(
                "Invalid value for `boot_option_re_cool_down` ({0}), must be one of {1}"
                .format(boot_option_re_cool_down, allowed_values)
            )

        self._boot_option_re_cool_down = boot_option_re_cool_down

    @property
    def boot_option_retry(self):
        """
        Gets the boot_option_retry of this BiosPolicy.
        BIOS Token for setting Boot option retry configuration.  

        :return: The boot_option_retry of this BiosPolicy.
        :rtype: str
        """
        return self._boot_option_retry

    @boot_option_retry.setter
    def boot_option_retry(self, boot_option_retry):
        """
        Sets the boot_option_retry of this BiosPolicy.
        BIOS Token for setting Boot option retry configuration.  

        :param boot_option_retry: The boot_option_retry of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if boot_option_retry not in allowed_values:
            raise ValueError(
                "Invalid value for `boot_option_retry` ({0}), must be one of {1}"
                .format(boot_option_retry, allowed_values)
            )

        self._boot_option_retry = boot_option_retry

    @property
    def boot_performance_mode(self):
        """
        Gets the boot_performance_mode of this BiosPolicy.
        BIOS Token for setting Boot Performance Mode configuration.  

        :return: The boot_performance_mode of this BiosPolicy.
        :rtype: str
        """
        return self._boot_performance_mode

    @boot_performance_mode.setter
    def boot_performance_mode(self, boot_performance_mode):
        """
        Sets the boot_performance_mode of this BiosPolicy.
        BIOS Token for setting Boot Performance Mode configuration.  

        :param boot_performance_mode: The boot_performance_mode of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Max Efficient", "Max Performance", "Set by Intel NM"]
        if boot_performance_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `boot_performance_mode` ({0}), must be one of {1}"
                .format(boot_performance_mode, allowed_values)
            )

        self._boot_performance_mode = boot_performance_mode

    @property
    def cbs_cmn_cpu_cpb(self):
        """
        Gets the cbs_cmn_cpu_cpb of this BiosPolicy.
        BIOS Token for setting Core Performance Boost configuration.  

        :return: The cbs_cmn_cpu_cpb of this BiosPolicy.
        :rtype: str
        """
        return self._cbs_cmn_cpu_cpb

    @cbs_cmn_cpu_cpb.setter
    def cbs_cmn_cpu_cpb(self, cbs_cmn_cpu_cpb):
        """
        Sets the cbs_cmn_cpu_cpb of this BiosPolicy.
        BIOS Token for setting Core Performance Boost configuration.  

        :param cbs_cmn_cpu_cpb: The cbs_cmn_cpu_cpb of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "disabled"]
        if cbs_cmn_cpu_cpb not in allowed_values:
            raise ValueError(
                "Invalid value for `cbs_cmn_cpu_cpb` ({0}), must be one of {1}"
                .format(cbs_cmn_cpu_cpb, allowed_values)
            )

        self._cbs_cmn_cpu_cpb = cbs_cmn_cpu_cpb

    @property
    def cbs_cmn_cpu_gen_downcore_ctrl(self):
        """
        Gets the cbs_cmn_cpu_gen_downcore_ctrl of this BiosPolicy.
        BIOS Token for setting Downcore control configuration.  

        :return: The cbs_cmn_cpu_gen_downcore_ctrl of this BiosPolicy.
        :rtype: str
        """
        return self._cbs_cmn_cpu_gen_downcore_ctrl

    @cbs_cmn_cpu_gen_downcore_ctrl.setter
    def cbs_cmn_cpu_gen_downcore_ctrl(self, cbs_cmn_cpu_gen_downcore_ctrl):
        """
        Sets the cbs_cmn_cpu_gen_downcore_ctrl of this BiosPolicy.
        BIOS Token for setting Downcore control configuration.  

        :param cbs_cmn_cpu_gen_downcore_ctrl: The cbs_cmn_cpu_gen_downcore_ctrl of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "FOUR (2 + 2)", "FOUR (4 + 0)", "SIX (3 + 3)", "THREE (3 + 0)", "TWO (1 + 1)", "TWO (2 + 0)"]
        if cbs_cmn_cpu_gen_downcore_ctrl not in allowed_values:
            raise ValueError(
                "Invalid value for `cbs_cmn_cpu_gen_downcore_ctrl` ({0}), must be one of {1}"
                .format(cbs_cmn_cpu_gen_downcore_ctrl, allowed_values)
            )

        self._cbs_cmn_cpu_gen_downcore_ctrl = cbs_cmn_cpu_gen_downcore_ctrl

    @property
    def cbs_cmn_cpu_global_cstate_ctrl(self):
        """
        Gets the cbs_cmn_cpu_global_cstate_ctrl of this BiosPolicy.
        BIOS Token for setting Global C-state Control configuration.  

        :return: The cbs_cmn_cpu_global_cstate_ctrl of this BiosPolicy.
        :rtype: str
        """
        return self._cbs_cmn_cpu_global_cstate_ctrl

    @cbs_cmn_cpu_global_cstate_ctrl.setter
    def cbs_cmn_cpu_global_cstate_ctrl(self, cbs_cmn_cpu_global_cstate_ctrl):
        """
        Sets the cbs_cmn_cpu_global_cstate_ctrl of this BiosPolicy.
        BIOS Token for setting Global C-state Control configuration.  

        :param cbs_cmn_cpu_global_cstate_ctrl: The cbs_cmn_cpu_global_cstate_ctrl of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "disabled", "enabled"]
        if cbs_cmn_cpu_global_cstate_ctrl not in allowed_values:
            raise ValueError(
                "Invalid value for `cbs_cmn_cpu_global_cstate_ctrl` ({0}), must be one of {1}"
                .format(cbs_cmn_cpu_global_cstate_ctrl, allowed_values)
            )

        self._cbs_cmn_cpu_global_cstate_ctrl = cbs_cmn_cpu_global_cstate_ctrl

    @property
    def cbs_cmn_cpu_l1stream_hw_prefetcher(self):
        """
        Gets the cbs_cmn_cpu_l1stream_hw_prefetcher of this BiosPolicy.
        BIOS Token for setting L1 Stream HW Prefetcher configuration.  

        :return: The cbs_cmn_cpu_l1stream_hw_prefetcher of this BiosPolicy.
        :rtype: str
        """
        return self._cbs_cmn_cpu_l1stream_hw_prefetcher

    @cbs_cmn_cpu_l1stream_hw_prefetcher.setter
    def cbs_cmn_cpu_l1stream_hw_prefetcher(self, cbs_cmn_cpu_l1stream_hw_prefetcher):
        """
        Sets the cbs_cmn_cpu_l1stream_hw_prefetcher of this BiosPolicy.
        BIOS Token for setting L1 Stream HW Prefetcher configuration.  

        :param cbs_cmn_cpu_l1stream_hw_prefetcher: The cbs_cmn_cpu_l1stream_hw_prefetcher of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "disabled", "enabled"]
        if cbs_cmn_cpu_l1stream_hw_prefetcher not in allowed_values:
            raise ValueError(
                "Invalid value for `cbs_cmn_cpu_l1stream_hw_prefetcher` ({0}), must be one of {1}"
                .format(cbs_cmn_cpu_l1stream_hw_prefetcher, allowed_values)
            )

        self._cbs_cmn_cpu_l1stream_hw_prefetcher = cbs_cmn_cpu_l1stream_hw_prefetcher

    @property
    def cbs_cmn_cpu_l2stream_hw_prefetcher(self):
        """
        Gets the cbs_cmn_cpu_l2stream_hw_prefetcher of this BiosPolicy.
        BIOS Token for setting L2 Stream HW Prefetcher configuration.  

        :return: The cbs_cmn_cpu_l2stream_hw_prefetcher of this BiosPolicy.
        :rtype: str
        """
        return self._cbs_cmn_cpu_l2stream_hw_prefetcher

    @cbs_cmn_cpu_l2stream_hw_prefetcher.setter
    def cbs_cmn_cpu_l2stream_hw_prefetcher(self, cbs_cmn_cpu_l2stream_hw_prefetcher):
        """
        Sets the cbs_cmn_cpu_l2stream_hw_prefetcher of this BiosPolicy.
        BIOS Token for setting L2 Stream HW Prefetcher configuration.  

        :param cbs_cmn_cpu_l2stream_hw_prefetcher: The cbs_cmn_cpu_l2stream_hw_prefetcher of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "disabled", "enabled"]
        if cbs_cmn_cpu_l2stream_hw_prefetcher not in allowed_values:
            raise ValueError(
                "Invalid value for `cbs_cmn_cpu_l2stream_hw_prefetcher` ({0}), must be one of {1}"
                .format(cbs_cmn_cpu_l2stream_hw_prefetcher, allowed_values)
            )

        self._cbs_cmn_cpu_l2stream_hw_prefetcher = cbs_cmn_cpu_l2stream_hw_prefetcher

    @property
    def cbs_cmn_determinism_slider(self):
        """
        Gets the cbs_cmn_determinism_slider of this BiosPolicy.
        BIOS Token for setting Determinism Slider configuration.  

        :return: The cbs_cmn_determinism_slider of this BiosPolicy.
        :rtype: str
        """
        return self._cbs_cmn_determinism_slider

    @cbs_cmn_determinism_slider.setter
    def cbs_cmn_determinism_slider(self, cbs_cmn_determinism_slider):
        """
        Sets the cbs_cmn_determinism_slider of this BiosPolicy.
        BIOS Token for setting Determinism Slider configuration.  

        :param cbs_cmn_determinism_slider: The cbs_cmn_determinism_slider of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Performance", "Power"]
        if cbs_cmn_determinism_slider not in allowed_values:
            raise ValueError(
                "Invalid value for `cbs_cmn_determinism_slider` ({0}), must be one of {1}"
                .format(cbs_cmn_determinism_slider, allowed_values)
            )

        self._cbs_cmn_determinism_slider = cbs_cmn_determinism_slider

    @property
    def cbs_cmn_gnb_nb_iommu(self):
        """
        Gets the cbs_cmn_gnb_nb_iommu of this BiosPolicy.
        BIOS Token for setting IOMMU configuration.  

        :return: The cbs_cmn_gnb_nb_iommu of this BiosPolicy.
        :rtype: str
        """
        return self._cbs_cmn_gnb_nb_iommu

    @cbs_cmn_gnb_nb_iommu.setter
    def cbs_cmn_gnb_nb_iommu(self, cbs_cmn_gnb_nb_iommu):
        """
        Sets the cbs_cmn_gnb_nb_iommu of this BiosPolicy.
        BIOS Token for setting IOMMU configuration.  

        :param cbs_cmn_gnb_nb_iommu: The cbs_cmn_gnb_nb_iommu of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "disabled", "enabled"]
        if cbs_cmn_gnb_nb_iommu not in allowed_values:
            raise ValueError(
                "Invalid value for `cbs_cmn_gnb_nb_iommu` ({0}), must be one of {1}"
                .format(cbs_cmn_gnb_nb_iommu, allowed_values)
            )

        self._cbs_cmn_gnb_nb_iommu = cbs_cmn_gnb_nb_iommu

    @property
    def cbs_cmn_mem_ctrl_bank_group_swap_ddr4(self):
        """
        Gets the cbs_cmn_mem_ctrl_bank_group_swap_ddr4 of this BiosPolicy.
        BIOS Token for setting Bank Group Swap configuration.  

        :return: The cbs_cmn_mem_ctrl_bank_group_swap_ddr4 of this BiosPolicy.
        :rtype: str
        """
        return self._cbs_cmn_mem_ctrl_bank_group_swap_ddr4

    @cbs_cmn_mem_ctrl_bank_group_swap_ddr4.setter
    def cbs_cmn_mem_ctrl_bank_group_swap_ddr4(self, cbs_cmn_mem_ctrl_bank_group_swap_ddr4):
        """
        Sets the cbs_cmn_mem_ctrl_bank_group_swap_ddr4 of this BiosPolicy.
        BIOS Token for setting Bank Group Swap configuration.  

        :param cbs_cmn_mem_ctrl_bank_group_swap_ddr4: The cbs_cmn_mem_ctrl_bank_group_swap_ddr4 of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "disabled", "enabled"]
        if cbs_cmn_mem_ctrl_bank_group_swap_ddr4 not in allowed_values:
            raise ValueError(
                "Invalid value for `cbs_cmn_mem_ctrl_bank_group_swap_ddr4` ({0}), must be one of {1}"
                .format(cbs_cmn_mem_ctrl_bank_group_swap_ddr4, allowed_values)
            )

        self._cbs_cmn_mem_ctrl_bank_group_swap_ddr4 = cbs_cmn_mem_ctrl_bank_group_swap_ddr4

    @property
    def cbs_cmn_mem_map_bank_interleave_ddr4(self):
        """
        Gets the cbs_cmn_mem_map_bank_interleave_ddr4 of this BiosPolicy.
        BIOS Token for setting Chipselect Interleaving configuration.  

        :return: The cbs_cmn_mem_map_bank_interleave_ddr4 of this BiosPolicy.
        :rtype: str
        """
        return self._cbs_cmn_mem_map_bank_interleave_ddr4

    @cbs_cmn_mem_map_bank_interleave_ddr4.setter
    def cbs_cmn_mem_map_bank_interleave_ddr4(self, cbs_cmn_mem_map_bank_interleave_ddr4):
        """
        Sets the cbs_cmn_mem_map_bank_interleave_ddr4 of this BiosPolicy.
        BIOS Token for setting Chipselect Interleaving configuration.  

        :param cbs_cmn_mem_map_bank_interleave_ddr4: The cbs_cmn_mem_map_bank_interleave_ddr4 of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "disabled"]
        if cbs_cmn_mem_map_bank_interleave_ddr4 not in allowed_values:
            raise ValueError(
                "Invalid value for `cbs_cmn_mem_map_bank_interleave_ddr4` ({0}), must be one of {1}"
                .format(cbs_cmn_mem_map_bank_interleave_ddr4, allowed_values)
            )

        self._cbs_cmn_mem_map_bank_interleave_ddr4 = cbs_cmn_mem_map_bank_interleave_ddr4

    @property
    def cbs_cmnc_tdp_ctl(self):
        """
        Gets the cbs_cmnc_tdp_ctl of this BiosPolicy.
        BIOS Token for setting cTDP Control configuration.  

        :return: The cbs_cmnc_tdp_ctl of this BiosPolicy.
        :rtype: str
        """
        return self._cbs_cmnc_tdp_ctl

    @cbs_cmnc_tdp_ctl.setter
    def cbs_cmnc_tdp_ctl(self, cbs_cmnc_tdp_ctl):
        """
        Sets the cbs_cmnc_tdp_ctl of this BiosPolicy.
        BIOS Token for setting cTDP Control configuration.  

        :param cbs_cmnc_tdp_ctl: The cbs_cmnc_tdp_ctl of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Manual"]
        if cbs_cmnc_tdp_ctl not in allowed_values:
            raise ValueError(
                "Invalid value for `cbs_cmnc_tdp_ctl` ({0}), must be one of {1}"
                .format(cbs_cmnc_tdp_ctl, allowed_values)
            )

        self._cbs_cmnc_tdp_ctl = cbs_cmnc_tdp_ctl

    @property
    def cbs_df_cmn_mem_intlv(self):
        """
        Gets the cbs_df_cmn_mem_intlv of this BiosPolicy.
        BIOS Token for setting Memory interleaving configuration.  

        :return: The cbs_df_cmn_mem_intlv of this BiosPolicy.
        :rtype: str
        """
        return self._cbs_df_cmn_mem_intlv

    @cbs_df_cmn_mem_intlv.setter
    def cbs_df_cmn_mem_intlv(self, cbs_df_cmn_mem_intlv):
        """
        Sets the cbs_df_cmn_mem_intlv of this BiosPolicy.
        BIOS Token for setting Memory interleaving configuration.  

        :param cbs_df_cmn_mem_intlv: The cbs_df_cmn_mem_intlv of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Channel", "Die", "None", "Socket"]
        if cbs_df_cmn_mem_intlv not in allowed_values:
            raise ValueError(
                "Invalid value for `cbs_df_cmn_mem_intlv` ({0}), must be one of {1}"
                .format(cbs_df_cmn_mem_intlv, allowed_values)
            )

        self._cbs_df_cmn_mem_intlv = cbs_df_cmn_mem_intlv

    @property
    def cbs_df_cmn_mem_intlv_size(self):
        """
        Gets the cbs_df_cmn_mem_intlv_size of this BiosPolicy.
        BIOS Token for setting Memory interleaving size configuration.  

        :return: The cbs_df_cmn_mem_intlv_size of this BiosPolicy.
        :rtype: str
        """
        return self._cbs_df_cmn_mem_intlv_size

    @cbs_df_cmn_mem_intlv_size.setter
    def cbs_df_cmn_mem_intlv_size(self, cbs_df_cmn_mem_intlv_size):
        """
        Sets the cbs_df_cmn_mem_intlv_size of this BiosPolicy.
        BIOS Token for setting Memory interleaving size configuration.  

        :param cbs_df_cmn_mem_intlv_size: The cbs_df_cmn_mem_intlv_size of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "1 KB", "2 KB", "256 Bytes", "512 Bytes", "Auto"]
        if cbs_df_cmn_mem_intlv_size not in allowed_values:
            raise ValueError(
                "Invalid value for `cbs_df_cmn_mem_intlv_size` ({0}), must be one of {1}"
                .format(cbs_df_cmn_mem_intlv_size, allowed_values)
            )

        self._cbs_df_cmn_mem_intlv_size = cbs_df_cmn_mem_intlv_size

    @property
    def cdn_enable(self):
        """
        Gets the cdn_enable of this BiosPolicy.
        BIOS Token for setting Consistent Device Naming configuration.  

        :return: The cdn_enable of this BiosPolicy.
        :rtype: str
        """
        return self._cdn_enable

    @cdn_enable.setter
    def cdn_enable(self, cdn_enable):
        """
        Sets the cdn_enable of this BiosPolicy.
        BIOS Token for setting Consistent Device Naming configuration.  

        :param cdn_enable: The cdn_enable of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if cdn_enable not in allowed_values:
            raise ValueError(
                "Invalid value for `cdn_enable` ({0}), must be one of {1}"
                .format(cdn_enable, allowed_values)
            )

        self._cdn_enable = cdn_enable

    @property
    def cdn_support(self):
        """
        Gets the cdn_support of this BiosPolicy.
        BIOS Token for setting CDN Support for LOM configuration.  

        :return: The cdn_support of this BiosPolicy.
        :rtype: str
        """
        return self._cdn_support

    @cdn_support.setter
    def cdn_support(self, cdn_support):
        """
        Sets the cdn_support of this BiosPolicy.
        BIOS Token for setting CDN Support for LOM configuration.  

        :param cdn_support: The cdn_support of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "LOMs Only"]
        if cdn_support not in allowed_values:
            raise ValueError(
                "Invalid value for `cdn_support` ({0}), must be one of {1}"
                .format(cdn_support, allowed_values)
            )

        self._cdn_support = cdn_support

    @property
    def channel_inter_leave(self):
        """
        Gets the channel_inter_leave of this BiosPolicy.
        BIOS Token for setting Channel Interleaving configuration.  

        :return: The channel_inter_leave of this BiosPolicy.
        :rtype: str
        """
        return self._channel_inter_leave

    @channel_inter_leave.setter
    def channel_inter_leave(self, channel_inter_leave):
        """
        Sets the channel_inter_leave of this BiosPolicy.
        BIOS Token for setting Channel Interleaving configuration.  

        :param channel_inter_leave: The channel_inter_leave of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "1-way", "2-way", "3-way", "4-way", "auto"]
        if channel_inter_leave not in allowed_values:
            raise ValueError(
                "Invalid value for `channel_inter_leave` ({0}), must be one of {1}"
                .format(channel_inter_leave, allowed_values)
            )

        self._channel_inter_leave = channel_inter_leave

    @property
    def cisco_adaptive_mem_training(self):
        """
        Gets the cisco_adaptive_mem_training of this BiosPolicy.
        BIOS Token for setting Adaptive Memory Training configuration.  

        :return: The cisco_adaptive_mem_training of this BiosPolicy.
        :rtype: str
        """
        return self._cisco_adaptive_mem_training

    @cisco_adaptive_mem_training.setter
    def cisco_adaptive_mem_training(self, cisco_adaptive_mem_training):
        """
        Sets the cisco_adaptive_mem_training of this BiosPolicy.
        BIOS Token for setting Adaptive Memory Training configuration.  

        :param cisco_adaptive_mem_training: The cisco_adaptive_mem_training of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if cisco_adaptive_mem_training not in allowed_values:
            raise ValueError(
                "Invalid value for `cisco_adaptive_mem_training` ({0}), must be one of {1}"
                .format(cisco_adaptive_mem_training, allowed_values)
            )

        self._cisco_adaptive_mem_training = cisco_adaptive_mem_training

    @property
    def cisco_debug_level(self):
        """
        Gets the cisco_debug_level of this BiosPolicy.
        BIOS Token for setting BIOS Techlog Level configuration.  

        :return: The cisco_debug_level of this BiosPolicy.
        :rtype: str
        """
        return self._cisco_debug_level

    @cisco_debug_level.setter
    def cisco_debug_level(self, cisco_debug_level):
        """
        Sets the cisco_debug_level of this BiosPolicy.
        BIOS Token for setting BIOS Techlog Level configuration.  

        :param cisco_debug_level: The cisco_debug_level of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Maximum", "Minimum", "Normal"]
        if cisco_debug_level not in allowed_values:
            raise ValueError(
                "Invalid value for `cisco_debug_level` ({0}), must be one of {1}"
                .format(cisco_debug_level, allowed_values)
            )

        self._cisco_debug_level = cisco_debug_level

    @property
    def cisco_oprom_launch_optimization(self):
        """
        Gets the cisco_oprom_launch_optimization of this BiosPolicy.
        BIOS Token for setting OptionROM Launch Optimization configuration.  

        :return: The cisco_oprom_launch_optimization of this BiosPolicy.
        :rtype: str
        """
        return self._cisco_oprom_launch_optimization

    @cisco_oprom_launch_optimization.setter
    def cisco_oprom_launch_optimization(self, cisco_oprom_launch_optimization):
        """
        Sets the cisco_oprom_launch_optimization of this BiosPolicy.
        BIOS Token for setting OptionROM Launch Optimization configuration.  

        :param cisco_oprom_launch_optimization: The cisco_oprom_launch_optimization of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if cisco_oprom_launch_optimization not in allowed_values:
            raise ValueError(
                "Invalid value for `cisco_oprom_launch_optimization` ({0}), must be one of {1}"
                .format(cisco_oprom_launch_optimization, allowed_values)
            )

        self._cisco_oprom_launch_optimization = cisco_oprom_launch_optimization

    @property
    def cke_low_policy(self):
        """
        Gets the cke_low_policy of this BiosPolicy.
        BIOS Token for setting CKE Low Policy configuration.  

        :return: The cke_low_policy of this BiosPolicy.
        :rtype: str
        """
        return self._cke_low_policy

    @cke_low_policy.setter
    def cke_low_policy(self, cke_low_policy):
        """
        Sets the cke_low_policy of this BiosPolicy.
        BIOS Token for setting CKE Low Policy configuration.  

        :param cke_low_policy: The cke_low_policy of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "auto", "disabled", "fast", "slow"]
        if cke_low_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `cke_low_policy` ({0}), must be one of {1}"
                .format(cke_low_policy, allowed_values)
            )

        self._cke_low_policy = cke_low_policy

    @property
    def closed_loop_therm_throtl(self):
        """
        Gets the closed_loop_therm_throtl of this BiosPolicy.
        BIOS Token for setting Closed Loop Therm Throt configuration.  

        :return: The closed_loop_therm_throtl of this BiosPolicy.
        :rtype: str
        """
        return self._closed_loop_therm_throtl

    @closed_loop_therm_throtl.setter
    def closed_loop_therm_throtl(self, closed_loop_therm_throtl):
        """
        Sets the closed_loop_therm_throtl of this BiosPolicy.
        BIOS Token for setting Closed Loop Therm Throt configuration.  

        :param closed_loop_therm_throtl: The closed_loop_therm_throtl of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if closed_loop_therm_throtl not in allowed_values:
            raise ValueError(
                "Invalid value for `closed_loop_therm_throtl` ({0}), must be one of {1}"
                .format(closed_loop_therm_throtl, allowed_values)
            )

        self._closed_loop_therm_throtl = closed_loop_therm_throtl

    @property
    def cmci_enable(self):
        """
        Gets the cmci_enable of this BiosPolicy.
        BIOS Token for setting Processor CMCI configuration.  

        :return: The cmci_enable of this BiosPolicy.
        :rtype: str
        """
        return self._cmci_enable

    @cmci_enable.setter
    def cmci_enable(self, cmci_enable):
        """
        Sets the cmci_enable of this BiosPolicy.
        BIOS Token for setting Processor CMCI configuration.  

        :param cmci_enable: The cmci_enable of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if cmci_enable not in allowed_values:
            raise ValueError(
                "Invalid value for `cmci_enable` ({0}), must be one of {1}"
                .format(cmci_enable, allowed_values)
            )

        self._cmci_enable = cmci_enable

    @property
    def config_tdp(self):
        """
        Gets the config_tdp of this BiosPolicy.
        BIOS Token for setting Config TDP configuration.  

        :return: The config_tdp of this BiosPolicy.
        :rtype: str
        """
        return self._config_tdp

    @config_tdp.setter
    def config_tdp(self, config_tdp):
        """
        Sets the config_tdp of this BiosPolicy.
        BIOS Token for setting Config TDP configuration.  

        :param config_tdp: The config_tdp of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if config_tdp not in allowed_values:
            raise ValueError(
                "Invalid value for `config_tdp` ({0}), must be one of {1}"
                .format(config_tdp, allowed_values)
            )

        self._config_tdp = config_tdp

    @property
    def console_redirection(self):
        """
        Gets the console_redirection of this BiosPolicy.
        BIOS Token for setting Console redirection configuration.  

        :return: The console_redirection of this BiosPolicy.
        :rtype: str
        """
        return self._console_redirection

    @console_redirection.setter
    def console_redirection(self, console_redirection):
        """
        Sets the console_redirection of this BiosPolicy.
        BIOS Token for setting Console redirection configuration.  

        :param console_redirection: The console_redirection of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "com-0", "com-1", "disabled", "enabled", "serial-port-a"]
        if console_redirection not in allowed_values:
            raise ValueError(
                "Invalid value for `console_redirection` ({0}), must be one of {1}"
                .format(console_redirection, allowed_values)
            )

        self._console_redirection = console_redirection

    @property
    def core_multi_processing(self):
        """
        Gets the core_multi_processing of this BiosPolicy.
        BIOS Token for setting Core MultiProcessing configuration.  

        :return: The core_multi_processing of this BiosPolicy.
        :rtype: str
        """
        return self._core_multi_processing

    @core_multi_processing.setter
    def core_multi_processing(self, core_multi_processing):
        """
        Sets the core_multi_processing of this BiosPolicy.
        BIOS Token for setting Core MultiProcessing configuration.  

        :param core_multi_processing: The core_multi_processing of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "1", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "2", "20", "21", "22", "23", "24", "25", "26", "27", "28", "3", "4", "5", "6", "7", "8", "9", "all"]
        if core_multi_processing not in allowed_values:
            raise ValueError(
                "Invalid value for `core_multi_processing` ({0}), must be one of {1}"
                .format(core_multi_processing, allowed_values)
            )

        self._core_multi_processing = core_multi_processing

    @property
    def cpu_energy_performance(self):
        """
        Gets the cpu_energy_performance of this BiosPolicy.
        BIOS Token for setting Energy Performance configuration.  

        :return: The cpu_energy_performance of this BiosPolicy.
        :rtype: str
        """
        return self._cpu_energy_performance

    @cpu_energy_performance.setter
    def cpu_energy_performance(self, cpu_energy_performance):
        """
        Sets the cpu_energy_performance of this BiosPolicy.
        BIOS Token for setting Energy Performance configuration.  

        :param cpu_energy_performance: The cpu_energy_performance of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "balanced-energy", "balanced-performance", "balanced-power", "energy-efficient", "performance", "power"]
        if cpu_energy_performance not in allowed_values:
            raise ValueError(
                "Invalid value for `cpu_energy_performance` ({0}), must be one of {1}"
                .format(cpu_energy_performance, allowed_values)
            )

        self._cpu_energy_performance = cpu_energy_performance

    @property
    def cpu_frequency_floor(self):
        """
        Gets the cpu_frequency_floor of this BiosPolicy.
        BIOS Token for setting Frequency Floor Override configuration.  

        :return: The cpu_frequency_floor of this BiosPolicy.
        :rtype: str
        """
        return self._cpu_frequency_floor

    @cpu_frequency_floor.setter
    def cpu_frequency_floor(self, cpu_frequency_floor):
        """
        Sets the cpu_frequency_floor of this BiosPolicy.
        BIOS Token for setting Frequency Floor Override configuration.  

        :param cpu_frequency_floor: The cpu_frequency_floor of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if cpu_frequency_floor not in allowed_values:
            raise ValueError(
                "Invalid value for `cpu_frequency_floor` ({0}), must be one of {1}"
                .format(cpu_frequency_floor, allowed_values)
            )

        self._cpu_frequency_floor = cpu_frequency_floor

    @property
    def cpu_performance(self):
        """
        Gets the cpu_performance of this BiosPolicy.
        BIOS Token for setting CPU Performance configuration.  

        :return: The cpu_performance of this BiosPolicy.
        :rtype: str
        """
        return self._cpu_performance

    @cpu_performance.setter
    def cpu_performance(self, cpu_performance):
        """
        Sets the cpu_performance of this BiosPolicy.
        BIOS Token for setting CPU Performance configuration.  

        :param cpu_performance: The cpu_performance of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "custom", "enterprise", "high-throughput", "hpc"]
        if cpu_performance not in allowed_values:
            raise ValueError(
                "Invalid value for `cpu_performance` ({0}), must be one of {1}"
                .format(cpu_performance, allowed_values)
            )

        self._cpu_performance = cpu_performance

    @property
    def cpu_power_management(self):
        """
        Gets the cpu_power_management of this BiosPolicy.
        BIOS Token for setting Power Technology configuration.  

        :return: The cpu_power_management of this BiosPolicy.
        :rtype: str
        """
        return self._cpu_power_management

    @cpu_power_management.setter
    def cpu_power_management(self, cpu_power_management):
        """
        Sets the cpu_power_management of this BiosPolicy.
        BIOS Token for setting Power Technology configuration.  

        :param cpu_power_management: The cpu_power_management of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "custom", "disabled", "energy-efficient", "performance"]
        if cpu_power_management not in allowed_values:
            raise ValueError(
                "Invalid value for `cpu_power_management` ({0}), must be one of {1}"
                .format(cpu_power_management, allowed_values)
            )

        self._cpu_power_management = cpu_power_management

    @property
    def dcpmm_firmware_downgrade(self):
        """
        Gets the dcpmm_firmware_downgrade of this BiosPolicy.
        BIOS Token for setting DCPMM Firmware Downgrade configuration.  

        :return: The dcpmm_firmware_downgrade of this BiosPolicy.
        :rtype: str
        """
        return self._dcpmm_firmware_downgrade

    @dcpmm_firmware_downgrade.setter
    def dcpmm_firmware_downgrade(self, dcpmm_firmware_downgrade):
        """
        Sets the dcpmm_firmware_downgrade of this BiosPolicy.
        BIOS Token for setting DCPMM Firmware Downgrade configuration.  

        :param dcpmm_firmware_downgrade: The dcpmm_firmware_downgrade of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if dcpmm_firmware_downgrade not in allowed_values:
            raise ValueError(
                "Invalid value for `dcpmm_firmware_downgrade` ({0}), must be one of {1}"
                .format(dcpmm_firmware_downgrade, allowed_values)
            )

        self._dcpmm_firmware_downgrade = dcpmm_firmware_downgrade

    @property
    def demand_scrub(self):
        """
        Gets the demand_scrub of this BiosPolicy.
        BIOS Token for setting Demand Scrub configuration.  

        :return: The demand_scrub of this BiosPolicy.
        :rtype: str
        """
        return self._demand_scrub

    @demand_scrub.setter
    def demand_scrub(self, demand_scrub):
        """
        Sets the demand_scrub of this BiosPolicy.
        BIOS Token for setting Demand Scrub configuration.  

        :param demand_scrub: The demand_scrub of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if demand_scrub not in allowed_values:
            raise ValueError(
                "Invalid value for `demand_scrub` ({0}), must be one of {1}"
                .format(demand_scrub, allowed_values)
            )

        self._demand_scrub = demand_scrub

    @property
    def direct_cache_access(self):
        """
        Gets the direct_cache_access of this BiosPolicy.
        BIOS Token for setting Direct Cache Access Support configuration.  

        :return: The direct_cache_access of this BiosPolicy.
        :rtype: str
        """
        return self._direct_cache_access

    @direct_cache_access.setter
    def direct_cache_access(self, direct_cache_access):
        """
        Sets the direct_cache_access of this BiosPolicy.
        BIOS Token for setting Direct Cache Access Support configuration.  

        :param direct_cache_access: The direct_cache_access of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "auto", "disabled", "enabled"]
        if direct_cache_access not in allowed_values:
            raise ValueError(
                "Invalid value for `direct_cache_access` ({0}), must be one of {1}"
                .format(direct_cache_access, allowed_values)
            )

        self._direct_cache_access = direct_cache_access

    @property
    def dram_clock_throttling(self):
        """
        Gets the dram_clock_throttling of this BiosPolicy.
        BIOS Token for setting DRAM Clock Throttling configuration.  

        :return: The dram_clock_throttling of this BiosPolicy.
        :rtype: str
        """
        return self._dram_clock_throttling

    @dram_clock_throttling.setter
    def dram_clock_throttling(self, dram_clock_throttling):
        """
        Sets the dram_clock_throttling of this BiosPolicy.
        BIOS Token for setting DRAM Clock Throttling configuration.  

        :param dram_clock_throttling: The dram_clock_throttling of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Balanced", "Energy Efficient", "Performance"]
        if dram_clock_throttling not in allowed_values:
            raise ValueError(
                "Invalid value for `dram_clock_throttling` ({0}), must be one of {1}"
                .format(dram_clock_throttling, allowed_values)
            )

        self._dram_clock_throttling = dram_clock_throttling

    @property
    def dram_refresh_rate(self):
        """
        Gets the dram_refresh_rate of this BiosPolicy.
        BIOS Token for setting DRAM Refresh Rate configuration.  

        :return: The dram_refresh_rate of this BiosPolicy.
        :rtype: str
        """
        return self._dram_refresh_rate

    @dram_refresh_rate.setter
    def dram_refresh_rate(self, dram_refresh_rate):
        """
        Sets the dram_refresh_rate of this BiosPolicy.
        BIOS Token for setting DRAM Refresh Rate configuration.  

        :param dram_refresh_rate: The dram_refresh_rate of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "1x", "2x", "3x", "4x", "Auto"]
        if dram_refresh_rate not in allowed_values:
            raise ValueError(
                "Invalid value for `dram_refresh_rate` ({0}), must be one of {1}"
                .format(dram_refresh_rate, allowed_values)
            )

        self._dram_refresh_rate = dram_refresh_rate

    @property
    def energy_efficient_turbo(self):
        """
        Gets the energy_efficient_turbo of this BiosPolicy.
        BIOS Token for setting Energy Efficient Turbo configuration.  

        :return: The energy_efficient_turbo of this BiosPolicy.
        :rtype: str
        """
        return self._energy_efficient_turbo

    @energy_efficient_turbo.setter
    def energy_efficient_turbo(self, energy_efficient_turbo):
        """
        Sets the energy_efficient_turbo of this BiosPolicy.
        BIOS Token for setting Energy Efficient Turbo configuration.  

        :param energy_efficient_turbo: The energy_efficient_turbo of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if energy_efficient_turbo not in allowed_values:
            raise ValueError(
                "Invalid value for `energy_efficient_turbo` ({0}), must be one of {1}"
                .format(energy_efficient_turbo, allowed_values)
            )

        self._energy_efficient_turbo = energy_efficient_turbo

    @property
    def eng_perf_tuning(self):
        """
        Gets the eng_perf_tuning of this BiosPolicy.
        BIOS Token for setting Energy Performance Tuning configuration.  

        :return: The eng_perf_tuning of this BiosPolicy.
        :rtype: str
        """
        return self._eng_perf_tuning

    @eng_perf_tuning.setter
    def eng_perf_tuning(self, eng_perf_tuning):
        """
        Sets the eng_perf_tuning of this BiosPolicy.
        BIOS Token for setting Energy Performance Tuning configuration.  

        :param eng_perf_tuning: The eng_perf_tuning of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "BIOS", "OS"]
        if eng_perf_tuning not in allowed_values:
            raise ValueError(
                "Invalid value for `eng_perf_tuning` ({0}), must be one of {1}"
                .format(eng_perf_tuning, allowed_values)
            )

        self._eng_perf_tuning = eng_perf_tuning

    @property
    def enhanced_intel_speed_step_tech(self):
        """
        Gets the enhanced_intel_speed_step_tech of this BiosPolicy.
        BIOS Token for setting Enhanced Intel Speedstep (R) Technology configuration.  

        :return: The enhanced_intel_speed_step_tech of this BiosPolicy.
        :rtype: str
        """
        return self._enhanced_intel_speed_step_tech

    @enhanced_intel_speed_step_tech.setter
    def enhanced_intel_speed_step_tech(self, enhanced_intel_speed_step_tech):
        """
        Sets the enhanced_intel_speed_step_tech of this BiosPolicy.
        BIOS Token for setting Enhanced Intel Speedstep (R) Technology configuration.  

        :param enhanced_intel_speed_step_tech: The enhanced_intel_speed_step_tech of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if enhanced_intel_speed_step_tech not in allowed_values:
            raise ValueError(
                "Invalid value for `enhanced_intel_speed_step_tech` ({0}), must be one of {1}"
                .format(enhanced_intel_speed_step_tech, allowed_values)
            )

        self._enhanced_intel_speed_step_tech = enhanced_intel_speed_step_tech

    @property
    def epp_profile(self):
        """
        Gets the epp_profile of this BiosPolicy.
        BIOS Token for setting EPP Profile configuration.  

        :return: The epp_profile of this BiosPolicy.
        :rtype: str
        """
        return self._epp_profile

    @epp_profile.setter
    def epp_profile(self, epp_profile):
        """
        Sets the epp_profile of this BiosPolicy.
        BIOS Token for setting EPP Profile configuration.  

        :param epp_profile: The epp_profile of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Balanced Performance", "Balanced Power", "Performance", "Power"]
        if epp_profile not in allowed_values:
            raise ValueError(
                "Invalid value for `epp_profile` ({0}), must be one of {1}"
                .format(epp_profile, allowed_values)
            )

        self._epp_profile = epp_profile

    @property
    def execute_disable_bit(self):
        """
        Gets the execute_disable_bit of this BiosPolicy.
        BIOS Token for setting Execute Disable Bit configuration.  

        :return: The execute_disable_bit of this BiosPolicy.
        :rtype: str
        """
        return self._execute_disable_bit

    @execute_disable_bit.setter
    def execute_disable_bit(self, execute_disable_bit):
        """
        Sets the execute_disable_bit of this BiosPolicy.
        BIOS Token for setting Execute Disable Bit configuration.  

        :param execute_disable_bit: The execute_disable_bit of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if execute_disable_bit not in allowed_values:
            raise ValueError(
                "Invalid value for `execute_disable_bit` ({0}), must be one of {1}"
                .format(execute_disable_bit, allowed_values)
            )

        self._execute_disable_bit = execute_disable_bit

    @property
    def extended_apic(self):
        """
        Gets the extended_apic of this BiosPolicy.
        BIOS Token for setting Local X2 Apic configuration.  

        :return: The extended_apic of this BiosPolicy.
        :rtype: str
        """
        return self._extended_apic

    @extended_apic.setter
    def extended_apic(self, extended_apic):
        """
        Sets the extended_apic of this BiosPolicy.
        BIOS Token for setting Local X2 Apic configuration.  

        :param extended_apic: The extended_apic of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "X2APIC", "XAPIC"]
        if extended_apic not in allowed_values:
            raise ValueError(
                "Invalid value for `extended_apic` ({0}), must be one of {1}"
                .format(extended_apic, allowed_values)
            )

        self._extended_apic = extended_apic

    @property
    def flow_control(self):
        """
        Gets the flow_control of this BiosPolicy.
        BIOS Token for setting Flow Control configuration.  

        :return: The flow_control of this BiosPolicy.
        :rtype: str
        """
        return self._flow_control

    @flow_control.setter
    def flow_control(self, flow_control):
        """
        Sets the flow_control of this BiosPolicy.
        BIOS Token for setting Flow Control configuration.  

        :param flow_control: The flow_control of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "none", "rts-cts"]
        if flow_control not in allowed_values:
            raise ValueError(
                "Invalid value for `flow_control` ({0}), must be one of {1}"
                .format(flow_control, allowed_values)
            )

        self._flow_control = flow_control

    @property
    def frb2enable(self):
        """
        Gets the frb2enable of this BiosPolicy.
        BIOS Token for setting FRB-2 Timer configuration.  

        :return: The frb2enable of this BiosPolicy.
        :rtype: str
        """
        return self._frb2enable

    @frb2enable.setter
    def frb2enable(self, frb2enable):
        """
        Sets the frb2enable of this BiosPolicy.
        BIOS Token for setting FRB-2 Timer configuration.  

        :param frb2enable: The frb2enable of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if frb2enable not in allowed_values:
            raise ValueError(
                "Invalid value for `frb2enable` ({0}), must be one of {1}"
                .format(frb2enable, allowed_values)
            )

        self._frb2enable = frb2enable

    @property
    def hardware_prefetch(self):
        """
        Gets the hardware_prefetch of this BiosPolicy.
        BIOS Token for setting Hardware Prefetcher configuration.  

        :return: The hardware_prefetch of this BiosPolicy.
        :rtype: str
        """
        return self._hardware_prefetch

    @hardware_prefetch.setter
    def hardware_prefetch(self, hardware_prefetch):
        """
        Sets the hardware_prefetch of this BiosPolicy.
        BIOS Token for setting Hardware Prefetcher configuration.  

        :param hardware_prefetch: The hardware_prefetch of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if hardware_prefetch not in allowed_values:
            raise ValueError(
                "Invalid value for `hardware_prefetch` ({0}), must be one of {1}"
                .format(hardware_prefetch, allowed_values)
            )

        self._hardware_prefetch = hardware_prefetch

    @property
    def hwpm_enable(self):
        """
        Gets the hwpm_enable of this BiosPolicy.
        BIOS Token for setting CPU Hardware Power Management configuration.  

        :return: The hwpm_enable of this BiosPolicy.
        :rtype: str
        """
        return self._hwpm_enable

    @hwpm_enable.setter
    def hwpm_enable(self, hwpm_enable):
        """
        Sets the hwpm_enable of this BiosPolicy.
        BIOS Token for setting CPU Hardware Power Management configuration.  

        :param hwpm_enable: The hwpm_enable of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Disabled", "HWPM Native Mode", "HWPM OOB Mode", "NATIVE MODE", "Native Mode with no Legacy", "OOB MODE"]
        if hwpm_enable not in allowed_values:
            raise ValueError(
                "Invalid value for `hwpm_enable` ({0}), must be one of {1}"
                .format(hwpm_enable, allowed_values)
            )

        self._hwpm_enable = hwpm_enable

    @property
    def imc_interleave(self):
        """
        Gets the imc_interleave of this BiosPolicy.
        BIOS Token for setting IMC Interleaving configuration.  

        :return: The imc_interleave of this BiosPolicy.
        :rtype: str
        """
        return self._imc_interleave

    @imc_interleave.setter
    def imc_interleave(self, imc_interleave):
        """
        Sets the imc_interleave of this BiosPolicy.
        BIOS Token for setting IMC Interleaving configuration.  

        :param imc_interleave: The imc_interleave of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "1-way Interleave", "2-way Interleave", "Auto"]
        if imc_interleave not in allowed_values:
            raise ValueError(
                "Invalid value for `imc_interleave` ({0}), must be one of {1}"
                .format(imc_interleave, allowed_values)
            )

        self._imc_interleave = imc_interleave

    @property
    def intel_hyper_threading_tech(self):
        """
        Gets the intel_hyper_threading_tech of this BiosPolicy.
        BIOS Token for setting Intel HyperThreading Tech configuration.  

        :return: The intel_hyper_threading_tech of this BiosPolicy.
        :rtype: str
        """
        return self._intel_hyper_threading_tech

    @intel_hyper_threading_tech.setter
    def intel_hyper_threading_tech(self, intel_hyper_threading_tech):
        """
        Sets the intel_hyper_threading_tech of this BiosPolicy.
        BIOS Token for setting Intel HyperThreading Tech configuration.  

        :param intel_hyper_threading_tech: The intel_hyper_threading_tech of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if intel_hyper_threading_tech not in allowed_values:
            raise ValueError(
                "Invalid value for `intel_hyper_threading_tech` ({0}), must be one of {1}"
                .format(intel_hyper_threading_tech, allowed_values)
            )

        self._intel_hyper_threading_tech = intel_hyper_threading_tech

    @property
    def intel_speed_select(self):
        """
        Gets the intel_speed_select of this BiosPolicy.
        BIOS Token for setting Intel Speed Select configuration.  

        :return: The intel_speed_select of this BiosPolicy.
        :rtype: str
        """
        return self._intel_speed_select

    @intel_speed_select.setter
    def intel_speed_select(self, intel_speed_select):
        """
        Sets the intel_speed_select of this BiosPolicy.
        BIOS Token for setting Intel Speed Select configuration.  

        :param intel_speed_select: The intel_speed_select of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Base", "Config 1", "Config 2"]
        if intel_speed_select not in allowed_values:
            raise ValueError(
                "Invalid value for `intel_speed_select` ({0}), must be one of {1}"
                .format(intel_speed_select, allowed_values)
            )

        self._intel_speed_select = intel_speed_select

    @property
    def intel_turbo_boost_tech(self):
        """
        Gets the intel_turbo_boost_tech of this BiosPolicy.
        BIOS Token for setting Intel Turbo Boost Tech configuration.  

        :return: The intel_turbo_boost_tech of this BiosPolicy.
        :rtype: str
        """
        return self._intel_turbo_boost_tech

    @intel_turbo_boost_tech.setter
    def intel_turbo_boost_tech(self, intel_turbo_boost_tech):
        """
        Sets the intel_turbo_boost_tech of this BiosPolicy.
        BIOS Token for setting Intel Turbo Boost Tech configuration.  

        :param intel_turbo_boost_tech: The intel_turbo_boost_tech of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if intel_turbo_boost_tech not in allowed_values:
            raise ValueError(
                "Invalid value for `intel_turbo_boost_tech` ({0}), must be one of {1}"
                .format(intel_turbo_boost_tech, allowed_values)
            )

        self._intel_turbo_boost_tech = intel_turbo_boost_tech

    @property
    def intel_virtualization_technology(self):
        """
        Gets the intel_virtualization_technology of this BiosPolicy.
        BIOS Token for setting Intel (R) VT configuration.  

        :return: The intel_virtualization_technology of this BiosPolicy.
        :rtype: str
        """
        return self._intel_virtualization_technology

    @intel_virtualization_technology.setter
    def intel_virtualization_technology(self, intel_virtualization_technology):
        """
        Sets the intel_virtualization_technology of this BiosPolicy.
        BIOS Token for setting Intel (R) VT configuration.  

        :param intel_virtualization_technology: The intel_virtualization_technology of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if intel_virtualization_technology not in allowed_values:
            raise ValueError(
                "Invalid value for `intel_virtualization_technology` ({0}), must be one of {1}"
                .format(intel_virtualization_technology, allowed_values)
            )

        self._intel_virtualization_technology = intel_virtualization_technology

    @property
    def intel_vt_for_directed_io(self):
        """
        Gets the intel_vt_for_directed_io of this BiosPolicy.
        BIOS Token for setting Intel VT for directed IO configuration.  

        :return: The intel_vt_for_directed_io of this BiosPolicy.
        :rtype: str
        """
        return self._intel_vt_for_directed_io

    @intel_vt_for_directed_io.setter
    def intel_vt_for_directed_io(self, intel_vt_for_directed_io):
        """
        Sets the intel_vt_for_directed_io of this BiosPolicy.
        BIOS Token for setting Intel VT for directed IO configuration.  

        :param intel_vt_for_directed_io: The intel_vt_for_directed_io of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if intel_vt_for_directed_io not in allowed_values:
            raise ValueError(
                "Invalid value for `intel_vt_for_directed_io` ({0}), must be one of {1}"
                .format(intel_vt_for_directed_io, allowed_values)
            )

        self._intel_vt_for_directed_io = intel_vt_for_directed_io

    @property
    def intel_vtd_coherency_support(self):
        """
        Gets the intel_vtd_coherency_support of this BiosPolicy.
        BIOS Token for setting Intel (R) VT-d Coherency Support configuration.  

        :return: The intel_vtd_coherency_support of this BiosPolicy.
        :rtype: str
        """
        return self._intel_vtd_coherency_support

    @intel_vtd_coherency_support.setter
    def intel_vtd_coherency_support(self, intel_vtd_coherency_support):
        """
        Sets the intel_vtd_coherency_support of this BiosPolicy.
        BIOS Token for setting Intel (R) VT-d Coherency Support configuration.  

        :param intel_vtd_coherency_support: The intel_vtd_coherency_support of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if intel_vtd_coherency_support not in allowed_values:
            raise ValueError(
                "Invalid value for `intel_vtd_coherency_support` ({0}), must be one of {1}"
                .format(intel_vtd_coherency_support, allowed_values)
            )

        self._intel_vtd_coherency_support = intel_vtd_coherency_support

    @property
    def intel_vtd_interrupt_remapping(self):
        """
        Gets the intel_vtd_interrupt_remapping of this BiosPolicy.
        BIOS Token for setting Intel (R) VT-d Interrupt Remapping configuration.  

        :return: The intel_vtd_interrupt_remapping of this BiosPolicy.
        :rtype: str
        """
        return self._intel_vtd_interrupt_remapping

    @intel_vtd_interrupt_remapping.setter
    def intel_vtd_interrupt_remapping(self, intel_vtd_interrupt_remapping):
        """
        Sets the intel_vtd_interrupt_remapping of this BiosPolicy.
        BIOS Token for setting Intel (R) VT-d Interrupt Remapping configuration.  

        :param intel_vtd_interrupt_remapping: The intel_vtd_interrupt_remapping of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if intel_vtd_interrupt_remapping not in allowed_values:
            raise ValueError(
                "Invalid value for `intel_vtd_interrupt_remapping` ({0}), must be one of {1}"
                .format(intel_vtd_interrupt_remapping, allowed_values)
            )

        self._intel_vtd_interrupt_remapping = intel_vtd_interrupt_remapping

    @property
    def intel_vtd_pass_through_dma_support(self):
        """
        Gets the intel_vtd_pass_through_dma_support of this BiosPolicy.
        BIOS Token for setting Intel (R) VT-d PassThrough DMA support configuration.  

        :return: The intel_vtd_pass_through_dma_support of this BiosPolicy.
        :rtype: str
        """
        return self._intel_vtd_pass_through_dma_support

    @intel_vtd_pass_through_dma_support.setter
    def intel_vtd_pass_through_dma_support(self, intel_vtd_pass_through_dma_support):
        """
        Sets the intel_vtd_pass_through_dma_support of this BiosPolicy.
        BIOS Token for setting Intel (R) VT-d PassThrough DMA support configuration.  

        :param intel_vtd_pass_through_dma_support: The intel_vtd_pass_through_dma_support of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if intel_vtd_pass_through_dma_support not in allowed_values:
            raise ValueError(
                "Invalid value for `intel_vtd_pass_through_dma_support` ({0}), must be one of {1}"
                .format(intel_vtd_pass_through_dma_support, allowed_values)
            )

        self._intel_vtd_pass_through_dma_support = intel_vtd_pass_through_dma_support

    @property
    def intel_vtdats_support(self):
        """
        Gets the intel_vtdats_support of this BiosPolicy.
        BIOS Token for setting Intel VTD ATS support configuration.  

        :return: The intel_vtdats_support of this BiosPolicy.
        :rtype: str
        """
        return self._intel_vtdats_support

    @intel_vtdats_support.setter
    def intel_vtdats_support(self, intel_vtdats_support):
        """
        Sets the intel_vtdats_support of this BiosPolicy.
        BIOS Token for setting Intel VTD ATS support configuration.  

        :param intel_vtdats_support: The intel_vtdats_support of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if intel_vtdats_support not in allowed_values:
            raise ValueError(
                "Invalid value for `intel_vtdats_support` ({0}), must be one of {1}"
                .format(intel_vtdats_support, allowed_values)
            )

        self._intel_vtdats_support = intel_vtdats_support

    @property
    def ioh_error_enable(self):
        """
        Gets the ioh_error_enable of this BiosPolicy.
        BIOS Token for setting IIO Error Enable configuration.  

        :return: The ioh_error_enable of this BiosPolicy.
        :rtype: str
        """
        return self._ioh_error_enable

    @ioh_error_enable.setter
    def ioh_error_enable(self, ioh_error_enable):
        """
        Sets the ioh_error_enable of this BiosPolicy.
        BIOS Token for setting IIO Error Enable configuration.  

        :param ioh_error_enable: The ioh_error_enable of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "No", "Yes"]
        if ioh_error_enable not in allowed_values:
            raise ValueError(
                "Invalid value for `ioh_error_enable` ({0}), must be one of {1}"
                .format(ioh_error_enable, allowed_values)
            )

        self._ioh_error_enable = ioh_error_enable

    @property
    def ioh_resource(self):
        """
        Gets the ioh_resource of this BiosPolicy.
        BIOS Token for setting IOH Resource Allocation configuration.  

        :return: The ioh_resource of this BiosPolicy.
        :rtype: str
        """
        return self._ioh_resource

    @ioh_resource.setter
    def ioh_resource(self, ioh_resource):
        """
        Sets the ioh_resource of this BiosPolicy.
        BIOS Token for setting IOH Resource Allocation configuration.  

        :param ioh_resource: The ioh_resource of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "IOH0 24k IOH1 40k", "IOH0 32k IOH1 32k", "IOH0 40k IOH1 24k", "IOH0 48k IOH1 16k", "IOH0 56k IOH1 8k"]
        if ioh_resource not in allowed_values:
            raise ValueError(
                "Invalid value for `ioh_resource` ({0}), must be one of {1}"
                .format(ioh_resource, allowed_values)
            )

        self._ioh_resource = ioh_resource

    @property
    def ip_prefetch(self):
        """
        Gets the ip_prefetch of this BiosPolicy.
        BIOS Token for setting DCU IP Prefetcher configuration.  

        :return: The ip_prefetch of this BiosPolicy.
        :rtype: str
        """
        return self._ip_prefetch

    @ip_prefetch.setter
    def ip_prefetch(self, ip_prefetch):
        """
        Sets the ip_prefetch of this BiosPolicy.
        BIOS Token for setting DCU IP Prefetcher configuration.  

        :param ip_prefetch: The ip_prefetch of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if ip_prefetch not in allowed_values:
            raise ValueError(
                "Invalid value for `ip_prefetch` ({0}), must be one of {1}"
                .format(ip_prefetch, allowed_values)
            )

        self._ip_prefetch = ip_prefetch

    @property
    def ipv6pxe(self):
        """
        Gets the ipv6pxe of this BiosPolicy.
        BIOS Token for setting IPV6 PXE Support configuration.  

        :return: The ipv6pxe of this BiosPolicy.
        :rtype: str
        """
        return self._ipv6pxe

    @ipv6pxe.setter
    def ipv6pxe(self, ipv6pxe):
        """
        Sets the ipv6pxe of this BiosPolicy.
        BIOS Token for setting IPV6 PXE Support configuration.  

        :param ipv6pxe: The ipv6pxe of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if ipv6pxe not in allowed_values:
            raise ValueError(
                "Invalid value for `ipv6pxe` ({0}), must be one of {1}"
                .format(ipv6pxe, allowed_values)
            )

        self._ipv6pxe = ipv6pxe

    @property
    def kti_prefetch(self):
        """
        Gets the kti_prefetch of this BiosPolicy.
        BIOS Token for setting KTI Prefetch configuration.  

        :return: The kti_prefetch of this BiosPolicy.
        :rtype: str
        """
        return self._kti_prefetch

    @kti_prefetch.setter
    def kti_prefetch(self, kti_prefetch):
        """
        Sets the kti_prefetch of this BiosPolicy.
        BIOS Token for setting KTI Prefetch configuration.  

        :param kti_prefetch: The kti_prefetch of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if kti_prefetch not in allowed_values:
            raise ValueError(
                "Invalid value for `kti_prefetch` ({0}), must be one of {1}"
                .format(kti_prefetch, allowed_values)
            )

        self._kti_prefetch = kti_prefetch

    @property
    def legacy_os_redirection(self):
        """
        Gets the legacy_os_redirection of this BiosPolicy.
        BIOS Token for setting Legacy OS redirection configuration.  

        :return: The legacy_os_redirection of this BiosPolicy.
        :rtype: str
        """
        return self._legacy_os_redirection

    @legacy_os_redirection.setter
    def legacy_os_redirection(self, legacy_os_redirection):
        """
        Sets the legacy_os_redirection of this BiosPolicy.
        BIOS Token for setting Legacy OS redirection configuration.  

        :param legacy_os_redirection: The legacy_os_redirection of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if legacy_os_redirection not in allowed_values:
            raise ValueError(
                "Invalid value for `legacy_os_redirection` ({0}), must be one of {1}"
                .format(legacy_os_redirection, allowed_values)
            )

        self._legacy_os_redirection = legacy_os_redirection

    @property
    def legacy_usb_support(self):
        """
        Gets the legacy_usb_support of this BiosPolicy.
        BIOS Token for setting Legacy USB Support configuration.  

        :return: The legacy_usb_support of this BiosPolicy.
        :rtype: str
        """
        return self._legacy_usb_support

    @legacy_usb_support.setter
    def legacy_usb_support(self, legacy_usb_support):
        """
        Sets the legacy_usb_support of this BiosPolicy.
        BIOS Token for setting Legacy USB Support configuration.  

        :param legacy_usb_support: The legacy_usb_support of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "auto", "disabled", "enabled"]
        if legacy_usb_support not in allowed_values:
            raise ValueError(
                "Invalid value for `legacy_usb_support` ({0}), must be one of {1}"
                .format(legacy_usb_support, allowed_values)
            )

        self._legacy_usb_support = legacy_usb_support

    @property
    def llc_prefetch(self):
        """
        Gets the llc_prefetch of this BiosPolicy.
        BIOS Token for setting LLC Prefetch configuration.  

        :return: The llc_prefetch of this BiosPolicy.
        :rtype: str
        """
        return self._llc_prefetch

    @llc_prefetch.setter
    def llc_prefetch(self, llc_prefetch):
        """
        Sets the llc_prefetch of this BiosPolicy.
        BIOS Token for setting LLC Prefetch configuration.  

        :param llc_prefetch: The llc_prefetch of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if llc_prefetch not in allowed_values:
            raise ValueError(
                "Invalid value for `llc_prefetch` ({0}), must be one of {1}"
                .format(llc_prefetch, allowed_values)
            )

        self._llc_prefetch = llc_prefetch

    @property
    def lom_port0state(self):
        """
        Gets the lom_port0state of this BiosPolicy.
        BIOS Token for setting LOM Port 0 OptionROM configuration.  

        :return: The lom_port0state of this BiosPolicy.
        :rtype: str
        """
        return self._lom_port0state

    @lom_port0state.setter
    def lom_port0state(self, lom_port0state):
        """
        Sets the lom_port0state of this BiosPolicy.
        BIOS Token for setting LOM Port 0 OptionROM configuration.  

        :param lom_port0state: The lom_port0state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if lom_port0state not in allowed_values:
            raise ValueError(
                "Invalid value for `lom_port0state` ({0}), must be one of {1}"
                .format(lom_port0state, allowed_values)
            )

        self._lom_port0state = lom_port0state

    @property
    def lom_port1state(self):
        """
        Gets the lom_port1state of this BiosPolicy.
        BIOS Token for setting LOM Port 1 OptionRom configuration.  

        :return: The lom_port1state of this BiosPolicy.
        :rtype: str
        """
        return self._lom_port1state

    @lom_port1state.setter
    def lom_port1state(self, lom_port1state):
        """
        Sets the lom_port1state of this BiosPolicy.
        BIOS Token for setting LOM Port 1 OptionRom configuration.  

        :param lom_port1state: The lom_port1state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if lom_port1state not in allowed_values:
            raise ValueError(
                "Invalid value for `lom_port1state` ({0}), must be one of {1}"
                .format(lom_port1state, allowed_values)
            )

        self._lom_port1state = lom_port1state

    @property
    def lom_port2state(self):
        """
        Gets the lom_port2state of this BiosPolicy.
        BIOS Token for setting LOM Port 2 OptionRom configuration.  

        :return: The lom_port2state of this BiosPolicy.
        :rtype: str
        """
        return self._lom_port2state

    @lom_port2state.setter
    def lom_port2state(self, lom_port2state):
        """
        Sets the lom_port2state of this BiosPolicy.
        BIOS Token for setting LOM Port 2 OptionRom configuration.  

        :param lom_port2state: The lom_port2state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if lom_port2state not in allowed_values:
            raise ValueError(
                "Invalid value for `lom_port2state` ({0}), must be one of {1}"
                .format(lom_port2state, allowed_values)
            )

        self._lom_port2state = lom_port2state

    @property
    def lom_port3state(self):
        """
        Gets the lom_port3state of this BiosPolicy.
        BIOS Token for setting LOM Port 3 OptionRom configuration.  

        :return: The lom_port3state of this BiosPolicy.
        :rtype: str
        """
        return self._lom_port3state

    @lom_port3state.setter
    def lom_port3state(self, lom_port3state):
        """
        Sets the lom_port3state of this BiosPolicy.
        BIOS Token for setting LOM Port 3 OptionRom configuration.  

        :param lom_port3state: The lom_port3state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if lom_port3state not in allowed_values:
            raise ValueError(
                "Invalid value for `lom_port3state` ({0}), must be one of {1}"
                .format(lom_port3state, allowed_values)
            )

        self._lom_port3state = lom_port3state

    @property
    def lom_ports_all_state(self):
        """
        Gets the lom_ports_all_state of this BiosPolicy.
        BIOS Token for setting All Onboard LOM Ports configuration.  

        :return: The lom_ports_all_state of this BiosPolicy.
        :rtype: str
        """
        return self._lom_ports_all_state

    @lom_ports_all_state.setter
    def lom_ports_all_state(self, lom_ports_all_state):
        """
        Sets the lom_ports_all_state of this BiosPolicy.
        BIOS Token for setting All Onboard LOM Ports configuration.  

        :param lom_ports_all_state: The lom_ports_all_state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if lom_ports_all_state not in allowed_values:
            raise ValueError(
                "Invalid value for `lom_ports_all_state` ({0}), must be one of {1}"
                .format(lom_ports_all_state, allowed_values)
            )

        self._lom_ports_all_state = lom_ports_all_state

    @property
    def lv_ddr_mode(self):
        """
        Gets the lv_ddr_mode of this BiosPolicy.
        BIOS Token for setting Low Voltage DDR Mode configuration.  

        :return: The lv_ddr_mode of this BiosPolicy.
        :rtype: str
        """
        return self._lv_ddr_mode

    @lv_ddr_mode.setter
    def lv_ddr_mode(self, lv_ddr_mode):
        """
        Sets the lv_ddr_mode of this BiosPolicy.
        BIOS Token for setting Low Voltage DDR Mode configuration.  

        :param lv_ddr_mode: The lv_ddr_mode of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "auto", "performance-mode", "power-saving-mode"]
        if lv_ddr_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `lv_ddr_mode` ({0}), must be one of {1}"
                .format(lv_ddr_mode, allowed_values)
            )

        self._lv_ddr_mode = lv_ddr_mode

    @property
    def make_device_non_bootable(self):
        """
        Gets the make_device_non_bootable of this BiosPolicy.
        BIOS Token for setting Make Device Non Bootable configuration.  

        :return: The make_device_non_bootable of this BiosPolicy.
        :rtype: str
        """
        return self._make_device_non_bootable

    @make_device_non_bootable.setter
    def make_device_non_bootable(self, make_device_non_bootable):
        """
        Sets the make_device_non_bootable of this BiosPolicy.
        BIOS Token for setting Make Device Non Bootable configuration.  

        :param make_device_non_bootable: The make_device_non_bootable of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if make_device_non_bootable not in allowed_values:
            raise ValueError(
                "Invalid value for `make_device_non_bootable` ({0}), must be one of {1}"
                .format(make_device_non_bootable, allowed_values)
            )

        self._make_device_non_bootable = make_device_non_bootable

    @property
    def memory_inter_leave(self):
        """
        Gets the memory_inter_leave of this BiosPolicy.
        BIOS Token for setting Memory Interleaving configuration.  

        :return: The memory_inter_leave of this BiosPolicy.
        :rtype: str
        """
        return self._memory_inter_leave

    @memory_inter_leave.setter
    def memory_inter_leave(self, memory_inter_leave):
        """
        Sets the memory_inter_leave of this BiosPolicy.
        BIOS Token for setting Memory Interleaving configuration.  

        :param memory_inter_leave: The memory_inter_leave of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "1 Way Node Interleave", "2 Way Node Interleave", "4 Way Node Interleave", "8 Way Node Interleave", "disabled", "enabled"]
        if memory_inter_leave not in allowed_values:
            raise ValueError(
                "Invalid value for `memory_inter_leave` ({0}), must be one of {1}"
                .format(memory_inter_leave, allowed_values)
            )

        self._memory_inter_leave = memory_inter_leave

    @property
    def memory_mapped_io_above4gb(self):
        """
        Gets the memory_mapped_io_above4gb of this BiosPolicy.
        BIOS Token for setting Memory mapped IO above 4GB configuration.  

        :return: The memory_mapped_io_above4gb of this BiosPolicy.
        :rtype: str
        """
        return self._memory_mapped_io_above4gb

    @memory_mapped_io_above4gb.setter
    def memory_mapped_io_above4gb(self, memory_mapped_io_above4gb):
        """
        Sets the memory_mapped_io_above4gb of this BiosPolicy.
        BIOS Token for setting Memory mapped IO above 4GB configuration.  

        :param memory_mapped_io_above4gb: The memory_mapped_io_above4gb of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if memory_mapped_io_above4gb not in allowed_values:
            raise ValueError(
                "Invalid value for `memory_mapped_io_above4gb` ({0}), must be one of {1}"
                .format(memory_mapped_io_above4gb, allowed_values)
            )

        self._memory_mapped_io_above4gb = memory_mapped_io_above4gb

    @property
    def mirroring_mode(self):
        """
        Gets the mirroring_mode of this BiosPolicy.
        BIOS Token for setting Mirroring Mode configuration.  

        :return: The mirroring_mode of this BiosPolicy.
        :rtype: str
        """
        return self._mirroring_mode

    @mirroring_mode.setter
    def mirroring_mode(self, mirroring_mode):
        """
        Sets the mirroring_mode of this BiosPolicy.
        BIOS Token for setting Mirroring Mode configuration.  

        :param mirroring_mode: The mirroring_mode of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "inter-socket", "intra-socket"]
        if mirroring_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mirroring_mode` ({0}), must be one of {1}"
                .format(mirroring_mode, allowed_values)
            )

        self._mirroring_mode = mirroring_mode

    @property
    def mmcfg_base(self):
        """
        Gets the mmcfg_base of this BiosPolicy.
        BIOS Token for setting MMCFG BASE configuration.  

        :return: The mmcfg_base of this BiosPolicy.
        :rtype: str
        """
        return self._mmcfg_base

    @mmcfg_base.setter
    def mmcfg_base(self, mmcfg_base):
        """
        Sets the mmcfg_base of this BiosPolicy.
        BIOS Token for setting MMCFG BASE configuration.  

        :param mmcfg_base: The mmcfg_base of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "1 GB", "2 GB", "2.5 GB", "3 GB", "Auto"]
        if mmcfg_base not in allowed_values:
            raise ValueError(
                "Invalid value for `mmcfg_base` ({0}), must be one of {1}"
                .format(mmcfg_base, allowed_values)
            )

        self._mmcfg_base = mmcfg_base

    @property
    def numa_optimized(self):
        """
        Gets the numa_optimized of this BiosPolicy.
        BIOS Token for setting NUMA optimized configuration.  

        :return: The numa_optimized of this BiosPolicy.
        :rtype: str
        """
        return self._numa_optimized

    @numa_optimized.setter
    def numa_optimized(self, numa_optimized):
        """
        Sets the numa_optimized of this BiosPolicy.
        BIOS Token for setting NUMA optimized configuration.  

        :param numa_optimized: The numa_optimized of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if numa_optimized not in allowed_values:
            raise ValueError(
                "Invalid value for `numa_optimized` ({0}), must be one of {1}"
                .format(numa_optimized, allowed_values)
            )

        self._numa_optimized = numa_optimized

    @property
    def onboard10gbit_lom(self):
        """
        Gets the onboard10gbit_lom of this BiosPolicy.
        BIOS Token for setting Onboard 10Gbit LOM configuration.  

        :return: The onboard10gbit_lom of this BiosPolicy.
        :rtype: str
        """
        return self._onboard10gbit_lom

    @onboard10gbit_lom.setter
    def onboard10gbit_lom(self, onboard10gbit_lom):
        """
        Sets the onboard10gbit_lom of this BiosPolicy.
        BIOS Token for setting Onboard 10Gbit LOM configuration.  

        :param onboard10gbit_lom: The onboard10gbit_lom of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if onboard10gbit_lom not in allowed_values:
            raise ValueError(
                "Invalid value for `onboard10gbit_lom` ({0}), must be one of {1}"
                .format(onboard10gbit_lom, allowed_values)
            )

        self._onboard10gbit_lom = onboard10gbit_lom

    @property
    def onboard_gbit_lom(self):
        """
        Gets the onboard_gbit_lom of this BiosPolicy.
        BIOS Token for setting Onboard Gbit LOM configuration.  

        :return: The onboard_gbit_lom of this BiosPolicy.
        :rtype: str
        """
        return self._onboard_gbit_lom

    @onboard_gbit_lom.setter
    def onboard_gbit_lom(self, onboard_gbit_lom):
        """
        Sets the onboard_gbit_lom of this BiosPolicy.
        BIOS Token for setting Onboard Gbit LOM configuration.  

        :param onboard_gbit_lom: The onboard_gbit_lom of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if onboard_gbit_lom not in allowed_values:
            raise ValueError(
                "Invalid value for `onboard_gbit_lom` ({0}), must be one of {1}"
                .format(onboard_gbit_lom, allowed_values)
            )

        self._onboard_gbit_lom = onboard_gbit_lom

    @property
    def onboard_scu_storage_support(self):
        """
        Gets the onboard_scu_storage_support of this BiosPolicy.
        BIOS Token for setting Onboard SCU Storage Support configuration.  

        :return: The onboard_scu_storage_support of this BiosPolicy.
        :rtype: str
        """
        return self._onboard_scu_storage_support

    @onboard_scu_storage_support.setter
    def onboard_scu_storage_support(self, onboard_scu_storage_support):
        """
        Sets the onboard_scu_storage_support of this BiosPolicy.
        BIOS Token for setting Onboard SCU Storage Support configuration.  

        :param onboard_scu_storage_support: The onboard_scu_storage_support of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if onboard_scu_storage_support not in allowed_values:
            raise ValueError(
                "Invalid value for `onboard_scu_storage_support` ({0}), must be one of {1}"
                .format(onboard_scu_storage_support, allowed_values)
            )

        self._onboard_scu_storage_support = onboard_scu_storage_support

    @property
    def onboard_scu_storage_sw_stack(self):
        """
        Gets the onboard_scu_storage_sw_stack of this BiosPolicy.
        BIOS Token for setting Onboard SCU Storage SW Stack configuration.  

        :return: The onboard_scu_storage_sw_stack of this BiosPolicy.
        :rtype: str
        """
        return self._onboard_scu_storage_sw_stack

    @onboard_scu_storage_sw_stack.setter
    def onboard_scu_storage_sw_stack(self, onboard_scu_storage_sw_stack):
        """
        Sets the onboard_scu_storage_sw_stack of this BiosPolicy.
        BIOS Token for setting Onboard SCU Storage SW Stack configuration.  

        :param onboard_scu_storage_sw_stack: The onboard_scu_storage_sw_stack of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Intel RSTe", "LSI SW RAID"]
        if onboard_scu_storage_sw_stack not in allowed_values:
            raise ValueError(
                "Invalid value for `onboard_scu_storage_sw_stack` ({0}), must be one of {1}"
                .format(onboard_scu_storage_sw_stack, allowed_values)
            )

        self._onboard_scu_storage_sw_stack = onboard_scu_storage_sw_stack

    @property
    def os_boot_watchdog_timer(self):
        """
        Gets the os_boot_watchdog_timer of this BiosPolicy.
        BIOS Token for setting OS Boot Watchdog Timer configuration.  

        :return: The os_boot_watchdog_timer of this BiosPolicy.
        :rtype: str
        """
        return self._os_boot_watchdog_timer

    @os_boot_watchdog_timer.setter
    def os_boot_watchdog_timer(self, os_boot_watchdog_timer):
        """
        Sets the os_boot_watchdog_timer of this BiosPolicy.
        BIOS Token for setting OS Boot Watchdog Timer configuration.  

        :param os_boot_watchdog_timer: The os_boot_watchdog_timer of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if os_boot_watchdog_timer not in allowed_values:
            raise ValueError(
                "Invalid value for `os_boot_watchdog_timer` ({0}), must be one of {1}"
                .format(os_boot_watchdog_timer, allowed_values)
            )

        self._os_boot_watchdog_timer = os_boot_watchdog_timer

    @property
    def os_boot_watchdog_timer_policy(self):
        """
        Gets the os_boot_watchdog_timer_policy of this BiosPolicy.
        BIOS Token for setting OS Boot Watchdog Timer Policy configuration.  

        :return: The os_boot_watchdog_timer_policy of this BiosPolicy.
        :rtype: str
        """
        return self._os_boot_watchdog_timer_policy

    @os_boot_watchdog_timer_policy.setter
    def os_boot_watchdog_timer_policy(self, os_boot_watchdog_timer_policy):
        """
        Sets the os_boot_watchdog_timer_policy of this BiosPolicy.
        BIOS Token for setting OS Boot Watchdog Timer Policy configuration.  

        :param os_boot_watchdog_timer_policy: The os_boot_watchdog_timer_policy of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "do-nothing", "power-off", "reset"]
        if os_boot_watchdog_timer_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `os_boot_watchdog_timer_policy` ({0}), must be one of {1}"
                .format(os_boot_watchdog_timer_policy, allowed_values)
            )

        self._os_boot_watchdog_timer_policy = os_boot_watchdog_timer_policy

    @property
    def os_boot_watchdog_timer_timeout(self):
        """
        Gets the os_boot_watchdog_timer_timeout of this BiosPolicy.
        BIOS Token for setting OS Boot Watchdog Timer Timeout configuration.  

        :return: The os_boot_watchdog_timer_timeout of this BiosPolicy.
        :rtype: str
        """
        return self._os_boot_watchdog_timer_timeout

    @os_boot_watchdog_timer_timeout.setter
    def os_boot_watchdog_timer_timeout(self, os_boot_watchdog_timer_timeout):
        """
        Sets the os_boot_watchdog_timer_timeout of this BiosPolicy.
        BIOS Token for setting OS Boot Watchdog Timer Timeout configuration.  

        :param os_boot_watchdog_timer_timeout: The os_boot_watchdog_timer_timeout of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "10-minutes", "15-minutes", "20-minutes", "5-minutes"]
        if os_boot_watchdog_timer_timeout not in allowed_values:
            raise ValueError(
                "Invalid value for `os_boot_watchdog_timer_timeout` ({0}), must be one of {1}"
                .format(os_boot_watchdog_timer_timeout, allowed_values)
            )

        self._os_boot_watchdog_timer_timeout = os_boot_watchdog_timer_timeout

    @property
    def out_of_band_mgmt_port(self):
        """
        Gets the out_of_band_mgmt_port of this BiosPolicy.
        BIOS Token for setting Out-of-Band Mgmt Port configuration.  

        :return: The out_of_band_mgmt_port of this BiosPolicy.
        :rtype: str
        """
        return self._out_of_band_mgmt_port

    @out_of_band_mgmt_port.setter
    def out_of_band_mgmt_port(self, out_of_band_mgmt_port):
        """
        Sets the out_of_band_mgmt_port of this BiosPolicy.
        BIOS Token for setting Out-of-Band Mgmt Port configuration.  

        :param out_of_band_mgmt_port: The out_of_band_mgmt_port of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if out_of_band_mgmt_port not in allowed_values:
            raise ValueError(
                "Invalid value for `out_of_band_mgmt_port` ({0}), must be one of {1}"
                .format(out_of_band_mgmt_port, allowed_values)
            )

        self._out_of_band_mgmt_port = out_of_band_mgmt_port

    @property
    def package_cstate_limit(self):
        """
        Gets the package_cstate_limit of this BiosPolicy.
        BIOS Token for setting Package C State Limit configuration.  

        :return: The package_cstate_limit of this BiosPolicy.
        :rtype: str
        """
        return self._package_cstate_limit

    @package_cstate_limit.setter
    def package_cstate_limit(self, package_cstate_limit):
        """
        Sets the package_cstate_limit of this BiosPolicy.
        BIOS Token for setting Package C State Limit configuration.  

        :param package_cstate_limit: The package_cstate_limit of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "C0 C1 State", "C0/C1", "C2", "C6 Non Retention", "C6 Retention", "No Limit"]
        if package_cstate_limit not in allowed_values:
            raise ValueError(
                "Invalid value for `package_cstate_limit` ({0}), must be one of {1}"
                .format(package_cstate_limit, allowed_values)
            )

        self._package_cstate_limit = package_cstate_limit

    @property
    def patrol_scrub(self):
        """
        Gets the patrol_scrub of this BiosPolicy.
        BIOS Token for setting Patrol Scrub configuration.  

        :return: The patrol_scrub of this BiosPolicy.
        :rtype: str
        """
        return self._patrol_scrub

    @patrol_scrub.setter
    def patrol_scrub(self, patrol_scrub):
        """
        Sets the patrol_scrub of this BiosPolicy.
        BIOS Token for setting Patrol Scrub configuration.  

        :param patrol_scrub: The patrol_scrub of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if patrol_scrub not in allowed_values:
            raise ValueError(
                "Invalid value for `patrol_scrub` ({0}), must be one of {1}"
                .format(patrol_scrub, allowed_values)
            )

        self._patrol_scrub = patrol_scrub

    @property
    def patrol_scrub_duration(self):
        """
        Gets the patrol_scrub_duration of this BiosPolicy.
        BIOS Token for setting Patrol Scrub Interval configuration.  

        :return: The patrol_scrub_duration of this BiosPolicy.
        :rtype: str
        """
        return self._patrol_scrub_duration

    @patrol_scrub_duration.setter
    def patrol_scrub_duration(self, patrol_scrub_duration):
        """
        Sets the patrol_scrub_duration of this BiosPolicy.
        BIOS Token for setting Patrol Scrub Interval configuration.  

        :param patrol_scrub_duration: The patrol_scrub_duration of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if patrol_scrub_duration not in allowed_values:
            raise ValueError(
                "Invalid value for `patrol_scrub_duration` ({0}), must be one of {1}"
                .format(patrol_scrub_duration, allowed_values)
            )

        self._patrol_scrub_duration = patrol_scrub_duration

    @property
    def pc_ie_ssd_hot_plug_support(self):
        """
        Gets the pc_ie_ssd_hot_plug_support of this BiosPolicy.
        BIOS Token for setting NVMe SSD Hot-Plug Support configuration.  

        :return: The pc_ie_ssd_hot_plug_support of this BiosPolicy.
        :rtype: str
        """
        return self._pc_ie_ssd_hot_plug_support

    @pc_ie_ssd_hot_plug_support.setter
    def pc_ie_ssd_hot_plug_support(self, pc_ie_ssd_hot_plug_support):
        """
        Sets the pc_ie_ssd_hot_plug_support of this BiosPolicy.
        BIOS Token for setting NVMe SSD Hot-Plug Support configuration.  

        :param pc_ie_ssd_hot_plug_support: The pc_ie_ssd_hot_plug_support of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if pc_ie_ssd_hot_plug_support not in allowed_values:
            raise ValueError(
                "Invalid value for `pc_ie_ssd_hot_plug_support` ({0}), must be one of {1}"
                .format(pc_ie_ssd_hot_plug_support, allowed_values)
            )

        self._pc_ie_ssd_hot_plug_support = pc_ie_ssd_hot_plug_support

    @property
    def pch_usb30mode(self):
        """
        Gets the pch_usb30mode of this BiosPolicy.
        BIOS Token for setting xHCI Mode configuration.  

        :return: The pch_usb30mode of this BiosPolicy.
        :rtype: str
        """
        return self._pch_usb30mode

    @pch_usb30mode.setter
    def pch_usb30mode(self, pch_usb30mode):
        """
        Sets the pch_usb30mode of this BiosPolicy.
        BIOS Token for setting xHCI Mode configuration.  

        :param pch_usb30mode: The pch_usb30mode of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if pch_usb30mode not in allowed_values:
            raise ValueError(
                "Invalid value for `pch_usb30mode` ({0}), must be one of {1}"
                .format(pch_usb30mode, allowed_values)
            )

        self._pch_usb30mode = pch_usb30mode

    @property
    def pci_option_ro_ms(self):
        """
        Gets the pci_option_ro_ms of this BiosPolicy.
        BIOS Token for setting All PCIe Slots OptionROM configuration.  

        :return: The pci_option_ro_ms of this BiosPolicy.
        :rtype: str
        """
        return self._pci_option_ro_ms

    @pci_option_ro_ms.setter
    def pci_option_ro_ms(self, pci_option_ro_ms):
        """
        Sets the pci_option_ro_ms of this BiosPolicy.
        BIOS Token for setting All PCIe Slots OptionROM configuration.  

        :param pci_option_ro_ms: The pci_option_ro_ms of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if pci_option_ro_ms not in allowed_values:
            raise ValueError(
                "Invalid value for `pci_option_ro_ms` ({0}), must be one of {1}"
                .format(pci_option_ro_ms, allowed_values)
            )

        self._pci_option_ro_ms = pci_option_ro_ms

    @property
    def pci_rom_clp(self):
        """
        Gets the pci_rom_clp of this BiosPolicy.
        BIOS Token for setting PCI ROM CLP configuration.  

        :return: The pci_rom_clp of this BiosPolicy.
        :rtype: str
        """
        return self._pci_rom_clp

    @pci_rom_clp.setter
    def pci_rom_clp(self, pci_rom_clp):
        """
        Sets the pci_rom_clp of this BiosPolicy.
        BIOS Token for setting PCI ROM CLP configuration.  

        :param pci_rom_clp: The pci_rom_clp of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if pci_rom_clp not in allowed_values:
            raise ValueError(
                "Invalid value for `pci_rom_clp` ({0}), must be one of {1}"
                .format(pci_rom_clp, allowed_values)
            )

        self._pci_rom_clp = pci_rom_clp

    @property
    def pop_support(self):
        """
        Gets the pop_support of this BiosPolicy.
        BIOS Token for setting Power ON Password configuration.  

        :return: The pop_support of this BiosPolicy.
        :rtype: str
        """
        return self._pop_support

    @pop_support.setter
    def pop_support(self, pop_support):
        """
        Sets the pop_support of this BiosPolicy.
        BIOS Token for setting Power ON Password configuration.  

        :param pop_support: The pop_support of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if pop_support not in allowed_values:
            raise ValueError(
                "Invalid value for `pop_support` ({0}), must be one of {1}"
                .format(pop_support, allowed_values)
            )

        self._pop_support = pop_support

    @property
    def post_error_pause(self):
        """
        Gets the post_error_pause of this BiosPolicy.
        BIOS Token for setting POST Error Pause configuration.  

        :return: The post_error_pause of this BiosPolicy.
        :rtype: str
        """
        return self._post_error_pause

    @post_error_pause.setter
    def post_error_pause(self, post_error_pause):
        """
        Sets the post_error_pause of this BiosPolicy.
        BIOS Token for setting POST Error Pause configuration.  

        :param post_error_pause: The post_error_pause of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if post_error_pause not in allowed_values:
            raise ValueError(
                "Invalid value for `post_error_pause` ({0}), must be one of {1}"
                .format(post_error_pause, allowed_values)
            )

        self._post_error_pause = post_error_pause

    @property
    def processor_c1e(self):
        """
        Gets the processor_c1e of this BiosPolicy.
        BIOS Token for setting Processor C1E configuration.  

        :return: The processor_c1e of this BiosPolicy.
        :rtype: str
        """
        return self._processor_c1e

    @processor_c1e.setter
    def processor_c1e(self, processor_c1e):
        """
        Sets the processor_c1e of this BiosPolicy.
        BIOS Token for setting Processor C1E configuration.  

        :param processor_c1e: The processor_c1e of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if processor_c1e not in allowed_values:
            raise ValueError(
                "Invalid value for `processor_c1e` ({0}), must be one of {1}"
                .format(processor_c1e, allowed_values)
            )

        self._processor_c1e = processor_c1e

    @property
    def processor_c3report(self):
        """
        Gets the processor_c3report of this BiosPolicy.
        BIOS Token for setting Processor C3 Report configuration.  

        :return: The processor_c3report of this BiosPolicy.
        :rtype: str
        """
        return self._processor_c3report

    @processor_c3report.setter
    def processor_c3report(self, processor_c3report):
        """
        Sets the processor_c3report of this BiosPolicy.
        BIOS Token for setting Processor C3 Report configuration.  

        :param processor_c3report: The processor_c3report of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if processor_c3report not in allowed_values:
            raise ValueError(
                "Invalid value for `processor_c3report` ({0}), must be one of {1}"
                .format(processor_c3report, allowed_values)
            )

        self._processor_c3report = processor_c3report

    @property
    def processor_c6report(self):
        """
        Gets the processor_c6report of this BiosPolicy.
        BIOS Token for setting Processor C6 Report configuration.  

        :return: The processor_c6report of this BiosPolicy.
        :rtype: str
        """
        return self._processor_c6report

    @processor_c6report.setter
    def processor_c6report(self, processor_c6report):
        """
        Sets the processor_c6report of this BiosPolicy.
        BIOS Token for setting Processor C6 Report configuration.  

        :param processor_c6report: The processor_c6report of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if processor_c6report not in allowed_values:
            raise ValueError(
                "Invalid value for `processor_c6report` ({0}), must be one of {1}"
                .format(processor_c6report, allowed_values)
            )

        self._processor_c6report = processor_c6report

    @property
    def processor_cstate(self):
        """
        Gets the processor_cstate of this BiosPolicy.
        BIOS Token for setting CPU C State configuration.  

        :return: The processor_cstate of this BiosPolicy.
        :rtype: str
        """
        return self._processor_cstate

    @processor_cstate.setter
    def processor_cstate(self, processor_cstate):
        """
        Sets the processor_cstate of this BiosPolicy.
        BIOS Token for setting CPU C State configuration.  

        :param processor_cstate: The processor_cstate of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if processor_cstate not in allowed_values:
            raise ValueError(
                "Invalid value for `processor_cstate` ({0}), must be one of {1}"
                .format(processor_cstate, allowed_values)
            )

        self._processor_cstate = processor_cstate

    @property
    def psata(self):
        """
        Gets the psata of this BiosPolicy.
        BIOS Token for setting P-SATA mode configuration.  

        :return: The psata of this BiosPolicy.
        :rtype: str
        """
        return self._psata

    @psata.setter
    def psata(self, psata):
        """
        Sets the psata of this BiosPolicy.
        BIOS Token for setting P-SATA mode configuration.  

        :param psata: The psata of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "AHCI", "Disabled", "LSI SW RAID"]
        if psata not in allowed_values:
            raise ValueError(
                "Invalid value for `psata` ({0}), must be one of {1}"
                .format(psata, allowed_values)
            )

        self._psata = psata

    @property
    def pstate_coord_type(self):
        """
        Gets the pstate_coord_type of this BiosPolicy.
        BIOS Token for setting P-STATE Coordination configuration.  

        :return: The pstate_coord_type of this BiosPolicy.
        :rtype: str
        """
        return self._pstate_coord_type

    @pstate_coord_type.setter
    def pstate_coord_type(self, pstate_coord_type):
        """
        Sets the pstate_coord_type of this BiosPolicy.
        BIOS Token for setting P-STATE Coordination configuration.  

        :param pstate_coord_type: The pstate_coord_type of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "HW ALL", "SW ALL", "SW ANY"]
        if pstate_coord_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pstate_coord_type` ({0}), must be one of {1}"
                .format(pstate_coord_type, allowed_values)
            )

        self._pstate_coord_type = pstate_coord_type

    @property
    def putty_key_pad(self):
        """
        Gets the putty_key_pad of this BiosPolicy.
        BIOS Token for setting Putty KeyPad configuration.  

        :return: The putty_key_pad of this BiosPolicy.
        :rtype: str
        """
        return self._putty_key_pad

    @putty_key_pad.setter
    def putty_key_pad(self, putty_key_pad):
        """
        Sets the putty_key_pad of this BiosPolicy.
        BIOS Token for setting Putty KeyPad configuration.  

        :param putty_key_pad: The putty_key_pad of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "ESCN", "LINUX", "SCO", "VT100", "VT400", "XTERMR6"]
        if putty_key_pad not in allowed_values:
            raise ValueError(
                "Invalid value for `putty_key_pad` ({0}), must be one of {1}"
                .format(putty_key_pad, allowed_values)
            )

        self._putty_key_pad = putty_key_pad

    @property
    def pwr_perf_tuning(self):
        """
        Gets the pwr_perf_tuning of this BiosPolicy.
        BIOS Token for setting Power Performance Tuning configuration.  

        :return: The pwr_perf_tuning of this BiosPolicy.
        :rtype: str
        """
        return self._pwr_perf_tuning

    @pwr_perf_tuning.setter
    def pwr_perf_tuning(self, pwr_perf_tuning):
        """
        Sets the pwr_perf_tuning of this BiosPolicy.
        BIOS Token for setting Power Performance Tuning configuration.  

        :param pwr_perf_tuning: The pwr_perf_tuning of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "bios", "os"]
        if pwr_perf_tuning not in allowed_values:
            raise ValueError(
                "Invalid value for `pwr_perf_tuning` ({0}), must be one of {1}"
                .format(pwr_perf_tuning, allowed_values)
            )

        self._pwr_perf_tuning = pwr_perf_tuning

    @property
    def qpi_link_frequency(self):
        """
        Gets the qpi_link_frequency of this BiosPolicy.
        BIOS Token for setting QPI Link Frequency Select configuration.  

        :return: The qpi_link_frequency of this BiosPolicy.
        :rtype: str
        """
        return self._qpi_link_frequency

    @qpi_link_frequency.setter
    def qpi_link_frequency(self, qpi_link_frequency):
        """
        Sets the qpi_link_frequency of this BiosPolicy.
        BIOS Token for setting QPI Link Frequency Select configuration.  

        :param qpi_link_frequency: The qpi_link_frequency of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "6.4-gt/s", "7.2-gt/s", "8.0-gt/s", "9.6-gt/s", "auto"]
        if qpi_link_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `qpi_link_frequency` ({0}), must be one of {1}"
                .format(qpi_link_frequency, allowed_values)
            )

        self._qpi_link_frequency = qpi_link_frequency

    @property
    def qpi_snoop_mode(self):
        """
        Gets the qpi_snoop_mode of this BiosPolicy.
        BIOS Token for setting QPI Snoop Mode configuration.  

        :return: The qpi_snoop_mode of this BiosPolicy.
        :rtype: str
        """
        return self._qpi_snoop_mode

    @qpi_snoop_mode.setter
    def qpi_snoop_mode(self, qpi_snoop_mode):
        """
        Sets the qpi_snoop_mode of this BiosPolicy.
        BIOS Token for setting QPI Snoop Mode configuration.  

        :param qpi_snoop_mode: The qpi_snoop_mode of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "auto", "cluster-on-die", "early-snoop", "home-directory-snoop", "home-directory-snoop-with-osb", "home-snoop"]
        if qpi_snoop_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `qpi_snoop_mode` ({0}), must be one of {1}"
                .format(qpi_snoop_mode, allowed_values)
            )

        self._qpi_snoop_mode = qpi_snoop_mode

    @property
    def rank_inter_leave(self):
        """
        Gets the rank_inter_leave of this BiosPolicy.
        BIOS Token for setting Rank Interleaving configuration.  

        :return: The rank_inter_leave of this BiosPolicy.
        :rtype: str
        """
        return self._rank_inter_leave

    @rank_inter_leave.setter
    def rank_inter_leave(self, rank_inter_leave):
        """
        Sets the rank_inter_leave of this BiosPolicy.
        BIOS Token for setting Rank Interleaving configuration.  

        :param rank_inter_leave: The rank_inter_leave of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "1-way", "2-way", "4-way", "8-way", "auto"]
        if rank_inter_leave not in allowed_values:
            raise ValueError(
                "Invalid value for `rank_inter_leave` ({0}), must be one of {1}"
                .format(rank_inter_leave, allowed_values)
            )

        self._rank_inter_leave = rank_inter_leave

    @property
    def redirection_after_post(self):
        """
        Gets the redirection_after_post of this BiosPolicy.
        BIOS Token for setting Redirection After BIOS POST configuration.  

        :return: The redirection_after_post of this BiosPolicy.
        :rtype: str
        """
        return self._redirection_after_post

    @redirection_after_post.setter
    def redirection_after_post(self, redirection_after_post):
        """
        Sets the redirection_after_post of this BiosPolicy.
        BIOS Token for setting Redirection After BIOS POST configuration.  

        :param redirection_after_post: The redirection_after_post of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Always Enable", "Bootloader"]
        if redirection_after_post not in allowed_values:
            raise ValueError(
                "Invalid value for `redirection_after_post` ({0}), must be one of {1}"
                .format(redirection_after_post, allowed_values)
            )

        self._redirection_after_post = redirection_after_post

    @property
    def sata_mode_select(self):
        """
        Gets the sata_mode_select of this BiosPolicy.
        BIOS Token for setting SATA mode configuration.  

        :return: The sata_mode_select of this BiosPolicy.
        :rtype: str
        """
        return self._sata_mode_select

    @sata_mode_select.setter
    def sata_mode_select(self, sata_mode_select):
        """
        Sets the sata_mode_select of this BiosPolicy.
        BIOS Token for setting SATA mode configuration.  

        :param sata_mode_select: The sata_mode_select of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "AHCI", "Disabled", "LSI SW RAID"]
        if sata_mode_select not in allowed_values:
            raise ValueError(
                "Invalid value for `sata_mode_select` ({0}), must be one of {1}"
                .format(sata_mode_select, allowed_values)
            )

        self._sata_mode_select = sata_mode_select

    @property
    def select_memory_ras_configuration(self):
        """
        Gets the select_memory_ras_configuration of this BiosPolicy.
        BIOS Token for setting SelectMemory RAS configuration configuration.  

        :return: The select_memory_ras_configuration of this BiosPolicy.
        :rtype: str
        """
        return self._select_memory_ras_configuration

    @select_memory_ras_configuration.setter
    def select_memory_ras_configuration(self, select_memory_ras_configuration):
        """
        Sets the select_memory_ras_configuration of this BiosPolicy.
        BIOS Token for setting SelectMemory RAS configuration configuration.  

        :param select_memory_ras_configuration: The select_memory_ras_configuration of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "adddc-sparing", "lockstep", "maximum-performance", "mirror-mode-1lm", "mirroring", "sparing"]
        if select_memory_ras_configuration not in allowed_values:
            raise ValueError(
                "Invalid value for `select_memory_ras_configuration` ({0}), must be one of {1}"
                .format(select_memory_ras_configuration, allowed_values)
            )

        self._select_memory_ras_configuration = select_memory_ras_configuration

    @property
    def serial_port_aenable(self):
        """
        Gets the serial_port_aenable of this BiosPolicy.
        BIOS Token for setting Serial A Enable configuration.  

        :return: The serial_port_aenable of this BiosPolicy.
        :rtype: str
        """
        return self._serial_port_aenable

    @serial_port_aenable.setter
    def serial_port_aenable(self, serial_port_aenable):
        """
        Sets the serial_port_aenable of this BiosPolicy.
        BIOS Token for setting Serial A Enable configuration.  

        :param serial_port_aenable: The serial_port_aenable of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if serial_port_aenable not in allowed_values:
            raise ValueError(
                "Invalid value for `serial_port_aenable` ({0}), must be one of {1}"
                .format(serial_port_aenable, allowed_values)
            )

        self._serial_port_aenable = serial_port_aenable

    @property
    def single_pctl_enable(self):
        """
        Gets the single_pctl_enable of this BiosPolicy.
        BIOS Token for setting Single PCTL configuration.  

        :return: The single_pctl_enable of this BiosPolicy.
        :rtype: str
        """
        return self._single_pctl_enable

    @single_pctl_enable.setter
    def single_pctl_enable(self, single_pctl_enable):
        """
        Sets the single_pctl_enable of this BiosPolicy.
        BIOS Token for setting Single PCTL configuration.  

        :param single_pctl_enable: The single_pctl_enable of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "No", "Yes"]
        if single_pctl_enable not in allowed_values:
            raise ValueError(
                "Invalid value for `single_pctl_enable` ({0}), must be one of {1}"
                .format(single_pctl_enable, allowed_values)
            )

        self._single_pctl_enable = single_pctl_enable

    @property
    def slot10link_speed(self):
        """
        Gets the slot10link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:10 Link Speed configuration.  

        :return: The slot10link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot10link_speed

    @slot10link_speed.setter
    def slot10link_speed(self, slot10link_speed):
        """
        Sets the slot10link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:10 Link Speed configuration.  

        :param slot10link_speed: The slot10link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot10link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot10link_speed` ({0}), must be one of {1}"
                .format(slot10link_speed, allowed_values)
            )

        self._slot10link_speed = slot10link_speed

    @property
    def slot10state(self):
        """
        Gets the slot10state of this BiosPolicy.
        BIOS Token for setting Slot 10 state configuration.  

        :return: The slot10state of this BiosPolicy.
        :rtype: str
        """
        return self._slot10state

    @slot10state.setter
    def slot10state(self, slot10state):
        """
        Sets the slot10state of this BiosPolicy.
        BIOS Token for setting Slot 10 state configuration.  

        :param slot10state: The slot10state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if slot10state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot10state` ({0}), must be one of {1}"
                .format(slot10state, allowed_values)
            )

        self._slot10state = slot10state

    @property
    def slot11link_speed(self):
        """
        Gets the slot11link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:11 Link Speed configuration.  

        :return: The slot11link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot11link_speed

    @slot11link_speed.setter
    def slot11link_speed(self, slot11link_speed):
        """
        Sets the slot11link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:11 Link Speed configuration.  

        :param slot11link_speed: The slot11link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot11link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot11link_speed` ({0}), must be one of {1}"
                .format(slot11link_speed, allowed_values)
            )

        self._slot11link_speed = slot11link_speed

    @property
    def slot11state(self):
        """
        Gets the slot11state of this BiosPolicy.
        BIOS Token for setting Slot 11 state configuration.  

        :return: The slot11state of this BiosPolicy.
        :rtype: str
        """
        return self._slot11state

    @slot11state.setter
    def slot11state(self, slot11state):
        """
        Sets the slot11state of this BiosPolicy.
        BIOS Token for setting Slot 11 state configuration.  

        :param slot11state: The slot11state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot11state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot11state` ({0}), must be one of {1}"
                .format(slot11state, allowed_values)
            )

        self._slot11state = slot11state

    @property
    def slot12link_speed(self):
        """
        Gets the slot12link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:12 Link Speed configuration.  

        :return: The slot12link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot12link_speed

    @slot12link_speed.setter
    def slot12link_speed(self, slot12link_speed):
        """
        Sets the slot12link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:12 Link Speed configuration.  

        :param slot12link_speed: The slot12link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot12link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot12link_speed` ({0}), must be one of {1}"
                .format(slot12link_speed, allowed_values)
            )

        self._slot12link_speed = slot12link_speed

    @property
    def slot12state(self):
        """
        Gets the slot12state of this BiosPolicy.
        BIOS Token for setting Slot 12 state configuration.  

        :return: The slot12state of this BiosPolicy.
        :rtype: str
        """
        return self._slot12state

    @slot12state.setter
    def slot12state(self, slot12state):
        """
        Sets the slot12state of this BiosPolicy.
        BIOS Token for setting Slot 12 state configuration.  

        :param slot12state: The slot12state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot12state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot12state` ({0}), must be one of {1}"
                .format(slot12state, allowed_values)
            )

        self._slot12state = slot12state

    @property
    def slot13state(self):
        """
        Gets the slot13state of this BiosPolicy.
        BIOS Token for setting PCIe Slot 13 OptionROM configuration.  

        :return: The slot13state of this BiosPolicy.
        :rtype: str
        """
        return self._slot13state

    @slot13state.setter
    def slot13state(self, slot13state):
        """
        Sets the slot13state of this BiosPolicy.
        BIOS Token for setting PCIe Slot 13 OptionROM configuration.  

        :param slot13state: The slot13state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot13state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot13state` ({0}), must be one of {1}"
                .format(slot13state, allowed_values)
            )

        self._slot13state = slot13state

    @property
    def slot14state(self):
        """
        Gets the slot14state of this BiosPolicy.
        BIOS Token for setting PCIe Slot 14 OptionROM configuration.  

        :return: The slot14state of this BiosPolicy.
        :rtype: str
        """
        return self._slot14state

    @slot14state.setter
    def slot14state(self, slot14state):
        """
        Sets the slot14state of this BiosPolicy.
        BIOS Token for setting PCIe Slot 14 OptionROM configuration.  

        :param slot14state: The slot14state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot14state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot14state` ({0}), must be one of {1}"
                .format(slot14state, allowed_values)
            )

        self._slot14state = slot14state

    @property
    def slot1link_speed(self):
        """
        Gets the slot1link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:1 Link Speed configuration.  

        :return: The slot1link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot1link_speed

    @slot1link_speed.setter
    def slot1link_speed(self, slot1link_speed):
        """
        Sets the slot1link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:1 Link Speed configuration.  

        :param slot1link_speed: The slot1link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot1link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot1link_speed` ({0}), must be one of {1}"
                .format(slot1link_speed, allowed_values)
            )

        self._slot1link_speed = slot1link_speed

    @property
    def slot1state(self):
        """
        Gets the slot1state of this BiosPolicy.
        BIOS Token for setting Slot 1 state configuration.  

        :return: The slot1state of this BiosPolicy.
        :rtype: str
        """
        return self._slot1state

    @slot1state.setter
    def slot1state(self, slot1state):
        """
        Sets the slot1state of this BiosPolicy.
        BIOS Token for setting Slot 1 state configuration.  

        :param slot1state: The slot1state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if slot1state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot1state` ({0}), must be one of {1}"
                .format(slot1state, allowed_values)
            )

        self._slot1state = slot1state

    @property
    def slot2link_speed(self):
        """
        Gets the slot2link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:2 Link Speed configuration.  

        :return: The slot2link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot2link_speed

    @slot2link_speed.setter
    def slot2link_speed(self, slot2link_speed):
        """
        Sets the slot2link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:2 Link Speed configuration.  

        :param slot2link_speed: The slot2link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot2link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot2link_speed` ({0}), must be one of {1}"
                .format(slot2link_speed, allowed_values)
            )

        self._slot2link_speed = slot2link_speed

    @property
    def slot2state(self):
        """
        Gets the slot2state of this BiosPolicy.
        BIOS Token for setting Slot 2 state configuration.  

        :return: The slot2state of this BiosPolicy.
        :rtype: str
        """
        return self._slot2state

    @slot2state.setter
    def slot2state(self, slot2state):
        """
        Sets the slot2state of this BiosPolicy.
        BIOS Token for setting Slot 2 state configuration.  

        :param slot2state: The slot2state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if slot2state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot2state` ({0}), must be one of {1}"
                .format(slot2state, allowed_values)
            )

        self._slot2state = slot2state

    @property
    def slot3link_speed(self):
        """
        Gets the slot3link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:3 Link Speed configuration.  

        :return: The slot3link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot3link_speed

    @slot3link_speed.setter
    def slot3link_speed(self, slot3link_speed):
        """
        Sets the slot3link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:3 Link Speed configuration.  

        :param slot3link_speed: The slot3link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot3link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot3link_speed` ({0}), must be one of {1}"
                .format(slot3link_speed, allowed_values)
            )

        self._slot3link_speed = slot3link_speed

    @property
    def slot3state(self):
        """
        Gets the slot3state of this BiosPolicy.
        BIOS Token for setting Slot 3 state configuration.  

        :return: The slot3state of this BiosPolicy.
        :rtype: str
        """
        return self._slot3state

    @slot3state.setter
    def slot3state(self, slot3state):
        """
        Sets the slot3state of this BiosPolicy.
        BIOS Token for setting Slot 3 state configuration.  

        :param slot3state: The slot3state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if slot3state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot3state` ({0}), must be one of {1}"
                .format(slot3state, allowed_values)
            )

        self._slot3state = slot3state

    @property
    def slot4link_speed(self):
        """
        Gets the slot4link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:4 Link Speed configuration.  

        :return: The slot4link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot4link_speed

    @slot4link_speed.setter
    def slot4link_speed(self, slot4link_speed):
        """
        Sets the slot4link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:4 Link Speed configuration.  

        :param slot4link_speed: The slot4link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot4link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot4link_speed` ({0}), must be one of {1}"
                .format(slot4link_speed, allowed_values)
            )

        self._slot4link_speed = slot4link_speed

    @property
    def slot4state(self):
        """
        Gets the slot4state of this BiosPolicy.
        BIOS Token for setting Slot 4 state configuration.  

        :return: The slot4state of this BiosPolicy.
        :rtype: str
        """
        return self._slot4state

    @slot4state.setter
    def slot4state(self, slot4state):
        """
        Sets the slot4state of this BiosPolicy.
        BIOS Token for setting Slot 4 state configuration.  

        :param slot4state: The slot4state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if slot4state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot4state` ({0}), must be one of {1}"
                .format(slot4state, allowed_values)
            )

        self._slot4state = slot4state

    @property
    def slot5link_speed(self):
        """
        Gets the slot5link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:5 Link Speed configuration.  

        :return: The slot5link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot5link_speed

    @slot5link_speed.setter
    def slot5link_speed(self, slot5link_speed):
        """
        Sets the slot5link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:5 Link Speed configuration.  

        :param slot5link_speed: The slot5link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot5link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot5link_speed` ({0}), must be one of {1}"
                .format(slot5link_speed, allowed_values)
            )

        self._slot5link_speed = slot5link_speed

    @property
    def slot5state(self):
        """
        Gets the slot5state of this BiosPolicy.
        BIOS Token for setting Slot 5 state configuration.  

        :return: The slot5state of this BiosPolicy.
        :rtype: str
        """
        return self._slot5state

    @slot5state.setter
    def slot5state(self, slot5state):
        """
        Sets the slot5state of this BiosPolicy.
        BIOS Token for setting Slot 5 state configuration.  

        :param slot5state: The slot5state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if slot5state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot5state` ({0}), must be one of {1}"
                .format(slot5state, allowed_values)
            )

        self._slot5state = slot5state

    @property
    def slot6link_speed(self):
        """
        Gets the slot6link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:6 Link Speed configuration.  

        :return: The slot6link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot6link_speed

    @slot6link_speed.setter
    def slot6link_speed(self, slot6link_speed):
        """
        Sets the slot6link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:6 Link Speed configuration.  

        :param slot6link_speed: The slot6link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot6link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot6link_speed` ({0}), must be one of {1}"
                .format(slot6link_speed, allowed_values)
            )

        self._slot6link_speed = slot6link_speed

    @property
    def slot6state(self):
        """
        Gets the slot6state of this BiosPolicy.
        BIOS Token for setting Slot 6 state configuration.  

        :return: The slot6state of this BiosPolicy.
        :rtype: str
        """
        return self._slot6state

    @slot6state.setter
    def slot6state(self, slot6state):
        """
        Sets the slot6state of this BiosPolicy.
        BIOS Token for setting Slot 6 state configuration.  

        :param slot6state: The slot6state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if slot6state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot6state` ({0}), must be one of {1}"
                .format(slot6state, allowed_values)
            )

        self._slot6state = slot6state

    @property
    def slot7link_speed(self):
        """
        Gets the slot7link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:7 Link Speed configuration.  

        :return: The slot7link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot7link_speed

    @slot7link_speed.setter
    def slot7link_speed(self, slot7link_speed):
        """
        Sets the slot7link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:7 Link Speed configuration.  

        :param slot7link_speed: The slot7link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot7link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot7link_speed` ({0}), must be one of {1}"
                .format(slot7link_speed, allowed_values)
            )

        self._slot7link_speed = slot7link_speed

    @property
    def slot7state(self):
        """
        Gets the slot7state of this BiosPolicy.
        BIOS Token for setting Slot 7 state configuration.  

        :return: The slot7state of this BiosPolicy.
        :rtype: str
        """
        return self._slot7state

    @slot7state.setter
    def slot7state(self, slot7state):
        """
        Sets the slot7state of this BiosPolicy.
        BIOS Token for setting Slot 7 state configuration.  

        :param slot7state: The slot7state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if slot7state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot7state` ({0}), must be one of {1}"
                .format(slot7state, allowed_values)
            )

        self._slot7state = slot7state

    @property
    def slot8link_speed(self):
        """
        Gets the slot8link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:8 Link Speed configuration.  

        :return: The slot8link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot8link_speed

    @slot8link_speed.setter
    def slot8link_speed(self, slot8link_speed):
        """
        Sets the slot8link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:8 Link Speed configuration.  

        :param slot8link_speed: The slot8link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot8link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot8link_speed` ({0}), must be one of {1}"
                .format(slot8link_speed, allowed_values)
            )

        self._slot8link_speed = slot8link_speed

    @property
    def slot8state(self):
        """
        Gets the slot8state of this BiosPolicy.
        BIOS Token for setting Slot 8 state configuration.  

        :return: The slot8state of this BiosPolicy.
        :rtype: str
        """
        return self._slot8state

    @slot8state.setter
    def slot8state(self, slot8state):
        """
        Sets the slot8state of this BiosPolicy.
        BIOS Token for setting Slot 8 state configuration.  

        :param slot8state: The slot8state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if slot8state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot8state` ({0}), must be one of {1}"
                .format(slot8state, allowed_values)
            )

        self._slot8state = slot8state

    @property
    def slot9link_speed(self):
        """
        Gets the slot9link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:9 Link Speed configuration.  

        :return: The slot9link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot9link_speed

    @slot9link_speed.setter
    def slot9link_speed(self, slot9link_speed):
        """
        Sets the slot9link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:9 Link Speed configuration.  

        :param slot9link_speed: The slot9link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot9link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot9link_speed` ({0}), must be one of {1}"
                .format(slot9link_speed, allowed_values)
            )

        self._slot9link_speed = slot9link_speed

    @property
    def slot9state(self):
        """
        Gets the slot9state of this BiosPolicy.
        BIOS Token for setting Slot 9 state configuration.  

        :return: The slot9state of this BiosPolicy.
        :rtype: str
        """
        return self._slot9state

    @slot9state.setter
    def slot9state(self, slot9state):
        """
        Sets the slot9state of this BiosPolicy.
        BIOS Token for setting Slot 9 state configuration.  

        :param slot9state: The slot9state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if slot9state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot9state` ({0}), must be one of {1}"
                .format(slot9state, allowed_values)
            )

        self._slot9state = slot9state

    @property
    def slot_flom_link_speed(self):
        """
        Gets the slot_flom_link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:FLOM Link Speed configuration.  

        :return: The slot_flom_link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_flom_link_speed

    @slot_flom_link_speed.setter
    def slot_flom_link_speed(self, slot_flom_link_speed):
        """
        Sets the slot_flom_link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:FLOM Link Speed configuration.  

        :param slot_flom_link_speed: The slot_flom_link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_flom_link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_flom_link_speed` ({0}), must be one of {1}"
                .format(slot_flom_link_speed, allowed_values)
            )

        self._slot_flom_link_speed = slot_flom_link_speed

    @property
    def slot_front_nvme1link_speed(self):
        """
        Gets the slot_front_nvme1link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Front Nvme1 Link Speed configuration.  

        :return: The slot_front_nvme1link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_front_nvme1link_speed

    @slot_front_nvme1link_speed.setter
    def slot_front_nvme1link_speed(self, slot_front_nvme1link_speed):
        """
        Sets the slot_front_nvme1link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Front Nvme1 Link Speed configuration.  

        :param slot_front_nvme1link_speed: The slot_front_nvme1link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_front_nvme1link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_front_nvme1link_speed` ({0}), must be one of {1}"
                .format(slot_front_nvme1link_speed, allowed_values)
            )

        self._slot_front_nvme1link_speed = slot_front_nvme1link_speed

    @property
    def slot_front_nvme2link_speed(self):
        """
        Gets the slot_front_nvme2link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Front Nvme2 Link Speed configuration.  

        :return: The slot_front_nvme2link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_front_nvme2link_speed

    @slot_front_nvme2link_speed.setter
    def slot_front_nvme2link_speed(self, slot_front_nvme2link_speed):
        """
        Sets the slot_front_nvme2link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Front Nvme2 Link Speed configuration.  

        :param slot_front_nvme2link_speed: The slot_front_nvme2link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_front_nvme2link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_front_nvme2link_speed` ({0}), must be one of {1}"
                .format(slot_front_nvme2link_speed, allowed_values)
            )

        self._slot_front_nvme2link_speed = slot_front_nvme2link_speed

    @property
    def slot_front_slot5link_speed(self):
        """
        Gets the slot_front_slot5link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Front1 Link Speed configuration.  

        :return: The slot_front_slot5link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_front_slot5link_speed

    @slot_front_slot5link_speed.setter
    def slot_front_slot5link_speed(self, slot_front_slot5link_speed):
        """
        Sets the slot_front_slot5link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Front1 Link Speed configuration.  

        :param slot_front_slot5link_speed: The slot_front_slot5link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_front_slot5link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_front_slot5link_speed` ({0}), must be one of {1}"
                .format(slot_front_slot5link_speed, allowed_values)
            )

        self._slot_front_slot5link_speed = slot_front_slot5link_speed

    @property
    def slot_front_slot6link_speed(self):
        """
        Gets the slot_front_slot6link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Front2 Link Speed configuration.  

        :return: The slot_front_slot6link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_front_slot6link_speed

    @slot_front_slot6link_speed.setter
    def slot_front_slot6link_speed(self, slot_front_slot6link_speed):
        """
        Sets the slot_front_slot6link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Front2 Link Speed configuration.  

        :param slot_front_slot6link_speed: The slot_front_slot6link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_front_slot6link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_front_slot6link_speed` ({0}), must be one of {1}"
                .format(slot_front_slot6link_speed, allowed_values)
            )

        self._slot_front_slot6link_speed = slot_front_slot6link_speed

    @property
    def slot_gpu1state(self):
        """
        Gets the slot_gpu1state of this BiosPolicy.
        BIOS Token for setting GPU1 OptionROM configuration.  

        :return: The slot_gpu1state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_gpu1state

    @slot_gpu1state.setter
    def slot_gpu1state(self, slot_gpu1state):
        """
        Sets the slot_gpu1state of this BiosPolicy.
        BIOS Token for setting GPU1 OptionROM configuration.  

        :param slot_gpu1state: The slot_gpu1state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_gpu1state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_gpu1state` ({0}), must be one of {1}"
                .format(slot_gpu1state, allowed_values)
            )

        self._slot_gpu1state = slot_gpu1state

    @property
    def slot_gpu2state(self):
        """
        Gets the slot_gpu2state of this BiosPolicy.
        BIOS Token for setting GPU2 OptionROM configuration.  

        :return: The slot_gpu2state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_gpu2state

    @slot_gpu2state.setter
    def slot_gpu2state(self, slot_gpu2state):
        """
        Sets the slot_gpu2state of this BiosPolicy.
        BIOS Token for setting GPU2 OptionROM configuration.  

        :param slot_gpu2state: The slot_gpu2state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_gpu2state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_gpu2state` ({0}), must be one of {1}"
                .format(slot_gpu2state, allowed_values)
            )

        self._slot_gpu2state = slot_gpu2state

    @property
    def slot_gpu3state(self):
        """
        Gets the slot_gpu3state of this BiosPolicy.
        BIOS Token for setting GPU3 OptionROM configuration.  

        :return: The slot_gpu3state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_gpu3state

    @slot_gpu3state.setter
    def slot_gpu3state(self, slot_gpu3state):
        """
        Sets the slot_gpu3state of this BiosPolicy.
        BIOS Token for setting GPU3 OptionROM configuration.  

        :param slot_gpu3state: The slot_gpu3state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_gpu3state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_gpu3state` ({0}), must be one of {1}"
                .format(slot_gpu3state, allowed_values)
            )

        self._slot_gpu3state = slot_gpu3state

    @property
    def slot_gpu4state(self):
        """
        Gets the slot_gpu4state of this BiosPolicy.
        BIOS Token for setting GPU4 OptionROM configuration.  

        :return: The slot_gpu4state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_gpu4state

    @slot_gpu4state.setter
    def slot_gpu4state(self, slot_gpu4state):
        """
        Sets the slot_gpu4state of this BiosPolicy.
        BIOS Token for setting GPU4 OptionROM configuration.  

        :param slot_gpu4state: The slot_gpu4state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_gpu4state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_gpu4state` ({0}), must be one of {1}"
                .format(slot_gpu4state, allowed_values)
            )

        self._slot_gpu4state = slot_gpu4state

    @property
    def slot_gpu5state(self):
        """
        Gets the slot_gpu5state of this BiosPolicy.
        BIOS Token for setting GPU5 OptionROM configuration.  

        :return: The slot_gpu5state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_gpu5state

    @slot_gpu5state.setter
    def slot_gpu5state(self, slot_gpu5state):
        """
        Sets the slot_gpu5state of this BiosPolicy.
        BIOS Token for setting GPU5 OptionROM configuration.  

        :param slot_gpu5state: The slot_gpu5state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_gpu5state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_gpu5state` ({0}), must be one of {1}"
                .format(slot_gpu5state, allowed_values)
            )

        self._slot_gpu5state = slot_gpu5state

    @property
    def slot_gpu6state(self):
        """
        Gets the slot_gpu6state of this BiosPolicy.
        BIOS Token for setting GPU6 OptionROM configuration.  

        :return: The slot_gpu6state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_gpu6state

    @slot_gpu6state.setter
    def slot_gpu6state(self, slot_gpu6state):
        """
        Sets the slot_gpu6state of this BiosPolicy.
        BIOS Token for setting GPU6 OptionROM configuration.  

        :param slot_gpu6state: The slot_gpu6state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_gpu6state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_gpu6state` ({0}), must be one of {1}"
                .format(slot_gpu6state, allowed_values)
            )

        self._slot_gpu6state = slot_gpu6state

    @property
    def slot_gpu7state(self):
        """
        Gets the slot_gpu7state of this BiosPolicy.
        BIOS Token for setting GPU7 OptionROM configuration.  

        :return: The slot_gpu7state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_gpu7state

    @slot_gpu7state.setter
    def slot_gpu7state(self, slot_gpu7state):
        """
        Sets the slot_gpu7state of this BiosPolicy.
        BIOS Token for setting GPU7 OptionROM configuration.  

        :param slot_gpu7state: The slot_gpu7state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_gpu7state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_gpu7state` ({0}), must be one of {1}"
                .format(slot_gpu7state, allowed_values)
            )

        self._slot_gpu7state = slot_gpu7state

    @property
    def slot_gpu8state(self):
        """
        Gets the slot_gpu8state of this BiosPolicy.
        BIOS Token for setting GPU8 OptionROM configuration.  

        :return: The slot_gpu8state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_gpu8state

    @slot_gpu8state.setter
    def slot_gpu8state(self, slot_gpu8state):
        """
        Sets the slot_gpu8state of this BiosPolicy.
        BIOS Token for setting GPU8 OptionROM configuration.  

        :param slot_gpu8state: The slot_gpu8state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_gpu8state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_gpu8state` ({0}), must be one of {1}"
                .format(slot_gpu8state, allowed_values)
            )

        self._slot_gpu8state = slot_gpu8state

    @property
    def slot_hba_link_speed(self):
        """
        Gets the slot_hba_link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:HBA Link Speed configuration.  

        :return: The slot_hba_link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_hba_link_speed

    @slot_hba_link_speed.setter
    def slot_hba_link_speed(self, slot_hba_link_speed):
        """
        Sets the slot_hba_link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:HBA Link Speed configuration.  

        :param slot_hba_link_speed: The slot_hba_link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_hba_link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_hba_link_speed` ({0}), must be one of {1}"
                .format(slot_hba_link_speed, allowed_values)
            )

        self._slot_hba_link_speed = slot_hba_link_speed

    @property
    def slot_hba_state(self):
        """
        Gets the slot_hba_state of this BiosPolicy.
        BIOS Token for setting PCIe Slot:HBA OptionROM configuration.  

        :return: The slot_hba_state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_hba_state

    @slot_hba_state.setter
    def slot_hba_state(self, slot_hba_state):
        """
        Sets the slot_hba_state of this BiosPolicy.
        BIOS Token for setting PCIe Slot:HBA OptionROM configuration.  

        :param slot_hba_state: The slot_hba_state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if slot_hba_state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_hba_state` ({0}), must be one of {1}"
                .format(slot_hba_state, allowed_values)
            )

        self._slot_hba_state = slot_hba_state

    @property
    def slot_lom1link(self):
        """
        Gets the slot_lom1link of this BiosPolicy.
        BIOS Token for setting PCIe LOM:1 Link configuration.  

        :return: The slot_lom1link of this BiosPolicy.
        :rtype: str
        """
        return self._slot_lom1link

    @slot_lom1link.setter
    def slot_lom1link(self, slot_lom1link):
        """
        Sets the slot_lom1link of this BiosPolicy.
        BIOS Token for setting PCIe LOM:1 Link configuration.  

        :param slot_lom1link: The slot_lom1link of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_lom1link not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_lom1link` ({0}), must be one of {1}"
                .format(slot_lom1link, allowed_values)
            )

        self._slot_lom1link = slot_lom1link

    @property
    def slot_lom2link(self):
        """
        Gets the slot_lom2link of this BiosPolicy.
        BIOS Token for setting PCIe LOM:2 Link configuration.  

        :return: The slot_lom2link of this BiosPolicy.
        :rtype: str
        """
        return self._slot_lom2link

    @slot_lom2link.setter
    def slot_lom2link(self, slot_lom2link):
        """
        Sets the slot_lom2link of this BiosPolicy.
        BIOS Token for setting PCIe LOM:2 Link configuration.  

        :param slot_lom2link: The slot_lom2link of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_lom2link not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_lom2link` ({0}), must be one of {1}"
                .format(slot_lom2link, allowed_values)
            )

        self._slot_lom2link = slot_lom2link

    @property
    def slot_mezz_state(self):
        """
        Gets the slot_mezz_state of this BiosPolicy.
        BIOS Token for setting Slot Mezz state configuration.  

        :return: The slot_mezz_state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_mezz_state

    @slot_mezz_state.setter
    def slot_mezz_state(self, slot_mezz_state):
        """
        Sets the slot_mezz_state of this BiosPolicy.
        BIOS Token for setting Slot Mezz state configuration.  

        :param slot_mezz_state: The slot_mezz_state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if slot_mezz_state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_mezz_state` ({0}), must be one of {1}"
                .format(slot_mezz_state, allowed_values)
            )

        self._slot_mezz_state = slot_mezz_state

    @property
    def slot_mlom_link_speed(self):
        """
        Gets the slot_mlom_link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:MLOM Link Speed configuration.  

        :return: The slot_mlom_link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_mlom_link_speed

    @slot_mlom_link_speed.setter
    def slot_mlom_link_speed(self, slot_mlom_link_speed):
        """
        Sets the slot_mlom_link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:MLOM Link Speed configuration.  

        :param slot_mlom_link_speed: The slot_mlom_link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_mlom_link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_mlom_link_speed` ({0}), must be one of {1}"
                .format(slot_mlom_link_speed, allowed_values)
            )

        self._slot_mlom_link_speed = slot_mlom_link_speed

    @property
    def slot_mlom_state(self):
        """
        Gets the slot_mlom_state of this BiosPolicy.
        BIOS Token for setting PCIe Slot MLOM OptionROM configuration.  

        :return: The slot_mlom_state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_mlom_state

    @slot_mlom_state.setter
    def slot_mlom_state(self, slot_mlom_state):
        """
        Sets the slot_mlom_state of this BiosPolicy.
        BIOS Token for setting PCIe Slot MLOM OptionROM configuration.  

        :param slot_mlom_state: The slot_mlom_state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if slot_mlom_state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_mlom_state` ({0}), must be one of {1}"
                .format(slot_mlom_state, allowed_values)
            )

        self._slot_mlom_state = slot_mlom_state

    @property
    def slot_mraid_link_speed(self):
        """
        Gets the slot_mraid_link_speed of this BiosPolicy.
        BIOS Token for setting MRAID Link Speed configuration.  

        :return: The slot_mraid_link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_mraid_link_speed

    @slot_mraid_link_speed.setter
    def slot_mraid_link_speed(self, slot_mraid_link_speed):
        """
        Sets the slot_mraid_link_speed of this BiosPolicy.
        BIOS Token for setting MRAID Link Speed configuration.  

        :param slot_mraid_link_speed: The slot_mraid_link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_mraid_link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_mraid_link_speed` ({0}), must be one of {1}"
                .format(slot_mraid_link_speed, allowed_values)
            )

        self._slot_mraid_link_speed = slot_mraid_link_speed

    @property
    def slot_mraid_state(self):
        """
        Gets the slot_mraid_state of this BiosPolicy.
        BIOS Token for setting PCIe Slot MRAID OptionROM configuration.  

        :return: The slot_mraid_state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_mraid_state

    @slot_mraid_state.setter
    def slot_mraid_state(self, slot_mraid_state):
        """
        Sets the slot_mraid_state of this BiosPolicy.
        BIOS Token for setting PCIe Slot MRAID OptionROM configuration.  

        :param slot_mraid_state: The slot_mraid_state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_mraid_state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_mraid_state` ({0}), must be one of {1}"
                .format(slot_mraid_state, allowed_values)
            )

        self._slot_mraid_state = slot_mraid_state

    @property
    def slot_n10state(self):
        """
        Gets the slot_n10state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N10 OptionROM configuration.  

        :return: The slot_n10state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n10state

    @slot_n10state.setter
    def slot_n10state(self, slot_n10state):
        """
        Sets the slot_n10state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N10 OptionROM configuration.  

        :param slot_n10state: The slot_n10state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n10state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n10state` ({0}), must be one of {1}"
                .format(slot_n10state, allowed_values)
            )

        self._slot_n10state = slot_n10state

    @property
    def slot_n11state(self):
        """
        Gets the slot_n11state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N11 OptionROM configuration.  

        :return: The slot_n11state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n11state

    @slot_n11state.setter
    def slot_n11state(self, slot_n11state):
        """
        Sets the slot_n11state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N11 OptionROM configuration.  

        :param slot_n11state: The slot_n11state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n11state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n11state` ({0}), must be one of {1}"
                .format(slot_n11state, allowed_values)
            )

        self._slot_n11state = slot_n11state

    @property
    def slot_n12state(self):
        """
        Gets the slot_n12state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N12 OptionROM configuration.  

        :return: The slot_n12state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n12state

    @slot_n12state.setter
    def slot_n12state(self, slot_n12state):
        """
        Sets the slot_n12state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N12 OptionROM configuration.  

        :param slot_n12state: The slot_n12state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n12state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n12state` ({0}), must be one of {1}"
                .format(slot_n12state, allowed_values)
            )

        self._slot_n12state = slot_n12state

    @property
    def slot_n13state(self):
        """
        Gets the slot_n13state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N13 OptionROM configuration.  

        :return: The slot_n13state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n13state

    @slot_n13state.setter
    def slot_n13state(self, slot_n13state):
        """
        Sets the slot_n13state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N13 OptionROM configuration.  

        :param slot_n13state: The slot_n13state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n13state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n13state` ({0}), must be one of {1}"
                .format(slot_n13state, allowed_values)
            )

        self._slot_n13state = slot_n13state

    @property
    def slot_n14state(self):
        """
        Gets the slot_n14state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N14 OptionROM configuration.  

        :return: The slot_n14state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n14state

    @slot_n14state.setter
    def slot_n14state(self, slot_n14state):
        """
        Sets the slot_n14state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N14 OptionROM configuration.  

        :param slot_n14state: The slot_n14state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n14state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n14state` ({0}), must be one of {1}"
                .format(slot_n14state, allowed_values)
            )

        self._slot_n14state = slot_n14state

    @property
    def slot_n15state(self):
        """
        Gets the slot_n15state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N15 OptionROM configuration.  

        :return: The slot_n15state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n15state

    @slot_n15state.setter
    def slot_n15state(self, slot_n15state):
        """
        Sets the slot_n15state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N15 OptionROM configuration.  

        :param slot_n15state: The slot_n15state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n15state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n15state` ({0}), must be one of {1}"
                .format(slot_n15state, allowed_values)
            )

        self._slot_n15state = slot_n15state

    @property
    def slot_n16state(self):
        """
        Gets the slot_n16state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N16 OptionROM configuration.  

        :return: The slot_n16state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n16state

    @slot_n16state.setter
    def slot_n16state(self, slot_n16state):
        """
        Sets the slot_n16state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N16 OptionROM configuration.  

        :param slot_n16state: The slot_n16state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n16state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n16state` ({0}), must be one of {1}"
                .format(slot_n16state, allowed_values)
            )

        self._slot_n16state = slot_n16state

    @property
    def slot_n17state(self):
        """
        Gets the slot_n17state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N17 OptionROM configuration.  

        :return: The slot_n17state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n17state

    @slot_n17state.setter
    def slot_n17state(self, slot_n17state):
        """
        Sets the slot_n17state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N17 OptionROM configuration.  

        :param slot_n17state: The slot_n17state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n17state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n17state` ({0}), must be one of {1}"
                .format(slot_n17state, allowed_values)
            )

        self._slot_n17state = slot_n17state

    @property
    def slot_n18state(self):
        """
        Gets the slot_n18state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N18 OptionROM configuration.  

        :return: The slot_n18state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n18state

    @slot_n18state.setter
    def slot_n18state(self, slot_n18state):
        """
        Sets the slot_n18state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N18 OptionROM configuration.  

        :param slot_n18state: The slot_n18state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n18state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n18state` ({0}), must be one of {1}"
                .format(slot_n18state, allowed_values)
            )

        self._slot_n18state = slot_n18state

    @property
    def slot_n19state(self):
        """
        Gets the slot_n19state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N19 OptionROM configuration.  

        :return: The slot_n19state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n19state

    @slot_n19state.setter
    def slot_n19state(self, slot_n19state):
        """
        Sets the slot_n19state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N19 OptionROM configuration.  

        :param slot_n19state: The slot_n19state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n19state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n19state` ({0}), must be one of {1}"
                .format(slot_n19state, allowed_values)
            )

        self._slot_n19state = slot_n19state

    @property
    def slot_n1state(self):
        """
        Gets the slot_n1state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N1 OptionROM configuration.  

        :return: The slot_n1state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n1state

    @slot_n1state.setter
    def slot_n1state(self, slot_n1state):
        """
        Sets the slot_n1state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N1 OptionROM configuration.  

        :param slot_n1state: The slot_n1state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if slot_n1state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n1state` ({0}), must be one of {1}"
                .format(slot_n1state, allowed_values)
            )

        self._slot_n1state = slot_n1state

    @property
    def slot_n20state(self):
        """
        Gets the slot_n20state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N20 OptionROM configuration.  

        :return: The slot_n20state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n20state

    @slot_n20state.setter
    def slot_n20state(self, slot_n20state):
        """
        Sets the slot_n20state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N20 OptionROM configuration.  

        :param slot_n20state: The slot_n20state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n20state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n20state` ({0}), must be one of {1}"
                .format(slot_n20state, allowed_values)
            )

        self._slot_n20state = slot_n20state

    @property
    def slot_n21state(self):
        """
        Gets the slot_n21state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N21 OptionROM configuration.  

        :return: The slot_n21state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n21state

    @slot_n21state.setter
    def slot_n21state(self, slot_n21state):
        """
        Sets the slot_n21state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N21 OptionROM configuration.  

        :param slot_n21state: The slot_n21state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n21state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n21state` ({0}), must be one of {1}"
                .format(slot_n21state, allowed_values)
            )

        self._slot_n21state = slot_n21state

    @property
    def slot_n22state(self):
        """
        Gets the slot_n22state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N22 OptionROM configuration.  

        :return: The slot_n22state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n22state

    @slot_n22state.setter
    def slot_n22state(self, slot_n22state):
        """
        Sets the slot_n22state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N22 OptionROM configuration.  

        :param slot_n22state: The slot_n22state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n22state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n22state` ({0}), must be one of {1}"
                .format(slot_n22state, allowed_values)
            )

        self._slot_n22state = slot_n22state

    @property
    def slot_n23state(self):
        """
        Gets the slot_n23state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N23 OptionROM configuration.  

        :return: The slot_n23state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n23state

    @slot_n23state.setter
    def slot_n23state(self, slot_n23state):
        """
        Sets the slot_n23state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N23 OptionROM configuration.  

        :param slot_n23state: The slot_n23state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n23state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n23state` ({0}), must be one of {1}"
                .format(slot_n23state, allowed_values)
            )

        self._slot_n23state = slot_n23state

    @property
    def slot_n24state(self):
        """
        Gets the slot_n24state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N24 OptionROM configuration.  

        :return: The slot_n24state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n24state

    @slot_n24state.setter
    def slot_n24state(self, slot_n24state):
        """
        Sets the slot_n24state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N24 OptionROM configuration.  

        :param slot_n24state: The slot_n24state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n24state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n24state` ({0}), must be one of {1}"
                .format(slot_n24state, allowed_values)
            )

        self._slot_n24state = slot_n24state

    @property
    def slot_n2state(self):
        """
        Gets the slot_n2state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N2 OptionROM configuration.  

        :return: The slot_n2state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n2state

    @slot_n2state.setter
    def slot_n2state(self, slot_n2state):
        """
        Sets the slot_n2state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N2 OptionROM configuration.  

        :param slot_n2state: The slot_n2state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if slot_n2state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n2state` ({0}), must be one of {1}"
                .format(slot_n2state, allowed_values)
            )

        self._slot_n2state = slot_n2state

    @property
    def slot_n3state(self):
        """
        Gets the slot_n3state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N3 OptionROM configuration.  

        :return: The slot_n3state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n3state

    @slot_n3state.setter
    def slot_n3state(self, slot_n3state):
        """
        Sets the slot_n3state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N3 OptionROM configuration.  

        :param slot_n3state: The slot_n3state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n3state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n3state` ({0}), must be one of {1}"
                .format(slot_n3state, allowed_values)
            )

        self._slot_n3state = slot_n3state

    @property
    def slot_n4state(self):
        """
        Gets the slot_n4state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N4 OptionROM configuration.  

        :return: The slot_n4state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n4state

    @slot_n4state.setter
    def slot_n4state(self, slot_n4state):
        """
        Sets the slot_n4state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N4 OptionROM configuration.  

        :param slot_n4state: The slot_n4state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n4state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n4state` ({0}), must be one of {1}"
                .format(slot_n4state, allowed_values)
            )

        self._slot_n4state = slot_n4state

    @property
    def slot_n5state(self):
        """
        Gets the slot_n5state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N5 OptionROM configuration.  

        :return: The slot_n5state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n5state

    @slot_n5state.setter
    def slot_n5state(self, slot_n5state):
        """
        Sets the slot_n5state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N5 OptionROM configuration.  

        :param slot_n5state: The slot_n5state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n5state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n5state` ({0}), must be one of {1}"
                .format(slot_n5state, allowed_values)
            )

        self._slot_n5state = slot_n5state

    @property
    def slot_n6state(self):
        """
        Gets the slot_n6state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N6 OptionROM configuration.  

        :return: The slot_n6state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n6state

    @slot_n6state.setter
    def slot_n6state(self, slot_n6state):
        """
        Sets the slot_n6state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N6 OptionROM configuration.  

        :param slot_n6state: The slot_n6state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n6state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n6state` ({0}), must be one of {1}"
                .format(slot_n6state, allowed_values)
            )

        self._slot_n6state = slot_n6state

    @property
    def slot_n7state(self):
        """
        Gets the slot_n7state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N7 OptionROM configuration.  

        :return: The slot_n7state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n7state

    @slot_n7state.setter
    def slot_n7state(self, slot_n7state):
        """
        Sets the slot_n7state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N7 OptionROM configuration.  

        :param slot_n7state: The slot_n7state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n7state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n7state` ({0}), must be one of {1}"
                .format(slot_n7state, allowed_values)
            )

        self._slot_n7state = slot_n7state

    @property
    def slot_n8state(self):
        """
        Gets the slot_n8state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N8 OptionROM configuration.  

        :return: The slot_n8state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n8state

    @slot_n8state.setter
    def slot_n8state(self, slot_n8state):
        """
        Sets the slot_n8state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N8 OptionROM configuration.  

        :param slot_n8state: The slot_n8state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n8state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n8state` ({0}), must be one of {1}"
                .format(slot_n8state, allowed_values)
            )

        self._slot_n8state = slot_n8state

    @property
    def slot_n9state(self):
        """
        Gets the slot_n9state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N9 OptionROM configuration.  

        :return: The slot_n9state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_n9state

    @slot_n9state.setter
    def slot_n9state(self, slot_n9state):
        """
        Sets the slot_n9state of this BiosPolicy.
        BIOS Token for setting PCIe Slot N9 OptionROM configuration.  

        :param slot_n9state: The slot_n9state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_n9state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_n9state` ({0}), must be one of {1}"
                .format(slot_n9state, allowed_values)
            )

        self._slot_n9state = slot_n9state

    @property
    def slot_raid_link_speed(self):
        """
        Gets the slot_raid_link_speed of this BiosPolicy.
        BIOS Token for setting RAID Link Speed configuration.  

        :return: The slot_raid_link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_raid_link_speed

    @slot_raid_link_speed.setter
    def slot_raid_link_speed(self, slot_raid_link_speed):
        """
        Sets the slot_raid_link_speed of this BiosPolicy.
        BIOS Token for setting RAID Link Speed configuration.  

        :param slot_raid_link_speed: The slot_raid_link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_raid_link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_raid_link_speed` ({0}), must be one of {1}"
                .format(slot_raid_link_speed, allowed_values)
            )

        self._slot_raid_link_speed = slot_raid_link_speed

    @property
    def slot_raid_state(self):
        """
        Gets the slot_raid_state of this BiosPolicy.
        BIOS Token for setting PCIe Slot RAID OptionROM configuration.  

        :return: The slot_raid_state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_raid_state

    @slot_raid_state.setter
    def slot_raid_state(self, slot_raid_state):
        """
        Sets the slot_raid_state of this BiosPolicy.
        BIOS Token for setting PCIe Slot RAID OptionROM configuration.  

        :param slot_raid_state: The slot_raid_state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_raid_state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_raid_state` ({0}), must be one of {1}"
                .format(slot_raid_state, allowed_values)
            )

        self._slot_raid_state = slot_raid_state

    @property
    def slot_rear_nvme1link_speed(self):
        """
        Gets the slot_rear_nvme1link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Rear Nvme1 Link Speed configuration.  

        :return: The slot_rear_nvme1link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_rear_nvme1link_speed

    @slot_rear_nvme1link_speed.setter
    def slot_rear_nvme1link_speed(self, slot_rear_nvme1link_speed):
        """
        Sets the slot_rear_nvme1link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Rear Nvme1 Link Speed configuration.  

        :param slot_rear_nvme1link_speed: The slot_rear_nvme1link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_rear_nvme1link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_rear_nvme1link_speed` ({0}), must be one of {1}"
                .format(slot_rear_nvme1link_speed, allowed_values)
            )

        self._slot_rear_nvme1link_speed = slot_rear_nvme1link_speed

    @property
    def slot_rear_nvme1state(self):
        """
        Gets the slot_rear_nvme1state of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Rear NVME 1 OptionRom configuration.  

        :return: The slot_rear_nvme1state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_rear_nvme1state

    @slot_rear_nvme1state.setter
    def slot_rear_nvme1state(self, slot_rear_nvme1state):
        """
        Sets the slot_rear_nvme1state of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Rear NVME 1 OptionRom configuration.  

        :param slot_rear_nvme1state: The slot_rear_nvme1state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_rear_nvme1state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_rear_nvme1state` ({0}), must be one of {1}"
                .format(slot_rear_nvme1state, allowed_values)
            )

        self._slot_rear_nvme1state = slot_rear_nvme1state

    @property
    def slot_rear_nvme2link_speed(self):
        """
        Gets the slot_rear_nvme2link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Rear Nvme2 Link Speed configuration.  

        :return: The slot_rear_nvme2link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_rear_nvme2link_speed

    @slot_rear_nvme2link_speed.setter
    def slot_rear_nvme2link_speed(self, slot_rear_nvme2link_speed):
        """
        Sets the slot_rear_nvme2link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Rear Nvme2 Link Speed configuration.  

        :param slot_rear_nvme2link_speed: The slot_rear_nvme2link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_rear_nvme2link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_rear_nvme2link_speed` ({0}), must be one of {1}"
                .format(slot_rear_nvme2link_speed, allowed_values)
            )

        self._slot_rear_nvme2link_speed = slot_rear_nvme2link_speed

    @property
    def slot_rear_nvme2state(self):
        """
        Gets the slot_rear_nvme2state of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Rear NVME 2 OptionRom configuration.  

        :return: The slot_rear_nvme2state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_rear_nvme2state

    @slot_rear_nvme2state.setter
    def slot_rear_nvme2state(self, slot_rear_nvme2state):
        """
        Sets the slot_rear_nvme2state of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Rear NVME 2 OptionRom configuration.  

        :param slot_rear_nvme2state: The slot_rear_nvme2state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_rear_nvme2state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_rear_nvme2state` ({0}), must be one of {1}"
                .format(slot_rear_nvme2state, allowed_values)
            )

        self._slot_rear_nvme2state = slot_rear_nvme2state

    @property
    def slot_rear_nvme3state(self):
        """
        Gets the slot_rear_nvme3state of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Rear NVME 3 OptionRom configuration.  

        :return: The slot_rear_nvme3state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_rear_nvme3state

    @slot_rear_nvme3state.setter
    def slot_rear_nvme3state(self, slot_rear_nvme3state):
        """
        Sets the slot_rear_nvme3state of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Rear NVME 3 OptionRom configuration.  

        :param slot_rear_nvme3state: The slot_rear_nvme3state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_rear_nvme3state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_rear_nvme3state` ({0}), must be one of {1}"
                .format(slot_rear_nvme3state, allowed_values)
            )

        self._slot_rear_nvme3state = slot_rear_nvme3state

    @property
    def slot_rear_nvme4state(self):
        """
        Gets the slot_rear_nvme4state of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Rear NVME 4 OptionRom configuration.  

        :return: The slot_rear_nvme4state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_rear_nvme4state

    @slot_rear_nvme4state.setter
    def slot_rear_nvme4state(self, slot_rear_nvme4state):
        """
        Sets the slot_rear_nvme4state of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Rear NVME 4 OptionRom configuration.  

        :param slot_rear_nvme4state: The slot_rear_nvme4state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_rear_nvme4state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_rear_nvme4state` ({0}), must be one of {1}"
                .format(slot_rear_nvme4state, allowed_values)
            )

        self._slot_rear_nvme4state = slot_rear_nvme4state

    @property
    def slot_rear_nvme5state(self):
        """
        Gets the slot_rear_nvme5state of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Rear NVME 5 OptionRom configuration.  

        :return: The slot_rear_nvme5state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_rear_nvme5state

    @slot_rear_nvme5state.setter
    def slot_rear_nvme5state(self, slot_rear_nvme5state):
        """
        Sets the slot_rear_nvme5state of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Rear NVME 5 OptionRom configuration.  

        :param slot_rear_nvme5state: The slot_rear_nvme5state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_rear_nvme5state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_rear_nvme5state` ({0}), must be one of {1}"
                .format(slot_rear_nvme5state, allowed_values)
            )

        self._slot_rear_nvme5state = slot_rear_nvme5state

    @property
    def slot_rear_nvme6state(self):
        """
        Gets the slot_rear_nvme6state of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Rear NVME 6 OptionRom configuration.  

        :return: The slot_rear_nvme6state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_rear_nvme6state

    @slot_rear_nvme6state.setter
    def slot_rear_nvme6state(self, slot_rear_nvme6state):
        """
        Sets the slot_rear_nvme6state of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Rear NVME 6 OptionRom configuration.  

        :param slot_rear_nvme6state: The slot_rear_nvme6state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_rear_nvme6state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_rear_nvme6state` ({0}), must be one of {1}"
                .format(slot_rear_nvme6state, allowed_values)
            )

        self._slot_rear_nvme6state = slot_rear_nvme6state

    @property
    def slot_rear_nvme7state(self):
        """
        Gets the slot_rear_nvme7state of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Rear NVME 7 OptionRom configuration.  

        :return: The slot_rear_nvme7state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_rear_nvme7state

    @slot_rear_nvme7state.setter
    def slot_rear_nvme7state(self, slot_rear_nvme7state):
        """
        Sets the slot_rear_nvme7state of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Rear NVME 7 OptionRom configuration.  

        :param slot_rear_nvme7state: The slot_rear_nvme7state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_rear_nvme7state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_rear_nvme7state` ({0}), must be one of {1}"
                .format(slot_rear_nvme7state, allowed_values)
            )

        self._slot_rear_nvme7state = slot_rear_nvme7state

    @property
    def slot_rear_nvme8state(self):
        """
        Gets the slot_rear_nvme8state of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Rear NVME 8 OptionRom configuration.  

        :return: The slot_rear_nvme8state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_rear_nvme8state

    @slot_rear_nvme8state.setter
    def slot_rear_nvme8state(self, slot_rear_nvme8state):
        """
        Sets the slot_rear_nvme8state of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Rear NVME 8 OptionRom configuration.  

        :param slot_rear_nvme8state: The slot_rear_nvme8state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if slot_rear_nvme8state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_rear_nvme8state` ({0}), must be one of {1}"
                .format(slot_rear_nvme8state, allowed_values)
            )

        self._slot_rear_nvme8state = slot_rear_nvme8state

    @property
    def slot_riser1link_speed(self):
        """
        Gets the slot_riser1link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Riser1 Link Speed configuration.  

        :return: The slot_riser1link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_riser1link_speed

    @slot_riser1link_speed.setter
    def slot_riser1link_speed(self, slot_riser1link_speed):
        """
        Sets the slot_riser1link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Riser1 Link Speed configuration.  

        :param slot_riser1link_speed: The slot_riser1link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_riser1link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_riser1link_speed` ({0}), must be one of {1}"
                .format(slot_riser1link_speed, allowed_values)
            )

        self._slot_riser1link_speed = slot_riser1link_speed

    @property
    def slot_riser1slot1link_speed(self):
        """
        Gets the slot_riser1slot1link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Riser1 Slot1 Link Speed configuration.  

        :return: The slot_riser1slot1link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_riser1slot1link_speed

    @slot_riser1slot1link_speed.setter
    def slot_riser1slot1link_speed(self, slot_riser1slot1link_speed):
        """
        Sets the slot_riser1slot1link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Riser1 Slot1 Link Speed configuration.  

        :param slot_riser1slot1link_speed: The slot_riser1slot1link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_riser1slot1link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_riser1slot1link_speed` ({0}), must be one of {1}"
                .format(slot_riser1slot1link_speed, allowed_values)
            )

        self._slot_riser1slot1link_speed = slot_riser1slot1link_speed

    @property
    def slot_riser1slot2link_speed(self):
        """
        Gets the slot_riser1slot2link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Riser1 Slot2 Link Speed configuration.  

        :return: The slot_riser1slot2link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_riser1slot2link_speed

    @slot_riser1slot2link_speed.setter
    def slot_riser1slot2link_speed(self, slot_riser1slot2link_speed):
        """
        Sets the slot_riser1slot2link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Riser1 Slot2 Link Speed configuration.  

        :param slot_riser1slot2link_speed: The slot_riser1slot2link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_riser1slot2link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_riser1slot2link_speed` ({0}), must be one of {1}"
                .format(slot_riser1slot2link_speed, allowed_values)
            )

        self._slot_riser1slot2link_speed = slot_riser1slot2link_speed

    @property
    def slot_riser1slot3link_speed(self):
        """
        Gets the slot_riser1slot3link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Riser1 Slot3 Link Speed configuration.  

        :return: The slot_riser1slot3link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_riser1slot3link_speed

    @slot_riser1slot3link_speed.setter
    def slot_riser1slot3link_speed(self, slot_riser1slot3link_speed):
        """
        Sets the slot_riser1slot3link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Riser1 Slot3 Link Speed configuration.  

        :param slot_riser1slot3link_speed: The slot_riser1slot3link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_riser1slot3link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_riser1slot3link_speed` ({0}), must be one of {1}"
                .format(slot_riser1slot3link_speed, allowed_values)
            )

        self._slot_riser1slot3link_speed = slot_riser1slot3link_speed

    @property
    def slot_riser2link_speed(self):
        """
        Gets the slot_riser2link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Riser2 Link Speed configuration.  

        :return: The slot_riser2link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_riser2link_speed

    @slot_riser2link_speed.setter
    def slot_riser2link_speed(self, slot_riser2link_speed):
        """
        Sets the slot_riser2link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Riser2 Link Speed configuration.  

        :param slot_riser2link_speed: The slot_riser2link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_riser2link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_riser2link_speed` ({0}), must be one of {1}"
                .format(slot_riser2link_speed, allowed_values)
            )

        self._slot_riser2link_speed = slot_riser2link_speed

    @property
    def slot_riser2slot4link_speed(self):
        """
        Gets the slot_riser2slot4link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Riser2 Slot4 Link Speed configuration.  

        :return: The slot_riser2slot4link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_riser2slot4link_speed

    @slot_riser2slot4link_speed.setter
    def slot_riser2slot4link_speed(self, slot_riser2slot4link_speed):
        """
        Sets the slot_riser2slot4link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Riser2 Slot4 Link Speed configuration.  

        :param slot_riser2slot4link_speed: The slot_riser2slot4link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_riser2slot4link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_riser2slot4link_speed` ({0}), must be one of {1}"
                .format(slot_riser2slot4link_speed, allowed_values)
            )

        self._slot_riser2slot4link_speed = slot_riser2slot4link_speed

    @property
    def slot_riser2slot5link_speed(self):
        """
        Gets the slot_riser2slot5link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Riser2 Slot5 Link Speed configuration.  

        :return: The slot_riser2slot5link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_riser2slot5link_speed

    @slot_riser2slot5link_speed.setter
    def slot_riser2slot5link_speed(self, slot_riser2slot5link_speed):
        """
        Sets the slot_riser2slot5link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Riser2 Slot5 Link Speed configuration.  

        :param slot_riser2slot5link_speed: The slot_riser2slot5link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_riser2slot5link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_riser2slot5link_speed` ({0}), must be one of {1}"
                .format(slot_riser2slot5link_speed, allowed_values)
            )

        self._slot_riser2slot5link_speed = slot_riser2slot5link_speed

    @property
    def slot_riser2slot6link_speed(self):
        """
        Gets the slot_riser2slot6link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Riser2 Slot6 Link Speed configuration.  

        :return: The slot_riser2slot6link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_riser2slot6link_speed

    @slot_riser2slot6link_speed.setter
    def slot_riser2slot6link_speed(self, slot_riser2slot6link_speed):
        """
        Sets the slot_riser2slot6link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:Riser2 Slot6 Link Speed configuration.  

        :param slot_riser2slot6link_speed: The slot_riser2slot6link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_riser2slot6link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_riser2slot6link_speed` ({0}), must be one of {1}"
                .format(slot_riser2slot6link_speed, allowed_values)
            )

        self._slot_riser2slot6link_speed = slot_riser2slot6link_speed

    @property
    def slot_sas_state(self):
        """
        Gets the slot_sas_state of this BiosPolicy.
        BIOS Token for setting PCIe Slot:SAS OptionROM configuration.  

        :return: The slot_sas_state of this BiosPolicy.
        :rtype: str
        """
        return self._slot_sas_state

    @slot_sas_state.setter
    def slot_sas_state(self, slot_sas_state):
        """
        Sets the slot_sas_state of this BiosPolicy.
        BIOS Token for setting PCIe Slot:SAS OptionROM configuration.  

        :param slot_sas_state: The slot_sas_state of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"]
        if slot_sas_state not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_sas_state` ({0}), must be one of {1}"
                .format(slot_sas_state, allowed_values)
            )

        self._slot_sas_state = slot_sas_state

    @property
    def slot_ssd_slot1link_speed(self):
        """
        Gets the slot_ssd_slot1link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:FrontPcie1 Link Speed configuration.  

        :return: The slot_ssd_slot1link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_ssd_slot1link_speed

    @slot_ssd_slot1link_speed.setter
    def slot_ssd_slot1link_speed(self, slot_ssd_slot1link_speed):
        """
        Sets the slot_ssd_slot1link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:FrontPcie1 Link Speed configuration.  

        :param slot_ssd_slot1link_speed: The slot_ssd_slot1link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_ssd_slot1link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_ssd_slot1link_speed` ({0}), must be one of {1}"
                .format(slot_ssd_slot1link_speed, allowed_values)
            )

        self._slot_ssd_slot1link_speed = slot_ssd_slot1link_speed

    @property
    def slot_ssd_slot2link_speed(self):
        """
        Gets the slot_ssd_slot2link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:FrontPcie2 Link Speed configuration.  

        :return: The slot_ssd_slot2link_speed of this BiosPolicy.
        :rtype: str
        """
        return self._slot_ssd_slot2link_speed

    @slot_ssd_slot2link_speed.setter
    def slot_ssd_slot2link_speed(self, slot_ssd_slot2link_speed):
        """
        Sets the slot_ssd_slot2link_speed of this BiosPolicy.
        BIOS Token for setting PCIe Slot:FrontPcie2 Link Speed configuration.  

        :param slot_ssd_slot2link_speed: The slot_ssd_slot2link_speed of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"]
        if slot_ssd_slot2link_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_ssd_slot2link_speed` ({0}), must be one of {1}"
                .format(slot_ssd_slot2link_speed, allowed_values)
            )

        self._slot_ssd_slot2link_speed = slot_ssd_slot2link_speed

    @property
    def smee(self):
        """
        Gets the smee of this BiosPolicy.
        BIOS Token for setting SMEE configuration.  

        :return: The smee of this BiosPolicy.
        :rtype: str
        """
        return self._smee

    @smee.setter
    def smee(self, smee):
        """
        Sets the smee of this BiosPolicy.
        BIOS Token for setting SMEE configuration.  

        :param smee: The smee of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if smee not in allowed_values:
            raise ValueError(
                "Invalid value for `smee` ({0}), must be one of {1}"
                .format(smee, allowed_values)
            )

        self._smee = smee

    @property
    def smt_mode(self):
        """
        Gets the smt_mode of this BiosPolicy.
        BIOS Token for setting SMT Mode configuration.  

        :return: The smt_mode of this BiosPolicy.
        :rtype: str
        """
        return self._smt_mode

    @smt_mode.setter
    def smt_mode(self, smt_mode):
        """
        Sets the smt_mode of this BiosPolicy.
        BIOS Token for setting SMT Mode configuration.  

        :param smt_mode: The smt_mode of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "Off"]
        if smt_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `smt_mode` ({0}), must be one of {1}"
                .format(smt_mode, allowed_values)
            )

        self._smt_mode = smt_mode

    @property
    def snc(self):
        """
        Gets the snc of this BiosPolicy.
        BIOS Token for setting Sub Numa Clustering configuration.  

        :return: The snc of this BiosPolicy.
        :rtype: str
        """
        return self._snc

    @snc.setter
    def snc(self, snc):
        """
        Sets the snc of this BiosPolicy.
        BIOS Token for setting Sub Numa Clustering configuration.  

        :param snc: The snc of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "disabled", "enabled"]
        if snc not in allowed_values:
            raise ValueError(
                "Invalid value for `snc` ({0}), must be one of {1}"
                .format(snc, allowed_values)
            )

        self._snc = snc

    @property
    def sparing_mode(self):
        """
        Gets the sparing_mode of this BiosPolicy.
        BIOS Token for setting Sparing Mode configuration.  

        :return: The sparing_mode of this BiosPolicy.
        :rtype: str
        """
        return self._sparing_mode

    @sparing_mode.setter
    def sparing_mode(self, sparing_mode):
        """
        Sets the sparing_mode of this BiosPolicy.
        BIOS Token for setting Sparing Mode configuration.  

        :param sparing_mode: The sparing_mode of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "dimm-sparing", "rank-sparing"]
        if sparing_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `sparing_mode` ({0}), must be one of {1}"
                .format(sparing_mode, allowed_values)
            )

        self._sparing_mode = sparing_mode

    @property
    def sr_iov(self):
        """
        Gets the sr_iov of this BiosPolicy.
        BIOS Token for setting SR-IOV Support configuration.  

        :return: The sr_iov of this BiosPolicy.
        :rtype: str
        """
        return self._sr_iov

    @sr_iov.setter
    def sr_iov(self, sr_iov):
        """
        Sets the sr_iov of this BiosPolicy.
        BIOS Token for setting SR-IOV Support configuration.  

        :param sr_iov: The sr_iov of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if sr_iov not in allowed_values:
            raise ValueError(
                "Invalid value for `sr_iov` ({0}), must be one of {1}"
                .format(sr_iov, allowed_values)
            )

        self._sr_iov = sr_iov

    @property
    def streamer_prefetch(self):
        """
        Gets the streamer_prefetch of this BiosPolicy.
        BIOS Token for setting DCU Streamer Prefetch configuration.  

        :return: The streamer_prefetch of this BiosPolicy.
        :rtype: str
        """
        return self._streamer_prefetch

    @streamer_prefetch.setter
    def streamer_prefetch(self, streamer_prefetch):
        """
        Sets the streamer_prefetch of this BiosPolicy.
        BIOS Token for setting DCU Streamer Prefetch configuration.  

        :param streamer_prefetch: The streamer_prefetch of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if streamer_prefetch not in allowed_values:
            raise ValueError(
                "Invalid value for `streamer_prefetch` ({0}), must be one of {1}"
                .format(streamer_prefetch, allowed_values)
            )

        self._streamer_prefetch = streamer_prefetch

    @property
    def svm_mode(self):
        """
        Gets the svm_mode of this BiosPolicy.
        BIOS Token for setting SVM Mode configuration.  

        :return: The svm_mode of this BiosPolicy.
        :rtype: str
        """
        return self._svm_mode

    @svm_mode.setter
    def svm_mode(self, svm_mode):
        """
        Sets the svm_mode of this BiosPolicy.
        BIOS Token for setting SVM Mode configuration.  

        :param svm_mode: The svm_mode of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if svm_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `svm_mode` ({0}), must be one of {1}"
                .format(svm_mode, allowed_values)
            )

        self._svm_mode = svm_mode

    @property
    def terminal_type(self):
        """
        Gets the terminal_type of this BiosPolicy.
        BIOS Token for setting Terminal Type configuration.  

        :return: The terminal_type of this BiosPolicy.
        :rtype: str
        """
        return self._terminal_type

    @terminal_type.setter
    def terminal_type(self, terminal_type):
        """
        Sets the terminal_type of this BiosPolicy.
        BIOS Token for setting Terminal Type configuration.  

        :param terminal_type: The terminal_type of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "pc-ansi", "vt-utf8", "vt100", "vt100-plus"]
        if terminal_type not in allowed_values:
            raise ValueError(
                "Invalid value for `terminal_type` ({0}), must be one of {1}"
                .format(terminal_type, allowed_values)
            )

        self._terminal_type = terminal_type

    @property
    def tpm_control(self):
        """
        Gets the tpm_control of this BiosPolicy.
        BIOS Token for setting Trusted Platform Module State configuration.  

        :return: The tpm_control of this BiosPolicy.
        :rtype: str
        """
        return self._tpm_control

    @tpm_control.setter
    def tpm_control(self, tpm_control):
        """
        Sets the tpm_control of this BiosPolicy.
        BIOS Token for setting Trusted Platform Module State configuration.  

        :param tpm_control: The tpm_control of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if tpm_control not in allowed_values:
            raise ValueError(
                "Invalid value for `tpm_control` ({0}), must be one of {1}"
                .format(tpm_control, allowed_values)
            )

        self._tpm_control = tpm_control

    @property
    def tpm_support(self):
        """
        Gets the tpm_support of this BiosPolicy.
        BIOS Token for setting TPM Support configuration.  

        :return: The tpm_support of this BiosPolicy.
        :rtype: str
        """
        return self._tpm_support

    @tpm_support.setter
    def tpm_support(self, tpm_support):
        """
        Sets the tpm_support of this BiosPolicy.
        BIOS Token for setting TPM Support configuration.  

        :param tpm_support: The tpm_support of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if tpm_support not in allowed_values:
            raise ValueError(
                "Invalid value for `tpm_support` ({0}), must be one of {1}"
                .format(tpm_support, allowed_values)
            )

        self._tpm_support = tpm_support

    @property
    def txt_support(self):
        """
        Gets the txt_support of this BiosPolicy.
        BIOS Token for setting Intel Trusted Execution Technology Support configuration.  

        :return: The txt_support of this BiosPolicy.
        :rtype: str
        """
        return self._txt_support

    @txt_support.setter
    def txt_support(self, txt_support):
        """
        Sets the txt_support of this BiosPolicy.
        BIOS Token for setting Intel Trusted Execution Technology Support configuration.  

        :param txt_support: The txt_support of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if txt_support not in allowed_values:
            raise ValueError(
                "Invalid value for `txt_support` ({0}), must be one of {1}"
                .format(txt_support, allowed_values)
            )

        self._txt_support = txt_support

    @property
    def ucsm_boot_order_rule(self):
        """
        Gets the ucsm_boot_order_rule of this BiosPolicy.
        BIOS Token for setting Boot Order Rules configuration.  

        :return: The ucsm_boot_order_rule of this BiosPolicy.
        :rtype: str
        """
        return self._ucsm_boot_order_rule

    @ucsm_boot_order_rule.setter
    def ucsm_boot_order_rule(self, ucsm_boot_order_rule):
        """
        Sets the ucsm_boot_order_rule of this BiosPolicy.
        BIOS Token for setting Boot Order Rules configuration.  

        :param ucsm_boot_order_rule: The ucsm_boot_order_rule of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Loose", "Strict"]
        if ucsm_boot_order_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `ucsm_boot_order_rule` ({0}), must be one of {1}"
                .format(ucsm_boot_order_rule, allowed_values)
            )

        self._ucsm_boot_order_rule = ucsm_boot_order_rule

    @property
    def usb_emul6064(self):
        """
        Gets the usb_emul6064 of this BiosPolicy.
        BIOS Token for setting Port 60/64 Emulation configuration.  

        :return: The usb_emul6064 of this BiosPolicy.
        :rtype: str
        """
        return self._usb_emul6064

    @usb_emul6064.setter
    def usb_emul6064(self, usb_emul6064):
        """
        Sets the usb_emul6064 of this BiosPolicy.
        BIOS Token for setting Port 60/64 Emulation configuration.  

        :param usb_emul6064: The usb_emul6064 of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if usb_emul6064 not in allowed_values:
            raise ValueError(
                "Invalid value for `usb_emul6064` ({0}), must be one of {1}"
                .format(usb_emul6064, allowed_values)
            )

        self._usb_emul6064 = usb_emul6064

    @property
    def usb_port_front(self):
        """
        Gets the usb_port_front of this BiosPolicy.
        BIOS Token for setting USB Port Front configuration.  

        :return: The usb_port_front of this BiosPolicy.
        :rtype: str
        """
        return self._usb_port_front

    @usb_port_front.setter
    def usb_port_front(self, usb_port_front):
        """
        Sets the usb_port_front of this BiosPolicy.
        BIOS Token for setting USB Port Front configuration.  

        :param usb_port_front: The usb_port_front of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if usb_port_front not in allowed_values:
            raise ValueError(
                "Invalid value for `usb_port_front` ({0}), must be one of {1}"
                .format(usb_port_front, allowed_values)
            )

        self._usb_port_front = usb_port_front

    @property
    def usb_port_internal(self):
        """
        Gets the usb_port_internal of this BiosPolicy.
        BIOS Token for setting USB Port Internal configuration.  

        :return: The usb_port_internal of this BiosPolicy.
        :rtype: str
        """
        return self._usb_port_internal

    @usb_port_internal.setter
    def usb_port_internal(self, usb_port_internal):
        """
        Sets the usb_port_internal of this BiosPolicy.
        BIOS Token for setting USB Port Internal configuration.  

        :param usb_port_internal: The usb_port_internal of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if usb_port_internal not in allowed_values:
            raise ValueError(
                "Invalid value for `usb_port_internal` ({0}), must be one of {1}"
                .format(usb_port_internal, allowed_values)
            )

        self._usb_port_internal = usb_port_internal

    @property
    def usb_port_kvm(self):
        """
        Gets the usb_port_kvm of this BiosPolicy.
        BIOS Token for setting USB Port KVM configuration.  

        :return: The usb_port_kvm of this BiosPolicy.
        :rtype: str
        """
        return self._usb_port_kvm

    @usb_port_kvm.setter
    def usb_port_kvm(self, usb_port_kvm):
        """
        Sets the usb_port_kvm of this BiosPolicy.
        BIOS Token for setting USB Port KVM configuration.  

        :param usb_port_kvm: The usb_port_kvm of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if usb_port_kvm not in allowed_values:
            raise ValueError(
                "Invalid value for `usb_port_kvm` ({0}), must be one of {1}"
                .format(usb_port_kvm, allowed_values)
            )

        self._usb_port_kvm = usb_port_kvm

    @property
    def usb_port_rear(self):
        """
        Gets the usb_port_rear of this BiosPolicy.
        BIOS Token for setting USB Port Rear configuration.  

        :return: The usb_port_rear of this BiosPolicy.
        :rtype: str
        """
        return self._usb_port_rear

    @usb_port_rear.setter
    def usb_port_rear(self, usb_port_rear):
        """
        Sets the usb_port_rear of this BiosPolicy.
        BIOS Token for setting USB Port Rear configuration.  

        :param usb_port_rear: The usb_port_rear of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if usb_port_rear not in allowed_values:
            raise ValueError(
                "Invalid value for `usb_port_rear` ({0}), must be one of {1}"
                .format(usb_port_rear, allowed_values)
            )

        self._usb_port_rear = usb_port_rear

    @property
    def usb_port_sd_card(self):
        """
        Gets the usb_port_sd_card of this BiosPolicy.
        BIOS Token for setting USB Port SD Card configuration.  

        :return: The usb_port_sd_card of this BiosPolicy.
        :rtype: str
        """
        return self._usb_port_sd_card

    @usb_port_sd_card.setter
    def usb_port_sd_card(self, usb_port_sd_card):
        """
        Sets the usb_port_sd_card of this BiosPolicy.
        BIOS Token for setting USB Port SD Card configuration.  

        :param usb_port_sd_card: The usb_port_sd_card of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if usb_port_sd_card not in allowed_values:
            raise ValueError(
                "Invalid value for `usb_port_sd_card` ({0}), must be one of {1}"
                .format(usb_port_sd_card, allowed_values)
            )

        self._usb_port_sd_card = usb_port_sd_card

    @property
    def usb_port_vmedia(self):
        """
        Gets the usb_port_vmedia of this BiosPolicy.
        BIOS Token for setting USB Port VMedia configuration.  

        :return: The usb_port_vmedia of this BiosPolicy.
        :rtype: str
        """
        return self._usb_port_vmedia

    @usb_port_vmedia.setter
    def usb_port_vmedia(self, usb_port_vmedia):
        """
        Sets the usb_port_vmedia of this BiosPolicy.
        BIOS Token for setting USB Port VMedia configuration.  

        :param usb_port_vmedia: The usb_port_vmedia of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if usb_port_vmedia not in allowed_values:
            raise ValueError(
                "Invalid value for `usb_port_vmedia` ({0}), must be one of {1}"
                .format(usb_port_vmedia, allowed_values)
            )

        self._usb_port_vmedia = usb_port_vmedia

    @property
    def usb_xhci_support(self):
        """
        Gets the usb_xhci_support of this BiosPolicy.
        BIOS Token for setting XHCI Legacy Support configuration.  

        :return: The usb_xhci_support of this BiosPolicy.
        :rtype: str
        """
        return self._usb_xhci_support

    @usb_xhci_support.setter
    def usb_xhci_support(self, usb_xhci_support):
        """
        Sets the usb_xhci_support of this BiosPolicy.
        BIOS Token for setting XHCI Legacy Support configuration.  

        :param usb_xhci_support: The usb_xhci_support of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if usb_xhci_support not in allowed_values:
            raise ValueError(
                "Invalid value for `usb_xhci_support` ({0}), must be one of {1}"
                .format(usb_xhci_support, allowed_values)
            )

        self._usb_xhci_support = usb_xhci_support

    @property
    def vga_priority(self):
        """
        Gets the vga_priority of this BiosPolicy.
        BIOS Token for setting VGA Priority configuration.  

        :return: The vga_priority of this BiosPolicy.
        :rtype: str
        """
        return self._vga_priority

    @vga_priority.setter
    def vga_priority(self, vga_priority):
        """
        Sets the vga_priority of this BiosPolicy.
        BIOS Token for setting VGA Priority configuration.  

        :param vga_priority: The vga_priority of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Offboard", "Onboard", "Onboard VGA Disabled"]
        if vga_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `vga_priority` ({0}), must be one of {1}"
                .format(vga_priority, allowed_values)
            )

        self._vga_priority = vga_priority

    @property
    def vmd_enable(self):
        """
        Gets the vmd_enable of this BiosPolicy.
        BIOS Token for setting VMD Enablement configuration.  

        :return: The vmd_enable of this BiosPolicy.
        :rtype: str
        """
        return self._vmd_enable

    @vmd_enable.setter
    def vmd_enable(self, vmd_enable):
        """
        Sets the vmd_enable of this BiosPolicy.
        BIOS Token for setting VMD Enablement configuration.  

        :param vmd_enable: The vmd_enable of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if vmd_enable not in allowed_values:
            raise ValueError(
                "Invalid value for `vmd_enable` ({0}), must be one of {1}"
                .format(vmd_enable, allowed_values)
            )

        self._vmd_enable = vmd_enable

    @property
    def work_load_config(self):
        """
        Gets the work_load_config of this BiosPolicy.
        BIOS Token for setting Workload Configuration configuration.  

        :return: The work_load_config of this BiosPolicy.
        :rtype: str
        """
        return self._work_load_config

    @work_load_config.setter
    def work_load_config(self, work_load_config):
        """
        Sets the work_load_config of this BiosPolicy.
        BIOS Token for setting Workload Configuration configuration.  

        :param work_load_config: The work_load_config of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Balanced", "I/O Sensitive", "NUMA", "UMA"]
        if work_load_config not in allowed_values:
            raise ValueError(
                "Invalid value for `work_load_config` ({0}), must be one of {1}"
                .format(work_load_config, allowed_values)
            )

        self._work_load_config = work_load_config

    @property
    def xpt_prefetch(self):
        """
        Gets the xpt_prefetch of this BiosPolicy.
        BIOS Token for setting XPT Prefetch configuration.   

        :return: The xpt_prefetch of this BiosPolicy.
        :rtype: str
        """
        return self._xpt_prefetch

    @xpt_prefetch.setter
    def xpt_prefetch(self, xpt_prefetch):
        """
        Sets the xpt_prefetch of this BiosPolicy.
        BIOS Token for setting XPT Prefetch configuration.   

        :param xpt_prefetch: The xpt_prefetch of this BiosPolicy.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "disabled", "enabled"]
        if xpt_prefetch not in allowed_values:
            raise ValueError(
                "Invalid value for `xpt_prefetch` ({0}), must be one of {1}"
                .format(xpt_prefetch, allowed_values)
            )

        self._xpt_prefetch = xpt_prefetch

    @property
    def organization(self):
        """
        Gets the organization of this BiosPolicy.
        Relationship to the Organization that owns the Managed Object. 

        :return: The organization of this BiosPolicy.
        :rtype: OrganizationOrganizationRef
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this BiosPolicy.
        Relationship to the Organization that owns the Managed Object. 

        :param organization: The organization of this BiosPolicy.
        :type: OrganizationOrganizationRef
        """

        self._organization = organization

    @property
    def profiles(self):
        """
        Gets the profiles of this BiosPolicy.
        Relationship to the profile objects. 

        :return: The profiles of this BiosPolicy.
        :rtype: list[PolicyAbstractConfigProfileRef]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """
        Sets the profiles of this BiosPolicy.
        Relationship to the profile objects. 

        :param profiles: The profiles of this BiosPolicy.
        :type: list[PolicyAbstractConfigProfileRef]
        """

        self._profiles = profiles

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BiosPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
