# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class HyperflexIpAddrRangeAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'end_addr': 'str',
        'gateway': 'str',
        'netmask': 'str',
        'start_addr': 'str'
    }

    attribute_map = {
        'end_addr': 'EndAddr',
        'gateway': 'Gateway',
        'netmask': 'Netmask',
        'start_addr': 'StartAddr'
    }

    def __init__(self,
                 end_addr=None,
                 gateway=None,
                 netmask=None,
                 start_addr=None,
                 local_vars_configuration=None):  # noqa: E501
        """HyperflexIpAddrRangeAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._end_addr = None
        self._gateway = None
        self._netmask = None
        self._start_addr = None
        self.discriminator = None

        if end_addr is not None:
            self.end_addr = end_addr
        if gateway is not None:
            self.gateway = gateway
        if netmask is not None:
            self.netmask = netmask
        if start_addr is not None:
            self.start_addr = start_addr

    @property
    def end_addr(self):
        """Gets the end_addr of this HyperflexIpAddrRangeAllOf.  # noqa: E501

        The end IPv4 address of the range.    # noqa: E501

        :return: The end_addr of this HyperflexIpAddrRangeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._end_addr

    @end_addr.setter
    def end_addr(self, end_addr):
        """Sets the end_addr of this HyperflexIpAddrRangeAllOf.

        The end IPv4 address of the range.    # noqa: E501

        :param end_addr: The end_addr of this HyperflexIpAddrRangeAllOf.  # noqa: E501
        :type: str
        """

        self._end_addr = end_addr

    @property
    def gateway(self):
        """Gets the gateway of this HyperflexIpAddrRangeAllOf.  # noqa: E501

        The default gateway for the start and end IPv4 addresses.    # noqa: E501

        :return: The gateway of this HyperflexIpAddrRangeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this HyperflexIpAddrRangeAllOf.

        The default gateway for the start and end IPv4 addresses.    # noqa: E501

        :param gateway: The gateway of this HyperflexIpAddrRangeAllOf.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def netmask(self):
        """Gets the netmask of this HyperflexIpAddrRangeAllOf.  # noqa: E501

        The netmask specified in dot decimal notation.  The start address, end address, and gateway must all be within the network specified by this netmask.     # noqa: E501

        :return: The netmask of this HyperflexIpAddrRangeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this HyperflexIpAddrRangeAllOf.

        The netmask specified in dot decimal notation.  The start address, end address, and gateway must all be within the network specified by this netmask.     # noqa: E501

        :param netmask: The netmask of this HyperflexIpAddrRangeAllOf.  # noqa: E501
        :type: str
        """

        self._netmask = netmask

    @property
    def start_addr(self):
        """Gets the start_addr of this HyperflexIpAddrRangeAllOf.  # noqa: E501

        The start IPv4 address of the range.     # noqa: E501

        :return: The start_addr of this HyperflexIpAddrRangeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._start_addr

    @start_addr.setter
    def start_addr(self, start_addr):
        """Sets the start_addr of this HyperflexIpAddrRangeAllOf.

        The start IPv4 address of the range.     # noqa: E501

        :param start_addr: The start_addr of this HyperflexIpAddrRangeAllOf.  # noqa: E501
        :type: str
        """

        self._start_addr = start_addr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HyperflexIpAddrRangeAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HyperflexIpAddrRangeAllOf):
            return True

        return self.to_dict() != other.to_dict()
