# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class BootPxe(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'interface_name': 'str',
        'interface_source': 'str',
        'ip_type': 'str',
        'mac_address': 'str',
        'port': 'int',
        'slot': 'str'
    }

    attribute_map = {
        'interface_name': 'InterfaceName',
        'interface_source': 'InterfaceSource',
        'ip_type': 'IpType',
        'mac_address': 'MacAddress',
        'port': 'Port',
        'slot': 'Slot'
    }

    def __init__(self,
                 interface_name=None,
                 interface_source='name',
                 ip_type='None',
                 mac_address=None,
                 port=None,
                 slot=None,
                 local_vars_configuration=None):  # noqa: E501
        """BootPxe - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._interface_name = None
        self._interface_source = None
        self._ip_type = None
        self._mac_address = None
        self._port = None
        self._slot = None
        self.discriminator = None

        if interface_name is not None:
            self.interface_name = interface_name
        if interface_source is not None:
            self.interface_source = interface_source
        if ip_type is not None:
            self.ip_type = ip_type
        if mac_address is not None:
            self.mac_address = mac_address
        if port is not None:
            self.port = port
        if slot is not None:
            self.slot = slot

    @property
    def interface_name(self):
        """Gets the interface_name of this BootPxe.  # noqa: E501

        The name of the underlying virtual ethernet interface used by the PXE boot device.    # noqa: E501

        :return: The interface_name of this BootPxe.  # noqa: E501
        :rtype: str
        """
        return self._interface_name

    @interface_name.setter
    def interface_name(self, interface_name):
        """Sets the interface_name of this BootPxe.

        The name of the underlying virtual ethernet interface used by the PXE boot device.    # noqa: E501

        :param interface_name: The interface_name of this BootPxe.  # noqa: E501
        :type: str
        """

        self._interface_name = interface_name

    @property
    def interface_source(self):
        """Gets the interface_source of this BootPxe.  # noqa: E501

        Lists the supported Interface Source for PXE device. Supported values are \"name\" and \"mac\".    # noqa: E501

        :return: The interface_source of this BootPxe.  # noqa: E501
        :rtype: str
        """
        return self._interface_source

    @interface_source.setter
    def interface_source(self, interface_source):
        """Sets the interface_source of this BootPxe.

        Lists the supported Interface Source for PXE device. Supported values are \"name\" and \"mac\".    # noqa: E501

        :param interface_source: The interface_source of this BootPxe.  # noqa: E501
        :type: str
        """
        allowed_values = ["name", "mac", "port"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and interface_source not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `interface_source` ({0}), must be one of {1}"  # noqa: E501
                .format(interface_source, allowed_values))

        self._interface_source = interface_source

    @property
    def ip_type(self):
        """Gets the ip_type of this BootPxe.  # noqa: E501

        The IP Address family type to use during the PXE Boot process.    # noqa: E501

        :return: The ip_type of this BootPxe.  # noqa: E501
        :rtype: str
        """
        return self._ip_type

    @ip_type.setter
    def ip_type(self, ip_type):
        """Sets the ip_type of this BootPxe.

        The IP Address family type to use during the PXE Boot process.    # noqa: E501

        :param ip_type: The ip_type of this BootPxe.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "IPv4", "IPv6"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and ip_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `ip_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ip_type, allowed_values))

        self._ip_type = ip_type

    @property
    def mac_address(self):
        """Gets the mac_address of this BootPxe.  # noqa: E501

        The MAC Address of the underlying virtual ethernet interface used by the PXE boot device.    # noqa: E501

        :return: The mac_address of this BootPxe.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this BootPxe.

        The MAC Address of the underlying virtual ethernet interface used by the PXE boot device.    # noqa: E501

        :param mac_address: The mac_address of this BootPxe.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def port(self):
        """Gets the port of this BootPxe.  # noqa: E501

        The logical port id of the ethernet interface used by the PXE device. Port is a deprecated property. Default value is changed to '-1' as this is invalid port. New or modified pxe device has the port value always set to '-1'.    # noqa: E501

        :return: The port of this BootPxe.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this BootPxe.

        The logical port id of the ethernet interface used by the PXE device. Port is a deprecated property. Default value is changed to '-1' as this is invalid port. New or modified pxe device has the port value always set to '-1'.    # noqa: E501

        :param port: The port of this BootPxe.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def slot(self):
        """Gets the slot of this BootPxe.  # noqa: E501

        The slot ID of the adapter on which the underlying virtual ethernet interface is present. Supported values are ( 1 - 255, \"MLOM\", \"L\", \"L1\", \"L2\", \"OCP\").     # noqa: E501

        :return: The slot of this BootPxe.  # noqa: E501
        :rtype: str
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """Sets the slot of this BootPxe.

        The slot ID of the adapter on which the underlying virtual ethernet interface is present. Supported values are ( 1 - 255, \"MLOM\", \"L\", \"L1\", \"L2\", \"OCP\").     # noqa: E501

        :param slot: The slot of this BootPxe.  # noqa: E501
        :type: str
        """

        self._slot = slot

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BootPxe):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BootPxe):
            return True

        return self.to_dict() != other.to_dict()
