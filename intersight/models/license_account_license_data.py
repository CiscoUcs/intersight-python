# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class LicenseAccountLicenseData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'str',
        'agent_data': 'str',
        'auth_expire_time': 'str',
        'auth_initial_time': 'str',
        'auth_next_time': 'str',
        'category': 'str',
        'default_license_type': 'str',
        'group': 'str',
        'last_sync': 'datetime',
        'last_updated_time': 'datetime',
        'license_state': 'str',
        'license_tech_support_info': 'str',
        'register_expire_time': 'str',
        'register_initial_time': 'str',
        'register_next_time': 'str',
        'registration_status': 'str',
        'renew_failure_string': 'str',
        'smart_account': 'str',
        'sync_status': 'str',
        'virtual_account': 'str',
        'account': 'IamAccount',
        'customer_op': 'LicenseCustomerOp',
        'licenseinfos': 'list[LicenseLicenseInfo]',
        'smartlicense_token': 'LicenseSmartlicenseToken'
    }

    attribute_map = {
        'account_id': 'AccountId',
        'agent_data': 'AgentData',
        'auth_expire_time': 'AuthExpireTime',
        'auth_initial_time': 'AuthInitialTime',
        'auth_next_time': 'AuthNextTime',
        'category': 'Category',
        'default_license_type': 'DefaultLicenseType',
        'group': 'Group',
        'last_sync': 'LastSync',
        'last_updated_time': 'LastUpdatedTime',
        'license_state': 'LicenseState',
        'license_tech_support_info': 'LicenseTechSupportInfo',
        'register_expire_time': 'RegisterExpireTime',
        'register_initial_time': 'RegisterInitialTime',
        'register_next_time': 'RegisterNextTime',
        'registration_status': 'RegistrationStatus',
        'renew_failure_string': 'RenewFailureString',
        'smart_account': 'SmartAccount',
        'sync_status': 'SyncStatus',
        'virtual_account': 'VirtualAccount',
        'account': 'Account',
        'customer_op': 'CustomerOp',
        'licenseinfos': 'Licenseinfos',
        'smartlicense_token': 'SmartlicenseToken'
    }

    def __init__(self,
                 account_id=None,
                 agent_data=None,
                 auth_expire_time=None,
                 auth_initial_time=None,
                 auth_next_time=None,
                 category=None,
                 default_license_type='Base',
                 group=None,
                 last_sync=None,
                 last_updated_time=None,
                 license_state=None,
                 license_tech_support_info=None,
                 register_expire_time=None,
                 register_initial_time=None,
                 register_next_time=None,
                 registration_status=None,
                 renew_failure_string=None,
                 smart_account=None,
                 sync_status=None,
                 virtual_account=None,
                 account=None,
                 customer_op=None,
                 licenseinfos=None,
                 smartlicense_token=None,
                 local_vars_configuration=None):  # noqa: E501
        """LicenseAccountLicenseData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._agent_data = None
        self._auth_expire_time = None
        self._auth_initial_time = None
        self._auth_next_time = None
        self._category = None
        self._default_license_type = None
        self._group = None
        self._last_sync = None
        self._last_updated_time = None
        self._license_state = None
        self._license_tech_support_info = None
        self._register_expire_time = None
        self._register_initial_time = None
        self._register_next_time = None
        self._registration_status = None
        self._renew_failure_string = None
        self._smart_account = None
        self._sync_status = None
        self._virtual_account = None
        self._account = None
        self._customer_op = None
        self._licenseinfos = None
        self._smartlicense_token = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if agent_data is not None:
            self.agent_data = agent_data
        if auth_expire_time is not None:
            self.auth_expire_time = auth_expire_time
        if auth_initial_time is not None:
            self.auth_initial_time = auth_initial_time
        if auth_next_time is not None:
            self.auth_next_time = auth_next_time
        if category is not None:
            self.category = category
        if default_license_type is not None:
            self.default_license_type = default_license_type
        if group is not None:
            self.group = group
        if last_sync is not None:
            self.last_sync = last_sync
        if last_updated_time is not None:
            self.last_updated_time = last_updated_time
        if license_state is not None:
            self.license_state = license_state
        if license_tech_support_info is not None:
            self.license_tech_support_info = license_tech_support_info
        if register_expire_time is not None:
            self.register_expire_time = register_expire_time
        if register_initial_time is not None:
            self.register_initial_time = register_initial_time
        if register_next_time is not None:
            self.register_next_time = register_next_time
        if registration_status is not None:
            self.registration_status = registration_status
        if renew_failure_string is not None:
            self.renew_failure_string = renew_failure_string
        if smart_account is not None:
            self.smart_account = smart_account
        if sync_status is not None:
            self.sync_status = sync_status
        if virtual_account is not None:
            self.virtual_account = virtual_account
        if account is not None:
            self.account = account
        if customer_op is not None:
            self.customer_op = customer_op
        if licenseinfos is not None:
            self.licenseinfos = licenseinfos
        if smartlicense_token is not None:
            self.smartlicense_token = smartlicense_token

    @property
    def account_id(self):
        """Gets the account_id of this LicenseAccountLicenseData.  # noqa: E501

        Root user's ID of the account.    # noqa: E501

        :return: The account_id of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this LicenseAccountLicenseData.

        Root user's ID of the account.    # noqa: E501

        :param account_id: The account_id of this LicenseAccountLicenseData.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def agent_data(self):
        """Gets the agent_data of this LicenseAccountLicenseData.  # noqa: E501

        Agent trusted store data.    # noqa: E501

        :return: The agent_data of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: str
        """
        return self._agent_data

    @agent_data.setter
    def agent_data(self, agent_data):
        """Sets the agent_data of this LicenseAccountLicenseData.

        Agent trusted store data.    # noqa: E501

        :param agent_data: The agent_data of this LicenseAccountLicenseData.  # noqa: E501
        :type: str
        """

        self._agent_data = agent_data

    @property
    def auth_expire_time(self):
        """Gets the auth_expire_time of this LicenseAccountLicenseData.  # noqa: E501

        Authorization expiration time.    # noqa: E501

        :return: The auth_expire_time of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: str
        """
        return self._auth_expire_time

    @auth_expire_time.setter
    def auth_expire_time(self, auth_expire_time):
        """Sets the auth_expire_time of this LicenseAccountLicenseData.

        Authorization expiration time.    # noqa: E501

        :param auth_expire_time: The auth_expire_time of this LicenseAccountLicenseData.  # noqa: E501
        :type: str
        """

        self._auth_expire_time = auth_expire_time

    @property
    def auth_initial_time(self):
        """Gets the auth_initial_time of this LicenseAccountLicenseData.  # noqa: E501

        Intial authorization time.    # noqa: E501

        :return: The auth_initial_time of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: str
        """
        return self._auth_initial_time

    @auth_initial_time.setter
    def auth_initial_time(self, auth_initial_time):
        """Sets the auth_initial_time of this LicenseAccountLicenseData.

        Intial authorization time.    # noqa: E501

        :param auth_initial_time: The auth_initial_time of this LicenseAccountLicenseData.  # noqa: E501
        :type: str
        """

        self._auth_initial_time = auth_initial_time

    @property
    def auth_next_time(self):
        """Gets the auth_next_time of this LicenseAccountLicenseData.  # noqa: E501

        Next time for the authorization.    # noqa: E501

        :return: The auth_next_time of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: str
        """
        return self._auth_next_time

    @auth_next_time.setter
    def auth_next_time(self, auth_next_time):
        """Sets the auth_next_time of this LicenseAccountLicenseData.

        Next time for the authorization.    # noqa: E501

        :param auth_next_time: The auth_next_time of this LicenseAccountLicenseData.  # noqa: E501
        :type: str
        """

        self._auth_next_time = auth_next_time

    @property
    def category(self):
        """Gets the category of this LicenseAccountLicenseData.  # noqa: E501

        Account license data category name.    # noqa: E501

        :return: The category of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this LicenseAccountLicenseData.

        Account license data category name.    # noqa: E501

        :param category: The category of this LicenseAccountLicenseData.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def default_license_type(self):
        """Gets the default_license_type of this LicenseAccountLicenseData.  # noqa: E501

        Default license tier set by user.     # noqa: E501

        :return: The default_license_type of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: str
        """
        return self._default_license_type

    @default_license_type.setter
    def default_license_type(self, default_license_type):
        """Sets the default_license_type of this LicenseAccountLicenseData.

        Default license tier set by user.     # noqa: E501

        :param default_license_type: The default_license_type of this LicenseAccountLicenseData.  # noqa: E501
        :type: str
        """
        allowed_values = ["Base", "Essential", "Standard",
                          "Advantage"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and default_license_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `default_license_type` ({0}), must be one of {1}"  # noqa: E501
                .format(default_license_type, allowed_values))

        self._default_license_type = default_license_type

    @property
    def group(self):
        """Gets the group of this LicenseAccountLicenseData.  # noqa: E501

        Account license data group name.    # noqa: E501

        :return: The group of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this LicenseAccountLicenseData.

        Account license data group name.    # noqa: E501

        :param group: The group of this LicenseAccountLicenseData.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def last_sync(self):
        """Gets the last_sync of this LicenseAccountLicenseData.  # noqa: E501

        Specifies last sync time with SA.    # noqa: E501

        :return: The last_sync of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: datetime
        """
        return self._last_sync

    @last_sync.setter
    def last_sync(self, last_sync):
        """Sets the last_sync of this LicenseAccountLicenseData.

        Specifies last sync time with SA.    # noqa: E501

        :param last_sync: The last_sync of this LicenseAccountLicenseData.  # noqa: E501
        :type: datetime
        """

        self._last_sync = last_sync

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this LicenseAccountLicenseData.  # noqa: E501

        Record's last update datetime.    # noqa: E501

        :return: The last_updated_time of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this LicenseAccountLicenseData.

        Record's last update datetime.    # noqa: E501

        :param last_updated_time: The last_updated_time of this LicenseAccountLicenseData.  # noqa: E501
        :type: datetime
        """

        self._last_updated_time = last_updated_time

    @property
    def license_state(self):
        """Gets the license_state of this LicenseAccountLicenseData.  # noqa: E501

        Aggregrated mode for the agent.    # noqa: E501

        :return: The license_state of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: str
        """
        return self._license_state

    @license_state.setter
    def license_state(self, license_state):
        """Sets the license_state of this LicenseAccountLicenseData.

        Aggregrated mode for the agent.    # noqa: E501

        :param license_state: The license_state of this LicenseAccountLicenseData.  # noqa: E501
        :type: str
        """

        self._license_state = license_state

    @property
    def license_tech_support_info(self):
        """Gets the license_tech_support_info of this LicenseAccountLicenseData.  # noqa: E501

        Tech-support info of a smart-agent.    # noqa: E501

        :return: The license_tech_support_info of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: str
        """
        return self._license_tech_support_info

    @license_tech_support_info.setter
    def license_tech_support_info(self, license_tech_support_info):
        """Sets the license_tech_support_info of this LicenseAccountLicenseData.

        Tech-support info of a smart-agent.    # noqa: E501

        :param license_tech_support_info: The license_tech_support_info of this LicenseAccountLicenseData.  # noqa: E501
        :type: str
        """

        self._license_tech_support_info = license_tech_support_info

    @property
    def register_expire_time(self):
        """Gets the register_expire_time of this LicenseAccountLicenseData.  # noqa: E501

        Registration exipiration time.    # noqa: E501

        :return: The register_expire_time of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: str
        """
        return self._register_expire_time

    @register_expire_time.setter
    def register_expire_time(self, register_expire_time):
        """Sets the register_expire_time of this LicenseAccountLicenseData.

        Registration exipiration time.    # noqa: E501

        :param register_expire_time: The register_expire_time of this LicenseAccountLicenseData.  # noqa: E501
        :type: str
        """

        self._register_expire_time = register_expire_time

    @property
    def register_initial_time(self):
        """Gets the register_initial_time of this LicenseAccountLicenseData.  # noqa: E501

        Initial time of registration.    # noqa: E501

        :return: The register_initial_time of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: str
        """
        return self._register_initial_time

    @register_initial_time.setter
    def register_initial_time(self, register_initial_time):
        """Sets the register_initial_time of this LicenseAccountLicenseData.

        Initial time of registration.    # noqa: E501

        :param register_initial_time: The register_initial_time of this LicenseAccountLicenseData.  # noqa: E501
        :type: str
        """

        self._register_initial_time = register_initial_time

    @property
    def register_next_time(self):
        """Gets the register_next_time of this LicenseAccountLicenseData.  # noqa: E501

        Next time for the license registration.    # noqa: E501

        :return: The register_next_time of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: str
        """
        return self._register_next_time

    @register_next_time.setter
    def register_next_time(self, register_next_time):
        """Sets the register_next_time of this LicenseAccountLicenseData.

        Next time for the license registration.    # noqa: E501

        :param register_next_time: The register_next_time of this LicenseAccountLicenseData.  # noqa: E501
        :type: str
        """

        self._register_next_time = register_next_time

    @property
    def registration_status(self):
        """Gets the registration_status of this LicenseAccountLicenseData.  # noqa: E501

        Registration status of a smart-agent.    # noqa: E501

        :return: The registration_status of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: str
        """
        return self._registration_status

    @registration_status.setter
    def registration_status(self, registration_status):
        """Sets the registration_status of this LicenseAccountLicenseData.

        Registration status of a smart-agent.    # noqa: E501

        :param registration_status: The registration_status of this LicenseAccountLicenseData.  # noqa: E501
        :type: str
        """

        self._registration_status = registration_status

    @property
    def renew_failure_string(self):
        """Gets the renew_failure_string of this LicenseAccountLicenseData.  # noqa: E501

        License renewal failure message.    # noqa: E501

        :return: The renew_failure_string of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: str
        """
        return self._renew_failure_string

    @renew_failure_string.setter
    def renew_failure_string(self, renew_failure_string):
        """Sets the renew_failure_string of this LicenseAccountLicenseData.

        License renewal failure message.    # noqa: E501

        :param renew_failure_string: The renew_failure_string of this LicenseAccountLicenseData.  # noqa: E501
        :type: str
        """

        self._renew_failure_string = renew_failure_string

    @property
    def smart_account(self):
        """Gets the smart_account of this LicenseAccountLicenseData.  # noqa: E501

        Name of the smart account.    # noqa: E501

        :return: The smart_account of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: str
        """
        return self._smart_account

    @smart_account.setter
    def smart_account(self, smart_account):
        """Sets the smart_account of this LicenseAccountLicenseData.

        Name of the smart account.    # noqa: E501

        :param smart_account: The smart_account of this LicenseAccountLicenseData.  # noqa: E501
        :type: str
        """

        self._smart_account = smart_account

    @property
    def sync_status(self):
        """Gets the sync_status of this LicenseAccountLicenseData.  # noqa: E501

        Current sync status for the account.    # noqa: E501

        :return: The sync_status of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: str
        """
        return self._sync_status

    @sync_status.setter
    def sync_status(self, sync_status):
        """Sets the sync_status of this LicenseAccountLicenseData.

        Current sync status for the account.    # noqa: E501

        :param sync_status: The sync_status of this LicenseAccountLicenseData.  # noqa: E501
        :type: str
        """

        self._sync_status = sync_status

    @property
    def virtual_account(self):
        """Gets the virtual_account of this LicenseAccountLicenseData.  # noqa: E501

        Name of the virtual account.     # noqa: E501

        :return: The virtual_account of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: str
        """
        return self._virtual_account

    @virtual_account.setter
    def virtual_account(self, virtual_account):
        """Sets the virtual_account of this LicenseAccountLicenseData.

        Name of the virtual account.     # noqa: E501

        :param virtual_account: The virtual_account of this LicenseAccountLicenseData.  # noqa: E501
        :type: str
        """

        self._virtual_account = virtual_account

    @property
    def account(self):
        """Gets the account of this LicenseAccountLicenseData.  # noqa: E501


        :return: The account of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: IamAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this LicenseAccountLicenseData.


        :param account: The account of this LicenseAccountLicenseData.  # noqa: E501
        :type: IamAccount
        """

        self._account = account

    @property
    def customer_op(self):
        """Gets the customer_op of this LicenseAccountLicenseData.  # noqa: E501


        :return: The customer_op of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: LicenseCustomerOp
        """
        return self._customer_op

    @customer_op.setter
    def customer_op(self, customer_op):
        """Sets the customer_op of this LicenseAccountLicenseData.


        :param customer_op: The customer_op of this LicenseAccountLicenseData.  # noqa: E501
        :type: LicenseCustomerOp
        """

        self._customer_op = customer_op

    @property
    def licenseinfos(self):
        """Gets the licenseinfos of this LicenseAccountLicenseData.  # noqa: E501

        A reference to a licenseLicenseInfo resource. When the $expand query parameter is specified, the referenced resource is returned inline. All LicenceInfo records refercing this AccountLicenseData record.   # noqa: E501

        :return: The licenseinfos of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: list[LicenseLicenseInfo]
        """
        return self._licenseinfos

    @licenseinfos.setter
    def licenseinfos(self, licenseinfos):
        """Sets the licenseinfos of this LicenseAccountLicenseData.

        A reference to a licenseLicenseInfo resource. When the $expand query parameter is specified, the referenced resource is returned inline. All LicenceInfo records refercing this AccountLicenseData record.   # noqa: E501

        :param licenseinfos: The licenseinfos of this LicenseAccountLicenseData.  # noqa: E501
        :type: list[LicenseLicenseInfo]
        """

        self._licenseinfos = licenseinfos

    @property
    def smartlicense_token(self):
        """Gets the smartlicense_token of this LicenseAccountLicenseData.  # noqa: E501


        :return: The smartlicense_token of this LicenseAccountLicenseData.  # noqa: E501
        :rtype: LicenseSmartlicenseToken
        """
        return self._smartlicense_token

    @smartlicense_token.setter
    def smartlicense_token(self, smartlicense_token):
        """Sets the smartlicense_token of this LicenseAccountLicenseData.


        :param smartlicense_token: The smartlicense_token of this LicenseAccountLicenseData.  # noqa: E501
        :type: LicenseSmartlicenseToken
        """

        self._smartlicense_token = smartlicense_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseAccountLicenseData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LicenseAccountLicenseData):
            return True

        return self.to_dict() != other.to_dict()
