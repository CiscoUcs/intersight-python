# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-961
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ConnectorUrl(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'force_query': 'bool',
        'fragment': 'str',
        'host': 'str',
        'opaque': 'str',
        'path': 'str',
        'raw_path': 'str',
        'raw_query': 'str',
        'scheme': 'str'
    }

    attribute_map = {
        'force_query': 'ForceQuery',
        'fragment': 'Fragment',
        'host': 'Host',
        'opaque': 'Opaque',
        'path': 'Path',
        'raw_path': 'RawPath',
        'raw_query': 'RawQuery',
        'scheme': 'Scheme'
    }

    def __init__(self, force_query=None, fragment=None, host=None, opaque=None, path=None, raw_path=None, raw_query=None, scheme=None):
        """
        ConnectorUrl - a model defined in Swagger
        """

        self._force_query = None
        self._fragment = None
        self._host = None
        self._opaque = None
        self._path = None
        self._raw_path = None
        self._raw_query = None
        self._scheme = None

        if force_query is not None:
          self.force_query = force_query
        if fragment is not None:
          self.fragment = fragment
        if host is not None:
          self.host = host
        if opaque is not None:
          self.opaque = opaque
        if path is not None:
          self.path = path
        if raw_path is not None:
          self.raw_path = raw_path
        if raw_query is not None:
          self.raw_query = raw_query
        if scheme is not None:
          self.scheme = scheme

    @property
    def force_query(self):
        """
        Gets the force_query of this ConnectorUrl.
        Flag to append a query to the url even if rawQuery is empty.  

        :return: The force_query of this ConnectorUrl.
        :rtype: bool
        """
        return self._force_query

    @force_query.setter
    def force_query(self, force_query):
        """
        Sets the force_query of this ConnectorUrl.
        Flag to append a query to the url even if rawQuery is empty.  

        :param force_query: The force_query of this ConnectorUrl.
        :type: bool
        """

        self._force_query = force_query

    @property
    def fragment(self):
        """
        Gets the fragment of this ConnectorUrl.
        The fragment identifier component of a URI allows indirect identification of a secondary resource by reference to a primary resource and additional identifying information. The identified secondary resource may be some portion or subset of the primary resource, some view on representations of the primary resource, or some other resource defined or described by those representations. A fragment identifier component is indicated by the presence of a number sign (\"#\") character and terminated by the end of the URI.   

        :return: The fragment of this ConnectorUrl.
        :rtype: str
        """
        return self._fragment

    @fragment.setter
    def fragment(self, fragment):
        """
        Sets the fragment of this ConnectorUrl.
        The fragment identifier component of a URI allows indirect identification of a secondary resource by reference to a primary resource and additional identifying information. The identified secondary resource may be some portion or subset of the primary resource, some view on representations of the primary resource, or some other resource defined or described by those representations. A fragment identifier component is indicated by the presence of a number sign (\"#\") character and terminated by the end of the URI.   

        :param fragment: The fragment of this ConnectorUrl.
        :type: str
        """

        self._fragment = fragment

    @property
    def host(self):
        """
        Gets the host of this ConnectorUrl.
        The host name identifies the host that holds the resource. The host can be an IP or a hostname that is resolvable by the dns server configured on the platform.  

        :return: The host of this ConnectorUrl.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """
        Sets the host of this ConnectorUrl.
        The host name identifies the host that holds the resource. The host can be an IP or a hostname that is resolvable by the dns server configured on the platform.  

        :param host: The host of this ConnectorUrl.
        :type: str
        """

        self._host = host

    @property
    def opaque(self):
        """
        Gets the opaque of this ConnectorUrl.
        A URI is opaque if, and only if, it is absolute and its scheme-specific part does not begin with a slash character ('/'). An opaque URI has a scheme, a scheme-specific part, and possibly a fragment; all other components are undefined.  

        :return: The opaque of this ConnectorUrl.
        :rtype: str
        """
        return self._opaque

    @opaque.setter
    def opaque(self, opaque):
        """
        Sets the opaque of this ConnectorUrl.
        A URI is opaque if, and only if, it is absolute and its scheme-specific part does not begin with a slash character ('/'). An opaque URI has a scheme, a scheme-specific part, and possibly a fragment; all other components are undefined.  

        :param opaque: The opaque of this ConnectorUrl.
        :type: str
        """

        self._opaque = opaque

    @property
    def path(self):
        """
        Gets the path of this ConnectorUrl.
        The path identifies the specific resource in the host that the web client wants to access. Value is the decoded form of the path. e.g. '/foo/bar'.  

        :return: The path of this ConnectorUrl.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this ConnectorUrl.
        The path identifies the specific resource in the host that the web client wants to access. Value is the decoded form of the path. e.g. '/foo/bar'.  

        :param path: The path of this ConnectorUrl.
        :type: str
        """

        self._path = path

    @property
    def raw_path(self):
        """
        Gets the raw_path of this ConnectorUrl.
        The URI encoded form of the path property. e.g. '%2Fapi%2Fv1%2F'.  

        :return: The raw_path of this ConnectorUrl.
        :rtype: str
        """
        return self._raw_path

    @raw_path.setter
    def raw_path(self, raw_path):
        """
        Sets the raw_path of this ConnectorUrl.
        The URI encoded form of the path property. e.g. '%2Fapi%2Fv1%2F'.  

        :param raw_path: The raw_path of this ConnectorUrl.
        :type: str
        """

        self._raw_path = raw_path

    @property
    def raw_query(self):
        """
        Gets the raw_query of this ConnectorUrl.
        The query component, as defined in RFC 3986, contains non-hierarchical data that, along with data in the path component, serves to identify a resource within the scope of the URI's scheme and naming authority (if any). The query component is indicated by the first question mark character and terminated by a number sign character or by the end of the URI. The rawQuery contains the URIs encoded query component, excluding the ? character.   

        :return: The raw_query of this ConnectorUrl.
        :rtype: str
        """
        return self._raw_query

    @raw_query.setter
    def raw_query(self, raw_query):
        """
        Sets the raw_query of this ConnectorUrl.
        The query component, as defined in RFC 3986, contains non-hierarchical data that, along with data in the path component, serves to identify a resource within the scope of the URI's scheme and naming authority (if any). The query component is indicated by the first question mark character and terminated by a number sign character or by the end of the URI. The rawQuery contains the URIs encoded query component, excluding the ? character.   

        :param raw_query: The raw_query of this ConnectorUrl.
        :type: str
        """

        self._raw_query = raw_query

    @property
    def scheme(self):
        """
        Gets the scheme of this ConnectorUrl.
        The scheme identifies the protocol to be used to access the resource on the Internet. It can be HTTP (without SSL) or HTTPS (with SSL).   

        :return: The scheme of this ConnectorUrl.
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """
        Sets the scheme of this ConnectorUrl.
        The scheme identifies the protocol to be used to access the resource on the Internet. It can be HTTP (without SSL) or HTTPS (with SSL).   

        :param scheme: The scheme of this ConnectorUrl.
        :type: str
        """

        self._scheme = scheme

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ConnectorUrl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
