# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class NiaapiFieldNotice(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bugid': 'str',
        'field_notice_desc': 'str',
        'field_notice_id': 'str',
        'field_notice_url': 'str',
        'headline': 'str',
        'hwpid': 'str',
        'revision_info': 'list[NiaapiRevisionInfo]',
        'sw_release': 'str',
        'workaround_url': 'str'
    }

    attribute_map = {
        'bugid': 'Bugid',
        'field_notice_desc': 'FieldNoticeDesc',
        'field_notice_id': 'FieldNoticeId',
        'field_notice_url': 'FieldNoticeUrl',
        'headline': 'Headline',
        'hwpid': 'Hwpid',
        'revision_info': 'RevisionInfo',
        'sw_release': 'SwRelease',
        'workaround_url': 'WorkaroundUrl'
    }

    def __init__(self,
                 bugid=None,
                 field_notice_desc=None,
                 field_notice_id=None,
                 field_notice_url=None,
                 headline=None,
                 hwpid=None,
                 revision_info=None,
                 sw_release=None,
                 workaround_url=None,
                 local_vars_configuration=None):  # noqa: E501
        """NiaapiFieldNotice - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bugid = None
        self._field_notice_desc = None
        self._field_notice_id = None
        self._field_notice_url = None
        self._headline = None
        self._hwpid = None
        self._revision_info = None
        self._sw_release = None
        self._workaround_url = None
        self.discriminator = None

        if bugid is not None:
            self.bugid = bugid
        if field_notice_desc is not None:
            self.field_notice_desc = field_notice_desc
        if field_notice_id is not None:
            self.field_notice_id = field_notice_id
        if field_notice_url is not None:
            self.field_notice_url = field_notice_url
        if headline is not None:
            self.headline = headline
        if hwpid is not None:
            self.hwpid = hwpid
        if revision_info is not None:
            self.revision_info = revision_info
        if sw_release is not None:
            self.sw_release = sw_release
        if workaround_url is not None:
            self.workaround_url = workaround_url

    @property
    def bugid(self):
        """Gets the bugid of this NiaapiFieldNotice.  # noqa: E501

        Bug Id associated with this notice.    # noqa: E501

        :return: The bugid of this NiaapiFieldNotice.  # noqa: E501
        :rtype: str
        """
        return self._bugid

    @bugid.setter
    def bugid(self, bugid):
        """Sets the bugid of this NiaapiFieldNotice.

        Bug Id associated with this notice.    # noqa: E501

        :param bugid: The bugid of this NiaapiFieldNotice.  # noqa: E501
        :type: str
        """

        self._bugid = bugid

    @property
    def field_notice_desc(self):
        """Gets the field_notice_desc of this NiaapiFieldNotice.  # noqa: E501

        Field notice Description.    # noqa: E501

        :return: The field_notice_desc of this NiaapiFieldNotice.  # noqa: E501
        :rtype: str
        """
        return self._field_notice_desc

    @field_notice_desc.setter
    def field_notice_desc(self, field_notice_desc):
        """Sets the field_notice_desc of this NiaapiFieldNotice.

        Field notice Description.    # noqa: E501

        :param field_notice_desc: The field_notice_desc of this NiaapiFieldNotice.  # noqa: E501
        :type: str
        """

        self._field_notice_desc = field_notice_desc

    @property
    def field_notice_id(self):
        """Gets the field_notice_id of this NiaapiFieldNotice.  # noqa: E501

        Fieldnotice Id of this notice.    # noqa: E501

        :return: The field_notice_id of this NiaapiFieldNotice.  # noqa: E501
        :rtype: str
        """
        return self._field_notice_id

    @field_notice_id.setter
    def field_notice_id(self, field_notice_id):
        """Sets the field_notice_id of this NiaapiFieldNotice.

        Fieldnotice Id of this notice.    # noqa: E501

        :param field_notice_id: The field_notice_id of this NiaapiFieldNotice.  # noqa: E501
        :type: str
        """

        self._field_notice_id = field_notice_id

    @property
    def field_notice_url(self):
        """Gets the field_notice_url of this NiaapiFieldNotice.  # noqa: E501

        Field notice URL link to the notice webpage.    # noqa: E501

        :return: The field_notice_url of this NiaapiFieldNotice.  # noqa: E501
        :rtype: str
        """
        return self._field_notice_url

    @field_notice_url.setter
    def field_notice_url(self, field_notice_url):
        """Sets the field_notice_url of this NiaapiFieldNotice.

        Field notice URL link to the notice webpage.    # noqa: E501

        :param field_notice_url: The field_notice_url of this NiaapiFieldNotice.  # noqa: E501
        :type: str
        """

        self._field_notice_url = field_notice_url

    @property
    def headline(self):
        """Gets the headline of this NiaapiFieldNotice.  # noqa: E501

        The headline of this field notice.    # noqa: E501

        :return: The headline of this NiaapiFieldNotice.  # noqa: E501
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this NiaapiFieldNotice.

        The headline of this field notice.    # noqa: E501

        :param headline: The headline of this NiaapiFieldNotice.  # noqa: E501
        :type: str
        """

        self._headline = headline

    @property
    def hwpid(self):
        """Gets the hwpid of this NiaapiFieldNotice.  # noqa: E501

        Hardware PID for affected models.    # noqa: E501

        :return: The hwpid of this NiaapiFieldNotice.  # noqa: E501
        :rtype: str
        """
        return self._hwpid

    @hwpid.setter
    def hwpid(self, hwpid):
        """Sets the hwpid of this NiaapiFieldNotice.

        Hardware PID for affected models.    # noqa: E501

        :param hwpid: The hwpid of this NiaapiFieldNotice.  # noqa: E501
        :type: str
        """

        self._hwpid = hwpid

    @property
    def revision_info(self):
        """Gets the revision_info of this NiaapiFieldNotice.  # noqa: E501


        :return: The revision_info of this NiaapiFieldNotice.  # noqa: E501
        :rtype: list[NiaapiRevisionInfo]
        """
        return self._revision_info

    @revision_info.setter
    def revision_info(self, revision_info):
        """Sets the revision_info of this NiaapiFieldNotice.


        :param revision_info: The revision_info of this NiaapiFieldNotice.  # noqa: E501
        :type: list[NiaapiRevisionInfo]
        """

        self._revision_info = revision_info

    @property
    def sw_release(self):
        """Gets the sw_release of this NiaapiFieldNotice.  # noqa: E501

        Software Release number for affected versions.    # noqa: E501

        :return: The sw_release of this NiaapiFieldNotice.  # noqa: E501
        :rtype: str
        """
        return self._sw_release

    @sw_release.setter
    def sw_release(self, sw_release):
        """Sets the sw_release of this NiaapiFieldNotice.

        Software Release number for affected versions.    # noqa: E501

        :param sw_release: The sw_release of this NiaapiFieldNotice.  # noqa: E501
        :type: str
        """

        self._sw_release = sw_release

    @property
    def workaround_url(self):
        """Gets the workaround_url of this NiaapiFieldNotice.  # noqa: E501

        URL of workaround of this notice.     # noqa: E501

        :return: The workaround_url of this NiaapiFieldNotice.  # noqa: E501
        :rtype: str
        """
        return self._workaround_url

    @workaround_url.setter
    def workaround_url(self, workaround_url):
        """Sets the workaround_url of this NiaapiFieldNotice.

        URL of workaround of this notice.     # noqa: E501

        :param workaround_url: The workaround_url of this NiaapiFieldNotice.  # noqa: E501
        :type: str
        """

        self._workaround_url = workaround_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NiaapiFieldNotice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NiaapiFieldNotice):
            return True

        return self.to_dict() != other.to_dict()
