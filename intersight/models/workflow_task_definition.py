# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class WorkflowTaskDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'default_version': 'bool',
        'description': 'str',
        'internal_properties': 'WorkflowInternalProperties',
        'label': 'str',
        'license_entitlement': 'str',
        'name': 'str',
        'properties': 'WorkflowProperties',
        'version': 'int',
        'catalog': 'WorkflowCatalog',
        'implemented_tasks': 'list[WorkflowTaskDefinition]',
        'interface_task': 'WorkflowTaskDefinition'
    }

    attribute_map = {
        'default_version': 'DefaultVersion',
        'description': 'Description',
        'internal_properties': 'InternalProperties',
        'label': 'Label',
        'license_entitlement': 'LicenseEntitlement',
        'name': 'Name',
        'properties': 'Properties',
        'version': 'Version',
        'catalog': 'Catalog',
        'implemented_tasks': 'ImplementedTasks',
        'interface_task': 'InterfaceTask'
    }

    def __init__(self,
                 default_version=None,
                 description=None,
                 internal_properties=None,
                 label=None,
                 license_entitlement='Base',
                 name=None,
                 properties=None,
                 version=None,
                 catalog=None,
                 implemented_tasks=None,
                 interface_task=None,
                 local_vars_configuration=None):  # noqa: E501
        """WorkflowTaskDefinition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._default_version = None
        self._description = None
        self._internal_properties = None
        self._label = None
        self._license_entitlement = None
        self._name = None
        self._properties = None
        self._version = None
        self._catalog = None
        self._implemented_tasks = None
        self._interface_task = None
        self.discriminator = None

        if default_version is not None:
            self.default_version = default_version
        if description is not None:
            self.description = description
        if internal_properties is not None:
            self.internal_properties = internal_properties
        if label is not None:
            self.label = label
        if license_entitlement is not None:
            self.license_entitlement = license_entitlement
        if name is not None:
            self.name = name
        if properties is not None:
            self.properties = properties
        if version is not None:
            self.version = version
        if catalog is not None:
            self.catalog = catalog
        if implemented_tasks is not None:
            self.implemented_tasks = implemented_tasks
        if interface_task is not None:
            self.interface_task = interface_task

    @property
    def default_version(self):
        """Gets the default_version of this WorkflowTaskDefinition.  # noqa: E501

        When true this will be the task version that is used when a specific task definition version is not specified. The very first task definition created with a name will be set as the default version, after that user can explicitly set any version of the task definition as the default version.    # noqa: E501

        :return: The default_version of this WorkflowTaskDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._default_version

    @default_version.setter
    def default_version(self, default_version):
        """Sets the default_version of this WorkflowTaskDefinition.

        When true this will be the task version that is used when a specific task definition version is not specified. The very first task definition created with a name will be set as the default version, after that user can explicitly set any version of the task definition as the default version.    # noqa: E501

        :param default_version: The default_version of this WorkflowTaskDefinition.  # noqa: E501
        :type: bool
        """

        self._default_version = default_version

    @property
    def description(self):
        """Gets the description of this WorkflowTaskDefinition.  # noqa: E501

        The task definition description to describe what this task will do when executed.    # noqa: E501

        :return: The description of this WorkflowTaskDefinition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkflowTaskDefinition.

        The task definition description to describe what this task will do when executed.    # noqa: E501

        :param description: The description of this WorkflowTaskDefinition.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def internal_properties(self):
        """Gets the internal_properties of this WorkflowTaskDefinition.  # noqa: E501


        :return: The internal_properties of this WorkflowTaskDefinition.  # noqa: E501
        :rtype: WorkflowInternalProperties
        """
        return self._internal_properties

    @internal_properties.setter
    def internal_properties(self, internal_properties):
        """Sets the internal_properties of this WorkflowTaskDefinition.


        :param internal_properties: The internal_properties of this WorkflowTaskDefinition.  # noqa: E501
        :type: WorkflowInternalProperties
        """

        self._internal_properties = internal_properties

    @property
    def label(self):
        """Gets the label of this WorkflowTaskDefinition.  # noqa: E501

        A user friendly short name to identify the task definition.    # noqa: E501

        :return: The label of this WorkflowTaskDefinition.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this WorkflowTaskDefinition.

        A user friendly short name to identify the task definition.    # noqa: E501

        :param label: The label of this WorkflowTaskDefinition.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def license_entitlement(self):
        """Gets the license_entitlement of this WorkflowTaskDefinition.  # noqa: E501

        License entitlement required to run this task. It is determined by license requirement of features.    # noqa: E501

        :return: The license_entitlement of this WorkflowTaskDefinition.  # noqa: E501
        :rtype: str
        """
        return self._license_entitlement

    @license_entitlement.setter
    def license_entitlement(self, license_entitlement):
        """Sets the license_entitlement of this WorkflowTaskDefinition.

        License entitlement required to run this task. It is determined by license requirement of features.    # noqa: E501

        :param license_entitlement: The license_entitlement of this WorkflowTaskDefinition.  # noqa: E501
        :type: str
        """
        allowed_values = ["Base", "Essential", "Standard",
                          "Advantage"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and license_entitlement not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `license_entitlement` ({0}), must be one of {1}"  # noqa: E501
                .format(license_entitlement, allowed_values))

        self._license_entitlement = license_entitlement

    @property
    def name(self):
        """Gets the name of this WorkflowTaskDefinition.  # noqa: E501

        The name of the task definition. The name should follow this convention <Verb or Action><Category><Vendor><Product><Noun or object> Verb or Action is a required portion of the name and this must be part of the pre-approved verb list. Category is an optional field and this will refer to the broad category of the task referring to the type of resource or endpoint. If there is no specific category then use \"Generic\" if required. Vendor is an optional field and this will refer to the specific vendor this task applies to. If the task is generic and not tied to a vendor, then do not specify anything. Product is an optional field, this will contain the vendor product and model when desired. Noun or object is a required field and  this will contain the noun or object on which the action is being performed. Examples SendEmail  - This is a task in Generic category for sending email. NewStorageVolume - This is a vendor agnostic task under Storage device category for creating a new volume.    # noqa: E501

        :return: The name of this WorkflowTaskDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowTaskDefinition.

        The name of the task definition. The name should follow this convention <Verb or Action><Category><Vendor><Product><Noun or object> Verb or Action is a required portion of the name and this must be part of the pre-approved verb list. Category is an optional field and this will refer to the broad category of the task referring to the type of resource or endpoint. If there is no specific category then use \"Generic\" if required. Vendor is an optional field and this will refer to the specific vendor this task applies to. If the task is generic and not tied to a vendor, then do not specify anything. Product is an optional field, this will contain the vendor product and model when desired. Noun or object is a required field and  this will contain the noun or object on which the action is being performed. Examples SendEmail  - This is a task in Generic category for sending email. NewStorageVolume - This is a vendor agnostic task under Storage device category for creating a new volume.    # noqa: E501

        :param name: The name of this WorkflowTaskDefinition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def properties(self):
        """Gets the properties of this WorkflowTaskDefinition.  # noqa: E501


        :return: The properties of this WorkflowTaskDefinition.  # noqa: E501
        :rtype: WorkflowProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this WorkflowTaskDefinition.


        :param properties: The properties of this WorkflowTaskDefinition.  # noqa: E501
        :type: WorkflowProperties
        """

        self._properties = properties

    @property
    def version(self):
        """Gets the version of this WorkflowTaskDefinition.  # noqa: E501

        The version of the task definition so we can support multiple versions of a task definition.     # noqa: E501

        :return: The version of this WorkflowTaskDefinition.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this WorkflowTaskDefinition.

        The version of the task definition so we can support multiple versions of a task definition.     # noqa: E501

        :param version: The version of this WorkflowTaskDefinition.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def catalog(self):
        """Gets the catalog of this WorkflowTaskDefinition.  # noqa: E501


        :return: The catalog of this WorkflowTaskDefinition.  # noqa: E501
        :rtype: WorkflowCatalog
        """
        return self._catalog

    @catalog.setter
    def catalog(self, catalog):
        """Sets the catalog of this WorkflowTaskDefinition.


        :param catalog: The catalog of this WorkflowTaskDefinition.  # noqa: E501
        :type: WorkflowCatalog
        """

        self._catalog = catalog

    @property
    def implemented_tasks(self):
        """Gets the implemented_tasks of this WorkflowTaskDefinition.  # noqa: E501

        A reference to a workflowTaskDefinition resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of all the implemented task for this TaskDefinition. When this list is populated it implies that this TaskDefinition has multiple implementations.   # noqa: E501

        :return: The implemented_tasks of this WorkflowTaskDefinition.  # noqa: E501
        :rtype: list[WorkflowTaskDefinition]
        """
        return self._implemented_tasks

    @implemented_tasks.setter
    def implemented_tasks(self, implemented_tasks):
        """Sets the implemented_tasks of this WorkflowTaskDefinition.

        A reference to a workflowTaskDefinition resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of all the implemented task for this TaskDefinition. When this list is populated it implies that this TaskDefinition has multiple implementations.   # noqa: E501

        :param implemented_tasks: The implemented_tasks of this WorkflowTaskDefinition.  # noqa: E501
        :type: list[WorkflowTaskDefinition]
        """

        self._implemented_tasks = implemented_tasks

    @property
    def interface_task(self):
        """Gets the interface_task of this WorkflowTaskDefinition.  # noqa: E501


        :return: The interface_task of this WorkflowTaskDefinition.  # noqa: E501
        :rtype: WorkflowTaskDefinition
        """
        return self._interface_task

    @interface_task.setter
    def interface_task(self, interface_task):
        """Sets the interface_task of this WorkflowTaskDefinition.


        :param interface_task: The interface_task of this WorkflowTaskDefinition.  # noqa: E501
        :type: WorkflowTaskDefinition
        """

        self._interface_task = interface_task

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowTaskDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowTaskDefinition):
            return True

        return self.to_dict() != other.to_dict()
