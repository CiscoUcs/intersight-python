# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class WorkflowPendingDynamicWorkflowInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'input': 'object',
        'name': 'str',
        'pending_services': 'list[str]',
        'src': 'str',
        'status': 'str',
        'wait_on_duplicate': 'bool',
        'workflow_action_task_lists':
        'list[WorkflowDynamicWorkflowActionTaskList]',
        'workflow_ctx': 'object',
        'workflow_key': 'str',
        'workflow_meta': 'object',
        'workflow_info': 'WorkflowWorkflowInfo'
    }

    attribute_map = {
        'input': 'Input',
        'name': 'Name',
        'pending_services': 'PendingServices',
        'src': 'Src',
        'status': 'Status',
        'wait_on_duplicate': 'WaitOnDuplicate',
        'workflow_action_task_lists': 'WorkflowActionTaskLists',
        'workflow_ctx': 'WorkflowCtx',
        'workflow_key': 'WorkflowKey',
        'workflow_meta': 'WorkflowMeta',
        'workflow_info': 'WorkflowInfo'
    }

    def __init__(self,
                 input=None,
                 name=None,
                 pending_services=None,
                 src=None,
                 status='GatheringTasks',
                 wait_on_duplicate=None,
                 workflow_action_task_lists=None,
                 workflow_ctx=None,
                 workflow_key=None,
                 workflow_meta=None,
                 workflow_info=None,
                 local_vars_configuration=None):  # noqa: E501
        """WorkflowPendingDynamicWorkflowInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._input = None
        self._name = None
        self._pending_services = None
        self._src = None
        self._status = None
        self._wait_on_duplicate = None
        self._workflow_action_task_lists = None
        self._workflow_ctx = None
        self._workflow_key = None
        self._workflow_meta = None
        self._workflow_info = None
        self.discriminator = None

        if input is not None:
            self.input = input
        if name is not None:
            self.name = name
        if pending_services is not None:
            self.pending_services = pending_services
        if src is not None:
            self.src = src
        if status is not None:
            self.status = status
        if wait_on_duplicate is not None:
            self.wait_on_duplicate = wait_on_duplicate
        if workflow_action_task_lists is not None:
            self.workflow_action_task_lists = workflow_action_task_lists
        if workflow_ctx is not None:
            self.workflow_ctx = workflow_ctx
        if workflow_key is not None:
            self.workflow_key = workflow_key
        if workflow_meta is not None:
            self.workflow_meta = workflow_meta
        if workflow_info is not None:
            self.workflow_info = workflow_info

    @property
    def input(self):
        """Gets the input of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501

        The inputs of the workflow.    # noqa: E501

        :return: The input of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :rtype: object
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this WorkflowPendingDynamicWorkflowInfo.

        The inputs of the workflow.    # noqa: E501

        :param input: The input of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :type: object
        """

        self._input = input

    @property
    def name(self):
        """Gets the name of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501

        A name for the pending dynamic workflow.    # noqa: E501

        :return: The name of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowPendingDynamicWorkflowInfo.

        A name for the pending dynamic workflow.    # noqa: E501

        :param name: The name of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pending_services(self):
        """Gets the pending_services of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501


        :return: The pending_services of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._pending_services

    @pending_services.setter
    def pending_services(self, pending_services):
        """Sets the pending_services of this WorkflowPendingDynamicWorkflowInfo.


        :param pending_services: The pending_services of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :type: list[str]
        """

        self._pending_services = pending_services

    @property
    def src(self):
        """Gets the src of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501

        The src is workflow owner service.    # noqa: E501

        :return: The src of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this WorkflowPendingDynamicWorkflowInfo.

        The src is workflow owner service.    # noqa: E501

        :param src: The src of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :type: str
        """

        self._src = src

    @property
    def status(self):
        """Gets the status of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501

        The current status of the PendingDynamicWorkflowInfo.    # noqa: E501

        :return: The status of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkflowPendingDynamicWorkflowInfo.

        The current status of the PendingDynamicWorkflowInfo.    # noqa: E501

        :param status: The status of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["GatheringTasks", "Waiting"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values))

        self._status = status

    @property
    def wait_on_duplicate(self):
        """Gets the wait_on_duplicate of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501

        When set to true workflow engine will wait for a duplicate to finish before starting a new one.    # noqa: E501

        :return: The wait_on_duplicate of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :rtype: bool
        """
        return self._wait_on_duplicate

    @wait_on_duplicate.setter
    def wait_on_duplicate(self, wait_on_duplicate):
        """Sets the wait_on_duplicate of this WorkflowPendingDynamicWorkflowInfo.

        When set to true workflow engine will wait for a duplicate to finish before starting a new one.    # noqa: E501

        :param wait_on_duplicate: The wait_on_duplicate of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :type: bool
        """

        self._wait_on_duplicate = wait_on_duplicate

    @property
    def workflow_action_task_lists(self):
        """Gets the workflow_action_task_lists of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501


        :return: The workflow_action_task_lists of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :rtype: list[WorkflowDynamicWorkflowActionTaskList]
        """
        return self._workflow_action_task_lists

    @workflow_action_task_lists.setter
    def workflow_action_task_lists(self, workflow_action_task_lists):
        """Sets the workflow_action_task_lists of this WorkflowPendingDynamicWorkflowInfo.


        :param workflow_action_task_lists: The workflow_action_task_lists of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :type: list[WorkflowDynamicWorkflowActionTaskList]
        """

        self._workflow_action_task_lists = workflow_action_task_lists

    @property
    def workflow_ctx(self):
        """Gets the workflow_ctx of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501

        The workflow's workflow context which contains initiator and target information.    # noqa: E501

        :return: The workflow_ctx of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :rtype: object
        """
        return self._workflow_ctx

    @workflow_ctx.setter
    def workflow_ctx(self, workflow_ctx):
        """Sets the workflow_ctx of this WorkflowPendingDynamicWorkflowInfo.

        The workflow's workflow context which contains initiator and target information.    # noqa: E501

        :param workflow_ctx: The workflow_ctx of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :type: object
        """

        self._workflow_ctx = workflow_ctx

    @property
    def workflow_key(self):
        """Gets the workflow_key of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501

        This key contains workflow, initiator and target name. Workflow engine uses the key to do workflow dedup.    # noqa: E501

        :return: The workflow_key of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :rtype: str
        """
        return self._workflow_key

    @workflow_key.setter
    def workflow_key(self, workflow_key):
        """Sets the workflow_key of this WorkflowPendingDynamicWorkflowInfo.

        This key contains workflow, initiator and target name. Workflow engine uses the key to do workflow dedup.    # noqa: E501

        :param workflow_key: The workflow_key of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :type: str
        """

        self._workflow_key = workflow_key

    @property
    def workflow_meta(self):
        """Gets the workflow_meta of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501

        The metadata of the workflow.     # noqa: E501

        :return: The workflow_meta of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :rtype: object
        """
        return self._workflow_meta

    @workflow_meta.setter
    def workflow_meta(self, workflow_meta):
        """Sets the workflow_meta of this WorkflowPendingDynamicWorkflowInfo.

        The metadata of the workflow.     # noqa: E501

        :param workflow_meta: The workflow_meta of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :type: object
        """

        self._workflow_meta = workflow_meta

    @property
    def workflow_info(self):
        """Gets the workflow_info of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501


        :return: The workflow_info of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :rtype: WorkflowWorkflowInfo
        """
        return self._workflow_info

    @workflow_info.setter
    def workflow_info(self, workflow_info):
        """Sets the workflow_info of this WorkflowPendingDynamicWorkflowInfo.


        :param workflow_info: The workflow_info of this WorkflowPendingDynamicWorkflowInfo.  # noqa: E501
        :type: WorkflowWorkflowInfo
        """

        self._workflow_info = workflow_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowPendingDynamicWorkflowInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowPendingDynamicWorkflowInfo):
            return True

        return self.to_dict() != other.to_dict()
