# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1415
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorkflowPendingDynamicWorkflowInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoOptionalTag]',
        'version_context': 'MoOptionalVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'input': 'object',
        'name': 'str',
        'pending_services': 'list[str]',
        'src': 'str',
        'status': 'str',
        'wait_on_duplicate': 'bool',
        'workflow_action_task_lists': 'list[WorkflowOptionalDynamicWorkflowActionTaskList]',
        'workflow_ctx': 'object',
        'workflow_key': 'str',
        'workflow_meta': 'object',
        'workflow_info': 'WorkflowWorkflowInfoRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'input': 'Input',
        'name': 'Name',
        'pending_services': 'PendingServices',
        'src': 'Src',
        'status': 'Status',
        'wait_on_duplicate': 'WaitOnDuplicate',
        'workflow_action_task_lists': 'WorkflowActionTaskLists',
        'workflow_ctx': 'WorkflowCtx',
        'workflow_key': 'WorkflowKey',
        'workflow_meta': 'WorkflowMeta',
        'workflow_info': 'WorkflowInfo'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, input=None, name=None, pending_services=None, src=None, status='GatheringTasks', wait_on_duplicate=None, workflow_action_task_lists=None, workflow_ctx=None, workflow_key=None, workflow_meta=None, workflow_info=None):
        """
        WorkflowPendingDynamicWorkflowInfo - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._input = None
        self._name = None
        self._pending_services = None
        self._src = None
        self._status = None
        self._wait_on_duplicate = None
        self._workflow_action_task_lists = None
        self._workflow_ctx = None
        self._workflow_key = None
        self._workflow_meta = None
        self._workflow_info = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if input is not None:
          self.input = input
        if name is not None:
          self.name = name
        if pending_services is not None:
          self.pending_services = pending_services
        if src is not None:
          self.src = src
        if status is not None:
          self.status = status
        if wait_on_duplicate is not None:
          self.wait_on_duplicate = wait_on_duplicate
        if workflow_action_task_lists is not None:
          self.workflow_action_task_lists = workflow_action_task_lists
        if workflow_ctx is not None:
          self.workflow_ctx = workflow_ctx
        if workflow_key is not None:
          self.workflow_key = workflow_key
        if workflow_meta is not None:
          self.workflow_meta = workflow_meta
        if workflow_info is not None:
          self.workflow_info = workflow_info

    @property
    def account_moid(self):
        """
        Gets the account_moid of this WorkflowPendingDynamicWorkflowInfo.
        The Account ID for this managed object.  

        :return: The account_moid of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this WorkflowPendingDynamicWorkflowInfo.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this WorkflowPendingDynamicWorkflowInfo.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this WorkflowPendingDynamicWorkflowInfo.
        The time when this managed object was created.  

        :return: The create_time of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this WorkflowPendingDynamicWorkflowInfo.
        The time when this managed object was created.  

        :param create_time: The create_time of this WorkflowPendingDynamicWorkflowInfo.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this WorkflowPendingDynamicWorkflowInfo.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this WorkflowPendingDynamicWorkflowInfo.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this WorkflowPendingDynamicWorkflowInfo.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this WorkflowPendingDynamicWorkflowInfo.
        The time when this managed object was last modified.  

        :return: The mod_time of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this WorkflowPendingDynamicWorkflowInfo.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this WorkflowPendingDynamicWorkflowInfo.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this WorkflowPendingDynamicWorkflowInfo.
        The unique identifier of this Managed Object instance.   

        :return: The moid of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this WorkflowPendingDynamicWorkflowInfo.
        The unique identifier of this Managed Object instance.   

        :param moid: The moid of this WorkflowPendingDynamicWorkflowInfo.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this WorkflowPendingDynamicWorkflowInfo.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :return: The object_type of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this WorkflowPendingDynamicWorkflowInfo.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :param object_type: The object_type of this WorkflowPendingDynamicWorkflowInfo.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this WorkflowPendingDynamicWorkflowInfo.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this WorkflowPendingDynamicWorkflowInfo.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this WorkflowPendingDynamicWorkflowInfo.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this WorkflowPendingDynamicWorkflowInfo.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this WorkflowPendingDynamicWorkflowInfo.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this WorkflowPendingDynamicWorkflowInfo.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this WorkflowPendingDynamicWorkflowInfo.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: list[MoOptionalTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this WorkflowPendingDynamicWorkflowInfo.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this WorkflowPendingDynamicWorkflowInfo.
        :type: list[MoOptionalTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this WorkflowPendingDynamicWorkflowInfo.
        The versioning info for this managed object.   

        :return: The version_context of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: MoOptionalVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this WorkflowPendingDynamicWorkflowInfo.
        The versioning info for this managed object.   

        :param version_context: The version_context of this WorkflowPendingDynamicWorkflowInfo.
        :type: MoOptionalVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this WorkflowPendingDynamicWorkflowInfo.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this WorkflowPendingDynamicWorkflowInfo.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this WorkflowPendingDynamicWorkflowInfo.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this WorkflowPendingDynamicWorkflowInfo.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this WorkflowPendingDynamicWorkflowInfo.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this WorkflowPendingDynamicWorkflowInfo.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this WorkflowPendingDynamicWorkflowInfo.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :return: The permission_resources of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this WorkflowPendingDynamicWorkflowInfo.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :param permission_resources: The permission_resources of this WorkflowPendingDynamicWorkflowInfo.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def input(self):
        """
        Gets the input of this WorkflowPendingDynamicWorkflowInfo.
        The inputs of the workflow.  

        :return: The input of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: object
        """
        return self._input

    @input.setter
    def input(self, input):
        """
        Sets the input of this WorkflowPendingDynamicWorkflowInfo.
        The inputs of the workflow.  

        :param input: The input of this WorkflowPendingDynamicWorkflowInfo.
        :type: object
        """

        self._input = input

    @property
    def name(self):
        """
        Gets the name of this WorkflowPendingDynamicWorkflowInfo.
        A name for the pending dynamic workflow.  

        :return: The name of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WorkflowPendingDynamicWorkflowInfo.
        A name for the pending dynamic workflow.  

        :param name: The name of this WorkflowPendingDynamicWorkflowInfo.
        :type: str
        """

        self._name = name

    @property
    def pending_services(self):
        """
        Gets the pending_services of this WorkflowPendingDynamicWorkflowInfo.
        The pending services the dynamic workflow is waiting for to return the task list.  

        :return: The pending_services of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: list[str]
        """
        return self._pending_services

    @pending_services.setter
    def pending_services(self, pending_services):
        """
        Sets the pending_services of this WorkflowPendingDynamicWorkflowInfo.
        The pending services the dynamic workflow is waiting for to return the task list.  

        :param pending_services: The pending_services of this WorkflowPendingDynamicWorkflowInfo.
        :type: list[str]
        """

        self._pending_services = pending_services

    @property
    def src(self):
        """
        Gets the src of this WorkflowPendingDynamicWorkflowInfo.
        The src is workflow owner service.  

        :return: The src of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """
        Sets the src of this WorkflowPendingDynamicWorkflowInfo.
        The src is workflow owner service.  

        :param src: The src of this WorkflowPendingDynamicWorkflowInfo.
        :type: str
        """

        self._src = src

    @property
    def status(self):
        """
        Gets the status of this WorkflowPendingDynamicWorkflowInfo.
        The current status of the PendingDynamicWorkflowInfo.  

        :return: The status of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this WorkflowPendingDynamicWorkflowInfo.
        The current status of the PendingDynamicWorkflowInfo.  

        :param status: The status of this WorkflowPendingDynamicWorkflowInfo.
        :type: str
        """
        allowed_values = ["GatheringTasks", "Waiting"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def wait_on_duplicate(self):
        """
        Gets the wait_on_duplicate of this WorkflowPendingDynamicWorkflowInfo.
        When set to true workflow engine will wait for a duplicate to finish before starting a new one.  

        :return: The wait_on_duplicate of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: bool
        """
        return self._wait_on_duplicate

    @wait_on_duplicate.setter
    def wait_on_duplicate(self, wait_on_duplicate):
        """
        Sets the wait_on_duplicate of this WorkflowPendingDynamicWorkflowInfo.
        When set to true workflow engine will wait for a duplicate to finish before starting a new one.  

        :param wait_on_duplicate: The wait_on_duplicate of this WorkflowPendingDynamicWorkflowInfo.
        :type: bool
        """

        self._wait_on_duplicate = wait_on_duplicate

    @property
    def workflow_action_task_lists(self):
        """
        Gets the workflow_action_task_lists of this WorkflowPendingDynamicWorkflowInfo.
        The task lists returned by services for building dynamic workflows.  There will be an entry for every different workflow action.  

        :return: The workflow_action_task_lists of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: list[WorkflowOptionalDynamicWorkflowActionTaskList]
        """
        return self._workflow_action_task_lists

    @workflow_action_task_lists.setter
    def workflow_action_task_lists(self, workflow_action_task_lists):
        """
        Sets the workflow_action_task_lists of this WorkflowPendingDynamicWorkflowInfo.
        The task lists returned by services for building dynamic workflows.  There will be an entry for every different workflow action.  

        :param workflow_action_task_lists: The workflow_action_task_lists of this WorkflowPendingDynamicWorkflowInfo.
        :type: list[WorkflowOptionalDynamicWorkflowActionTaskList]
        """

        self._workflow_action_task_lists = workflow_action_task_lists

    @property
    def workflow_ctx(self):
        """
        Gets the workflow_ctx of this WorkflowPendingDynamicWorkflowInfo.
        The workflow's workflow context which contains initiator and target information.  

        :return: The workflow_ctx of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: object
        """
        return self._workflow_ctx

    @workflow_ctx.setter
    def workflow_ctx(self, workflow_ctx):
        """
        Sets the workflow_ctx of this WorkflowPendingDynamicWorkflowInfo.
        The workflow's workflow context which contains initiator and target information.  

        :param workflow_ctx: The workflow_ctx of this WorkflowPendingDynamicWorkflowInfo.
        :type: object
        """

        self._workflow_ctx = workflow_ctx

    @property
    def workflow_key(self):
        """
        Gets the workflow_key of this WorkflowPendingDynamicWorkflowInfo.
        This key contains workflow, initiator and target name. Workflow engine uses the key to do workflow dedup.  

        :return: The workflow_key of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: str
        """
        return self._workflow_key

    @workflow_key.setter
    def workflow_key(self, workflow_key):
        """
        Sets the workflow_key of this WorkflowPendingDynamicWorkflowInfo.
        This key contains workflow, initiator and target name. Workflow engine uses the key to do workflow dedup.  

        :param workflow_key: The workflow_key of this WorkflowPendingDynamicWorkflowInfo.
        :type: str
        """

        self._workflow_key = workflow_key

    @property
    def workflow_meta(self):
        """
        Gets the workflow_meta of this WorkflowPendingDynamicWorkflowInfo.
        The metadata of the workflow.   

        :return: The workflow_meta of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: object
        """
        return self._workflow_meta

    @workflow_meta.setter
    def workflow_meta(self, workflow_meta):
        """
        Sets the workflow_meta of this WorkflowPendingDynamicWorkflowInfo.
        The metadata of the workflow.   

        :param workflow_meta: The workflow_meta of this WorkflowPendingDynamicWorkflowInfo.
        :type: object
        """

        self._workflow_meta = workflow_meta

    @property
    def workflow_info(self):
        """
        Gets the workflow_info of this WorkflowPendingDynamicWorkflowInfo.
        A collection of references to the [workflow.WorkflowInfo](mo://workflow.WorkflowInfo) Managed Object.  When this managed object is deleted, the referenced [workflow.WorkflowInfo](mo://workflow.WorkflowInfo) MO unsets its reference to this deleted MO. 

        :return: The workflow_info of this WorkflowPendingDynamicWorkflowInfo.
        :rtype: WorkflowWorkflowInfoRef
        """
        return self._workflow_info

    @workflow_info.setter
    def workflow_info(self, workflow_info):
        """
        Sets the workflow_info of this WorkflowPendingDynamicWorkflowInfo.
        A collection of references to the [workflow.WorkflowInfo](mo://workflow.WorkflowInfo) Managed Object.  When this managed object is deleted, the referenced [workflow.WorkflowInfo](mo://workflow.WorkflowInfo) MO unsets its reference to this deleted MO. 

        :param workflow_info: The workflow_info of this WorkflowPendingDynamicWorkflowInfo.
        :type: WorkflowWorkflowInfoRef
        """

        self._workflow_info = workflow_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkflowPendingDynamicWorkflowInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
