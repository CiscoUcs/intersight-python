# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1415
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OnpremImagePackage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'file_path': 'str',
        'file_sha': 'str',
        'file_size': 'int',
        'file_time': 'datetime',
        'filename': 'str',
        'name': 'str',
        'package_type': 'str',
        'version': 'str'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'file_path': 'FilePath',
        'file_sha': 'FileSha',
        'file_size': 'FileSize',
        'file_time': 'FileTime',
        'filename': 'Filename',
        'name': 'Name',
        'package_type': 'PackageType',
        'version': 'Version'
    }

    def __init__(self, object_type=None, file_path=None, file_sha=None, file_size=None, file_time=None, filename=None, name=None, package_type=None, version=None):
        """
        OnpremImagePackage - a model defined in Swagger
        """

        self._object_type = None
        self._file_path = None
        self._file_sha = None
        self._file_size = None
        self._file_time = None
        self._filename = None
        self._name = None
        self._package_type = None
        self._version = None

        if object_type is not None:
          self.object_type = object_type
        if file_path is not None:
          self.file_path = file_path
        if file_sha is not None:
          self.file_sha = file_sha
        if file_size is not None:
          self.file_size = file_size
        if file_time is not None:
          self.file_time = file_time
        if filename is not None:
          self.filename = filename
        if name is not None:
          self.name = name
        if package_type is not None:
          self.package_type = package_type
        if version is not None:
          self.version = version

    @property
    def object_type(self):
        """
        Gets the object_type of this OnpremImagePackage.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :return: The object_type of this OnpremImagePackage.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this OnpremImagePackage.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :param object_type: The object_type of this OnpremImagePackage.
        :type: str
        """

        self._object_type = object_type

    @property
    def file_path(self):
        """
        Gets the file_path of this OnpremImagePackage.
        Optional file path of the image package.  

        :return: The file_path of this OnpremImagePackage.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """
        Sets the file_path of this OnpremImagePackage.
        Optional file path of the image package.  

        :param file_path: The file_path of this OnpremImagePackage.
        :type: str
        """

        self._file_path = file_path

    @property
    def file_sha(self):
        """
        Gets the file_sha of this OnpremImagePackage.
        Image file's fingerprint. Fingerprint is calculated using SHA256 algorithm.  

        :return: The file_sha of this OnpremImagePackage.
        :rtype: str
        """
        return self._file_sha

    @file_sha.setter
    def file_sha(self, file_sha):
        """
        Sets the file_sha of this OnpremImagePackage.
        Image file's fingerprint. Fingerprint is calculated using SHA256 algorithm.  

        :param file_sha: The file_sha of this OnpremImagePackage.
        :type: str
        """

        self._file_sha = file_sha

    @property
    def file_size(self):
        """
        Gets the file_size of this OnpremImagePackage.
        Image file size in bytes.  

        :return: The file_size of this OnpremImagePackage.
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """
        Sets the file_size of this OnpremImagePackage.
        Image file size in bytes.  

        :param file_size: The file_size of this OnpremImagePackage.
        :type: int
        """

        self._file_size = file_size

    @property
    def file_time(self):
        """
        Gets the file_time of this OnpremImagePackage.
        Image file's last modified date and time.  

        :return: The file_time of this OnpremImagePackage.
        :rtype: datetime
        """
        return self._file_time

    @file_time.setter
    def file_time(self, file_time):
        """
        Sets the file_time of this OnpremImagePackage.
        Image file's last modified date and time.  

        :param file_time: The file_time of this OnpremImagePackage.
        :type: datetime
        """

        self._file_time = file_time

    @property
    def filename(self):
        """
        Gets the filename of this OnpremImagePackage.
        Filename of the image package.  

        :return: The filename of this OnpremImagePackage.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """
        Sets the filename of this OnpremImagePackage.
        Filename of the image package.  

        :param filename: The filename of this OnpremImagePackage.
        :type: str
        """

        self._filename = filename

    @property
    def name(self):
        """
        Gets the name of this OnpremImagePackage.
        Name of the software image package.  

        :return: The name of this OnpremImagePackage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this OnpremImagePackage.
        Name of the software image package.  

        :param name: The name of this OnpremImagePackage.
        :type: str
        """

        self._name = name

    @property
    def package_type(self):
        """
        Gets the package_type of this OnpremImagePackage.
        Image package type (e.g. service, system etc.).  

        :return: The package_type of this OnpremImagePackage.
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """
        Sets the package_type of this OnpremImagePackage.
        Image package type (e.g. service, system etc.).  

        :param package_type: The package_type of this OnpremImagePackage.
        :type: str
        """

        self._package_type = package_type

    @property
    def version(self):
        """
        Gets the version of this OnpremImagePackage.
        Image package version string.   

        :return: The version of this OnpremImagePackage.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this OnpremImagePackage.
        Image package version string.   

        :param version: The version of this OnpremImagePackage.
        :type: str
        """

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OnpremImagePackage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
