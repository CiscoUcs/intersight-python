# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class NetworkElementAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'admin_inband_interface_state': 'str',
        'fault_summary': 'int',
        'inband_ip_address': 'str',
        'inband_ip_gateway': 'str',
        'inband_ip_mask': 'str',
        'inband_vlan': 'int',
        'out_of_band_ip_address': 'str',
        'out_of_band_ip_gateway': 'str',
        'out_of_band_ip_mask': 'str',
        'out_of_band_mac': 'str',
        'switch_id': 'str',
        'cards': 'list[EquipmentSwitchCard]',
        'fanmodules': 'list[EquipmentFanModule]',
        'management_contoller': 'ManagementController',
        'management_entity': 'ManagementEntity',
        'psus': 'list[EquipmentPsu]',
        'registered_device': 'AssetDeviceRegistration',
        'top_system': 'TopSystem',
        'ucsm_running_firmware': 'FirmwareRunningFirmware'
    }

    attribute_map = {
        'admin_inband_interface_state': 'AdminInbandInterfaceState',
        'fault_summary': 'FaultSummary',
        'inband_ip_address': 'InbandIpAddress',
        'inband_ip_gateway': 'InbandIpGateway',
        'inband_ip_mask': 'InbandIpMask',
        'inband_vlan': 'InbandVlan',
        'out_of_band_ip_address': 'OutOfBandIpAddress',
        'out_of_band_ip_gateway': 'OutOfBandIpGateway',
        'out_of_band_ip_mask': 'OutOfBandIpMask',
        'out_of_band_mac': 'OutOfBandMac',
        'switch_id': 'SwitchId',
        'cards': 'Cards',
        'fanmodules': 'Fanmodules',
        'management_contoller': 'ManagementContoller',
        'management_entity': 'ManagementEntity',
        'psus': 'Psus',
        'registered_device': 'RegisteredDevice',
        'top_system': 'TopSystem',
        'ucsm_running_firmware': 'UcsmRunningFirmware'
    }

    def __init__(self,
                 admin_inband_interface_state=None,
                 fault_summary=None,
                 inband_ip_address=None,
                 inband_ip_gateway=None,
                 inband_ip_mask=None,
                 inband_vlan=None,
                 out_of_band_ip_address=None,
                 out_of_band_ip_gateway=None,
                 out_of_band_ip_mask=None,
                 out_of_band_mac=None,
                 switch_id=None,
                 cards=None,
                 fanmodules=None,
                 management_contoller=None,
                 management_entity=None,
                 psus=None,
                 registered_device=None,
                 top_system=None,
                 ucsm_running_firmware=None,
                 local_vars_configuration=None):  # noqa: E501
        """NetworkElementAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._admin_inband_interface_state = None
        self._fault_summary = None
        self._inband_ip_address = None
        self._inband_ip_gateway = None
        self._inband_ip_mask = None
        self._inband_vlan = None
        self._out_of_band_ip_address = None
        self._out_of_band_ip_gateway = None
        self._out_of_band_ip_mask = None
        self._out_of_band_mac = None
        self._switch_id = None
        self._cards = None
        self._fanmodules = None
        self._management_contoller = None
        self._management_entity = None
        self._psus = None
        self._registered_device = None
        self._top_system = None
        self._ucsm_running_firmware = None
        self.discriminator = None

        if admin_inband_interface_state is not None:
            self.admin_inband_interface_state = admin_inband_interface_state
        if fault_summary is not None:
            self.fault_summary = fault_summary
        if inband_ip_address is not None:
            self.inband_ip_address = inband_ip_address
        if inband_ip_gateway is not None:
            self.inband_ip_gateway = inband_ip_gateway
        if inband_ip_mask is not None:
            self.inband_ip_mask = inband_ip_mask
        if inband_vlan is not None:
            self.inband_vlan = inband_vlan
        if out_of_band_ip_address is not None:
            self.out_of_band_ip_address = out_of_band_ip_address
        if out_of_band_ip_gateway is not None:
            self.out_of_band_ip_gateway = out_of_band_ip_gateway
        if out_of_band_ip_mask is not None:
            self.out_of_band_ip_mask = out_of_band_ip_mask
        if out_of_band_mac is not None:
            self.out_of_band_mac = out_of_band_mac
        if switch_id is not None:
            self.switch_id = switch_id
        if cards is not None:
            self.cards = cards
        if fanmodules is not None:
            self.fanmodules = fanmodules
        if management_contoller is not None:
            self.management_contoller = management_contoller
        if management_entity is not None:
            self.management_entity = management_entity
        if psus is not None:
            self.psus = psus
        if registered_device is not None:
            self.registered_device = registered_device
        if top_system is not None:
            self.top_system = top_system
        if ucsm_running_firmware is not None:
            self.ucsm_running_firmware = ucsm_running_firmware

    @property
    def admin_inband_interface_state(self):
        """Gets the admin_inband_interface_state of this NetworkElementAllOf.  # noqa: E501


        :return: The admin_inband_interface_state of this NetworkElementAllOf.  # noqa: E501
        :rtype: str
        """
        return self._admin_inband_interface_state

    @admin_inband_interface_state.setter
    def admin_inband_interface_state(self, admin_inband_interface_state):
        """Sets the admin_inband_interface_state of this NetworkElementAllOf.


        :param admin_inband_interface_state: The admin_inband_interface_state of this NetworkElementAllOf.  # noqa: E501
        :type: str
        """

        self._admin_inband_interface_state = admin_inband_interface_state

    @property
    def fault_summary(self):
        """Gets the fault_summary of this NetworkElementAllOf.  # noqa: E501


        :return: The fault_summary of this NetworkElementAllOf.  # noqa: E501
        :rtype: int
        """
        return self._fault_summary

    @fault_summary.setter
    def fault_summary(self, fault_summary):
        """Sets the fault_summary of this NetworkElementAllOf.


        :param fault_summary: The fault_summary of this NetworkElementAllOf.  # noqa: E501
        :type: int
        """

        self._fault_summary = fault_summary

    @property
    def inband_ip_address(self):
        """Gets the inband_ip_address of this NetworkElementAllOf.  # noqa: E501

        The Inband IP address of the network Element.    # noqa: E501

        :return: The inband_ip_address of this NetworkElementAllOf.  # noqa: E501
        :rtype: str
        """
        return self._inband_ip_address

    @inband_ip_address.setter
    def inband_ip_address(self, inband_ip_address):
        """Sets the inband_ip_address of this NetworkElementAllOf.

        The Inband IP address of the network Element.    # noqa: E501

        :param inband_ip_address: The inband_ip_address of this NetworkElementAllOf.  # noqa: E501
        :type: str
        """

        self._inband_ip_address = inband_ip_address

    @property
    def inband_ip_gateway(self):
        """Gets the inband_ip_gateway of this NetworkElementAllOf.  # noqa: E501

        The Inband IP Gateway of the network Element.    # noqa: E501

        :return: The inband_ip_gateway of this NetworkElementAllOf.  # noqa: E501
        :rtype: str
        """
        return self._inband_ip_gateway

    @inband_ip_gateway.setter
    def inband_ip_gateway(self, inband_ip_gateway):
        """Sets the inband_ip_gateway of this NetworkElementAllOf.

        The Inband IP Gateway of the network Element.    # noqa: E501

        :param inband_ip_gateway: The inband_ip_gateway of this NetworkElementAllOf.  # noqa: E501
        :type: str
        """

        self._inband_ip_gateway = inband_ip_gateway

    @property
    def inband_ip_mask(self):
        """Gets the inband_ip_mask of this NetworkElementAllOf.  # noqa: E501


        :return: The inband_ip_mask of this NetworkElementAllOf.  # noqa: E501
        :rtype: str
        """
        return self._inband_ip_mask

    @inband_ip_mask.setter
    def inband_ip_mask(self, inband_ip_mask):
        """Sets the inband_ip_mask of this NetworkElementAllOf.


        :param inband_ip_mask: The inband_ip_mask of this NetworkElementAllOf.  # noqa: E501
        :type: str
        """

        self._inband_ip_mask = inband_ip_mask

    @property
    def inband_vlan(self):
        """Gets the inband_vlan of this NetworkElementAllOf.  # noqa: E501


        :return: The inband_vlan of this NetworkElementAllOf.  # noqa: E501
        :rtype: int
        """
        return self._inband_vlan

    @inband_vlan.setter
    def inband_vlan(self, inband_vlan):
        """Sets the inband_vlan of this NetworkElementAllOf.


        :param inband_vlan: The inband_vlan of this NetworkElementAllOf.  # noqa: E501
        :type: int
        """

        self._inband_vlan = inband_vlan

    @property
    def out_of_band_ip_address(self):
        """Gets the out_of_band_ip_address of this NetworkElementAllOf.  # noqa: E501


        :return: The out_of_band_ip_address of this NetworkElementAllOf.  # noqa: E501
        :rtype: str
        """
        return self._out_of_band_ip_address

    @out_of_band_ip_address.setter
    def out_of_band_ip_address(self, out_of_band_ip_address):
        """Sets the out_of_band_ip_address of this NetworkElementAllOf.


        :param out_of_band_ip_address: The out_of_band_ip_address of this NetworkElementAllOf.  # noqa: E501
        :type: str
        """

        self._out_of_band_ip_address = out_of_band_ip_address

    @property
    def out_of_band_ip_gateway(self):
        """Gets the out_of_band_ip_gateway of this NetworkElementAllOf.  # noqa: E501


        :return: The out_of_band_ip_gateway of this NetworkElementAllOf.  # noqa: E501
        :rtype: str
        """
        return self._out_of_band_ip_gateway

    @out_of_band_ip_gateway.setter
    def out_of_band_ip_gateway(self, out_of_band_ip_gateway):
        """Sets the out_of_band_ip_gateway of this NetworkElementAllOf.


        :param out_of_band_ip_gateway: The out_of_band_ip_gateway of this NetworkElementAllOf.  # noqa: E501
        :type: str
        """

        self._out_of_band_ip_gateway = out_of_band_ip_gateway

    @property
    def out_of_band_ip_mask(self):
        """Gets the out_of_band_ip_mask of this NetworkElementAllOf.  # noqa: E501


        :return: The out_of_band_ip_mask of this NetworkElementAllOf.  # noqa: E501
        :rtype: str
        """
        return self._out_of_band_ip_mask

    @out_of_band_ip_mask.setter
    def out_of_band_ip_mask(self, out_of_band_ip_mask):
        """Sets the out_of_band_ip_mask of this NetworkElementAllOf.


        :param out_of_band_ip_mask: The out_of_band_ip_mask of this NetworkElementAllOf.  # noqa: E501
        :type: str
        """

        self._out_of_band_ip_mask = out_of_band_ip_mask

    @property
    def out_of_band_mac(self):
        """Gets the out_of_band_mac of this NetworkElementAllOf.  # noqa: E501


        :return: The out_of_band_mac of this NetworkElementAllOf.  # noqa: E501
        :rtype: str
        """
        return self._out_of_band_mac

    @out_of_band_mac.setter
    def out_of_band_mac(self, out_of_band_mac):
        """Sets the out_of_band_mac of this NetworkElementAllOf.


        :param out_of_band_mac: The out_of_band_mac of this NetworkElementAllOf.  # noqa: E501
        :type: str
        """

        self._out_of_band_mac = out_of_band_mac

    @property
    def switch_id(self):
        """Gets the switch_id of this NetworkElementAllOf.  # noqa: E501

        The Switch Id of the network Element.     # noqa: E501

        :return: The switch_id of this NetworkElementAllOf.  # noqa: E501
        :rtype: str
        """
        return self._switch_id

    @switch_id.setter
    def switch_id(self, switch_id):
        """Sets the switch_id of this NetworkElementAllOf.

        The Switch Id of the network Element.     # noqa: E501

        :param switch_id: The switch_id of this NetworkElementAllOf.  # noqa: E501
        :type: str
        """

        self._switch_id = switch_id

    @property
    def cards(self):
        """Gets the cards of this NetworkElementAllOf.  # noqa: E501

        A reference to a equipmentSwitchCard resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The cards of this NetworkElementAllOf.  # noqa: E501
        :rtype: list[EquipmentSwitchCard]
        """
        return self._cards

    @cards.setter
    def cards(self, cards):
        """Sets the cards of this NetworkElementAllOf.

        A reference to a equipmentSwitchCard resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param cards: The cards of this NetworkElementAllOf.  # noqa: E501
        :type: list[EquipmentSwitchCard]
        """

        self._cards = cards

    @property
    def fanmodules(self):
        """Gets the fanmodules of this NetworkElementAllOf.  # noqa: E501

        A reference to a equipmentFanModule resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The fanmodules of this NetworkElementAllOf.  # noqa: E501
        :rtype: list[EquipmentFanModule]
        """
        return self._fanmodules

    @fanmodules.setter
    def fanmodules(self, fanmodules):
        """Sets the fanmodules of this NetworkElementAllOf.

        A reference to a equipmentFanModule resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param fanmodules: The fanmodules of this NetworkElementAllOf.  # noqa: E501
        :type: list[EquipmentFanModule]
        """

        self._fanmodules = fanmodules

    @property
    def management_contoller(self):
        """Gets the management_contoller of this NetworkElementAllOf.  # noqa: E501


        :return: The management_contoller of this NetworkElementAllOf.  # noqa: E501
        :rtype: ManagementController
        """
        return self._management_contoller

    @management_contoller.setter
    def management_contoller(self, management_contoller):
        """Sets the management_contoller of this NetworkElementAllOf.


        :param management_contoller: The management_contoller of this NetworkElementAllOf.  # noqa: E501
        :type: ManagementController
        """

        self._management_contoller = management_contoller

    @property
    def management_entity(self):
        """Gets the management_entity of this NetworkElementAllOf.  # noqa: E501


        :return: The management_entity of this NetworkElementAllOf.  # noqa: E501
        :rtype: ManagementEntity
        """
        return self._management_entity

    @management_entity.setter
    def management_entity(self, management_entity):
        """Sets the management_entity of this NetworkElementAllOf.


        :param management_entity: The management_entity of this NetworkElementAllOf.  # noqa: E501
        :type: ManagementEntity
        """

        self._management_entity = management_entity

    @property
    def psus(self):
        """Gets the psus of this NetworkElementAllOf.  # noqa: E501

        A reference to a equipmentPsu resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The psus of this NetworkElementAllOf.  # noqa: E501
        :rtype: list[EquipmentPsu]
        """
        return self._psus

    @psus.setter
    def psus(self, psus):
        """Sets the psus of this NetworkElementAllOf.

        A reference to a equipmentPsu resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param psus: The psus of this NetworkElementAllOf.  # noqa: E501
        :type: list[EquipmentPsu]
        """

        self._psus = psus

    @property
    def registered_device(self):
        """Gets the registered_device of this NetworkElementAllOf.  # noqa: E501


        :return: The registered_device of this NetworkElementAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this NetworkElementAllOf.


        :param registered_device: The registered_device of this NetworkElementAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    @property
    def top_system(self):
        """Gets the top_system of this NetworkElementAllOf.  # noqa: E501


        :return: The top_system of this NetworkElementAllOf.  # noqa: E501
        :rtype: TopSystem
        """
        return self._top_system

    @top_system.setter
    def top_system(self, top_system):
        """Sets the top_system of this NetworkElementAllOf.


        :param top_system: The top_system of this NetworkElementAllOf.  # noqa: E501
        :type: TopSystem
        """

        self._top_system = top_system

    @property
    def ucsm_running_firmware(self):
        """Gets the ucsm_running_firmware of this NetworkElementAllOf.  # noqa: E501


        :return: The ucsm_running_firmware of this NetworkElementAllOf.  # noqa: E501
        :rtype: FirmwareRunningFirmware
        """
        return self._ucsm_running_firmware

    @ucsm_running_firmware.setter
    def ucsm_running_firmware(self, ucsm_running_firmware):
        """Sets the ucsm_running_firmware of this NetworkElementAllOf.


        :param ucsm_running_firmware: The ucsm_running_firmware of this NetworkElementAllOf.  # noqa: E501
        :type: FirmwareRunningFirmware
        """

        self._ucsm_running_firmware = ucsm_running_firmware

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkElementAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkElementAllOf):
            return True

        return self.to_dict() != other.to_dict()
