# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1415
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SoftwarerepositoryHttpServer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'is_password_set': 'bool',
        'location_link': 'str',
        'password': 'str',
        'username': 'str'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'is_password_set': 'IsPasswordSet',
        'location_link': 'LocationLink',
        'password': 'Password',
        'username': 'Username'
    }

    def __init__(self, object_type=None, is_password_set=None, location_link=None, password=None, username=None):
        """
        SoftwarerepositoryHttpServer - a model defined in Swagger
        """

        self._object_type = None
        self._is_password_set = None
        self._location_link = None
        self._password = None
        self._username = None

        if object_type is not None:
          self.object_type = object_type
        if is_password_set is not None:
          self.is_password_set = is_password_set
        if location_link is not None:
          self.location_link = location_link
        if password is not None:
          self.password = password
        if username is not None:
          self.username = username

    @property
    def object_type(self):
        """
        Gets the object_type of this SoftwarerepositoryHttpServer.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :return: The object_type of this SoftwarerepositoryHttpServer.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this SoftwarerepositoryHttpServer.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :param object_type: The object_type of this SoftwarerepositoryHttpServer.
        :type: str
        """

        self._object_type = object_type

    @property
    def is_password_set(self):
        """
        Gets the is_password_set of this SoftwarerepositoryHttpServer.

        :return: The is_password_set of this SoftwarerepositoryHttpServer.
        :rtype: bool
        """
        return self._is_password_set

    @is_password_set.setter
    def is_password_set(self, is_password_set):
        """
        Sets the is_password_set of this SoftwarerepositoryHttpServer.

        :param is_password_set: The is_password_set of this SoftwarerepositoryHttpServer.
        :type: bool
        """

        self._is_password_set = is_password_set

    @property
    def location_link(self):
        """
        Gets the location_link of this SoftwarerepositoryHttpServer.
        HTTP/HTTPS link to the image. Accepted formats are HTTP[s]://server-hostname/share/image or HTTP[s]://serverip/share/image.  

        :return: The location_link of this SoftwarerepositoryHttpServer.
        :rtype: str
        """
        return self._location_link

    @location_link.setter
    def location_link(self, location_link):
        """
        Sets the location_link of this SoftwarerepositoryHttpServer.
        HTTP/HTTPS link to the image. Accepted formats are HTTP[s]://server-hostname/share/image or HTTP[s]://serverip/share/image.  

        :param location_link: The location_link of this SoftwarerepositoryHttpServer.
        :type: str
        """

        self._location_link = location_link

    @property
    def password(self):
        """
        Gets the password of this SoftwarerepositoryHttpServer.
        Password as configured on the HTTP[S] server for user authentication. It is generally required to authenticate user provided HTTP[S] based software repositories.  

        :return: The password of this SoftwarerepositoryHttpServer.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this SoftwarerepositoryHttpServer.
        Password as configured on the HTTP[S] server for user authentication. It is generally required to authenticate user provided HTTP[S] based software repositories.  

        :param password: The password of this SoftwarerepositoryHttpServer.
        :type: str
        """

        self._password = password

    @property
    def username(self):
        """
        Gets the username of this SoftwarerepositoryHttpServer.
        Username as configured on the HTTP[S] server for user authentication. It is generally required to authenticate user provided HTTP[S] based software repositories.   

        :return: The username of this SoftwarerepositoryHttpServer.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this SoftwarerepositoryHttpServer.
        Username as configured on the HTTP[S] server for user authentication. It is generally required to authenticate user provided HTTP[S] based software repositories.   

        :param username: The username of this SoftwarerepositoryHttpServer.
        :type: str
        """

        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SoftwarerepositoryHttpServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
