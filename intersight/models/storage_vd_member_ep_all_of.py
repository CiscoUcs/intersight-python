# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StorageVdMemberEpAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'oper_qualifier_reason': 'str',
        'presence': 'str',
        'role': 'str',
        'span_id': 'str',
        'vd_member_ep_id': 'int',
        'registered_device': 'AssetDeviceRegistration',
        'storage_virtual_drive': 'StorageVirtualDrive'
    }

    attribute_map = {
        'oper_qualifier_reason': 'OperQualifierReason',
        'presence': 'Presence',
        'role': 'Role',
        'span_id': 'SpanId',
        'vd_member_ep_id': 'VdMemberEpId',
        'registered_device': 'RegisteredDevice',
        'storage_virtual_drive': 'StorageVirtualDrive'
    }

    def __init__(self,
                 oper_qualifier_reason=None,
                 presence=None,
                 role=None,
                 span_id=None,
                 vd_member_ep_id=None,
                 registered_device=None,
                 storage_virtual_drive=None,
                 local_vars_configuration=None):  # noqa: E501
        """StorageVdMemberEpAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._oper_qualifier_reason = None
        self._presence = None
        self._role = None
        self._span_id = None
        self._vd_member_ep_id = None
        self._registered_device = None
        self._storage_virtual_drive = None
        self.discriminator = None

        if oper_qualifier_reason is not None:
            self.oper_qualifier_reason = oper_qualifier_reason
        if presence is not None:
            self.presence = presence
        if role is not None:
            self.role = role
        if span_id is not None:
            self.span_id = span_id
        if vd_member_ep_id is not None:
            self.vd_member_ep_id = vd_member_ep_id
        if registered_device is not None:
            self.registered_device = registered_device
        if storage_virtual_drive is not None:
            self.storage_virtual_drive = storage_virtual_drive

    @property
    def oper_qualifier_reason(self):
        """Gets the oper_qualifier_reason of this StorageVdMemberEpAllOf.  # noqa: E501


        :return: The oper_qualifier_reason of this StorageVdMemberEpAllOf.  # noqa: E501
        :rtype: str
        """
        return self._oper_qualifier_reason

    @oper_qualifier_reason.setter
    def oper_qualifier_reason(self, oper_qualifier_reason):
        """Sets the oper_qualifier_reason of this StorageVdMemberEpAllOf.


        :param oper_qualifier_reason: The oper_qualifier_reason of this StorageVdMemberEpAllOf.  # noqa: E501
        :type: str
        """

        self._oper_qualifier_reason = oper_qualifier_reason

    @property
    def presence(self):
        """Gets the presence of this StorageVdMemberEpAllOf.  # noqa: E501


        :return: The presence of this StorageVdMemberEpAllOf.  # noqa: E501
        :rtype: str
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """Sets the presence of this StorageVdMemberEpAllOf.


        :param presence: The presence of this StorageVdMemberEpAllOf.  # noqa: E501
        :type: str
        """

        self._presence = presence

    @property
    def role(self):
        """Gets the role of this StorageVdMemberEpAllOf.  # noqa: E501

        Role of the disk normal or hot-spare, used by virtual-drive.    # noqa: E501

        :return: The role of this StorageVdMemberEpAllOf.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this StorageVdMemberEpAllOf.

        Role of the disk normal or hot-spare, used by virtual-drive.    # noqa: E501

        :param role: The role of this StorageVdMemberEpAllOf.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def span_id(self):
        """Gets the span_id of this StorageVdMemberEpAllOf.  # noqa: E501


        :return: The span_id of this StorageVdMemberEpAllOf.  # noqa: E501
        :rtype: str
        """
        return self._span_id

    @span_id.setter
    def span_id(self, span_id):
        """Sets the span_id of this StorageVdMemberEpAllOf.


        :param span_id: The span_id of this StorageVdMemberEpAllOf.  # noqa: E501
        :type: str
        """

        self._span_id = span_id

    @property
    def vd_member_ep_id(self):
        """Gets the vd_member_ep_id of this StorageVdMemberEpAllOf.  # noqa: E501

        It shows local disk slot number as id.     # noqa: E501

        :return: The vd_member_ep_id of this StorageVdMemberEpAllOf.  # noqa: E501
        :rtype: int
        """
        return self._vd_member_ep_id

    @vd_member_ep_id.setter
    def vd_member_ep_id(self, vd_member_ep_id):
        """Sets the vd_member_ep_id of this StorageVdMemberEpAllOf.

        It shows local disk slot number as id.     # noqa: E501

        :param vd_member_ep_id: The vd_member_ep_id of this StorageVdMemberEpAllOf.  # noqa: E501
        :type: int
        """

        self._vd_member_ep_id = vd_member_ep_id

    @property
    def registered_device(self):
        """Gets the registered_device of this StorageVdMemberEpAllOf.  # noqa: E501


        :return: The registered_device of this StorageVdMemberEpAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this StorageVdMemberEpAllOf.


        :param registered_device: The registered_device of this StorageVdMemberEpAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    @property
    def storage_virtual_drive(self):
        """Gets the storage_virtual_drive of this StorageVdMemberEpAllOf.  # noqa: E501


        :return: The storage_virtual_drive of this StorageVdMemberEpAllOf.  # noqa: E501
        :rtype: StorageVirtualDrive
        """
        return self._storage_virtual_drive

    @storage_virtual_drive.setter
    def storage_virtual_drive(self, storage_virtual_drive):
        """Sets the storage_virtual_drive of this StorageVdMemberEpAllOf.


        :param storage_virtual_drive: The storage_virtual_drive of this StorageVdMemberEpAllOf.  # noqa: E501
        :type: StorageVirtualDrive
        """

        self._storage_virtual_drive = storage_virtual_drive

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageVdMemberEpAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageVdMemberEpAllOf):
            return True

        return self.to_dict() != other.to_dict()
