# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StorageFlexUtilPhysicalDrive(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'block_size': 'str',
        'capacity': 'str',
        'controller': 'str',
        'drives_enabled': 'str',
        'health': 'str',
        'manufacturer_date': 'str',
        'manufacturer_id': 'str',
        'oem_id': 'str',
        'partition_count': 'str',
        'pd_status': 'str',
        'physical_drive': 'str',
        'product_name': 'str',
        'product_revision': 'str',
        'read_error_count': 'str',
        'read_error_threshold': 'str',
        'write_enabled': 'str',
        'write_error_count': 'str',
        'write_error_threshold': 'str',
        'registered_device': 'AssetDeviceRegistration',
        'storage_flex_util_controller': 'StorageFlexUtilController'
    }

    attribute_map = {
        'block_size': 'BlockSize',
        'capacity': 'Capacity',
        'controller': 'Controller',
        'drives_enabled': 'DrivesEnabled',
        'health': 'Health',
        'manufacturer_date': 'ManufacturerDate',
        'manufacturer_id': 'ManufacturerId',
        'oem_id': 'OemId',
        'partition_count': 'PartitionCount',
        'pd_status': 'PdStatus',
        'physical_drive': 'PhysicalDrive',
        'product_name': 'ProductName',
        'product_revision': 'ProductRevision',
        'read_error_count': 'ReadErrorCount',
        'read_error_threshold': 'ReadErrorThreshold',
        'write_enabled': 'WriteEnabled',
        'write_error_count': 'WriteErrorCount',
        'write_error_threshold': 'WriteErrorThreshold',
        'registered_device': 'RegisteredDevice',
        'storage_flex_util_controller': 'StorageFlexUtilController'
    }

    def __init__(self,
                 block_size=None,
                 capacity=None,
                 controller=None,
                 drives_enabled=None,
                 health=None,
                 manufacturer_date=None,
                 manufacturer_id=None,
                 oem_id=None,
                 partition_count=None,
                 pd_status=None,
                 physical_drive=None,
                 product_name=None,
                 product_revision=None,
                 read_error_count=None,
                 read_error_threshold=None,
                 write_enabled=None,
                 write_error_count=None,
                 write_error_threshold=None,
                 registered_device=None,
                 storage_flex_util_controller=None,
                 local_vars_configuration=None):  # noqa: E501
        """StorageFlexUtilPhysicalDrive - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._block_size = None
        self._capacity = None
        self._controller = None
        self._drives_enabled = None
        self._health = None
        self._manufacturer_date = None
        self._manufacturer_id = None
        self._oem_id = None
        self._partition_count = None
        self._pd_status = None
        self._physical_drive = None
        self._product_name = None
        self._product_revision = None
        self._read_error_count = None
        self._read_error_threshold = None
        self._write_enabled = None
        self._write_error_count = None
        self._write_error_threshold = None
        self._registered_device = None
        self._storage_flex_util_controller = None
        self.discriminator = None

        if block_size is not None:
            self.block_size = block_size
        if capacity is not None:
            self.capacity = capacity
        if controller is not None:
            self.controller = controller
        if drives_enabled is not None:
            self.drives_enabled = drives_enabled
        if health is not None:
            self.health = health
        if manufacturer_date is not None:
            self.manufacturer_date = manufacturer_date
        if manufacturer_id is not None:
            self.manufacturer_id = manufacturer_id
        if oem_id is not None:
            self.oem_id = oem_id
        if partition_count is not None:
            self.partition_count = partition_count
        if pd_status is not None:
            self.pd_status = pd_status
        if physical_drive is not None:
            self.physical_drive = physical_drive
        if product_name is not None:
            self.product_name = product_name
        if product_revision is not None:
            self.product_revision = product_revision
        if read_error_count is not None:
            self.read_error_count = read_error_count
        if read_error_threshold is not None:
            self.read_error_threshold = read_error_threshold
        if write_enabled is not None:
            self.write_enabled = write_enabled
        if write_error_count is not None:
            self.write_error_count = write_error_count
        if write_error_threshold is not None:
            self.write_error_threshold = write_error_threshold
        if registered_device is not None:
            self.registered_device = registered_device
        if storage_flex_util_controller is not None:
            self.storage_flex_util_controller = storage_flex_util_controller

    @property
    def block_size(self):
        """Gets the block_size of this StorageFlexUtilPhysicalDrive.  # noqa: E501


        :return: The block_size of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :rtype: str
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this StorageFlexUtilPhysicalDrive.


        :param block_size: The block_size of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :type: str
        """

        self._block_size = block_size

    @property
    def capacity(self):
        """Gets the capacity of this StorageFlexUtilPhysicalDrive.  # noqa: E501


        :return: The capacity of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :rtype: str
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this StorageFlexUtilPhysicalDrive.


        :param capacity: The capacity of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :type: str
        """

        self._capacity = capacity

    @property
    def controller(self):
        """Gets the controller of this StorageFlexUtilPhysicalDrive.  # noqa: E501


        :return: The controller of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :rtype: str
        """
        return self._controller

    @controller.setter
    def controller(self, controller):
        """Sets the controller of this StorageFlexUtilPhysicalDrive.


        :param controller: The controller of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :type: str
        """

        self._controller = controller

    @property
    def drives_enabled(self):
        """Gets the drives_enabled of this StorageFlexUtilPhysicalDrive.  # noqa: E501


        :return: The drives_enabled of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :rtype: str
        """
        return self._drives_enabled

    @drives_enabled.setter
    def drives_enabled(self, drives_enabled):
        """Sets the drives_enabled of this StorageFlexUtilPhysicalDrive.


        :param drives_enabled: The drives_enabled of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :type: str
        """

        self._drives_enabled = drives_enabled

    @property
    def health(self):
        """Gets the health of this StorageFlexUtilPhysicalDrive.  # noqa: E501


        :return: The health of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this StorageFlexUtilPhysicalDrive.


        :param health: The health of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :type: str
        """

        self._health = health

    @property
    def manufacturer_date(self):
        """Gets the manufacturer_date of this StorageFlexUtilPhysicalDrive.  # noqa: E501


        :return: The manufacturer_date of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_date

    @manufacturer_date.setter
    def manufacturer_date(self, manufacturer_date):
        """Sets the manufacturer_date of this StorageFlexUtilPhysicalDrive.


        :param manufacturer_date: The manufacturer_date of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :type: str
        """

        self._manufacturer_date = manufacturer_date

    @property
    def manufacturer_id(self):
        """Gets the manufacturer_id of this StorageFlexUtilPhysicalDrive.  # noqa: E501


        :return: The manufacturer_id of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_id

    @manufacturer_id.setter
    def manufacturer_id(self, manufacturer_id):
        """Sets the manufacturer_id of this StorageFlexUtilPhysicalDrive.


        :param manufacturer_id: The manufacturer_id of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :type: str
        """

        self._manufacturer_id = manufacturer_id

    @property
    def oem_id(self):
        """Gets the oem_id of this StorageFlexUtilPhysicalDrive.  # noqa: E501


        :return: The oem_id of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :rtype: str
        """
        return self._oem_id

    @oem_id.setter
    def oem_id(self, oem_id):
        """Sets the oem_id of this StorageFlexUtilPhysicalDrive.


        :param oem_id: The oem_id of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :type: str
        """

        self._oem_id = oem_id

    @property
    def partition_count(self):
        """Gets the partition_count of this StorageFlexUtilPhysicalDrive.  # noqa: E501


        :return: The partition_count of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :rtype: str
        """
        return self._partition_count

    @partition_count.setter
    def partition_count(self, partition_count):
        """Sets the partition_count of this StorageFlexUtilPhysicalDrive.


        :param partition_count: The partition_count of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :type: str
        """

        self._partition_count = partition_count

    @property
    def pd_status(self):
        """Gets the pd_status of this StorageFlexUtilPhysicalDrive.  # noqa: E501


        :return: The pd_status of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :rtype: str
        """
        return self._pd_status

    @pd_status.setter
    def pd_status(self, pd_status):
        """Sets the pd_status of this StorageFlexUtilPhysicalDrive.


        :param pd_status: The pd_status of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :type: str
        """

        self._pd_status = pd_status

    @property
    def physical_drive(self):
        """Gets the physical_drive of this StorageFlexUtilPhysicalDrive.  # noqa: E501


        :return: The physical_drive of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :rtype: str
        """
        return self._physical_drive

    @physical_drive.setter
    def physical_drive(self, physical_drive):
        """Sets the physical_drive of this StorageFlexUtilPhysicalDrive.


        :param physical_drive: The physical_drive of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :type: str
        """

        self._physical_drive = physical_drive

    @property
    def product_name(self):
        """Gets the product_name of this StorageFlexUtilPhysicalDrive.  # noqa: E501


        :return: The product_name of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this StorageFlexUtilPhysicalDrive.


        :param product_name: The product_name of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_revision(self):
        """Gets the product_revision of this StorageFlexUtilPhysicalDrive.  # noqa: E501


        :return: The product_revision of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :rtype: str
        """
        return self._product_revision

    @product_revision.setter
    def product_revision(self, product_revision):
        """Sets the product_revision of this StorageFlexUtilPhysicalDrive.


        :param product_revision: The product_revision of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :type: str
        """

        self._product_revision = product_revision

    @property
    def read_error_count(self):
        """Gets the read_error_count of this StorageFlexUtilPhysicalDrive.  # noqa: E501


        :return: The read_error_count of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :rtype: str
        """
        return self._read_error_count

    @read_error_count.setter
    def read_error_count(self, read_error_count):
        """Sets the read_error_count of this StorageFlexUtilPhysicalDrive.


        :param read_error_count: The read_error_count of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :type: str
        """

        self._read_error_count = read_error_count

    @property
    def read_error_threshold(self):
        """Gets the read_error_threshold of this StorageFlexUtilPhysicalDrive.  # noqa: E501


        :return: The read_error_threshold of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :rtype: str
        """
        return self._read_error_threshold

    @read_error_threshold.setter
    def read_error_threshold(self, read_error_threshold):
        """Sets the read_error_threshold of this StorageFlexUtilPhysicalDrive.


        :param read_error_threshold: The read_error_threshold of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :type: str
        """

        self._read_error_threshold = read_error_threshold

    @property
    def write_enabled(self):
        """Gets the write_enabled of this StorageFlexUtilPhysicalDrive.  # noqa: E501


        :return: The write_enabled of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :rtype: str
        """
        return self._write_enabled

    @write_enabled.setter
    def write_enabled(self, write_enabled):
        """Sets the write_enabled of this StorageFlexUtilPhysicalDrive.


        :param write_enabled: The write_enabled of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :type: str
        """

        self._write_enabled = write_enabled

    @property
    def write_error_count(self):
        """Gets the write_error_count of this StorageFlexUtilPhysicalDrive.  # noqa: E501


        :return: The write_error_count of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :rtype: str
        """
        return self._write_error_count

    @write_error_count.setter
    def write_error_count(self, write_error_count):
        """Sets the write_error_count of this StorageFlexUtilPhysicalDrive.


        :param write_error_count: The write_error_count of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :type: str
        """

        self._write_error_count = write_error_count

    @property
    def write_error_threshold(self):
        """Gets the write_error_threshold of this StorageFlexUtilPhysicalDrive.  # noqa: E501


        :return: The write_error_threshold of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :rtype: str
        """
        return self._write_error_threshold

    @write_error_threshold.setter
    def write_error_threshold(self, write_error_threshold):
        """Sets the write_error_threshold of this StorageFlexUtilPhysicalDrive.


        :param write_error_threshold: The write_error_threshold of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :type: str
        """

        self._write_error_threshold = write_error_threshold

    @property
    def registered_device(self):
        """Gets the registered_device of this StorageFlexUtilPhysicalDrive.  # noqa: E501


        :return: The registered_device of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this StorageFlexUtilPhysicalDrive.


        :param registered_device: The registered_device of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    @property
    def storage_flex_util_controller(self):
        """Gets the storage_flex_util_controller of this StorageFlexUtilPhysicalDrive.  # noqa: E501


        :return: The storage_flex_util_controller of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :rtype: StorageFlexUtilController
        """
        return self._storage_flex_util_controller

    @storage_flex_util_controller.setter
    def storage_flex_util_controller(self, storage_flex_util_controller):
        """Sets the storage_flex_util_controller of this StorageFlexUtilPhysicalDrive.


        :param storage_flex_util_controller: The storage_flex_util_controller of this StorageFlexUtilPhysicalDrive.  # noqa: E501
        :type: StorageFlexUtilController
        """

        self._storage_flex_util_controller = storage_flex_util_controller

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageFlexUtilPhysicalDrive):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageFlexUtilPhysicalDrive):
            return True

        return self.to_dict() != other.to_dict()
