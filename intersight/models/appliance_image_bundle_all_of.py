# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ApplianceImageBundleAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ansible_packages': 'list[OnpremImagePackage]',
        'auto_upgrade': 'bool',
        'dc_packages': 'list[OnpremImagePackage]',
        'debug_packages': 'list[OnpremImagePackage]',
        'description': 'str',
        'endpoint_packages': 'list[OnpremImagePackage]',
        'fingerprint': 'str',
        'has_error': 'bool',
        'infra_packages': 'list[OnpremImagePackage]',
        'init_packages': 'list[OnpremImagePackage]',
        'name': 'str',
        'notes': 'str',
        'priority': 'str',
        'release_time': 'datetime',
        'service_packages': 'list[OnpremImagePackage]',
        'status_message': 'str',
        'system_packages': 'list[OnpremImagePackage]',
        'ui_packages': 'list[OnpremImagePackage]',
        'upgrade_end_time': 'datetime',
        'upgrade_grace_period': 'int',
        'upgrade_impact_duration': 'int',
        'upgrade_impact_enum': 'str',
        'upgrade_start_time': 'datetime',
        'version': 'str'
    }

    attribute_map = {
        'ansible_packages': 'AnsiblePackages',
        'auto_upgrade': 'AutoUpgrade',
        'dc_packages': 'DcPackages',
        'debug_packages': 'DebugPackages',
        'description': 'Description',
        'endpoint_packages': 'EndpointPackages',
        'fingerprint': 'Fingerprint',
        'has_error': 'HasError',
        'infra_packages': 'InfraPackages',
        'init_packages': 'InitPackages',
        'name': 'Name',
        'notes': 'Notes',
        'priority': 'Priority',
        'release_time': 'ReleaseTime',
        'service_packages': 'ServicePackages',
        'status_message': 'StatusMessage',
        'system_packages': 'SystemPackages',
        'ui_packages': 'UiPackages',
        'upgrade_end_time': 'UpgradeEndTime',
        'upgrade_grace_period': 'UpgradeGracePeriod',
        'upgrade_impact_duration': 'UpgradeImpactDuration',
        'upgrade_impact_enum': 'UpgradeImpactEnum',
        'upgrade_start_time': 'UpgradeStartTime',
        'version': 'Version'
    }

    def __init__(self,
                 ansible_packages=None,
                 auto_upgrade=None,
                 dc_packages=None,
                 debug_packages=None,
                 description=None,
                 endpoint_packages=None,
                 fingerprint=None,
                 has_error=None,
                 infra_packages=None,
                 init_packages=None,
                 name=None,
                 notes=None,
                 priority='Normal',
                 release_time=None,
                 service_packages=None,
                 status_message=None,
                 system_packages=None,
                 ui_packages=None,
                 upgrade_end_time=None,
                 upgrade_grace_period=None,
                 upgrade_impact_duration=None,
                 upgrade_impact_enum='None',
                 upgrade_start_time=None,
                 version=None,
                 local_vars_configuration=None):  # noqa: E501
        """ApplianceImageBundleAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ansible_packages = None
        self._auto_upgrade = None
        self._dc_packages = None
        self._debug_packages = None
        self._description = None
        self._endpoint_packages = None
        self._fingerprint = None
        self._has_error = None
        self._infra_packages = None
        self._init_packages = None
        self._name = None
        self._notes = None
        self._priority = None
        self._release_time = None
        self._service_packages = None
        self._status_message = None
        self._system_packages = None
        self._ui_packages = None
        self._upgrade_end_time = None
        self._upgrade_grace_period = None
        self._upgrade_impact_duration = None
        self._upgrade_impact_enum = None
        self._upgrade_start_time = None
        self._version = None
        self.discriminator = None

        if ansible_packages is not None:
            self.ansible_packages = ansible_packages
        if auto_upgrade is not None:
            self.auto_upgrade = auto_upgrade
        if dc_packages is not None:
            self.dc_packages = dc_packages
        if debug_packages is not None:
            self.debug_packages = debug_packages
        if description is not None:
            self.description = description
        if endpoint_packages is not None:
            self.endpoint_packages = endpoint_packages
        if fingerprint is not None:
            self.fingerprint = fingerprint
        if has_error is not None:
            self.has_error = has_error
        if infra_packages is not None:
            self.infra_packages = infra_packages
        if init_packages is not None:
            self.init_packages = init_packages
        if name is not None:
            self.name = name
        if notes is not None:
            self.notes = notes
        if priority is not None:
            self.priority = priority
        if release_time is not None:
            self.release_time = release_time
        if service_packages is not None:
            self.service_packages = service_packages
        if status_message is not None:
            self.status_message = status_message
        if system_packages is not None:
            self.system_packages = system_packages
        if ui_packages is not None:
            self.ui_packages = ui_packages
        if upgrade_end_time is not None:
            self.upgrade_end_time = upgrade_end_time
        if upgrade_grace_period is not None:
            self.upgrade_grace_period = upgrade_grace_period
        if upgrade_impact_duration is not None:
            self.upgrade_impact_duration = upgrade_impact_duration
        if upgrade_impact_enum is not None:
            self.upgrade_impact_enum = upgrade_impact_enum
        if upgrade_start_time is not None:
            self.upgrade_start_time = upgrade_start_time
        if version is not None:
            self.version = version

    @property
    def ansible_packages(self):
        """Gets the ansible_packages of this ApplianceImageBundleAllOf.  # noqa: E501


        :return: The ansible_packages of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: list[OnpremImagePackage]
        """
        return self._ansible_packages

    @ansible_packages.setter
    def ansible_packages(self, ansible_packages):
        """Sets the ansible_packages of this ApplianceImageBundleAllOf.


        :param ansible_packages: The ansible_packages of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: list[OnpremImagePackage]
        """

        self._ansible_packages = ansible_packages

    @property
    def auto_upgrade(self):
        """Gets the auto_upgrade of this ApplianceImageBundleAllOf.  # noqa: E501

        Indicates that the software upgrade was automatically initiated by the Intersight Appliance.    # noqa: E501

        :return: The auto_upgrade of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._auto_upgrade

    @auto_upgrade.setter
    def auto_upgrade(self, auto_upgrade):
        """Sets the auto_upgrade of this ApplianceImageBundleAllOf.

        Indicates that the software upgrade was automatically initiated by the Intersight Appliance.    # noqa: E501

        :param auto_upgrade: The auto_upgrade of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: bool
        """

        self._auto_upgrade = auto_upgrade

    @property
    def dc_packages(self):
        """Gets the dc_packages of this ApplianceImageBundleAllOf.  # noqa: E501


        :return: The dc_packages of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: list[OnpremImagePackage]
        """
        return self._dc_packages

    @dc_packages.setter
    def dc_packages(self, dc_packages):
        """Sets the dc_packages of this ApplianceImageBundleAllOf.


        :param dc_packages: The dc_packages of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: list[OnpremImagePackage]
        """

        self._dc_packages = dc_packages

    @property
    def debug_packages(self):
        """Gets the debug_packages of this ApplianceImageBundleAllOf.  # noqa: E501


        :return: The debug_packages of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: list[OnpremImagePackage]
        """
        return self._debug_packages

    @debug_packages.setter
    def debug_packages(self, debug_packages):
        """Sets the debug_packages of this ApplianceImageBundleAllOf.


        :param debug_packages: The debug_packages of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: list[OnpremImagePackage]
        """

        self._debug_packages = debug_packages

    @property
    def description(self):
        """Gets the description of this ApplianceImageBundleAllOf.  # noqa: E501

        Short description of the software upgrade bundle.    # noqa: E501

        :return: The description of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplianceImageBundleAllOf.

        Short description of the software upgrade bundle.    # noqa: E501

        :param description: The description of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def endpoint_packages(self):
        """Gets the endpoint_packages of this ApplianceImageBundleAllOf.  # noqa: E501


        :return: The endpoint_packages of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: list[OnpremImagePackage]
        """
        return self._endpoint_packages

    @endpoint_packages.setter
    def endpoint_packages(self, endpoint_packages):
        """Sets the endpoint_packages of this ApplianceImageBundleAllOf.


        :param endpoint_packages: The endpoint_packages of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: list[OnpremImagePackage]
        """

        self._endpoint_packages = endpoint_packages

    @property
    def fingerprint(self):
        """Gets the fingerprint of this ApplianceImageBundleAllOf.  # noqa: E501

        Fingerprint of the software manifest from which this bundle is created. Fingerprint is calculated using the SHA256 algorithm.    # noqa: E501

        :return: The fingerprint of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this ApplianceImageBundleAllOf.

        Fingerprint of the software manifest from which this bundle is created. Fingerprint is calculated using the SHA256 algorithm.    # noqa: E501

        :param fingerprint: The fingerprint of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: str
        """

        self._fingerprint = fingerprint

    @property
    def has_error(self):
        """Gets the has_error of this ApplianceImageBundleAllOf.  # noqa: E501

        Indicates that the ImageBundle has errors. The upgrade service sets this field when it encounters errors during the manifest processing.    # noqa: E501

        :return: The has_error of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._has_error

    @has_error.setter
    def has_error(self, has_error):
        """Sets the has_error of this ApplianceImageBundleAllOf.

        Indicates that the ImageBundle has errors. The upgrade service sets this field when it encounters errors during the manifest processing.    # noqa: E501

        :param has_error: The has_error of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: bool
        """

        self._has_error = has_error

    @property
    def infra_packages(self):
        """Gets the infra_packages of this ApplianceImageBundleAllOf.  # noqa: E501


        :return: The infra_packages of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: list[OnpremImagePackage]
        """
        return self._infra_packages

    @infra_packages.setter
    def infra_packages(self, infra_packages):
        """Sets the infra_packages of this ApplianceImageBundleAllOf.


        :param infra_packages: The infra_packages of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: list[OnpremImagePackage]
        """

        self._infra_packages = infra_packages

    @property
    def init_packages(self):
        """Gets the init_packages of this ApplianceImageBundleAllOf.  # noqa: E501


        :return: The init_packages of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: list[OnpremImagePackage]
        """
        return self._init_packages

    @init_packages.setter
    def init_packages(self, init_packages):
        """Sets the init_packages of this ApplianceImageBundleAllOf.


        :param init_packages: The init_packages of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: list[OnpremImagePackage]
        """

        self._init_packages = init_packages

    @property
    def name(self):
        """Gets the name of this ApplianceImageBundleAllOf.  # noqa: E501

        Name of the software upgrade bundle.    # noqa: E501

        :return: The name of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplianceImageBundleAllOf.

        Name of the software upgrade bundle.    # noqa: E501

        :param name: The name of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this ApplianceImageBundleAllOf.  # noqa: E501

        Detailed description of the software upgrade bundle.    # noqa: E501

        :return: The notes of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ApplianceImageBundleAllOf.

        Detailed description of the software upgrade bundle.    # noqa: E501

        :param notes: The notes of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def priority(self):
        """Gets the priority of this ApplianceImageBundleAllOf.  # noqa: E501

        Software upgrade manifest's upgrade priority. The upgrade service supports two priorities, Normal and Critical. Normal priority is used for regular software upgrades, and the upgrade service uses the Upgrade Policy to compute upgrade start time. Critical priority is used for the critical software security patches, and the upgrade service ignores the Upgrade Policy when it computes the upgrade start time.    # noqa: E501

        :return: The priority of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ApplianceImageBundleAllOf.

        Software upgrade manifest's upgrade priority. The upgrade service supports two priorities, Normal and Critical. Normal priority is used for regular software upgrades, and the upgrade service uses the Upgrade Policy to compute upgrade start time. Critical priority is used for the critical software security patches, and the upgrade service ignores the Upgrade Policy when it computes the upgrade start time.    # noqa: E501

        :param priority: The priority of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["Normal", "Critical"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and priority not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"  # noqa: E501
                .format(priority, allowed_values))

        self._priority = priority

    @property
    def release_time(self):
        """Gets the release_time of this ApplianceImageBundleAllOf.  # noqa: E501

        Software upgrade manifest's release date and time.    # noqa: E501

        :return: The release_time of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._release_time

    @release_time.setter
    def release_time(self, release_time):
        """Sets the release_time of this ApplianceImageBundleAllOf.

        Software upgrade manifest's release date and time.    # noqa: E501

        :param release_time: The release_time of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: datetime
        """

        self._release_time = release_time

    @property
    def service_packages(self):
        """Gets the service_packages of this ApplianceImageBundleAllOf.  # noqa: E501


        :return: The service_packages of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: list[OnpremImagePackage]
        """
        return self._service_packages

    @service_packages.setter
    def service_packages(self, service_packages):
        """Sets the service_packages of this ApplianceImageBundleAllOf.


        :param service_packages: The service_packages of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: list[OnpremImagePackage]
        """

        self._service_packages = service_packages

    @property
    def status_message(self):
        """Gets the status_message of this ApplianceImageBundleAllOf.  # noqa: E501

        Status message set during the manifest processing.    # noqa: E501

        :return: The status_message of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this ApplianceImageBundleAllOf.

        Status message set during the manifest processing.    # noqa: E501

        :param status_message: The status_message of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: str
        """

        self._status_message = status_message

    @property
    def system_packages(self):
        """Gets the system_packages of this ApplianceImageBundleAllOf.  # noqa: E501


        :return: The system_packages of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: list[OnpremImagePackage]
        """
        return self._system_packages

    @system_packages.setter
    def system_packages(self, system_packages):
        """Sets the system_packages of this ApplianceImageBundleAllOf.


        :param system_packages: The system_packages of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: list[OnpremImagePackage]
        """

        self._system_packages = system_packages

    @property
    def ui_packages(self):
        """Gets the ui_packages of this ApplianceImageBundleAllOf.  # noqa: E501


        :return: The ui_packages of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: list[OnpremImagePackage]
        """
        return self._ui_packages

    @ui_packages.setter
    def ui_packages(self, ui_packages):
        """Sets the ui_packages of this ApplianceImageBundleAllOf.


        :param ui_packages: The ui_packages of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: list[OnpremImagePackage]
        """

        self._ui_packages = ui_packages

    @property
    def upgrade_end_time(self):
        """Gets the upgrade_end_time of this ApplianceImageBundleAllOf.  # noqa: E501

        End date of the software upgrade process.    # noqa: E501

        :return: The upgrade_end_time of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._upgrade_end_time

    @upgrade_end_time.setter
    def upgrade_end_time(self, upgrade_end_time):
        """Sets the upgrade_end_time of this ApplianceImageBundleAllOf.

        End date of the software upgrade process.    # noqa: E501

        :param upgrade_end_time: The upgrade_end_time of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: datetime
        """

        self._upgrade_end_time = upgrade_end_time

    @property
    def upgrade_grace_period(self):
        """Gets the upgrade_grace_period of this ApplianceImageBundleAllOf.  # noqa: E501

        Grace period in seconds before the automatic upgrade is initiated. The upgrade service uses the grace period to compute the upgrade start time when it receives an upgrade notfication from the Intersight. If there is an Upgrade Policy configured for the Intersight Appliance, then the upgrade service uses the policy to compute the upgrade start time. However, the upgrade start time cannot not exceed the limit enforced by the grace period.    # noqa: E501

        :return: The upgrade_grace_period of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: int
        """
        return self._upgrade_grace_period

    @upgrade_grace_period.setter
    def upgrade_grace_period(self, upgrade_grace_period):
        """Sets the upgrade_grace_period of this ApplianceImageBundleAllOf.

        Grace period in seconds before the automatic upgrade is initiated. The upgrade service uses the grace period to compute the upgrade start time when it receives an upgrade notfication from the Intersight. If there is an Upgrade Policy configured for the Intersight Appliance, then the upgrade service uses the policy to compute the upgrade start time. However, the upgrade start time cannot not exceed the limit enforced by the grace period.    # noqa: E501

        :param upgrade_grace_period: The upgrade_grace_period of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: int
        """

        self._upgrade_grace_period = upgrade_grace_period

    @property
    def upgrade_impact_duration(self):
        """Gets the upgrade_impact_duration of this ApplianceImageBundleAllOf.  # noqa: E501

        Duration (in minutes) for which services will be disrupted.    # noqa: E501

        :return: The upgrade_impact_duration of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: int
        """
        return self._upgrade_impact_duration

    @upgrade_impact_duration.setter
    def upgrade_impact_duration(self, upgrade_impact_duration):
        """Sets the upgrade_impact_duration of this ApplianceImageBundleAllOf.

        Duration (in minutes) for which services will be disrupted.    # noqa: E501

        :param upgrade_impact_duration: The upgrade_impact_duration of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: int
        """

        self._upgrade_impact_duration = upgrade_impact_duration

    @property
    def upgrade_impact_enum(self):
        """Gets the upgrade_impact_enum of this ApplianceImageBundleAllOf.  # noqa: E501

        UpgradeImpactEnum is used to indicate the kind of impact the upgrade has on currently running services on the appliance.    # noqa: E501

        :return: The upgrade_impact_enum of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: str
        """
        return self._upgrade_impact_enum

    @upgrade_impact_enum.setter
    def upgrade_impact_enum(self, upgrade_impact_enum):
        """Sets the upgrade_impact_enum of this ApplianceImageBundleAllOf.

        UpgradeImpactEnum is used to indicate the kind of impact the upgrade has on currently running services on the appliance.    # noqa: E501

        :param upgrade_impact_enum: The upgrade_impact_enum of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Disruptive",
                          "Disruptive-reboot"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and upgrade_impact_enum not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `upgrade_impact_enum` ({0}), must be one of {1}"  # noqa: E501
                .format(upgrade_impact_enum, allowed_values))

        self._upgrade_impact_enum = upgrade_impact_enum

    @property
    def upgrade_start_time(self):
        """Gets the upgrade_start_time of this ApplianceImageBundleAllOf.  # noqa: E501

        Start date of the software upgrade process.    # noqa: E501

        :return: The upgrade_start_time of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._upgrade_start_time

    @upgrade_start_time.setter
    def upgrade_start_time(self, upgrade_start_time):
        """Sets the upgrade_start_time of this ApplianceImageBundleAllOf.

        Start date of the software upgrade process.    # noqa: E501

        :param upgrade_start_time: The upgrade_start_time of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: datetime
        """

        self._upgrade_start_time = upgrade_start_time

    @property
    def version(self):
        """Gets the version of this ApplianceImageBundleAllOf.  # noqa: E501

        Software upgrade manifest's version.     # noqa: E501

        :return: The version of this ApplianceImageBundleAllOf.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ApplianceImageBundleAllOf.

        Software upgrade manifest's version.     # noqa: E501

        :param version: The version of this ApplianceImageBundleAllOf.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplianceImageBundleAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplianceImageBundleAllOf):
            return True

        return self.to_dict() != other.to_dict()
