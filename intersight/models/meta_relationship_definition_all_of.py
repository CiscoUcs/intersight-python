# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class MetaRelationshipDefinitionAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_access': 'str',
        'collection': 'bool',
        'name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'api_access': 'ApiAccess',
        'collection': 'Collection',
        'name': 'Name',
        'type': 'Type'
    }

    def __init__(self,
                 api_access='NoAccess',
                 collection=None,
                 name=None,
                 type=None,
                 local_vars_configuration=None):  # noqa: E501
        """MetaRelationshipDefinitionAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_access = None
        self._collection = None
        self._name = None
        self._type = None
        self.discriminator = None

        if api_access is not None:
            self.api_access = api_access
        if collection is not None:
            self.collection = collection
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type

    @property
    def api_access(self):
        """Gets the api_access of this MetaRelationshipDefinitionAllOf.  # noqa: E501

        API access definition for this relationship.    # noqa: E501

        :return: The api_access of this MetaRelationshipDefinitionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._api_access

    @api_access.setter
    def api_access(self, api_access):
        """Sets the api_access of this MetaRelationshipDefinitionAllOf.

        API access definition for this relationship.    # noqa: E501

        :param api_access: The api_access of this MetaRelationshipDefinitionAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "NoAccess", "ReadOnly", "CreateOnly", "ReadWrite", "WriteOnly",
            "ReadOnCreate"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and api_access not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `api_access` ({0}), must be one of {1}"  # noqa: E501
                .format(api_access, allowed_values))

        self._api_access = api_access

    @property
    def collection(self):
        """Gets the collection of this MetaRelationshipDefinitionAllOf.  # noqa: E501

        Specifies whether the relationship is a collection.    # noqa: E501

        :return: The collection of this MetaRelationshipDefinitionAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this MetaRelationshipDefinitionAllOf.

        Specifies whether the relationship is a collection.    # noqa: E501

        :param collection: The collection of this MetaRelationshipDefinitionAllOf.  # noqa: E501
        :type: bool
        """

        self._collection = collection

    @property
    def name(self):
        """Gets the name of this MetaRelationshipDefinitionAllOf.  # noqa: E501

        The name of the relationship.    # noqa: E501

        :return: The name of this MetaRelationshipDefinitionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetaRelationshipDefinitionAllOf.

        The name of the relationship.    # noqa: E501

        :param name: The name of this MetaRelationshipDefinitionAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this MetaRelationshipDefinitionAllOf.  # noqa: E501

        Fully qualified type of the foreign managed object.     # noqa: E501

        :return: The type of this MetaRelationshipDefinitionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MetaRelationshipDefinitionAllOf.

        Fully qualified type of the foreign managed object.     # noqa: E501

        :param type: The type of this MetaRelationshipDefinitionAllOf.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetaRelationshipDefinitionAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MetaRelationshipDefinitionAllOf):
            return True

        return self.to_dict() != other.to_dict()
