# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StorageInitiator(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {'iqn': 'str', 'name': 'str', 'type': 'str', 'wwn': 'str'}

    attribute_map = {
        'iqn': 'Iqn',
        'name': 'Name',
        'type': 'Type',
        'wwn': 'Wwn'
    }

    def __init__(self,
                 iqn=None,
                 name=None,
                 type='FC',
                 wwn=None,
                 local_vars_configuration=None):  # noqa: E501
        """StorageInitiator - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._iqn = None
        self._name = None
        self._type = None
        self._wwn = None
        self.discriminator = None

        if iqn is not None:
            self.iqn = iqn
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if wwn is not None:
            self.wwn = wwn

    @property
    def iqn(self):
        """Gets the iqn of this StorageInitiator.  # noqa: E501

        IQN (iSCSI qualified name). Can be up to 255 characters long and has the following format, iqn.yyyy-mm.naming-authority:unique name.    # noqa: E501

        :return: The iqn of this StorageInitiator.  # noqa: E501
        :rtype: str
        """
        return self._iqn

    @iqn.setter
    def iqn(self, iqn):
        """Sets the iqn of this StorageInitiator.

        IQN (iSCSI qualified name). Can be up to 255 characters long and has the following format, iqn.yyyy-mm.naming-authority:unique name.    # noqa: E501

        :param iqn: The iqn of this StorageInitiator.  # noqa: E501
        :type: str
        """

        self._iqn = iqn

    @property
    def name(self):
        """Gets the name of this StorageInitiator.  # noqa: E501

        Name of the initiator represented in storage array.    # noqa: E501

        :return: The name of this StorageInitiator.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageInitiator.

        Name of the initiator represented in storage array.    # noqa: E501

        :param name: The name of this StorageInitiator.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this StorageInitiator.  # noqa: E501

        Initiator type, it can be FC or iSCSI.    # noqa: E501

        :return: The type of this StorageInitiator.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StorageInitiator.

        Initiator type, it can be FC or iSCSI.    # noqa: E501

        :param type: The type of this StorageInitiator.  # noqa: E501
        :type: str
        """
        allowed_values = ["FC", "iSCSI"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values))

        self._type = type

    @property
    def wwn(self):
        """Gets the wwn of this StorageInitiator.  # noqa: E501

        World wide name, 128 bit address represented in hexa decimal notation. (51:4f:0c:50:14:1f:af:01:51:4f:0c:51:14:1f:af:01).     # noqa: E501

        :return: The wwn of this StorageInitiator.  # noqa: E501
        :rtype: str
        """
        return self._wwn

    @wwn.setter
    def wwn(self, wwn):
        """Sets the wwn of this StorageInitiator.

        World wide name, 128 bit address represented in hexa decimal notation. (51:4f:0c:50:14:1f:af:01:51:4f:0c:51:14:1f:af:01).     # noqa: E501

        :param wwn: The wwn of this StorageInitiator.  # noqa: E501
        :type: str
        """

        self._wwn = wwn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageInitiator):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageInitiator):
            return True

        return self.to_dict() != other.to_dict()
