# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-961
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StorageInitiator(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'iqn': 'str',
        'name': 'str',
        'type': 'str',
        'wwn': 'str'
    }

    attribute_map = {
        'iqn': 'Iqn',
        'name': 'Name',
        'type': 'Type',
        'wwn': 'Wwn'
    }

    def __init__(self, iqn=None, name=None, type='FC', wwn=None):
        """
        StorageInitiator - a model defined in Swagger
        """

        self._iqn = None
        self._name = None
        self._type = None
        self._wwn = None

        if iqn is not None:
          self.iqn = iqn
        if name is not None:
          self.name = name
        if type is not None:
          self.type = type
        if wwn is not None:
          self.wwn = wwn

    @property
    def iqn(self):
        """
        Gets the iqn of this StorageInitiator.
        IQN (iSCSI qualified name). Can be up to 255 characters long and has the following format, iqn.yyyy-mm.naming-authority:unique name.  

        :return: The iqn of this StorageInitiator.
        :rtype: str
        """
        return self._iqn

    @iqn.setter
    def iqn(self, iqn):
        """
        Sets the iqn of this StorageInitiator.
        IQN (iSCSI qualified name). Can be up to 255 characters long and has the following format, iqn.yyyy-mm.naming-authority:unique name.  

        :param iqn: The iqn of this StorageInitiator.
        :type: str
        """

        self._iqn = iqn

    @property
    def name(self):
        """
        Gets the name of this StorageInitiator.
        Name of the initiator represented in storage array.  

        :return: The name of this StorageInitiator.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this StorageInitiator.
        Name of the initiator represented in storage array.  

        :param name: The name of this StorageInitiator.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this StorageInitiator.
        Initiator type, it can be FC or iSCSI.  

        :return: The type of this StorageInitiator.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this StorageInitiator.
        Initiator type, it can be FC or iSCSI.  

        :param type: The type of this StorageInitiator.
        :type: str
        """
        allowed_values = ["FC", "iSCSI"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def wwn(self):
        """
        Gets the wwn of this StorageInitiator.
        World wide name, 128 bit address represented in hexa decimal notation. (51:4f:0c:50:14:1f:af:01:51:4f:0c:51:14:1f:af:01).   

        :return: The wwn of this StorageInitiator.
        :rtype: str
        """
        return self._wwn

    @wwn.setter
    def wwn(self, wwn):
        """
        Sets the wwn of this StorageInitiator.
        World wide name, 128 bit address represented in hexa decimal notation. (51:4f:0c:50:14:1f:af:01:51:4f:0c:51:14:1f:af:01).   

        :param wwn: The wwn of this StorageInitiator.
        :type: str
        """

        self._wwn = wwn

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StorageInitiator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
