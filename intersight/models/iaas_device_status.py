# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class IaasDeviceStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_name': 'str',
        'account_type': 'str',
        'claim_status': 'str',
        'connection_status': 'str',
        'device_model': 'str',
        'device_vendor': 'str',
        'device_version': 'str',
        'ip_address': 'str',
        'pod': 'str',
        'pod_type': 'str',
        'guid': 'IaasUcsdInfo'
    }

    attribute_map = {
        'account_name': 'AccountName',
        'account_type': 'AccountType',
        'claim_status': 'ClaimStatus',
        'connection_status': 'ConnectionStatus',
        'device_model': 'DeviceModel',
        'device_vendor': 'DeviceVendor',
        'device_version': 'DeviceVersion',
        'ip_address': 'IpAddress',
        'pod': 'Pod',
        'pod_type': 'PodType',
        'guid': 'Guid'
    }

    def __init__(self,
                 account_name=None,
                 account_type=None,
                 claim_status='Unknown',
                 connection_status=None,
                 device_model=None,
                 device_vendor=None,
                 device_version=None,
                 ip_address=None,
                 pod=None,
                 pod_type=None,
                 guid=None,
                 local_vars_configuration=None):  # noqa: E501
        """IaasDeviceStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_name = None
        self._account_type = None
        self._claim_status = None
        self._connection_status = None
        self._device_model = None
        self._device_vendor = None
        self._device_version = None
        self._ip_address = None
        self._pod = None
        self._pod_type = None
        self._guid = None
        self.discriminator = None

        if account_name is not None:
            self.account_name = account_name
        if account_type is not None:
            self.account_type = account_type
        if claim_status is not None:
            self.claim_status = claim_status
        if connection_status is not None:
            self.connection_status = connection_status
        if device_model is not None:
            self.device_model = device_model
        if device_vendor is not None:
            self.device_vendor = device_vendor
        if device_version is not None:
            self.device_version = device_version
        if ip_address is not None:
            self.ip_address = ip_address
        if pod is not None:
            self.pod = pod
        if pod_type is not None:
            self.pod_type = pod_type
        if guid is not None:
            self.guid = guid

    @property
    def account_name(self):
        """Gets the account_name of this IaasDeviceStatus.  # noqa: E501

        The UCSD infra account name. Account Name is created when UCSD admin adds any new infra account (Physical/Virtual/Compute/Network) to be managed by UCSD.    # noqa: E501

        :return: The account_name of this IaasDeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this IaasDeviceStatus.

        The UCSD infra account name. Account Name is created when UCSD admin adds any new infra account (Physical/Virtual/Compute/Network) to be managed by UCSD.    # noqa: E501

        :param account_name: The account_name of this IaasDeviceStatus.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def account_type(self):
        """Gets the account_type of this IaasDeviceStatus.  # noqa: E501

        The UCSD Infra Account type.    # noqa: E501

        :return: The account_type of this IaasDeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this IaasDeviceStatus.

        The UCSD Infra Account type.    # noqa: E501

        :param account_type: The account_type of this IaasDeviceStatus.  # noqa: E501
        :type: str
        """

        self._account_type = account_type

    @property
    def claim_status(self):
        """Gets the claim_status of this IaasDeviceStatus.  # noqa: E501

        Describes if the device is claimed in Intersight or not.    # noqa: E501

        :return: The claim_status of this IaasDeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._claim_status

    @claim_status.setter
    def claim_status(self, claim_status):
        """Sets the claim_status of this IaasDeviceStatus.

        Describes if the device is claimed in Intersight or not.    # noqa: E501

        :param claim_status: The claim_status of this IaasDeviceStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "true", "false",
                          "Not Applicable"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and claim_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `claim_status` ({0}), must be one of {1}"  # noqa: E501
                .format(claim_status, allowed_values))

        self._claim_status = claim_status

    @property
    def connection_status(self):
        """Gets the connection_status of this IaasDeviceStatus.  # noqa: E501

        Describes about the connection status between the UCSD and the actual end device.    # noqa: E501

        :return: The connection_status of this IaasDeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this IaasDeviceStatus.

        Describes about the connection status between the UCSD and the actual end device.    # noqa: E501

        :param connection_status: The connection_status of this IaasDeviceStatus.  # noqa: E501
        :type: str
        """

        self._connection_status = connection_status

    @property
    def device_model(self):
        """Gets the device_model of this IaasDeviceStatus.  # noqa: E501

        Describes about the device model.    # noqa: E501

        :return: The device_model of this IaasDeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._device_model

    @device_model.setter
    def device_model(self, device_model):
        """Sets the device_model of this IaasDeviceStatus.

        Describes about the device model.    # noqa: E501

        :param device_model: The device_model of this IaasDeviceStatus.  # noqa: E501
        :type: str
        """

        self._device_model = device_model

    @property
    def device_vendor(self):
        """Gets the device_vendor of this IaasDeviceStatus.  # noqa: E501

        Describes about the device vendor/manufacturer of the device.    # noqa: E501

        :return: The device_vendor of this IaasDeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._device_vendor

    @device_vendor.setter
    def device_vendor(self, device_vendor):
        """Sets the device_vendor of this IaasDeviceStatus.

        Describes about the device vendor/manufacturer of the device.    # noqa: E501

        :param device_vendor: The device_vendor of this IaasDeviceStatus.  # noqa: E501
        :type: str
        """

        self._device_vendor = device_vendor

    @property
    def device_version(self):
        """Gets the device_version of this IaasDeviceStatus.  # noqa: E501

        Describes about the current firmware version running on the device.    # noqa: E501

        :return: The device_version of this IaasDeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._device_version

    @device_version.setter
    def device_version(self, device_version):
        """Sets the device_version of this IaasDeviceStatus.

        Describes about the current firmware version running on the device.    # noqa: E501

        :param device_version: The device_version of this IaasDeviceStatus.  # noqa: E501
        :type: str
        """

        self._device_version = device_version

    @property
    def ip_address(self):
        """Gets the ip_address of this IaasDeviceStatus.  # noqa: E501

        The IPAddress of the device.    # noqa: E501

        :return: The ip_address of this IaasDeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this IaasDeviceStatus.

        The IPAddress of the device.    # noqa: E501

        :param ip_address: The ip_address of this IaasDeviceStatus.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def pod(self):
        """Gets the pod of this IaasDeviceStatus.  # noqa: E501

        Describes about the pod to which this device belongs to in UCSD.    # noqa: E501

        :return: The pod of this IaasDeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._pod

    @pod.setter
    def pod(self, pod):
        """Sets the pod of this IaasDeviceStatus.

        Describes about the pod to which this device belongs to in UCSD.    # noqa: E501

        :param pod: The pod of this IaasDeviceStatus.  # noqa: E501
        :type: str
        """

        self._pod = pod

    @property
    def pod_type(self):
        """Gets the pod_type of this IaasDeviceStatus.  # noqa: E501

        Describes about the podType of Pod to which this device belongs to in UCSD.     # noqa: E501

        :return: The pod_type of this IaasDeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._pod_type

    @pod_type.setter
    def pod_type(self, pod_type):
        """Sets the pod_type of this IaasDeviceStatus.

        Describes about the podType of Pod to which this device belongs to in UCSD.     # noqa: E501

        :param pod_type: The pod_type of this IaasDeviceStatus.  # noqa: E501
        :type: str
        """

        self._pod_type = pod_type

    @property
    def guid(self):
        """Gets the guid of this IaasDeviceStatus.  # noqa: E501


        :return: The guid of this IaasDeviceStatus.  # noqa: E501
        :rtype: IaasUcsdInfo
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this IaasDeviceStatus.


        :param guid: The guid of this IaasDeviceStatus.  # noqa: E501
        :type: IaasUcsdInfo
        """

        self._guid = guid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IaasDeviceStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IaasDeviceStatus):
            return True

        return self.to_dict() != other.to_dict()
