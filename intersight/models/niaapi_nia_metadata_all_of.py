# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class NiaapiNiaMetadataAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content': 'list[NiaapiDetail]',
        'date': 'datetime',
        'metadata_chksum': 'str',
        'metadata_filename': 'str',
        'version': 'int'
    }

    attribute_map = {
        'content': 'Content',
        'date': 'Date',
        'metadata_chksum': 'MetadataChksum',
        'metadata_filename': 'MetadataFilename',
        'version': 'Version'
    }

    def __init__(self,
                 content=None,
                 date=None,
                 metadata_chksum=None,
                 metadata_filename=None,
                 version=None,
                 local_vars_configuration=None):  # noqa: E501
        """NiaapiNiaMetadataAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._content = None
        self._date = None
        self._metadata_chksum = None
        self._metadata_filename = None
        self._version = None
        self.discriminator = None

        if content is not None:
            self.content = content
        if date is not None:
            self.date = date
        if metadata_chksum is not None:
            self.metadata_chksum = metadata_chksum
        if metadata_filename is not None:
            self.metadata_filename = metadata_filename
        if version is not None:
            self.version = version

    @property
    def content(self):
        """Gets the content of this NiaapiNiaMetadataAllOf.  # noqa: E501


        :return: The content of this NiaapiNiaMetadataAllOf.  # noqa: E501
        :rtype: list[NiaapiDetail]
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this NiaapiNiaMetadataAllOf.


        :param content: The content of this NiaapiNiaMetadataAllOf.  # noqa: E501
        :type: list[NiaapiDetail]
        """

        self._content = content

    @property
    def date(self):
        """Gets the date of this NiaapiNiaMetadataAllOf.  # noqa: E501

        The date when this package is generated.    # noqa: E501

        :return: The date of this NiaapiNiaMetadataAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this NiaapiNiaMetadataAllOf.

        The date when this package is generated.    # noqa: E501

        :param date: The date of this NiaapiNiaMetadataAllOf.  # noqa: E501
        :type: datetime
        """

        self._date = date

    @property
    def metadata_chksum(self):
        """Gets the metadata_chksum of this NiaapiNiaMetadataAllOf.  # noqa: E501

        Chksum used to check the integrity of the Metadata file downloaded.    # noqa: E501

        :return: The metadata_chksum of this NiaapiNiaMetadataAllOf.  # noqa: E501
        :rtype: str
        """
        return self._metadata_chksum

    @metadata_chksum.setter
    def metadata_chksum(self, metadata_chksum):
        """Sets the metadata_chksum of this NiaapiNiaMetadataAllOf.

        Chksum used to check the integrity of the Metadata file downloaded.    # noqa: E501

        :param metadata_chksum: The metadata_chksum of this NiaapiNiaMetadataAllOf.  # noqa: E501
        :type: str
        """

        self._metadata_chksum = metadata_chksum

    @property
    def metadata_filename(self):
        """Gets the metadata_filename of this NiaapiNiaMetadataAllOf.  # noqa: E501

        The Filename of this Metadata package.    # noqa: E501

        :return: The metadata_filename of this NiaapiNiaMetadataAllOf.  # noqa: E501
        :rtype: str
        """
        return self._metadata_filename

    @metadata_filename.setter
    def metadata_filename(self, metadata_filename):
        """Sets the metadata_filename of this NiaapiNiaMetadataAllOf.

        The Filename of this Metadata package.    # noqa: E501

        :param metadata_filename: The metadata_filename of this NiaapiNiaMetadataAllOf.  # noqa: E501
        :type: str
        """

        self._metadata_filename = metadata_filename

    @property
    def version(self):
        """Gets the version of this NiaapiNiaMetadataAllOf.  # noqa: E501

        The version number of the Metadata package.     # noqa: E501

        :return: The version of this NiaapiNiaMetadataAllOf.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this NiaapiNiaMetadataAllOf.

        The version number of the Metadata package.     # noqa: E501

        :param version: The version of this NiaapiNiaMetadataAllOf.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NiaapiNiaMetadataAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NiaapiNiaMetadataAllOf):
            return True

        return self.to_dict() != other.to_dict()
