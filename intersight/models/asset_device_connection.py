# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1295
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AssetDeviceConnection(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'api_version': 'int',
        'app_partition_number': 'int',
        'connection_id': 'str',
        'connection_reason': 'str',
        'connection_status': 'str',
        'connection_status_last_change_time': 'datetime',
        'connector_version': 'str',
        'device_external_ip_address': 'str',
        'proxy_app': 'str'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'api_version': 'ApiVersion',
        'app_partition_number': 'AppPartitionNumber',
        'connection_id': 'ConnectionId',
        'connection_reason': 'ConnectionReason',
        'connection_status': 'ConnectionStatus',
        'connection_status_last_change_time': 'ConnectionStatusLastChangeTime',
        'connector_version': 'ConnectorVersion',
        'device_external_ip_address': 'DeviceExternalIpAddress',
        'proxy_app': 'ProxyApp'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, api_version=None, app_partition_number=None, connection_id=None, connection_reason=None, connection_status='null', connection_status_last_change_time=None, connector_version=None, device_external_ip_address=None, proxy_app=None):
        """
        AssetDeviceConnection - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._api_version = None
        self._app_partition_number = None
        self._connection_id = None
        self._connection_reason = None
        self._connection_status = None
        self._connection_status_last_change_time = None
        self._connector_version = None
        self._device_external_ip_address = None
        self._proxy_app = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if api_version is not None:
          self.api_version = api_version
        if app_partition_number is not None:
          self.app_partition_number = app_partition_number
        if connection_id is not None:
          self.connection_id = connection_id
        if connection_reason is not None:
          self.connection_reason = connection_reason
        if connection_status is not None:
          self.connection_status = connection_status
        if connection_status_last_change_time is not None:
          self.connection_status_last_change_time = connection_status_last_change_time
        if connector_version is not None:
          self.connector_version = connector_version
        if device_external_ip_address is not None:
          self.device_external_ip_address = device_external_ip_address
        if proxy_app is not None:
          self.proxy_app = proxy_app

    @property
    def account_moid(self):
        """
        Gets the account_moid of this AssetDeviceConnection.
        The Account ID for this managed object.  

        :return: The account_moid of this AssetDeviceConnection.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this AssetDeviceConnection.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this AssetDeviceConnection.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this AssetDeviceConnection.
        The time when this managed object was created.  

        :return: The create_time of this AssetDeviceConnection.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this AssetDeviceConnection.
        The time when this managed object was created.  

        :param create_time: The create_time of this AssetDeviceConnection.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this AssetDeviceConnection.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this AssetDeviceConnection.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this AssetDeviceConnection.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this AssetDeviceConnection.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this AssetDeviceConnection.
        The time when this managed object was last modified.  

        :return: The mod_time of this AssetDeviceConnection.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this AssetDeviceConnection.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this AssetDeviceConnection.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this AssetDeviceConnection.
        The unique identifier of this Managed Object instance.   

        :return: The moid of this AssetDeviceConnection.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this AssetDeviceConnection.
        The unique identifier of this Managed Object instance.   

        :param moid: The moid of this AssetDeviceConnection.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this AssetDeviceConnection.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :return: The object_type of this AssetDeviceConnection.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this AssetDeviceConnection.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :param object_type: The object_type of this AssetDeviceConnection.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this AssetDeviceConnection.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this AssetDeviceConnection.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this AssetDeviceConnection.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this AssetDeviceConnection.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this AssetDeviceConnection.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this AssetDeviceConnection.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this AssetDeviceConnection.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this AssetDeviceConnection.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this AssetDeviceConnection.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this AssetDeviceConnection.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this AssetDeviceConnection.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this AssetDeviceConnection.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this AssetDeviceConnection.
        The versioning info for this managed object.   

        :return: The version_context of this AssetDeviceConnection.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this AssetDeviceConnection.
        The versioning info for this managed object.   

        :param version_context: The version_context of this AssetDeviceConnection.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this AssetDeviceConnection.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this AssetDeviceConnection.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this AssetDeviceConnection.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this AssetDeviceConnection.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this AssetDeviceConnection.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this AssetDeviceConnection.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this AssetDeviceConnection.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this AssetDeviceConnection.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this AssetDeviceConnection.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :return: The permission_resources of this AssetDeviceConnection.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this AssetDeviceConnection.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :param permission_resources: The permission_resources of this AssetDeviceConnection.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def api_version(self):
        """
        Gets the api_version of this AssetDeviceConnection.
        The version of the connector API, describes the capability of the connector's framework. If the version is lower than the current minimum supported version defined in the service managing the connection, the device connector will be connected with limited capabilities until the device connector is upgraded to a fully supported version. For example if a device connector that was released without delta inventory capabilities registers and connects to Intersight, inventory collection may be disabled until it has been upgraded.   

        :return: The api_version of this AssetDeviceConnection.
        :rtype: int
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """
        Sets the api_version of this AssetDeviceConnection.
        The version of the connector API, describes the capability of the connector's framework. If the version is lower than the current minimum supported version defined in the service managing the connection, the device connector will be connected with limited capabilities until the device connector is upgraded to a fully supported version. For example if a device connector that was released without delta inventory capabilities registers and connects to Intersight, inventory collection may be disabled until it has been upgraded.   

        :param api_version: The api_version of this AssetDeviceConnection.
        :type: int
        """

        self._api_version = api_version

    @property
    def app_partition_number(self):
        """
        Gets the app_partition_number of this AssetDeviceConnection.
        The partition number corresponding to the instance of the Proxy App which is managing the web-socket to the device connector.  

        :return: The app_partition_number of this AssetDeviceConnection.
        :rtype: int
        """
        return self._app_partition_number

    @app_partition_number.setter
    def app_partition_number(self, app_partition_number):
        """
        Sets the app_partition_number of this AssetDeviceConnection.
        The partition number corresponding to the instance of the Proxy App which is managing the web-socket to the device connector.  

        :param app_partition_number: The app_partition_number of this AssetDeviceConnection.
        :type: int
        """

        self._app_partition_number = app_partition_number

    @property
    def connection_id(self):
        """
        Gets the connection_id of this AssetDeviceConnection.
        The unique identifier for the current connection. The identifier persists across network connectivity loss and is reset on device connector process restart or platform administrator toggle of the Intersight connectivity. The connectionId can be used by services that need to interact with stateful plugins running in the device connector process. For example if a service schedules an inventory in a devices job scheduler plugin at registration it is not necessary to reschedule the job if the device loses network connectivity due to an Intersight service upgrade or intermittent network issues in the devices datacenter.  

        :return: The connection_id of this AssetDeviceConnection.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """
        Sets the connection_id of this AssetDeviceConnection.
        The unique identifier for the current connection. The identifier persists across network connectivity loss and is reset on device connector process restart or platform administrator toggle of the Intersight connectivity. The connectionId can be used by services that need to interact with stateful plugins running in the device connector process. For example if a service schedules an inventory in a devices job scheduler plugin at registration it is not necessary to reschedule the job if the device loses network connectivity due to an Intersight service upgrade or intermittent network issues in the devices datacenter.  

        :param connection_id: The connection_id of this AssetDeviceConnection.
        :type: str
        """

        self._connection_id = connection_id

    @property
    def connection_reason(self):
        """
        Gets the connection_reason of this AssetDeviceConnection.
        If 'connectionStatus' is not equal to Connected, connectionReason provides further details about why the device is not connected with the cloud.  

        :return: The connection_reason of this AssetDeviceConnection.
        :rtype: str
        """
        return self._connection_reason

    @connection_reason.setter
    def connection_reason(self, connection_reason):
        """
        Sets the connection_reason of this AssetDeviceConnection.
        If 'connectionStatus' is not equal to Connected, connectionReason provides further details about why the device is not connected with the cloud.  

        :param connection_reason: The connection_reason of this AssetDeviceConnection.
        :type: str
        """

        self._connection_reason = connection_reason

    @property
    def connection_status(self):
        """
        Gets the connection_status of this AssetDeviceConnection.
        The status of the persistent connection between the device connector and Intersight.  

        :return: The connection_status of this AssetDeviceConnection.
        :rtype: str
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """
        Sets the connection_status of this AssetDeviceConnection.
        The status of the persistent connection between the device connector and Intersight.  

        :param connection_status: The connection_status of this AssetDeviceConnection.
        :type: str
        """
        allowed_values = ["", "Connected", "NotConnected", "Unclaimed"]
        if connection_status not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_status` ({0}), must be one of {1}"
                .format(connection_status, allowed_values)
            )

        self._connection_status = connection_status

    @property
    def connection_status_last_change_time(self):
        """
        Gets the connection_status_last_change_time of this AssetDeviceConnection.
        The last time at which the 'connectionStatus' property value changed. If connectionStatus is Connected, this time can be interpreted as the starting time since which a persistent connection has been maintained between the cloud and device connector. If connectionStatus is NotConnected, this time can be interpreted as the last time the device connector was connected with the cloud.  

        :return: The connection_status_last_change_time of this AssetDeviceConnection.
        :rtype: datetime
        """
        return self._connection_status_last_change_time

    @connection_status_last_change_time.setter
    def connection_status_last_change_time(self, connection_status_last_change_time):
        """
        Sets the connection_status_last_change_time of this AssetDeviceConnection.
        The last time at which the 'connectionStatus' property value changed. If connectionStatus is Connected, this time can be interpreted as the starting time since which a persistent connection has been maintained between the cloud and device connector. If connectionStatus is NotConnected, this time can be interpreted as the last time the device connector was connected with the cloud.  

        :param connection_status_last_change_time: The connection_status_last_change_time of this AssetDeviceConnection.
        :type: datetime
        """

        self._connection_status_last_change_time = connection_status_last_change_time

    @property
    def connector_version(self):
        """
        Gets the connector_version of this AssetDeviceConnection.
        The version of the device connector running on the managed device.  

        :return: The connector_version of this AssetDeviceConnection.
        :rtype: str
        """
        return self._connector_version

    @connector_version.setter
    def connector_version(self, connector_version):
        """
        Sets the connector_version of this AssetDeviceConnection.
        The version of the device connector running on the managed device.  

        :param connector_version: The connector_version of this AssetDeviceConnection.
        :type: str
        """

        self._connector_version = connector_version

    @property
    def device_external_ip_address(self):
        """
        Gets the device_external_ip_address of this AssetDeviceConnection.
        The IP Address of the managed device as seen from the cloud at the time of registration. This could be the IP address of the managed device's interface which has a route to the internet or a NAT IP addresss when the managed device is deployed in a private network.  

        :return: The device_external_ip_address of this AssetDeviceConnection.
        :rtype: str
        """
        return self._device_external_ip_address

    @device_external_ip_address.setter
    def device_external_ip_address(self, device_external_ip_address):
        """
        Sets the device_external_ip_address of this AssetDeviceConnection.
        The IP Address of the managed device as seen from the cloud at the time of registration. This could be the IP address of the managed device's interface which has a route to the internet or a NAT IP addresss when the managed device is deployed in a private network.  

        :param device_external_ip_address: The device_external_ip_address of this AssetDeviceConnection.
        :type: str
        """

        self._device_external_ip_address = device_external_ip_address

    @property
    def proxy_app(self):
        """
        Gets the proxy_app of this AssetDeviceConnection.
        The name of the app which will proxy the messages to the device connector.   

        :return: The proxy_app of this AssetDeviceConnection.
        :rtype: str
        """
        return self._proxy_app

    @proxy_app.setter
    def proxy_app(self, proxy_app):
        """
        Sets the proxy_app of this AssetDeviceConnection.
        The name of the app which will proxy the messages to the device connector.   

        :param proxy_app: The proxy_app of this AssetDeviceConnection.
        :type: str
        """

        self._proxy_app = proxy_app

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AssetDeviceConnection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
