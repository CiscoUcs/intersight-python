# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1295
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VnicTcpOffloadSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'large_receive': 'bool',
        'large_send': 'bool',
        'rx_checksum': 'bool',
        'tx_checksum': 'bool'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'large_receive': 'LargeReceive',
        'large_send': 'LargeSend',
        'rx_checksum': 'RxChecksum',
        'tx_checksum': 'TxChecksum'
    }

    def __init__(self, object_type=None, large_receive=None, large_send=None, rx_checksum=None, tx_checksum=None):
        """
        VnicTcpOffloadSettings - a model defined in Swagger
        """

        self._object_type = None
        self._large_receive = None
        self._large_send = None
        self._rx_checksum = None
        self._tx_checksum = None

        if object_type is not None:
          self.object_type = object_type
        if large_receive is not None:
          self.large_receive = large_receive
        if large_send is not None:
          self.large_send = large_send
        if rx_checksum is not None:
          self.rx_checksum = rx_checksum
        if tx_checksum is not None:
          self.tx_checksum = tx_checksum

    @property
    def object_type(self):
        """
        Gets the object_type of this VnicTcpOffloadSettings.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :return: The object_type of this VnicTcpOffloadSettings.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this VnicTcpOffloadSettings.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :param object_type: The object_type of this VnicTcpOffloadSettings.
        :type: str
        """

        self._object_type = object_type

    @property
    def large_receive(self):
        """
        Gets the large_receive of this VnicTcpOffloadSettings.
        Enables the reassembly of segmented packets in hardware before sending them to the CPU.  

        :return: The large_receive of this VnicTcpOffloadSettings.
        :rtype: bool
        """
        return self._large_receive

    @large_receive.setter
    def large_receive(self, large_receive):
        """
        Sets the large_receive of this VnicTcpOffloadSettings.
        Enables the reassembly of segmented packets in hardware before sending them to the CPU.  

        :param large_receive: The large_receive of this VnicTcpOffloadSettings.
        :type: bool
        """

        self._large_receive = large_receive

    @property
    def large_send(self):
        """
        Gets the large_send of this VnicTcpOffloadSettings.
        Enables the CPU to send large packets to the hardware for segmentation.  

        :return: The large_send of this VnicTcpOffloadSettings.
        :rtype: bool
        """
        return self._large_send

    @large_send.setter
    def large_send(self, large_send):
        """
        Sets the large_send of this VnicTcpOffloadSettings.
        Enables the CPU to send large packets to the hardware for segmentation.  

        :param large_send: The large_send of this VnicTcpOffloadSettings.
        :type: bool
        """

        self._large_send = large_send

    @property
    def rx_checksum(self):
        """
        Gets the rx_checksum of this VnicTcpOffloadSettings.
        When enabled, the CPU sends all packet checksums to the hardware for validation.  

        :return: The rx_checksum of this VnicTcpOffloadSettings.
        :rtype: bool
        """
        return self._rx_checksum

    @rx_checksum.setter
    def rx_checksum(self, rx_checksum):
        """
        Sets the rx_checksum of this VnicTcpOffloadSettings.
        When enabled, the CPU sends all packet checksums to the hardware for validation.  

        :param rx_checksum: The rx_checksum of this VnicTcpOffloadSettings.
        :type: bool
        """

        self._rx_checksum = rx_checksum

    @property
    def tx_checksum(self):
        """
        Gets the tx_checksum of this VnicTcpOffloadSettings.
        When enabled, the CPU sends all packets to the hardware so that the checksum can be calculated.   

        :return: The tx_checksum of this VnicTcpOffloadSettings.
        :rtype: bool
        """
        return self._tx_checksum

    @tx_checksum.setter
    def tx_checksum(self, tx_checksum):
        """
        Sets the tx_checksum of this VnicTcpOffloadSettings.
        When enabled, the CPU sends all packets to the hardware so that the checksum can be calculated.   

        :param tx_checksum: The tx_checksum of this VnicTcpOffloadSettings.
        :type: bool
        """

        self._tx_checksum = tx_checksum

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VnicTcpOffloadSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
