# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class VnicTcpOffloadSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'large_receive': 'bool',
        'large_send': 'bool',
        'rx_checksum': 'bool',
        'tx_checksum': 'bool'
    }

    attribute_map = {
        'large_receive': 'LargeReceive',
        'large_send': 'LargeSend',
        'rx_checksum': 'RxChecksum',
        'tx_checksum': 'TxChecksum'
    }

    def __init__(self,
                 large_receive=None,
                 large_send=None,
                 rx_checksum=None,
                 tx_checksum=None,
                 local_vars_configuration=None):  # noqa: E501
        """VnicTcpOffloadSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._large_receive = None
        self._large_send = None
        self._rx_checksum = None
        self._tx_checksum = None
        self.discriminator = None

        if large_receive is not None:
            self.large_receive = large_receive
        if large_send is not None:
            self.large_send = large_send
        if rx_checksum is not None:
            self.rx_checksum = rx_checksum
        if tx_checksum is not None:
            self.tx_checksum = tx_checksum

    @property
    def large_receive(self):
        """Gets the large_receive of this VnicTcpOffloadSettings.  # noqa: E501

        Enables the reassembly of segmented packets in hardware before sending them to the CPU.    # noqa: E501

        :return: The large_receive of this VnicTcpOffloadSettings.  # noqa: E501
        :rtype: bool
        """
        return self._large_receive

    @large_receive.setter
    def large_receive(self, large_receive):
        """Sets the large_receive of this VnicTcpOffloadSettings.

        Enables the reassembly of segmented packets in hardware before sending them to the CPU.    # noqa: E501

        :param large_receive: The large_receive of this VnicTcpOffloadSettings.  # noqa: E501
        :type: bool
        """

        self._large_receive = large_receive

    @property
    def large_send(self):
        """Gets the large_send of this VnicTcpOffloadSettings.  # noqa: E501

        Enables the CPU to send large packets to the hardware for segmentation.    # noqa: E501

        :return: The large_send of this VnicTcpOffloadSettings.  # noqa: E501
        :rtype: bool
        """
        return self._large_send

    @large_send.setter
    def large_send(self, large_send):
        """Sets the large_send of this VnicTcpOffloadSettings.

        Enables the CPU to send large packets to the hardware for segmentation.    # noqa: E501

        :param large_send: The large_send of this VnicTcpOffloadSettings.  # noqa: E501
        :type: bool
        """

        self._large_send = large_send

    @property
    def rx_checksum(self):
        """Gets the rx_checksum of this VnicTcpOffloadSettings.  # noqa: E501

        When enabled, the CPU sends all packet checksums to the hardware for validation.    # noqa: E501

        :return: The rx_checksum of this VnicTcpOffloadSettings.  # noqa: E501
        :rtype: bool
        """
        return self._rx_checksum

    @rx_checksum.setter
    def rx_checksum(self, rx_checksum):
        """Sets the rx_checksum of this VnicTcpOffloadSettings.

        When enabled, the CPU sends all packet checksums to the hardware for validation.    # noqa: E501

        :param rx_checksum: The rx_checksum of this VnicTcpOffloadSettings.  # noqa: E501
        :type: bool
        """

        self._rx_checksum = rx_checksum

    @property
    def tx_checksum(self):
        """Gets the tx_checksum of this VnicTcpOffloadSettings.  # noqa: E501

        When enabled, the CPU sends all packets to the hardware so that the checksum can be calculated.     # noqa: E501

        :return: The tx_checksum of this VnicTcpOffloadSettings.  # noqa: E501
        :rtype: bool
        """
        return self._tx_checksum

    @tx_checksum.setter
    def tx_checksum(self, tx_checksum):
        """Sets the tx_checksum of this VnicTcpOffloadSettings.

        When enabled, the CPU sends all packets to the hardware so that the checksum can be calculated.     # noqa: E501

        :param tx_checksum: The tx_checksum of this VnicTcpOffloadSettings.  # noqa: E501
        :type: bool
        """

        self._tx_checksum = tx_checksum

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VnicTcpOffloadSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VnicTcpOffloadSettings):
            return True

        return self.to_dict() != other.to_dict()
