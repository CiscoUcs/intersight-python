# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class AaaAbstractAuditRecord(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'event': 'str',
        'mo_type': 'str',
        'object_moid': 'str',
        'request': 'object',
        'trace_id': 'str'
    }

    attribute_map = {
        'event': 'Event',
        'mo_type': 'MoType',
        'object_moid': 'ObjectMoid',
        'request': 'Request',
        'trace_id': 'TraceId'
    }

    def __init__(self,
                 event=None,
                 mo_type=None,
                 object_moid=None,
                 request=None,
                 trace_id=None,
                 local_vars_configuration=None):  # noqa: E501
        """AaaAbstractAuditRecord - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._event = None
        self._mo_type = None
        self._object_moid = None
        self._request = None
        self._trace_id = None
        self.discriminator = None

        if event is not None:
            self.event = event
        if mo_type is not None:
            self.mo_type = mo_type
        if object_moid is not None:
            self.object_moid = object_moid
        if request is not None:
            self.request = request
        if trace_id is not None:
            self.trace_id = trace_id

    @property
    def event(self):
        """Gets the event of this AaaAbstractAuditRecord.  # noqa: E501

        The operation that was performed on this Managed Object. The event is a compound string that includes the CRUD operation such as Create, Modify, Delete, and a string representing the Managed Object type.    # noqa: E501

        :return: The event of this AaaAbstractAuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this AaaAbstractAuditRecord.

        The operation that was performed on this Managed Object. The event is a compound string that includes the CRUD operation such as Create, Modify, Delete, and a string representing the Managed Object type.    # noqa: E501

        :param event: The event of this AaaAbstractAuditRecord.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def mo_type(self):
        """Gets the mo_type of this AaaAbstractAuditRecord.  # noqa: E501

        The object type of the REST resource that was created, modified or deleted.    # noqa: E501

        :return: The mo_type of this AaaAbstractAuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._mo_type

    @mo_type.setter
    def mo_type(self, mo_type):
        """Sets the mo_type of this AaaAbstractAuditRecord.

        The object type of the REST resource that was created, modified or deleted.    # noqa: E501

        :param mo_type: The mo_type of this AaaAbstractAuditRecord.  # noqa: E501
        :type: str
        """

        self._mo_type = mo_type

    @property
    def object_moid(self):
        """Gets the object_moid of this AaaAbstractAuditRecord.  # noqa: E501

        The Moid of the REST resource that was created, modified or deleted.    # noqa: E501

        :return: The object_moid of this AaaAbstractAuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._object_moid

    @object_moid.setter
    def object_moid(self, object_moid):
        """Sets the object_moid of this AaaAbstractAuditRecord.

        The Moid of the REST resource that was created, modified or deleted.    # noqa: E501

        :param object_moid: The object_moid of this AaaAbstractAuditRecord.  # noqa: E501
        :type: str
        """

        self._object_moid = object_moid

    @property
    def request(self):
        """Gets the request of this AaaAbstractAuditRecord.  # noqa: E501

        The body of the REST request that was received from a client to create or modify a REST resource, represented as a JSON document.    # noqa: E501

        :return: The request of this AaaAbstractAuditRecord.  # noqa: E501
        :rtype: object
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this AaaAbstractAuditRecord.

        The body of the REST request that was received from a client to create or modify a REST resource, represented as a JSON document.    # noqa: E501

        :param request: The request of this AaaAbstractAuditRecord.  # noqa: E501
        :type: object
        """

        self._request = request

    @property
    def trace_id(self):
        """Gets the trace_id of this AaaAbstractAuditRecord.  # noqa: E501

        The trace id of the request that was used to create, modify or delete a REST resource.  A trace id is a unique identifier for one particular REST request. It may be used for troubleshooting purpose by the Intersight technical support team.      # noqa: E501

        :return: The trace_id of this AaaAbstractAuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._trace_id

    @trace_id.setter
    def trace_id(self, trace_id):
        """Sets the trace_id of this AaaAbstractAuditRecord.

        The trace id of the request that was used to create, modify or delete a REST resource.  A trace id is a unique identifier for one particular REST request. It may be used for troubleshooting purpose by the Intersight technical support team.      # noqa: E501

        :param trace_id: The trace_id of this AaaAbstractAuditRecord.  # noqa: E501
        :type: str
        """

        self._trace_id = trace_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AaaAbstractAuditRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AaaAbstractAuditRecord):
            return True

        return self.to_dict() != other.to_dict()
