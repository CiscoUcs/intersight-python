# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1295
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IamApiKey(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'hash_algorithm': 'str',
        'key_spec': 'PkixKeyGenerationSpec',
        'private_key': 'str',
        'purpose': 'str',
        'signing_algorithm': 'str',
        'permission': 'IamPermissionRef',
        'user': 'IamUserRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'hash_algorithm': 'HashAlgorithm',
        'key_spec': 'KeySpec',
        'private_key': 'PrivateKey',
        'purpose': 'Purpose',
        'signing_algorithm': 'SigningAlgorithm',
        'permission': 'Permission',
        'user': 'User'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, hash_algorithm='SHA256', key_spec=None, private_key=None, purpose=None, signing_algorithm='RSASSA-PKCS1-v1_5', permission=None, user=None):
        """
        IamApiKey - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._hash_algorithm = None
        self._key_spec = None
        self._private_key = None
        self._purpose = None
        self._signing_algorithm = None
        self._permission = None
        self._user = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if hash_algorithm is not None:
          self.hash_algorithm = hash_algorithm
        if key_spec is not None:
          self.key_spec = key_spec
        if private_key is not None:
          self.private_key = private_key
        if purpose is not None:
          self.purpose = purpose
        if signing_algorithm is not None:
          self.signing_algorithm = signing_algorithm
        if permission is not None:
          self.permission = permission
        if user is not None:
          self.user = user

    @property
    def account_moid(self):
        """
        Gets the account_moid of this IamApiKey.
        The Account ID for this managed object.  

        :return: The account_moid of this IamApiKey.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this IamApiKey.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this IamApiKey.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this IamApiKey.
        The time when this managed object was created.  

        :return: The create_time of this IamApiKey.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this IamApiKey.
        The time when this managed object was created.  

        :param create_time: The create_time of this IamApiKey.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this IamApiKey.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this IamApiKey.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this IamApiKey.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this IamApiKey.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this IamApiKey.
        The time when this managed object was last modified.  

        :return: The mod_time of this IamApiKey.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this IamApiKey.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this IamApiKey.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this IamApiKey.
        The unique identifier of this Managed Object instance.   

        :return: The moid of this IamApiKey.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this IamApiKey.
        The unique identifier of this Managed Object instance.   

        :param moid: The moid of this IamApiKey.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this IamApiKey.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :return: The object_type of this IamApiKey.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this IamApiKey.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :param object_type: The object_type of this IamApiKey.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this IamApiKey.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this IamApiKey.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this IamApiKey.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this IamApiKey.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this IamApiKey.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this IamApiKey.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this IamApiKey.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this IamApiKey.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this IamApiKey.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this IamApiKey.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this IamApiKey.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this IamApiKey.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this IamApiKey.
        The versioning info for this managed object.   

        :return: The version_context of this IamApiKey.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this IamApiKey.
        The versioning info for this managed object.   

        :param version_context: The version_context of this IamApiKey.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this IamApiKey.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this IamApiKey.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this IamApiKey.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this IamApiKey.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this IamApiKey.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this IamApiKey.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this IamApiKey.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this IamApiKey.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this IamApiKey.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :return: The permission_resources of this IamApiKey.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this IamApiKey.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :param permission_resources: The permission_resources of this IamApiKey.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def hash_algorithm(self):
        """
        Gets the hash_algorithm of this IamApiKey.
        The cryptographic hash algorithm to calculate the message digest.   

        :return: The hash_algorithm of this IamApiKey.
        :rtype: str
        """
        return self._hash_algorithm

    @hash_algorithm.setter
    def hash_algorithm(self, hash_algorithm):
        """
        Sets the hash_algorithm of this IamApiKey.
        The cryptographic hash algorithm to calculate the message digest.   

        :param hash_algorithm: The hash_algorithm of this IamApiKey.
        :type: str
        """
        allowed_values = ["SHA256", "SHA384", "SHA512", "SHA512_224", "SHA512_256"]
        if hash_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `hash_algorithm` ({0}), must be one of {1}"
                .format(hash_algorithm, allowed_values)
            )

        self._hash_algorithm = hash_algorithm

    @property
    def key_spec(self):
        """
        Gets the key_spec of this IamApiKey.
        The key generation specification provides the algorithm and the parameters required for this algorithm to generate a private key, public key pair. Supported key generation schemes include RSA, ECDSA and Edwards-Curve Digital Signature Algorithm (EdDSA).  

        :return: The key_spec of this IamApiKey.
        :rtype: PkixKeyGenerationSpec
        """
        return self._key_spec

    @key_spec.setter
    def key_spec(self, key_spec):
        """
        Sets the key_spec of this IamApiKey.
        The key generation specification provides the algorithm and the parameters required for this algorithm to generate a private key, public key pair. Supported key generation schemes include RSA, ECDSA and Edwards-Curve Digital Signature Algorithm (EdDSA).  

        :param key_spec: The key_spec of this IamApiKey.
        :type: PkixKeyGenerationSpec
        """

        self._key_spec = key_spec

    @property
    def private_key(self):
        """
        Gets the private_key of this IamApiKey.
        Holds the private key for the API key.   

        :return: The private_key of this IamApiKey.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """
        Sets the private_key of this IamApiKey.
        Holds the private key for the API key.   

        :param private_key: The private_key of this IamApiKey.
        :type: str
        """

        self._private_key = private_key

    @property
    def purpose(self):
        """
        Gets the purpose of this IamApiKey.
        The purpose of the API Key.  

        :return: The purpose of this IamApiKey.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """
        Sets the purpose of this IamApiKey.
        The purpose of the API Key.  

        :param purpose: The purpose of this IamApiKey.
        :type: str
        """

        self._purpose = purpose

    @property
    def signing_algorithm(self):
        """
        Gets the signing_algorithm of this IamApiKey.
        The signing algorithm used by the client to authenticate API requests to Intersight. The following key generation schemes are supported: 1. RSASSA-PSS, as defined in RFC 8017 [RFC8017], Section 8.1, 2. ECDSA P-256, as defined in ANSI X9.62-2005 ECDSA and FIPS 186-4, 3. Ed25519ph, Ed25519ctx, and Ed25519, as defined in RFC 8032 [RFC8032], Section 5.1. The signing algorithm must be compatible with the key generation specification.    

        :return: The signing_algorithm of this IamApiKey.
        :rtype: str
        """
        return self._signing_algorithm

    @signing_algorithm.setter
    def signing_algorithm(self, signing_algorithm):
        """
        Sets the signing_algorithm of this IamApiKey.
        The signing algorithm used by the client to authenticate API requests to Intersight. The following key generation schemes are supported: 1. RSASSA-PSS, as defined in RFC 8017 [RFC8017], Section 8.1, 2. ECDSA P-256, as defined in ANSI X9.62-2005 ECDSA and FIPS 186-4, 3. Ed25519ph, Ed25519ctx, and Ed25519, as defined in RFC 8032 [RFC8032], Section 5.1. The signing algorithm must be compatible with the key generation specification.    

        :param signing_algorithm: The signing_algorithm of this IamApiKey.
        :type: str
        """
        allowed_values = ["RSASSA-PKCS1-v1_5", "RSASSA-PSS", "Ed25519", "Ecdsa"]
        if signing_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `signing_algorithm` ({0}), must be one of {1}"
                .format(signing_algorithm, allowed_values)
            )

        self._signing_algorithm = signing_algorithm

    @property
    def permission(self):
        """
        Gets the permission of this IamApiKey.
        Permissions associated with the API key. Permission provides a way to assign roles to a user or user group to perform operations on object hierarchy. 

        :return: The permission of this IamApiKey.
        :rtype: IamPermissionRef
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """
        Sets the permission of this IamApiKey.
        Permissions associated with the API key. Permission provides a way to assign roles to a user or user group to perform operations on object hierarchy. 

        :param permission: The permission of this IamApiKey.
        :type: IamPermissionRef
        """

        self._permission = permission

    @property
    def user(self):
        """
        Gets the user of this IamApiKey.
        A collection of references to the [iam.User](mo://iam.User) Managed Object.  When this managed object is deleted, the referenced [iam.User](mo://iam.User) MO unsets its reference to this deleted MO. 

        :return: The user of this IamApiKey.
        :rtype: IamUserRef
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this IamApiKey.
        A collection of references to the [iam.User](mo://iam.User) Managed Object.  When this managed object is deleted, the referenced [iam.User](mo://iam.User) MO unsets its reference to this deleted MO. 

        :param user: The user of this IamApiKey.
        :type: IamUserRef
        """

        self._user = user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IamApiKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
