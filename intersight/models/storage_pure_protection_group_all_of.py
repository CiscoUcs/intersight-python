# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StoragePureProtectionGroupAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'size': 'int',
        'source': 'str',
        'targets': 'list[str]',
        'host_groups': 'list[StoragePureHost]',
        'hosts': 'list[StoragePureHost]',
        'registered_device': 'AssetDeviceRegistration',
        'volumes': 'list[StoragePureVolume]'
    }

    attribute_map = {
        'size': 'Size',
        'source': 'Source',
        'targets': 'Targets',
        'host_groups': 'HostGroups',
        'hosts': 'Hosts',
        'registered_device': 'RegisteredDevice',
        'volumes': 'Volumes'
    }

    def __init__(self,
                 size=None,
                 source=None,
                 targets=None,
                 host_groups=None,
                 hosts=None,
                 registered_device=None,
                 volumes=None,
                 local_vars_configuration=None):  # noqa: E501
        """StoragePureProtectionGroupAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._size = None
        self._source = None
        self._targets = None
        self._host_groups = None
        self._hosts = None
        self._registered_device = None
        self._volumes = None
        self.discriminator = None

        if size is not None:
            self.size = size
        if source is not None:
            self.source = source
        if targets is not None:
            self.targets = targets
        if host_groups is not None:
            self.host_groups = host_groups
        if hosts is not None:
            self.hosts = hosts
        if registered_device is not None:
            self.registered_device = registered_device
        if volumes is not None:
            self.volumes = volumes

    @property
    def size(self):
        """Gets the size of this StoragePureProtectionGroupAllOf.  # noqa: E501

        Overall size of all snapshots in the protection group, represented in bytes.    # noqa: E501

        :return: The size of this StoragePureProtectionGroupAllOf.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this StoragePureProtectionGroupAllOf.

        Overall size of all snapshots in the protection group, represented in bytes.    # noqa: E501

        :param size: The size of this StoragePureProtectionGroupAllOf.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def source(self):
        """Gets the source of this StoragePureProtectionGroupAllOf.  # noqa: E501

        Name of PureStorage array name on which the protection group is created.    # noqa: E501

        :return: The source of this StoragePureProtectionGroupAllOf.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this StoragePureProtectionGroupAllOf.

        Name of PureStorage array name on which the protection group is created.    # noqa: E501

        :param source: The source of this StoragePureProtectionGroupAllOf.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def targets(self):
        """Gets the targets of this StoragePureProtectionGroupAllOf.  # noqa: E501


        :return: The targets of this StoragePureProtectionGroupAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this StoragePureProtectionGroupAllOf.


        :param targets: The targets of this StoragePureProtectionGroupAllOf.  # noqa: E501
        :type: list[str]
        """

        self._targets = targets

    @property
    def host_groups(self):
        """Gets the host_groups of this StoragePureProtectionGroupAllOf.  # noqa: E501

        A reference to a storagePureHost resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of host group object associated to the protection group.   # noqa: E501

        :return: The host_groups of this StoragePureProtectionGroupAllOf.  # noqa: E501
        :rtype: list[StoragePureHost]
        """
        return self._host_groups

    @host_groups.setter
    def host_groups(self, host_groups):
        """Sets the host_groups of this StoragePureProtectionGroupAllOf.

        A reference to a storagePureHost resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of host group object associated to the protection group.   # noqa: E501

        :param host_groups: The host_groups of this StoragePureProtectionGroupAllOf.  # noqa: E501
        :type: list[StoragePureHost]
        """

        self._host_groups = host_groups

    @property
    def hosts(self):
        """Gets the hosts of this StoragePureProtectionGroupAllOf.  # noqa: E501

        A reference to a storagePureHost resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of host object associated to the protection group.   # noqa: E501

        :return: The hosts of this StoragePureProtectionGroupAllOf.  # noqa: E501
        :rtype: list[StoragePureHost]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this StoragePureProtectionGroupAllOf.

        A reference to a storagePureHost resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of host object associated to the protection group.   # noqa: E501

        :param hosts: The hosts of this StoragePureProtectionGroupAllOf.  # noqa: E501
        :type: list[StoragePureHost]
        """

        self._hosts = hosts

    @property
    def registered_device(self):
        """Gets the registered_device of this StoragePureProtectionGroupAllOf.  # noqa: E501


        :return: The registered_device of this StoragePureProtectionGroupAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this StoragePureProtectionGroupAllOf.


        :param registered_device: The registered_device of this StoragePureProtectionGroupAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    @property
    def volumes(self):
        """Gets the volumes of this StoragePureProtectionGroupAllOf.  # noqa: E501

        A reference to a storagePureVolume resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of volume object associated to the protection group.   # noqa: E501

        :return: The volumes of this StoragePureProtectionGroupAllOf.  # noqa: E501
        :rtype: list[StoragePureVolume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this StoragePureProtectionGroupAllOf.

        A reference to a storagePureVolume resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of volume object associated to the protection group.   # noqa: E501

        :param volumes: The volumes of this StoragePureProtectionGroupAllOf.  # noqa: E501
        :type: list[StoragePureVolume]
        """

        self._volumes = volumes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoragePureProtectionGroupAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StoragePureProtectionGroupAllOf):
            return True

        return self.to_dict() != other.to_dict()
