# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StorageDiskGroupPolicyAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dedicated_hot_spares': 'list[StorageLocalDisk]',
        'raid_level': 'str',
        'span_groups': 'list[StorageSpanGroup]',
        'use_jbods': 'bool',
        'organization': 'OrganizationOrganization',
        'storage_policies': 'list[StorageStoragePolicy]'
    }

    attribute_map = {
        'dedicated_hot_spares': 'DedicatedHotSpares',
        'raid_level': 'RaidLevel',
        'span_groups': 'SpanGroups',
        'use_jbods': 'UseJbods',
        'organization': 'Organization',
        'storage_policies': 'StoragePolicies'
    }

    def __init__(self,
                 dedicated_hot_spares=None,
                 raid_level='Raid0',
                 span_groups=None,
                 use_jbods=None,
                 organization=None,
                 storage_policies=None,
                 local_vars_configuration=None):  # noqa: E501
        """StorageDiskGroupPolicyAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dedicated_hot_spares = None
        self._raid_level = None
        self._span_groups = None
        self._use_jbods = None
        self._organization = None
        self._storage_policies = None
        self.discriminator = None

        if dedicated_hot_spares is not None:
            self.dedicated_hot_spares = dedicated_hot_spares
        if raid_level is not None:
            self.raid_level = raid_level
        if span_groups is not None:
            self.span_groups = span_groups
        if use_jbods is not None:
            self.use_jbods = use_jbods
        if organization is not None:
            self.organization = organization
        if storage_policies is not None:
            self.storage_policies = storage_policies

    @property
    def dedicated_hot_spares(self):
        """Gets the dedicated_hot_spares of this StorageDiskGroupPolicyAllOf.  # noqa: E501


        :return: The dedicated_hot_spares of this StorageDiskGroupPolicyAllOf.  # noqa: E501
        :rtype: list[StorageLocalDisk]
        """
        return self._dedicated_hot_spares

    @dedicated_hot_spares.setter
    def dedicated_hot_spares(self, dedicated_hot_spares):
        """Sets the dedicated_hot_spares of this StorageDiskGroupPolicyAllOf.


        :param dedicated_hot_spares: The dedicated_hot_spares of this StorageDiskGroupPolicyAllOf.  # noqa: E501
        :type: list[StorageLocalDisk]
        """

        self._dedicated_hot_spares = dedicated_hot_spares

    @property
    def raid_level(self):
        """Gets the raid_level of this StorageDiskGroupPolicyAllOf.  # noqa: E501

        The supported RAID level for the disk group.    # noqa: E501

        :return: The raid_level of this StorageDiskGroupPolicyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._raid_level

    @raid_level.setter
    def raid_level(self, raid_level):
        """Sets the raid_level of this StorageDiskGroupPolicyAllOf.

        The supported RAID level for the disk group.    # noqa: E501

        :param raid_level: The raid_level of this StorageDiskGroupPolicyAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "Raid0", "Raid1", "Raid5", "Raid6", "Raid10", "Raid50", "Raid60"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and raid_level not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `raid_level` ({0}), must be one of {1}"  # noqa: E501
                .format(raid_level, allowed_values))

        self._raid_level = raid_level

    @property
    def span_groups(self):
        """Gets the span_groups of this StorageDiskGroupPolicyAllOf.  # noqa: E501


        :return: The span_groups of this StorageDiskGroupPolicyAllOf.  # noqa: E501
        :rtype: list[StorageSpanGroup]
        """
        return self._span_groups

    @span_groups.setter
    def span_groups(self, span_groups):
        """Sets the span_groups of this StorageDiskGroupPolicyAllOf.


        :param span_groups: The span_groups of this StorageDiskGroupPolicyAllOf.  # noqa: E501
        :type: list[StorageSpanGroup]
        """

        self._span_groups = span_groups

    @property
    def use_jbods(self):
        """Gets the use_jbods of this StorageDiskGroupPolicyAllOf.  # noqa: E501

        Selected disks in the disk group in JBOD state will be set to Unconfigured Good state before they are used in virtual drive creation.     # noqa: E501

        :return: The use_jbods of this StorageDiskGroupPolicyAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._use_jbods

    @use_jbods.setter
    def use_jbods(self, use_jbods):
        """Sets the use_jbods of this StorageDiskGroupPolicyAllOf.

        Selected disks in the disk group in JBOD state will be set to Unconfigured Good state before they are used in virtual drive creation.     # noqa: E501

        :param use_jbods: The use_jbods of this StorageDiskGroupPolicyAllOf.  # noqa: E501
        :type: bool
        """

        self._use_jbods = use_jbods

    @property
    def organization(self):
        """Gets the organization of this StorageDiskGroupPolicyAllOf.  # noqa: E501


        :return: The organization of this StorageDiskGroupPolicyAllOf.  # noqa: E501
        :rtype: OrganizationOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this StorageDiskGroupPolicyAllOf.


        :param organization: The organization of this StorageDiskGroupPolicyAllOf.  # noqa: E501
        :type: OrganizationOrganization
        """

        self._organization = organization

    @property
    def storage_policies(self):
        """Gets the storage_policies of this StorageDiskGroupPolicyAllOf.  # noqa: E501

        A reference to a storageStoragePolicy resource. When the $expand query parameter is specified, the referenced resource is returned inline. A collection of references to the [storage.StoragePolicy](mo://storage.StoragePolicy) Managed Object.  When this managed object is deleted, the referenced [storage.StoragePolicy](mo://storage.StoragePolicy) MOs unset their reference to this deleted MO.   # noqa: E501

        :return: The storage_policies of this StorageDiskGroupPolicyAllOf.  # noqa: E501
        :rtype: list[StorageStoragePolicy]
        """
        return self._storage_policies

    @storage_policies.setter
    def storage_policies(self, storage_policies):
        """Sets the storage_policies of this StorageDiskGroupPolicyAllOf.

        A reference to a storageStoragePolicy resource. When the $expand query parameter is specified, the referenced resource is returned inline. A collection of references to the [storage.StoragePolicy](mo://storage.StoragePolicy) Managed Object.  When this managed object is deleted, the referenced [storage.StoragePolicy](mo://storage.StoragePolicy) MOs unset their reference to this deleted MO.   # noqa: E501

        :param storage_policies: The storage_policies of this StorageDiskGroupPolicyAllOf.  # noqa: E501
        :type: list[StorageStoragePolicy]
        """

        self._storage_policies = storage_policies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageDiskGroupPolicyAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageDiskGroupPolicyAllOf):
            return True

        return self.to_dict() != other.to_dict()
