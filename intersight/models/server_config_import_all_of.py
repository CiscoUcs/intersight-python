# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ServerConfigImportAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'policy_prefix': 'str',
        'policy_types': 'list[str]',
        'profile_name': 'str',
        'organization': 'OrganizationOrganization',
        'server': 'ComputeRackUnit',
        'server_profile': 'ServerProfile'
    }

    attribute_map = {
        'description': 'Description',
        'policy_prefix': 'PolicyPrefix',
        'policy_types': 'PolicyTypes',
        'profile_name': 'ProfileName',
        'organization': 'Organization',
        'server': 'Server',
        'server_profile': 'ServerProfile'
    }

    def __init__(self,
                 description=None,
                 policy_prefix=None,
                 policy_types=None,
                 profile_name=None,
                 organization=None,
                 server=None,
                 server_profile=None,
                 local_vars_configuration=None):  # noqa: E501
        """ServerConfigImportAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._policy_prefix = None
        self._policy_types = None
        self._profile_name = None
        self._organization = None
        self._server = None
        self._server_profile = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if policy_prefix is not None:
            self.policy_prefix = policy_prefix
        if policy_types is not None:
            self.policy_types = policy_types
        if profile_name is not None:
            self.profile_name = profile_name
        if organization is not None:
            self.organization = organization
        if server is not None:
            self.server = server
        if server_profile is not None:
            self.server_profile = server_profile

    @property
    def description(self):
        """Gets the description of this ServerConfigImportAllOf.  # noqa: E501

        Description of the imported profile.    # noqa: E501

        :return: The description of this ServerConfigImportAllOf.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServerConfigImportAllOf.

        Description of the imported profile.    # noqa: E501

        :param description: The description of this ServerConfigImportAllOf.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def policy_prefix(self):
        """Gets the policy_prefix of this ServerConfigImportAllOf.  # noqa: E501

        Policy prefix for the policies of the imported server profile.    # noqa: E501

        :return: The policy_prefix of this ServerConfigImportAllOf.  # noqa: E501
        :rtype: str
        """
        return self._policy_prefix

    @policy_prefix.setter
    def policy_prefix(self, policy_prefix):
        """Sets the policy_prefix of this ServerConfigImportAllOf.

        Policy prefix for the policies of the imported server profile.    # noqa: E501

        :param policy_prefix: The policy_prefix of this ServerConfigImportAllOf.  # noqa: E501
        :type: str
        """

        self._policy_prefix = policy_prefix

    @property
    def policy_types(self):
        """Gets the policy_types of this ServerConfigImportAllOf.  # noqa: E501


        :return: The policy_types of this ServerConfigImportAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._policy_types

    @policy_types.setter
    def policy_types(self, policy_types):
        """Sets the policy_types of this ServerConfigImportAllOf.


        :param policy_types: The policy_types of this ServerConfigImportAllOf.  # noqa: E501
        :type: list[str]
        """

        self._policy_types = policy_types

    @property
    def profile_name(self):
        """Gets the profile_name of this ServerConfigImportAllOf.  # noqa: E501

        Profile name for the imported server profile.     # noqa: E501

        :return: The profile_name of this ServerConfigImportAllOf.  # noqa: E501
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this ServerConfigImportAllOf.

        Profile name for the imported server profile.     # noqa: E501

        :param profile_name: The profile_name of this ServerConfigImportAllOf.  # noqa: E501
        :type: str
        """

        self._profile_name = profile_name

    @property
    def organization(self):
        """Gets the organization of this ServerConfigImportAllOf.  # noqa: E501


        :return: The organization of this ServerConfigImportAllOf.  # noqa: E501
        :rtype: OrganizationOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ServerConfigImportAllOf.


        :param organization: The organization of this ServerConfigImportAllOf.  # noqa: E501
        :type: OrganizationOrganization
        """

        self._organization = organization

    @property
    def server(self):
        """Gets the server of this ServerConfigImportAllOf.  # noqa: E501


        :return: The server of this ServerConfigImportAllOf.  # noqa: E501
        :rtype: ComputeRackUnit
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this ServerConfigImportAllOf.


        :param server: The server of this ServerConfigImportAllOf.  # noqa: E501
        :type: ComputeRackUnit
        """

        self._server = server

    @property
    def server_profile(self):
        """Gets the server_profile of this ServerConfigImportAllOf.  # noqa: E501


        :return: The server_profile of this ServerConfigImportAllOf.  # noqa: E501
        :rtype: ServerProfile
        """
        return self._server_profile

    @server_profile.setter
    def server_profile(self, server_profile):
        """Sets the server_profile of this ServerConfigImportAllOf.


        :param server_profile: The server_profile of this ServerConfigImportAllOf.  # noqa: E501
        :type: ServerProfile
        """

        self._server_profile = server_profile

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerConfigImportAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServerConfigImportAllOf):
            return True

        return self.to_dict() != other.to_dict()
