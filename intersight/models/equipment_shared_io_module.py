# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-961
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EquipmentSharedIoModule(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'ancestors': 'list[MoBaseMoRef]',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'parent': 'MoBaseMoRef',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'device_mo_id': 'str',
        'dn': 'str',
        'rn': 'str',
        'model': 'str',
        'revision': 'str',
        'serial': 'str',
        'vendor': 'str',
        'config_state': 'str',
        'discovery': 'str',
        'equipment_system_io_controller': 'EquipmentSystemIoControllerRef',
        'mac_of_shared_iom_aside': 'str',
        'mac_of_shared_iom_bside': 'str',
        'oper_state': 'str',
        'part_number': 'str',
        'port_groups': 'list[PortGroupRef]',
        'reachability': 'str',
        'registered_device': 'AssetDeviceRegistrationRef',
        'usr_lbl': 'str',
        'vid': 'str'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'ancestors': 'Ancestors',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'parent': 'Parent',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'device_mo_id': 'DeviceMoId',
        'dn': 'Dn',
        'rn': 'Rn',
        'model': 'Model',
        'revision': 'Revision',
        'serial': 'Serial',
        'vendor': 'Vendor',
        'config_state': 'ConfigState',
        'discovery': 'Discovery',
        'equipment_system_io_controller': 'EquipmentSystemIoController',
        'mac_of_shared_iom_aside': 'MacOfSharedIomAside',
        'mac_of_shared_iom_bside': 'MacOfSharedIomBside',
        'oper_state': 'OperState',
        'part_number': 'PartNumber',
        'port_groups': 'PortGroups',
        'reachability': 'Reachability',
        'registered_device': 'RegisteredDevice',
        'usr_lbl': 'UsrLbl',
        'vid': 'Vid'
    }

    def __init__(self, account_moid=None, ancestors=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, parent=None, shared_scope=None, tags=None, version_context=None, device_mo_id=None, dn=None, rn=None, model=None, revision=None, serial=None, vendor=None, config_state=None, discovery=None, equipment_system_io_controller=None, mac_of_shared_iom_aside=None, mac_of_shared_iom_bside=None, oper_state=None, part_number=None, port_groups=None, reachability=None, registered_device=None, usr_lbl=None, vid=None):
        """
        EquipmentSharedIoModule - a model defined in Swagger
        """

        self._account_moid = None
        self._ancestors = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._parent = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._device_mo_id = None
        self._dn = None
        self._rn = None
        self._model = None
        self._revision = None
        self._serial = None
        self._vendor = None
        self._config_state = None
        self._discovery = None
        self._equipment_system_io_controller = None
        self._mac_of_shared_iom_aside = None
        self._mac_of_shared_iom_bside = None
        self._oper_state = None
        self._part_number = None
        self._port_groups = None
        self._reachability = None
        self._registered_device = None
        self._usr_lbl = None
        self._vid = None

        if account_moid is not None:
          self.account_moid = account_moid
        if ancestors is not None:
          self.ancestors = ancestors
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if parent is not None:
          self.parent = parent
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if device_mo_id is not None:
          self.device_mo_id = device_mo_id
        if dn is not None:
          self.dn = dn
        if rn is not None:
          self.rn = rn
        if model is not None:
          self.model = model
        if revision is not None:
          self.revision = revision
        if serial is not None:
          self.serial = serial
        if vendor is not None:
          self.vendor = vendor
        if config_state is not None:
          self.config_state = config_state
        if discovery is not None:
          self.discovery = discovery
        if equipment_system_io_controller is not None:
          self.equipment_system_io_controller = equipment_system_io_controller
        if mac_of_shared_iom_aside is not None:
          self.mac_of_shared_iom_aside = mac_of_shared_iom_aside
        if mac_of_shared_iom_bside is not None:
          self.mac_of_shared_iom_bside = mac_of_shared_iom_bside
        if oper_state is not None:
          self.oper_state = oper_state
        if part_number is not None:
          self.part_number = part_number
        if port_groups is not None:
          self.port_groups = port_groups
        if reachability is not None:
          self.reachability = reachability
        if registered_device is not None:
          self.registered_device = registered_device
        if usr_lbl is not None:
          self.usr_lbl = usr_lbl
        if vid is not None:
          self.vid = vid

    @property
    def account_moid(self):
        """
        Gets the account_moid of this EquipmentSharedIoModule.
        The Account ID for this managed object.  

        :return: The account_moid of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this EquipmentSharedIoModule.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this EquipmentSharedIoModule.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def ancestors(self):
        """
        Gets the ancestors of this EquipmentSharedIoModule.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this EquipmentSharedIoModule.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this EquipmentSharedIoModule.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this EquipmentSharedIoModule.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def create_time(self):
        """
        Gets the create_time of this EquipmentSharedIoModule.
        The time when this managed object was created.  

        :return: The create_time of this EquipmentSharedIoModule.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this EquipmentSharedIoModule.
        The time when this managed object was created.  

        :param create_time: The create_time of this EquipmentSharedIoModule.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this EquipmentSharedIoModule.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this EquipmentSharedIoModule.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this EquipmentSharedIoModule.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this EquipmentSharedIoModule.
        The time when this managed object was last modified.  

        :return: The mod_time of this EquipmentSharedIoModule.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this EquipmentSharedIoModule.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this EquipmentSharedIoModule.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this EquipmentSharedIoModule.
        The unique identifier of this Managed Object instance.  

        :return: The moid of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this EquipmentSharedIoModule.
        The unique identifier of this Managed Object instance.  

        :param moid: The moid of this EquipmentSharedIoModule.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this EquipmentSharedIoModule.
        The fully-qualified type of this managed object, e.g. the class name.  

        :return: The object_type of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this EquipmentSharedIoModule.
        The fully-qualified type of this managed object, e.g. the class name.  

        :param object_type: The object_type of this EquipmentSharedIoModule.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this EquipmentSharedIoModule.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this EquipmentSharedIoModule.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this EquipmentSharedIoModule.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this EquipmentSharedIoModule.
        :type: list[str]
        """

        self._owners = owners

    @property
    def parent(self):
        """
        Gets the parent of this EquipmentSharedIoModule.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this EquipmentSharedIoModule.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this EquipmentSharedIoModule.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this EquipmentSharedIoModule.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this EquipmentSharedIoModule.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this EquipmentSharedIoModule.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this EquipmentSharedIoModule.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this EquipmentSharedIoModule.
        The array of tags, which allow to add key, value meta-data to managed objects.  

        :return: The tags of this EquipmentSharedIoModule.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this EquipmentSharedIoModule.
        The array of tags, which allow to add key, value meta-data to managed objects.  

        :param tags: The tags of this EquipmentSharedIoModule.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this EquipmentSharedIoModule.
        The versioning info for this managed object.   

        :return: The version_context of this EquipmentSharedIoModule.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this EquipmentSharedIoModule.
        The versioning info for this managed object.   

        :param version_context: The version_context of this EquipmentSharedIoModule.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def device_mo_id(self):
        """
        Gets the device_mo_id of this EquipmentSharedIoModule.

        :return: The device_mo_id of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._device_mo_id

    @device_mo_id.setter
    def device_mo_id(self, device_mo_id):
        """
        Sets the device_mo_id of this EquipmentSharedIoModule.

        :param device_mo_id: The device_mo_id of this EquipmentSharedIoModule.
        :type: str
        """

        self._device_mo_id = device_mo_id

    @property
    def dn(self):
        """
        Gets the dn of this EquipmentSharedIoModule.

        :return: The dn of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """
        Sets the dn of this EquipmentSharedIoModule.

        :param dn: The dn of this EquipmentSharedIoModule.
        :type: str
        """

        self._dn = dn

    @property
    def rn(self):
        """
        Gets the rn of this EquipmentSharedIoModule.

        :return: The rn of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """
        Sets the rn of this EquipmentSharedIoModule.

        :param rn: The rn of this EquipmentSharedIoModule.
        :type: str
        """

        self._rn = rn

    @property
    def model(self):
        """
        Gets the model of this EquipmentSharedIoModule.
        This field identifies the model of the given component.  

        :return: The model of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this EquipmentSharedIoModule.
        This field identifies the model of the given component.  

        :param model: The model of this EquipmentSharedIoModule.
        :type: str
        """

        self._model = model

    @property
    def revision(self):
        """
        Gets the revision of this EquipmentSharedIoModule.

        :return: The revision of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this EquipmentSharedIoModule.

        :param revision: The revision of this EquipmentSharedIoModule.
        :type: str
        """

        self._revision = revision

    @property
    def serial(self):
        """
        Gets the serial of this EquipmentSharedIoModule.
        This field identifies the serial of the given component.  

        :return: The serial of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """
        Sets the serial of this EquipmentSharedIoModule.
        This field identifies the serial of the given component.  

        :param serial: The serial of this EquipmentSharedIoModule.
        :type: str
        """

        self._serial = serial

    @property
    def vendor(self):
        """
        Gets the vendor of this EquipmentSharedIoModule.
        This field identifies the vendor of the given component.   

        :return: The vendor of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """
        Sets the vendor of this EquipmentSharedIoModule.
        This field identifies the vendor of the given component.   

        :param vendor: The vendor of this EquipmentSharedIoModule.
        :type: str
        """

        self._vendor = vendor

    @property
    def config_state(self):
        """
        Gets the config_state of this EquipmentSharedIoModule.
        This field identifies the configuration state for this SIOM Unit.  

        :return: The config_state of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._config_state

    @config_state.setter
    def config_state(self, config_state):
        """
        Sets the config_state of this EquipmentSharedIoModule.
        This field identifies the configuration state for this SIOM Unit.  

        :param config_state: The config_state of this EquipmentSharedIoModule.
        :type: str
        """

        self._config_state = config_state

    @property
    def discovery(self):
        """
        Gets the discovery of this EquipmentSharedIoModule.
        This field identifies the discovery state of SIOM.   

        :return: The discovery of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._discovery

    @discovery.setter
    def discovery(self, discovery):
        """
        Sets the discovery of this EquipmentSharedIoModule.
        This field identifies the discovery state of SIOM.   

        :param discovery: The discovery of this EquipmentSharedIoModule.
        :type: str
        """

        self._discovery = discovery

    @property
    def equipment_system_io_controller(self):
        """
        Gets the equipment_system_io_controller of this EquipmentSharedIoModule.
        A collection of references to the [equipment.SystemIoController](mo://equipment.SystemIoController) Managed Object.  When this managed object is deleted, the referenced [equipment.SystemIoController](mo://equipment.SystemIoController) MO unsets its reference to this deleted MO. 

        :return: The equipment_system_io_controller of this EquipmentSharedIoModule.
        :rtype: EquipmentSystemIoControllerRef
        """
        return self._equipment_system_io_controller

    @equipment_system_io_controller.setter
    def equipment_system_io_controller(self, equipment_system_io_controller):
        """
        Sets the equipment_system_io_controller of this EquipmentSharedIoModule.
        A collection of references to the [equipment.SystemIoController](mo://equipment.SystemIoController) Managed Object.  When this managed object is deleted, the referenced [equipment.SystemIoController](mo://equipment.SystemIoController) MO unsets its reference to this deleted MO. 

        :param equipment_system_io_controller: The equipment_system_io_controller of this EquipmentSharedIoModule.
        :type: EquipmentSystemIoControllerRef
        """

        self._equipment_system_io_controller = equipment_system_io_controller

    @property
    def mac_of_shared_iom_aside(self):
        """
        Gets the mac_of_shared_iom_aside of this EquipmentSharedIoModule.
        This field identifies the MAC of IOM-A side.  

        :return: The mac_of_shared_iom_aside of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._mac_of_shared_iom_aside

    @mac_of_shared_iom_aside.setter
    def mac_of_shared_iom_aside(self, mac_of_shared_iom_aside):
        """
        Sets the mac_of_shared_iom_aside of this EquipmentSharedIoModule.
        This field identifies the MAC of IOM-A side.  

        :param mac_of_shared_iom_aside: The mac_of_shared_iom_aside of this EquipmentSharedIoModule.
        :type: str
        """

        self._mac_of_shared_iom_aside = mac_of_shared_iom_aside

    @property
    def mac_of_shared_iom_bside(self):
        """
        Gets the mac_of_shared_iom_bside of this EquipmentSharedIoModule.
        This field identifies the MAC of IOM-B side.  

        :return: The mac_of_shared_iom_bside of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._mac_of_shared_iom_bside

    @mac_of_shared_iom_bside.setter
    def mac_of_shared_iom_bside(self, mac_of_shared_iom_bside):
        """
        Sets the mac_of_shared_iom_bside of this EquipmentSharedIoModule.
        This field identifies the MAC of IOM-B side.  

        :param mac_of_shared_iom_bside: The mac_of_shared_iom_bside of this EquipmentSharedIoModule.
        :type: str
        """

        self._mac_of_shared_iom_bside = mac_of_shared_iom_bside

    @property
    def oper_state(self):
        """
        Gets the oper_state of this EquipmentSharedIoModule.
        This field identifies the SIOM operational state.  

        :return: The oper_state of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._oper_state

    @oper_state.setter
    def oper_state(self, oper_state):
        """
        Sets the oper_state of this EquipmentSharedIoModule.
        This field identifies the SIOM operational state.  

        :param oper_state: The oper_state of this EquipmentSharedIoModule.
        :type: str
        """

        self._oper_state = oper_state

    @property
    def part_number(self):
        """
        Gets the part_number of this EquipmentSharedIoModule.
        This field identifies the Part Number for this SIOM Unit.  

        :return: The part_number of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """
        Sets the part_number of this EquipmentSharedIoModule.
        This field identifies the Part Number for this SIOM Unit.  

        :param part_number: The part_number of this EquipmentSharedIoModule.
        :type: str
        """

        self._part_number = part_number

    @property
    def port_groups(self):
        """
        Gets the port_groups of this EquipmentSharedIoModule.

        :return: The port_groups of this EquipmentSharedIoModule.
        :rtype: list[PortGroupRef]
        """
        return self._port_groups

    @port_groups.setter
    def port_groups(self, port_groups):
        """
        Sets the port_groups of this EquipmentSharedIoModule.

        :param port_groups: The port_groups of this EquipmentSharedIoModule.
        :type: list[PortGroupRef]
        """

        self._port_groups = port_groups

    @property
    def reachability(self):
        """
        Gets the reachability of this EquipmentSharedIoModule.
        This field identifies the reachability to FI-A and B side.  

        :return: The reachability of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._reachability

    @reachability.setter
    def reachability(self, reachability):
        """
        Sets the reachability of this EquipmentSharedIoModule.
        This field identifies the reachability to FI-A and B side.  

        :param reachability: The reachability of this EquipmentSharedIoModule.
        :type: str
        """

        self._reachability = reachability

    @property
    def registered_device(self):
        """
        Gets the registered_device of this EquipmentSharedIoModule.
        The Device to which this Managed Object is associated. 

        :return: The registered_device of this EquipmentSharedIoModule.
        :rtype: AssetDeviceRegistrationRef
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """
        Sets the registered_device of this EquipmentSharedIoModule.
        The Device to which this Managed Object is associated. 

        :param registered_device: The registered_device of this EquipmentSharedIoModule.
        :type: AssetDeviceRegistrationRef
        """

        self._registered_device = registered_device

    @property
    def usr_lbl(self):
        """
        Gets the usr_lbl of this EquipmentSharedIoModule.
        User label configured for the SIOM.  

        :return: The usr_lbl of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._usr_lbl

    @usr_lbl.setter
    def usr_lbl(self, usr_lbl):
        """
        Sets the usr_lbl of this EquipmentSharedIoModule.
        User label configured for the SIOM.  

        :param usr_lbl: The usr_lbl of this EquipmentSharedIoModule.
        :type: str
        """

        self._usr_lbl = usr_lbl

    @property
    def vid(self):
        """
        Gets the vid of this EquipmentSharedIoModule.
        This field identifies the vendor id for this SIOM Unit.   

        :return: The vid of this EquipmentSharedIoModule.
        :rtype: str
        """
        return self._vid

    @vid.setter
    def vid(self, vid):
        """
        Sets the vid of this EquipmentSharedIoModule.
        This field identifies the vendor id for this SIOM Unit.   

        :param vid: The vid of this EquipmentSharedIoModule.
        :type: str
        """

        self._vid = vid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EquipmentSharedIoModule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
