# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class VnicRoceSettingsAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enabled': 'bool',
        'memory_regions': 'int',
        'queue_pairs': 'int',
        'resource_groups': 'int'
    }

    attribute_map = {
        'enabled': 'Enabled',
        'memory_regions': 'MemoryRegions',
        'queue_pairs': 'QueuePairs',
        'resource_groups': 'ResourceGroups'
    }

    def __init__(self,
                 enabled=None,
                 memory_regions=None,
                 queue_pairs=None,
                 resource_groups=None,
                 local_vars_configuration=None):  # noqa: E501
        """VnicRoceSettingsAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._enabled = None
        self._memory_regions = None
        self._queue_pairs = None
        self._resource_groups = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if memory_regions is not None:
            self.memory_regions = memory_regions
        if queue_pairs is not None:
            self.queue_pairs = queue_pairs
        if resource_groups is not None:
            self.resource_groups = resource_groups

    @property
    def enabled(self):
        """Gets the enabled of this VnicRoceSettingsAllOf.  # noqa: E501

        If enabled sets RDMA over Converged Ethernet (RoCE) on this virtual interface.    # noqa: E501

        :return: The enabled of this VnicRoceSettingsAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this VnicRoceSettingsAllOf.

        If enabled sets RDMA over Converged Ethernet (RoCE) on this virtual interface.    # noqa: E501

        :param enabled: The enabled of this VnicRoceSettingsAllOf.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def memory_regions(self):
        """Gets the memory_regions of this VnicRoceSettingsAllOf.  # noqa: E501

        The number of memory regions per adapter. Recommended value = integer power of 2.    # noqa: E501

        :return: The memory_regions of this VnicRoceSettingsAllOf.  # noqa: E501
        :rtype: int
        """
        return self._memory_regions

    @memory_regions.setter
    def memory_regions(self, memory_regions):
        """Sets the memory_regions of this VnicRoceSettingsAllOf.

        The number of memory regions per adapter. Recommended value = integer power of 2.    # noqa: E501

        :param memory_regions: The memory_regions of this VnicRoceSettingsAllOf.  # noqa: E501
        :type: int
        """

        self._memory_regions = memory_regions

    @property
    def queue_pairs(self):
        """Gets the queue_pairs of this VnicRoceSettingsAllOf.  # noqa: E501

        The number of queue pairs per adapter. Recommended value = integer power of 2.    # noqa: E501

        :return: The queue_pairs of this VnicRoceSettingsAllOf.  # noqa: E501
        :rtype: int
        """
        return self._queue_pairs

    @queue_pairs.setter
    def queue_pairs(self, queue_pairs):
        """Sets the queue_pairs of this VnicRoceSettingsAllOf.

        The number of queue pairs per adapter. Recommended value = integer power of 2.    # noqa: E501

        :param queue_pairs: The queue_pairs of this VnicRoceSettingsAllOf.  # noqa: E501
        :type: int
        """

        self._queue_pairs = queue_pairs

    @property
    def resource_groups(self):
        """Gets the resource_groups of this VnicRoceSettingsAllOf.  # noqa: E501

        The number of resource groups per adapter. Recommended value = be an integer power of 2 greater than or equal to the number of CPU cores on the system for optimum performance.      # noqa: E501

        :return: The resource_groups of this VnicRoceSettingsAllOf.  # noqa: E501
        :rtype: int
        """
        return self._resource_groups

    @resource_groups.setter
    def resource_groups(self, resource_groups):
        """Sets the resource_groups of this VnicRoceSettingsAllOf.

        The number of resource groups per adapter. Recommended value = be an integer power of 2 greater than or equal to the number of CPU cores on the system for optimum performance.      # noqa: E501

        :param resource_groups: The resource_groups of this VnicRoceSettingsAllOf.  # noqa: E501
        :type: int
        """

        self._resource_groups = resource_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VnicRoceSettingsAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VnicRoceSettingsAllOf):
            return True

        return self.to_dict() != other.to_dict()
