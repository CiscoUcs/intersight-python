# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ApplianceDeviceClaim(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'device_id': 'str',
        'hostname': 'str',
        'is_password_set': 'bool',
        'message': 'str',
        'password': 'str',
        'platform_type': 'str',
        'request_id': 'str',
        'security_token': 'str',
        'status': 'str',
        'username': 'str',
        'account': 'IamAccount'
    }

    attribute_map = {
        'device_id': 'DeviceId',
        'hostname': 'Hostname',
        'is_password_set': 'IsPasswordSet',
        'message': 'Message',
        'password': 'Password',
        'platform_type': 'PlatformType',
        'request_id': 'RequestId',
        'security_token': 'SecurityToken',
        'status': 'Status',
        'username': 'Username',
        'account': 'Account'
    }

    def __init__(self,
                 device_id=None,
                 hostname=None,
                 is_password_set=None,
                 message=None,
                 password=None,
                 platform_type='',
                 request_id=None,
                 security_token=None,
                 status='started',
                 username=None,
                 account=None,
                 local_vars_configuration=None):  # noqa: E501
        """ApplianceDeviceClaim - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._device_id = None
        self._hostname = None
        self._is_password_set = None
        self._message = None
        self._password = None
        self._platform_type = None
        self._request_id = None
        self._security_token = None
        self._status = None
        self._username = None
        self._account = None
        self.discriminator = None

        if device_id is not None:
            self.device_id = device_id
        if hostname is not None:
            self.hostname = hostname
        if is_password_set is not None:
            self.is_password_set = is_password_set
        if message is not None:
            self.message = message
        if password is not None:
            self.password = password
        if platform_type is not None:
            self.platform_type = platform_type
        if request_id is not None:
            self.request_id = request_id
        if security_token is not None:
            self.security_token = security_token
        if status is not None:
            self.status = status
        if username is not None:
            self.username = username
        if account is not None:
            self.account = account

    @property
    def device_id(self):
        """Gets the device_id of this ApplianceDeviceClaim.  # noqa: E501

        Device identifier of the endpoint device.    # noqa: E501

        :return: The device_id of this ApplianceDeviceClaim.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this ApplianceDeviceClaim.

        Device identifier of the endpoint device.    # noqa: E501

        :param device_id: The device_id of this ApplianceDeviceClaim.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def hostname(self):
        """Gets the hostname of this ApplianceDeviceClaim.  # noqa: E501

        Hostname or IP address of the endpoint device the user wants to claim.    # noqa: E501

        :return: The hostname of this ApplianceDeviceClaim.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ApplianceDeviceClaim.

        Hostname or IP address of the endpoint device the user wants to claim.    # noqa: E501

        :param hostname: The hostname of this ApplianceDeviceClaim.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def is_password_set(self):
        """Gets the is_password_set of this ApplianceDeviceClaim.  # noqa: E501


        :return: The is_password_set of this ApplianceDeviceClaim.  # noqa: E501
        :rtype: bool
        """
        return self._is_password_set

    @is_password_set.setter
    def is_password_set(self, is_password_set):
        """Sets the is_password_set of this ApplianceDeviceClaim.


        :param is_password_set: The is_password_set of this ApplianceDeviceClaim.  # noqa: E501
        :type: bool
        """

        self._is_password_set = is_password_set

    @property
    def message(self):
        """Gets the message of this ApplianceDeviceClaim.  # noqa: E501

        Message set by the device claim process.    # noqa: E501

        :return: The message of this ApplianceDeviceClaim.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ApplianceDeviceClaim.

        Message set by the device claim process.    # noqa: E501

        :param message: The message of this ApplianceDeviceClaim.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def password(self):
        """Gets the password of this ApplianceDeviceClaim.  # noqa: E501

        Password to be used to login to the endpoint device.    # noqa: E501

        :return: The password of this ApplianceDeviceClaim.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ApplianceDeviceClaim.

        Password to be used to login to the endpoint device.    # noqa: E501

        :param password: The password of this ApplianceDeviceClaim.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def platform_type(self):
        """Gets the platform_type of this ApplianceDeviceClaim.  # noqa: E501

        Platform type of the endpoint device.    # noqa: E501

        :return: The platform_type of this ApplianceDeviceClaim.  # noqa: E501
        :rtype: str
        """
        return self._platform_type

    @platform_type.setter
    def platform_type(self, platform_type):
        """Sets the platform_type of this ApplianceDeviceClaim.

        Platform type of the endpoint device.    # noqa: E501

        :param platform_type: The platform_type of this ApplianceDeviceClaim.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "", "APIC", "DCNM", "UCSFI", "IMC", "IMCM4", "IMCM5", "HX",
            "HXTriton", "UCSD", "IntersightAppliance", "PureStorage", "VMware",
            "ServiceEngine"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and platform_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `platform_type` ({0}), must be one of {1}"  # noqa: E501
                .format(platform_type, allowed_values))

        self._platform_type = platform_type

    @property
    def request_id(self):
        """Gets the request_id of this ApplianceDeviceClaim.  # noqa: E501

        User defined claim request identifier set by the UI. The RequestId field is not a mandatory. The Intersight Appliance will assign a unique value automatically if the field is not set.    # noqa: E501

        :return: The request_id of this ApplianceDeviceClaim.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ApplianceDeviceClaim.

        User defined claim request identifier set by the UI. The RequestId field is not a mandatory. The Intersight Appliance will assign a unique value automatically if the field is not set.    # noqa: E501

        :param request_id: The request_id of this ApplianceDeviceClaim.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def security_token(self):
        """Gets the security_token of this ApplianceDeviceClaim.  # noqa: E501

        Device security token of the endpoint device.    # noqa: E501

        :return: The security_token of this ApplianceDeviceClaim.  # noqa: E501
        :rtype: str
        """
        return self._security_token

    @security_token.setter
    def security_token(self, security_token):
        """Sets the security_token of this ApplianceDeviceClaim.

        Device security token of the endpoint device.    # noqa: E501

        :param security_token: The security_token of this ApplianceDeviceClaim.  # noqa: E501
        :type: str
        """

        self._security_token = security_token

    @property
    def status(self):
        """Gets the status of this ApplianceDeviceClaim.  # noqa: E501

        Status of the device claim process.    # noqa: E501

        :return: The status of this ApplianceDeviceClaim.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApplianceDeviceClaim.

        Status of the device claim process.    # noqa: E501

        :param status: The status of this ApplianceDeviceClaim.  # noqa: E501
        :type: str
        """
        allowed_values = ["started", "failed", "completed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values))

        self._status = status

    @property
    def username(self):
        """Gets the username of this ApplianceDeviceClaim.  # noqa: E501

        Username to log in to the endpoint device.     # noqa: E501

        :return: The username of this ApplianceDeviceClaim.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ApplianceDeviceClaim.

        Username to log in to the endpoint device.     # noqa: E501

        :param username: The username of this ApplianceDeviceClaim.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def account(self):
        """Gets the account of this ApplianceDeviceClaim.  # noqa: E501


        :return: The account of this ApplianceDeviceClaim.  # noqa: E501
        :rtype: IamAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ApplianceDeviceClaim.


        :param account: The account of this ApplianceDeviceClaim.  # noqa: E501
        :type: IamAccount
        """

        self._account = account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplianceDeviceClaim):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplianceDeviceClaim):
            return True

        return self.to_dict() != other.to_dict()
