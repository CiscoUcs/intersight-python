# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class AssetManagedDeviceAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'credential': 'CommCredential',
        'device_type': 'str',
        'ignore_cert': 'bool',
        'is_enabled': 'bool',
        'management_address': 'str',
        'port': 'int',
        'protocol': 'str',
        'status': 'AssetManagedDeviceStatus',
        'account': 'IamAccount',
        'device_connector_manager': 'AssetDeviceRegistration',
        'registered_device': 'AssetDeviceRegistration',
        'workflow_info': 'WorkflowWorkflowInfo'
    }

    attribute_map = {
        'credential': 'Credential',
        'device_type': 'DeviceType',
        'ignore_cert': 'IgnoreCert',
        'is_enabled': 'IsEnabled',
        'management_address': 'ManagementAddress',
        'port': 'Port',
        'protocol': 'Protocol',
        'status': 'Status',
        'account': 'Account',
        'device_connector_manager': 'DeviceConnectorManager',
        'registered_device': 'RegisteredDevice',
        'workflow_info': 'WorkflowInfo'
    }

    def __init__(self,
                 credential=None,
                 device_type='',
                 ignore_cert=None,
                 is_enabled=None,
                 management_address=None,
                 port=None,
                 protocol='https',
                 status=None,
                 account=None,
                 device_connector_manager=None,
                 registered_device=None,
                 workflow_info=None,
                 local_vars_configuration=None):  # noqa: E501
        """AssetManagedDeviceAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._credential = None
        self._device_type = None
        self._ignore_cert = None
        self._is_enabled = None
        self._management_address = None
        self._port = None
        self._protocol = None
        self._status = None
        self._account = None
        self._device_connector_manager = None
        self._registered_device = None
        self._workflow_info = None
        self.discriminator = None

        if credential is not None:
            self.credential = credential
        if device_type is not None:
            self.device_type = device_type
        if ignore_cert is not None:
            self.ignore_cert = ignore_cert
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if management_address is not None:
            self.management_address = management_address
        if port is not None:
            self.port = port
        if protocol is not None:
            self.protocol = protocol
        if status is not None:
            self.status = status
        if account is not None:
            self.account = account
        if device_connector_manager is not None:
            self.device_connector_manager = device_connector_manager
        if registered_device is not None:
            self.registered_device = registered_device
        if workflow_info is not None:
            self.workflow_info = workflow_info

    @property
    def credential(self):
        """Gets the credential of this AssetManagedDeviceAllOf.  # noqa: E501


        :return: The credential of this AssetManagedDeviceAllOf.  # noqa: E501
        :rtype: CommCredential
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this AssetManagedDeviceAllOf.


        :param credential: The credential of this AssetManagedDeviceAllOf.  # noqa: E501
        :type: CommCredential
        """

        self._credential = credential

    @property
    def device_type(self):
        """Gets the device_type of this AssetManagedDeviceAllOf.  # noqa: E501

        Type of the Device such as VMware, Pure Storage supported by Intersight Assist.    # noqa: E501

        :return: The device_type of this AssetManagedDeviceAllOf.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this AssetManagedDeviceAllOf.

        Type of the Device such as VMware, Pure Storage supported by Intersight Assist.    # noqa: E501

        :param device_type: The device_type of this AssetManagedDeviceAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "", "APIC", "DCNM", "UCSFI", "IMC", "IMCM4", "IMCM5", "HX",
            "HXTriton", "UCSD", "IntersightAppliance", "PureStorage", "VMware",
            "ServiceEngine"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and device_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"  # noqa: E501
                .format(device_type, allowed_values))

        self._device_type = device_type

    @property
    def ignore_cert(self):
        """Gets the ignore_cert of this AssetManagedDeviceAllOf.  # noqa: E501

        Ignore Certificates with protocol https for connecting to the Managed Device. It is not used for other protocols.    # noqa: E501

        :return: The ignore_cert of this AssetManagedDeviceAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_cert

    @ignore_cert.setter
    def ignore_cert(self, ignore_cert):
        """Sets the ignore_cert of this AssetManagedDeviceAllOf.

        Ignore Certificates with protocol https for connecting to the Managed Device. It is not used for other protocols.    # noqa: E501

        :param ignore_cert: The ignore_cert of this AssetManagedDeviceAllOf.  # noqa: E501
        :type: bool
        """

        self._ignore_cert = ignore_cert

    @property
    def is_enabled(self):
        """Gets the is_enabled of this AssetManagedDeviceAllOf.  # noqa: E501

        Device is Enabled/Disabled.    # noqa: E501

        :return: The is_enabled of this AssetManagedDeviceAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this AssetManagedDeviceAllOf.

        Device is Enabled/Disabled.    # noqa: E501

        :param is_enabled: The is_enabled of this AssetManagedDeviceAllOf.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def management_address(self):
        """Gets the management_address of this AssetManagedDeviceAllOf.  # noqa: E501

        Management address of the device. It can be IPv4, IPv6 or FQDN.    # noqa: E501

        :return: The management_address of this AssetManagedDeviceAllOf.  # noqa: E501
        :rtype: str
        """
        return self._management_address

    @management_address.setter
    def management_address(self, management_address):
        """Sets the management_address of this AssetManagedDeviceAllOf.

        Management address of the device. It can be IPv4, IPv6 or FQDN.    # noqa: E501

        :param management_address: The management_address of this AssetManagedDeviceAllOf.  # noqa: E501
        :type: str
        """

        self._management_address = management_address

    @property
    def port(self):
        """Gets the port of this AssetManagedDeviceAllOf.  # noqa: E501

        Port to use for connecting to the Managed Device. Port is optional. If not specified, default port for protocol is used.    # noqa: E501

        :return: The port of this AssetManagedDeviceAllOf.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this AssetManagedDeviceAllOf.

        Port to use for connecting to the Managed Device. Port is optional. If not specified, default port for protocol is used.    # noqa: E501

        :param port: The port of this AssetManagedDeviceAllOf.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this AssetManagedDeviceAllOf.  # noqa: E501

        Protocol to use for connecting to the Managed Device.    # noqa: E501

        :return: The protocol of this AssetManagedDeviceAllOf.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this AssetManagedDeviceAllOf.

        Protocol to use for connecting to the Managed Device.    # noqa: E501

        :param protocol: The protocol of this AssetManagedDeviceAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["https", "http"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and protocol not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values))

        self._protocol = protocol

    @property
    def status(self):
        """Gets the status of this AssetManagedDeviceAllOf.  # noqa: E501


        :return: The status of this AssetManagedDeviceAllOf.  # noqa: E501
        :rtype: AssetManagedDeviceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssetManagedDeviceAllOf.


        :param status: The status of this AssetManagedDeviceAllOf.  # noqa: E501
        :type: AssetManagedDeviceStatus
        """

        self._status = status

    @property
    def account(self):
        """Gets the account of this AssetManagedDeviceAllOf.  # noqa: E501


        :return: The account of this AssetManagedDeviceAllOf.  # noqa: E501
        :rtype: IamAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AssetManagedDeviceAllOf.


        :param account: The account of this AssetManagedDeviceAllOf.  # noqa: E501
        :type: IamAccount
        """

        self._account = account

    @property
    def device_connector_manager(self):
        """Gets the device_connector_manager of this AssetManagedDeviceAllOf.  # noqa: E501


        :return: The device_connector_manager of this AssetManagedDeviceAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._device_connector_manager

    @device_connector_manager.setter
    def device_connector_manager(self, device_connector_manager):
        """Sets the device_connector_manager of this AssetManagedDeviceAllOf.


        :param device_connector_manager: The device_connector_manager of this AssetManagedDeviceAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._device_connector_manager = device_connector_manager

    @property
    def registered_device(self):
        """Gets the registered_device of this AssetManagedDeviceAllOf.  # noqa: E501


        :return: The registered_device of this AssetManagedDeviceAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this AssetManagedDeviceAllOf.


        :param registered_device: The registered_device of this AssetManagedDeviceAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    @property
    def workflow_info(self):
        """Gets the workflow_info of this AssetManagedDeviceAllOf.  # noqa: E501


        :return: The workflow_info of this AssetManagedDeviceAllOf.  # noqa: E501
        :rtype: WorkflowWorkflowInfo
        """
        return self._workflow_info

    @workflow_info.setter
    def workflow_info(self, workflow_info):
        """Sets the workflow_info of this AssetManagedDeviceAllOf.


        :param workflow_info: The workflow_info of this AssetManagedDeviceAllOf.  # noqa: E501
        :type: WorkflowWorkflowInfo
        """

        self._workflow_info = workflow_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetManagedDeviceAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetManagedDeviceAllOf):
            return True

        return self.to_dict() != other.to_dict()
