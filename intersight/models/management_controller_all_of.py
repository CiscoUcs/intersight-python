# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ManagementControllerAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'model': 'str',
        'adapter_unit': 'AdapterUnit',
        'compute_blade': 'ComputeBlade',
        'compute_rack_unit': 'ComputeRackUnit',
        'management_interfaces': 'list[ManagementInterface]',
        'network_element': 'NetworkElement',
        'registered_device': 'AssetDeviceRegistration',
        'running_firmware': 'list[FirmwareRunningFirmware]',
        'storage_sas_expander': 'StorageSasExpander',
        'top_system': 'TopSystem'
    }

    attribute_map = {
        'model': 'Model',
        'adapter_unit': 'AdapterUnit',
        'compute_blade': 'ComputeBlade',
        'compute_rack_unit': 'ComputeRackUnit',
        'management_interfaces': 'ManagementInterfaces',
        'network_element': 'NetworkElement',
        'registered_device': 'RegisteredDevice',
        'running_firmware': 'RunningFirmware',
        'storage_sas_expander': 'StorageSasExpander',
        'top_system': 'TopSystem'
    }

    def __init__(self,
                 model=None,
                 adapter_unit=None,
                 compute_blade=None,
                 compute_rack_unit=None,
                 management_interfaces=None,
                 network_element=None,
                 registered_device=None,
                 running_firmware=None,
                 storage_sas_expander=None,
                 top_system=None,
                 local_vars_configuration=None):  # noqa: E501
        """ManagementControllerAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._model = None
        self._adapter_unit = None
        self._compute_blade = None
        self._compute_rack_unit = None
        self._management_interfaces = None
        self._network_element = None
        self._registered_device = None
        self._running_firmware = None
        self._storage_sas_expander = None
        self._top_system = None
        self.discriminator = None

        if model is not None:
            self.model = model
        if adapter_unit is not None:
            self.adapter_unit = adapter_unit
        if compute_blade is not None:
            self.compute_blade = compute_blade
        if compute_rack_unit is not None:
            self.compute_rack_unit = compute_rack_unit
        if management_interfaces is not None:
            self.management_interfaces = management_interfaces
        if network_element is not None:
            self.network_element = network_element
        if registered_device is not None:
            self.registered_device = registered_device
        if running_firmware is not None:
            self.running_firmware = running_firmware
        if storage_sas_expander is not None:
            self.storage_sas_expander = storage_sas_expander
        if top_system is not None:
            self.top_system = top_system

    @property
    def model(self):
        """Gets the model of this ManagementControllerAllOf.  # noqa: E501

        Model of the endpoint that houses the management controller.     # noqa: E501

        :return: The model of this ManagementControllerAllOf.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ManagementControllerAllOf.

        Model of the endpoint that houses the management controller.     # noqa: E501

        :param model: The model of this ManagementControllerAllOf.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def adapter_unit(self):
        """Gets the adapter_unit of this ManagementControllerAllOf.  # noqa: E501


        :return: The adapter_unit of this ManagementControllerAllOf.  # noqa: E501
        :rtype: AdapterUnit
        """
        return self._adapter_unit

    @adapter_unit.setter
    def adapter_unit(self, adapter_unit):
        """Sets the adapter_unit of this ManagementControllerAllOf.


        :param adapter_unit: The adapter_unit of this ManagementControllerAllOf.  # noqa: E501
        :type: AdapterUnit
        """

        self._adapter_unit = adapter_unit

    @property
    def compute_blade(self):
        """Gets the compute_blade of this ManagementControllerAllOf.  # noqa: E501


        :return: The compute_blade of this ManagementControllerAllOf.  # noqa: E501
        :rtype: ComputeBlade
        """
        return self._compute_blade

    @compute_blade.setter
    def compute_blade(self, compute_blade):
        """Sets the compute_blade of this ManagementControllerAllOf.


        :param compute_blade: The compute_blade of this ManagementControllerAllOf.  # noqa: E501
        :type: ComputeBlade
        """

        self._compute_blade = compute_blade

    @property
    def compute_rack_unit(self):
        """Gets the compute_rack_unit of this ManagementControllerAllOf.  # noqa: E501


        :return: The compute_rack_unit of this ManagementControllerAllOf.  # noqa: E501
        :rtype: ComputeRackUnit
        """
        return self._compute_rack_unit

    @compute_rack_unit.setter
    def compute_rack_unit(self, compute_rack_unit):
        """Sets the compute_rack_unit of this ManagementControllerAllOf.


        :param compute_rack_unit: The compute_rack_unit of this ManagementControllerAllOf.  # noqa: E501
        :type: ComputeRackUnit
        """

        self._compute_rack_unit = compute_rack_unit

    @property
    def management_interfaces(self):
        """Gets the management_interfaces of this ManagementControllerAllOf.  # noqa: E501

        A reference to a managementInterface resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The management_interfaces of this ManagementControllerAllOf.  # noqa: E501
        :rtype: list[ManagementInterface]
        """
        return self._management_interfaces

    @management_interfaces.setter
    def management_interfaces(self, management_interfaces):
        """Sets the management_interfaces of this ManagementControllerAllOf.

        A reference to a managementInterface resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param management_interfaces: The management_interfaces of this ManagementControllerAllOf.  # noqa: E501
        :type: list[ManagementInterface]
        """

        self._management_interfaces = management_interfaces

    @property
    def network_element(self):
        """Gets the network_element of this ManagementControllerAllOf.  # noqa: E501


        :return: The network_element of this ManagementControllerAllOf.  # noqa: E501
        :rtype: NetworkElement
        """
        return self._network_element

    @network_element.setter
    def network_element(self, network_element):
        """Sets the network_element of this ManagementControllerAllOf.


        :param network_element: The network_element of this ManagementControllerAllOf.  # noqa: E501
        :type: NetworkElement
        """

        self._network_element = network_element

    @property
    def registered_device(self):
        """Gets the registered_device of this ManagementControllerAllOf.  # noqa: E501


        :return: The registered_device of this ManagementControllerAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this ManagementControllerAllOf.


        :param registered_device: The registered_device of this ManagementControllerAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    @property
    def running_firmware(self):
        """Gets the running_firmware of this ManagementControllerAllOf.  # noqa: E501

        A reference to a firmwareRunningFirmware resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The running_firmware of this ManagementControllerAllOf.  # noqa: E501
        :rtype: list[FirmwareRunningFirmware]
        """
        return self._running_firmware

    @running_firmware.setter
    def running_firmware(self, running_firmware):
        """Sets the running_firmware of this ManagementControllerAllOf.

        A reference to a firmwareRunningFirmware resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param running_firmware: The running_firmware of this ManagementControllerAllOf.  # noqa: E501
        :type: list[FirmwareRunningFirmware]
        """

        self._running_firmware = running_firmware

    @property
    def storage_sas_expander(self):
        """Gets the storage_sas_expander of this ManagementControllerAllOf.  # noqa: E501


        :return: The storage_sas_expander of this ManagementControllerAllOf.  # noqa: E501
        :rtype: StorageSasExpander
        """
        return self._storage_sas_expander

    @storage_sas_expander.setter
    def storage_sas_expander(self, storage_sas_expander):
        """Sets the storage_sas_expander of this ManagementControllerAllOf.


        :param storage_sas_expander: The storage_sas_expander of this ManagementControllerAllOf.  # noqa: E501
        :type: StorageSasExpander
        """

        self._storage_sas_expander = storage_sas_expander

    @property
    def top_system(self):
        """Gets the top_system of this ManagementControllerAllOf.  # noqa: E501


        :return: The top_system of this ManagementControllerAllOf.  # noqa: E501
        :rtype: TopSystem
        """
        return self._top_system

    @top_system.setter
    def top_system(self, top_system):
        """Sets the top_system of this ManagementControllerAllOf.


        :param top_system: The top_system of this ManagementControllerAllOf.  # noqa: E501
        :type: TopSystem
        """

        self._top_system = top_system

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManagementControllerAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ManagementControllerAllOf):
            return True

        return self.to_dict() != other.to_dict()
