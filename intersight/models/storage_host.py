# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StorageHost(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'initiators': 'list[StorageInitiator]',
        'name': 'str',
        'os_type': 'str',
        'storage_array': 'StorageGenericArray'
    }

    attribute_map = {
        'description': 'Description',
        'initiators': 'Initiators',
        'name': 'Name',
        'os_type': 'OsType',
        'storage_array': 'StorageArray'
    }

    def __init__(self,
                 description=None,
                 initiators=None,
                 name=None,
                 os_type=None,
                 storage_array=None,
                 local_vars_configuration=None):  # noqa: E501
        """StorageHost - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._initiators = None
        self._name = None
        self._os_type = None
        self._storage_array = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if initiators is not None:
            self.initiators = initiators
        if name is not None:
            self.name = name
        if os_type is not None:
            self.os_type = os_type
        if storage_array is not None:
            self.storage_array = storage_array

    @property
    def description(self):
        """Gets the description of this StorageHost.  # noqa: E501

        Short description about the host.    # noqa: E501

        :return: The description of this StorageHost.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StorageHost.

        Short description about the host.    # noqa: E501

        :param description: The description of this StorageHost.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def initiators(self):
        """Gets the initiators of this StorageHost.  # noqa: E501


        :return: The initiators of this StorageHost.  # noqa: E501
        :rtype: list[StorageInitiator]
        """
        return self._initiators

    @initiators.setter
    def initiators(self, initiators):
        """Sets the initiators of this StorageHost.


        :param initiators: The initiators of this StorageHost.  # noqa: E501
        :type: list[StorageInitiator]
        """

        self._initiators = initiators

    @property
    def name(self):
        """Gets the name of this StorageHost.  # noqa: E501

        Name of the host in storage array.    # noqa: E501

        :return: The name of this StorageHost.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageHost.

        Name of the host in storage array.    # noqa: E501

        :param name: The name of this StorageHost.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def os_type(self):
        """Gets the os_type of this StorageHost.  # noqa: E501

        Operating system running on the host.     # noqa: E501

        :return: The os_type of this StorageHost.  # noqa: E501
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this StorageHost.

        Operating system running on the host.     # noqa: E501

        :param os_type: The os_type of this StorageHost.  # noqa: E501
        :type: str
        """

        self._os_type = os_type

    @property
    def storage_array(self):
        """Gets the storage_array of this StorageHost.  # noqa: E501


        :return: The storage_array of this StorageHost.  # noqa: E501
        :rtype: StorageGenericArray
        """
        return self._storage_array

    @storage_array.setter
    def storage_array(self, storage_array):
        """Sets the storage_array of this StorageHost.


        :param storage_array: The storage_array of this StorageHost.  # noqa: E501
        :type: StorageGenericArray
        """

        self._storage_array = storage_array

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageHost):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageHost):
            return True

        return self.to_dict() != other.to_dict()
