# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-961
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PciSwitch(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'ancestors': 'list[MoBaseMoRef]',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'parent': 'MoBaseMoRef',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'device_mo_id': 'str',
        'dn': 'str',
        'rn': 'str',
        'model': 'str',
        'revision': 'str',
        'serial': 'str',
        'vendor': 'str',
        'compute_board': 'ComputeBoardRef',
        'device_id': 'str',
        'health': 'str',
        'links': 'list[PciLinkRef]',
        'num_of_adaptors': 'str',
        'pci_address': 'str',
        'pci_slot': 'str',
        'product_name': 'str',
        'product_revision': 'str',
        'registered_device': 'AssetDeviceRegistrationRef',
        'sub_device_id': 'str',
        'sub_vendor_id': 'str',
        'temperature': 'str',
        'type': 'str',
        'vendor_id': 'str'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'ancestors': 'Ancestors',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'parent': 'Parent',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'device_mo_id': 'DeviceMoId',
        'dn': 'Dn',
        'rn': 'Rn',
        'model': 'Model',
        'revision': 'Revision',
        'serial': 'Serial',
        'vendor': 'Vendor',
        'compute_board': 'ComputeBoard',
        'device_id': 'DeviceId',
        'health': 'Health',
        'links': 'Links',
        'num_of_adaptors': 'NumOfAdaptors',
        'pci_address': 'PciAddress',
        'pci_slot': 'PciSlot',
        'product_name': 'ProductName',
        'product_revision': 'ProductRevision',
        'registered_device': 'RegisteredDevice',
        'sub_device_id': 'SubDeviceId',
        'sub_vendor_id': 'SubVendorId',
        'temperature': 'Temperature',
        'type': 'Type',
        'vendor_id': 'VendorId'
    }

    def __init__(self, account_moid=None, ancestors=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, parent=None, shared_scope=None, tags=None, version_context=None, device_mo_id=None, dn=None, rn=None, model=None, revision=None, serial=None, vendor=None, compute_board=None, device_id=None, health=None, links=None, num_of_adaptors=None, pci_address=None, pci_slot=None, product_name=None, product_revision=None, registered_device=None, sub_device_id=None, sub_vendor_id=None, temperature=None, type=None, vendor_id=None):
        """
        PciSwitch - a model defined in Swagger
        """

        self._account_moid = None
        self._ancestors = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._parent = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._device_mo_id = None
        self._dn = None
        self._rn = None
        self._model = None
        self._revision = None
        self._serial = None
        self._vendor = None
        self._compute_board = None
        self._device_id = None
        self._health = None
        self._links = None
        self._num_of_adaptors = None
        self._pci_address = None
        self._pci_slot = None
        self._product_name = None
        self._product_revision = None
        self._registered_device = None
        self._sub_device_id = None
        self._sub_vendor_id = None
        self._temperature = None
        self._type = None
        self._vendor_id = None

        if account_moid is not None:
          self.account_moid = account_moid
        if ancestors is not None:
          self.ancestors = ancestors
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if parent is not None:
          self.parent = parent
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if device_mo_id is not None:
          self.device_mo_id = device_mo_id
        if dn is not None:
          self.dn = dn
        if rn is not None:
          self.rn = rn
        if model is not None:
          self.model = model
        if revision is not None:
          self.revision = revision
        if serial is not None:
          self.serial = serial
        if vendor is not None:
          self.vendor = vendor
        if compute_board is not None:
          self.compute_board = compute_board
        if device_id is not None:
          self.device_id = device_id
        if health is not None:
          self.health = health
        if links is not None:
          self.links = links
        if num_of_adaptors is not None:
          self.num_of_adaptors = num_of_adaptors
        if pci_address is not None:
          self.pci_address = pci_address
        if pci_slot is not None:
          self.pci_slot = pci_slot
        if product_name is not None:
          self.product_name = product_name
        if product_revision is not None:
          self.product_revision = product_revision
        if registered_device is not None:
          self.registered_device = registered_device
        if sub_device_id is not None:
          self.sub_device_id = sub_device_id
        if sub_vendor_id is not None:
          self.sub_vendor_id = sub_vendor_id
        if temperature is not None:
          self.temperature = temperature
        if type is not None:
          self.type = type
        if vendor_id is not None:
          self.vendor_id = vendor_id

    @property
    def account_moid(self):
        """
        Gets the account_moid of this PciSwitch.
        The Account ID for this managed object.  

        :return: The account_moid of this PciSwitch.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this PciSwitch.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this PciSwitch.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def ancestors(self):
        """
        Gets the ancestors of this PciSwitch.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this PciSwitch.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this PciSwitch.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this PciSwitch.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def create_time(self):
        """
        Gets the create_time of this PciSwitch.
        The time when this managed object was created.  

        :return: The create_time of this PciSwitch.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this PciSwitch.
        The time when this managed object was created.  

        :param create_time: The create_time of this PciSwitch.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this PciSwitch.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this PciSwitch.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this PciSwitch.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this PciSwitch.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this PciSwitch.
        The time when this managed object was last modified.  

        :return: The mod_time of this PciSwitch.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this PciSwitch.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this PciSwitch.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this PciSwitch.
        The unique identifier of this Managed Object instance.  

        :return: The moid of this PciSwitch.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this PciSwitch.
        The unique identifier of this Managed Object instance.  

        :param moid: The moid of this PciSwitch.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this PciSwitch.
        The fully-qualified type of this managed object, e.g. the class name.  

        :return: The object_type of this PciSwitch.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this PciSwitch.
        The fully-qualified type of this managed object, e.g. the class name.  

        :param object_type: The object_type of this PciSwitch.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this PciSwitch.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this PciSwitch.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this PciSwitch.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this PciSwitch.
        :type: list[str]
        """

        self._owners = owners

    @property
    def parent(self):
        """
        Gets the parent of this PciSwitch.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this PciSwitch.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this PciSwitch.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this PciSwitch.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this PciSwitch.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this PciSwitch.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this PciSwitch.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this PciSwitch.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this PciSwitch.
        The array of tags, which allow to add key, value meta-data to managed objects.  

        :return: The tags of this PciSwitch.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this PciSwitch.
        The array of tags, which allow to add key, value meta-data to managed objects.  

        :param tags: The tags of this PciSwitch.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this PciSwitch.
        The versioning info for this managed object.   

        :return: The version_context of this PciSwitch.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this PciSwitch.
        The versioning info for this managed object.   

        :param version_context: The version_context of this PciSwitch.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def device_mo_id(self):
        """
        Gets the device_mo_id of this PciSwitch.

        :return: The device_mo_id of this PciSwitch.
        :rtype: str
        """
        return self._device_mo_id

    @device_mo_id.setter
    def device_mo_id(self, device_mo_id):
        """
        Sets the device_mo_id of this PciSwitch.

        :param device_mo_id: The device_mo_id of this PciSwitch.
        :type: str
        """

        self._device_mo_id = device_mo_id

    @property
    def dn(self):
        """
        Gets the dn of this PciSwitch.

        :return: The dn of this PciSwitch.
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """
        Sets the dn of this PciSwitch.

        :param dn: The dn of this PciSwitch.
        :type: str
        """

        self._dn = dn

    @property
    def rn(self):
        """
        Gets the rn of this PciSwitch.

        :return: The rn of this PciSwitch.
        :rtype: str
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """
        Sets the rn of this PciSwitch.

        :param rn: The rn of this PciSwitch.
        :type: str
        """

        self._rn = rn

    @property
    def model(self):
        """
        Gets the model of this PciSwitch.
        This field identifies the model of the given component.  

        :return: The model of this PciSwitch.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this PciSwitch.
        This field identifies the model of the given component.  

        :param model: The model of this PciSwitch.
        :type: str
        """

        self._model = model

    @property
    def revision(self):
        """
        Gets the revision of this PciSwitch.

        :return: The revision of this PciSwitch.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this PciSwitch.

        :param revision: The revision of this PciSwitch.
        :type: str
        """

        self._revision = revision

    @property
    def serial(self):
        """
        Gets the serial of this PciSwitch.
        This field identifies the serial of the given component.  

        :return: The serial of this PciSwitch.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """
        Sets the serial of this PciSwitch.
        This field identifies the serial of the given component.  

        :param serial: The serial of this PciSwitch.
        :type: str
        """

        self._serial = serial

    @property
    def vendor(self):
        """
        Gets the vendor of this PciSwitch.
        This field identifies the vendor of the given component.   

        :return: The vendor of this PciSwitch.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """
        Sets the vendor of this PciSwitch.
        This field identifies the vendor of the given component.   

        :param vendor: The vendor of this PciSwitch.
        :type: str
        """

        self._vendor = vendor

    @property
    def compute_board(self):
        """
        Gets the compute_board of this PciSwitch.
        A collection of references to the [compute.Board](mo://compute.Board) Managed Object.  When this managed object is deleted, the referenced [compute.Board](mo://compute.Board) MO unsets its reference to this deleted MO. 

        :return: The compute_board of this PciSwitch.
        :rtype: ComputeBoardRef
        """
        return self._compute_board

    @compute_board.setter
    def compute_board(self, compute_board):
        """
        Sets the compute_board of this PciSwitch.
        A collection of references to the [compute.Board](mo://compute.Board) Managed Object.  When this managed object is deleted, the referenced [compute.Board](mo://compute.Board) MO unsets its reference to this deleted MO. 

        :param compute_board: The compute_board of this PciSwitch.
        :type: ComputeBoardRef
        """

        self._compute_board = compute_board

    @property
    def device_id(self):
        """
        Gets the device_id of this PciSwitch.
        It shows the device id of the switch.  

        :return: The device_id of this PciSwitch.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """
        Sets the device_id of this PciSwitch.
        It shows the device id of the switch.  

        :param device_id: The device_id of this PciSwitch.
        :type: str
        """

        self._device_id = device_id

    @property
    def health(self):
        """
        Gets the health of this PciSwitch.
        It shows the composite health of the switch.  

        :return: The health of this PciSwitch.
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """
        Sets the health of this PciSwitch.
        It shows the composite health of the switch.  

        :param health: The health of this PciSwitch.
        :type: str
        """

        self._health = health

    @property
    def links(self):
        """
        Gets the links of this PciSwitch.
        It shows the number of gpus and pci adapters under each switch. 

        :return: The links of this PciSwitch.
        :rtype: list[PciLinkRef]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this PciSwitch.
        It shows the number of gpus and pci adapters under each switch. 

        :param links: The links of this PciSwitch.
        :type: list[PciLinkRef]
        """

        self._links = links

    @property
    def num_of_adaptors(self):
        """
        Gets the num_of_adaptors of this PciSwitch.
        It shows the number of gpus and pci adapters connected the switch.  

        :return: The num_of_adaptors of this PciSwitch.
        :rtype: str
        """
        return self._num_of_adaptors

    @num_of_adaptors.setter
    def num_of_adaptors(self, num_of_adaptors):
        """
        Sets the num_of_adaptors of this PciSwitch.
        It shows the number of gpus and pci adapters connected the switch.  

        :param num_of_adaptors: The num_of_adaptors of this PciSwitch.
        :type: str
        """

        self._num_of_adaptors = num_of_adaptors

    @property
    def pci_address(self):
        """
        Gets the pci_address of this PciSwitch.
        It shows shows the PCI address of switch.  

        :return: The pci_address of this PciSwitch.
        :rtype: str
        """
        return self._pci_address

    @pci_address.setter
    def pci_address(self, pci_address):
        """
        Sets the pci_address of this PciSwitch.
        It shows shows the PCI address of switch.  

        :param pci_address: The pci_address of this PciSwitch.
        :type: str
        """

        self._pci_address = pci_address

    @property
    def pci_slot(self):
        """
        Gets the pci_slot of this PciSwitch.
        It shows the PCI slot name for switch.  

        :return: The pci_slot of this PciSwitch.
        :rtype: str
        """
        return self._pci_slot

    @pci_slot.setter
    def pci_slot(self, pci_slot):
        """
        Sets the pci_slot of this PciSwitch.
        It shows the PCI slot name for switch.  

        :param pci_slot: The pci_slot of this PciSwitch.
        :type: str
        """

        self._pci_slot = pci_slot

    @property
    def product_name(self):
        """
        Gets the product_name of this PciSwitch.
        It shows the model information for the switch.  

        :return: The product_name of this PciSwitch.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """
        Sets the product_name of this PciSwitch.
        It shows the model information for the switch.  

        :param product_name: The product_name of this PciSwitch.
        :type: str
        """

        self._product_name = product_name

    @property
    def product_revision(self):
        """
        Gets the product_revision of this PciSwitch.
        It shows the revision for the product.  

        :return: The product_revision of this PciSwitch.
        :rtype: str
        """
        return self._product_revision

    @product_revision.setter
    def product_revision(self, product_revision):
        """
        Sets the product_revision of this PciSwitch.
        It shows the revision for the product.  

        :param product_revision: The product_revision of this PciSwitch.
        :type: str
        """

        self._product_revision = product_revision

    @property
    def registered_device(self):
        """
        Gets the registered_device of this PciSwitch.
        The Device to which this Managed Object is associated. 

        :return: The registered_device of this PciSwitch.
        :rtype: AssetDeviceRegistrationRef
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """
        Sets the registered_device of this PciSwitch.
        The Device to which this Managed Object is associated. 

        :param registered_device: The registered_device of this PciSwitch.
        :type: AssetDeviceRegistrationRef
        """

        self._registered_device = registered_device

    @property
    def sub_device_id(self):
        """
        Gets the sub_device_id of this PciSwitch.
        It shows the sub device id of the switch.  

        :return: The sub_device_id of this PciSwitch.
        :rtype: str
        """
        return self._sub_device_id

    @sub_device_id.setter
    def sub_device_id(self, sub_device_id):
        """
        Sets the sub_device_id of this PciSwitch.
        It shows the sub device id of the switch.  

        :param sub_device_id: The sub_device_id of this PciSwitch.
        :type: str
        """

        self._sub_device_id = sub_device_id

    @property
    def sub_vendor_id(self):
        """
        Gets the sub_vendor_id of this PciSwitch.
        It shows the sub vendor id of the switch.  

        :return: The sub_vendor_id of this PciSwitch.
        :rtype: str
        """
        return self._sub_vendor_id

    @sub_vendor_id.setter
    def sub_vendor_id(self, sub_vendor_id):
        """
        Sets the sub_vendor_id of this PciSwitch.
        It shows the sub vendor id of the switch.  

        :param sub_vendor_id: The sub_vendor_id of this PciSwitch.
        :type: str
        """

        self._sub_vendor_id = sub_vendor_id

    @property
    def temperature(self):
        """
        Gets the temperature of this PciSwitch.
        It shows the current temperature of the switch.  

        :return: The temperature of this PciSwitch.
        :rtype: str
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """
        Sets the temperature of this PciSwitch.
        It shows the current temperature of the switch.  

        :param temperature: The temperature of this PciSwitch.
        :type: str
        """

        self._temperature = temperature

    @property
    def type(self):
        """
        Gets the type of this PciSwitch.
        It shows the type inforamtion of switch.  

        :return: The type of this PciSwitch.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this PciSwitch.
        It shows the type inforamtion of switch.  

        :param type: The type of this PciSwitch.
        :type: str
        """

        self._type = type

    @property
    def vendor_id(self):
        """
        Gets the vendor_id of this PciSwitch.
        It shows the vendor id of the switch.   

        :return: The vendor_id of this PciSwitch.
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """
        Sets the vendor_id of this PciSwitch.
        It shows the vendor id of the switch.   

        :param vendor_id: The vendor_id of this PciSwitch.
        :type: str
        """

        self._vendor_id = vendor_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PciSwitch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
