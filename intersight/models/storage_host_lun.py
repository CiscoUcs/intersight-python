# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StorageHostLun(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'hlu': 'str',
        'host_name': 'str',
        'volume_name': 'str',
        'host': 'StorageHost',
        'storage_array': 'StorageGenericArray',
        'volume': 'StorageVolume'
    }

    attribute_map = {
        'hlu': 'Hlu',
        'host_name': 'HostName',
        'volume_name': 'VolumeName',
        'host': 'Host',
        'storage_array': 'StorageArray',
        'volume': 'Volume'
    }

    def __init__(self,
                 hlu=None,
                 host_name=None,
                 volume_name=None,
                 host=None,
                 storage_array=None,
                 volume=None,
                 local_vars_configuration=None):  # noqa: E501
        """StorageHostLun - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._hlu = None
        self._host_name = None
        self._volume_name = None
        self._host = None
        self._storage_array = None
        self._volume = None
        self.discriminator = None

        if hlu is not None:
            self.hlu = hlu
        if host_name is not None:
            self.host_name = host_name
        if volume_name is not None:
            self.volume_name = volume_name
        if host is not None:
            self.host = host
        if storage_array is not None:
            self.storage_array = storage_array
        if volume is not None:
            self.volume = volume

    @property
    def hlu(self):
        """Gets the hlu of this StorageHostLun.  # noqa: E501

        Logical unit number (LUN) by which hosts address specified volume.    # noqa: E501

        :return: The hlu of this StorageHostLun.  # noqa: E501
        :rtype: str
        """
        return self._hlu

    @hlu.setter
    def hlu(self, hlu):
        """Sets the hlu of this StorageHostLun.

        Logical unit number (LUN) by which hosts address specified volume.    # noqa: E501

        :param hlu: The hlu of this StorageHostLun.  # noqa: E501
        :type: str
        """

        self._hlu = hlu

    @property
    def host_name(self):
        """Gets the host_name of this StorageHostLun.  # noqa: E501

        Name of the host associated with LUN.    # noqa: E501

        :return: The host_name of this StorageHostLun.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this StorageHostLun.

        Name of the host associated with LUN.    # noqa: E501

        :param host_name: The host_name of this StorageHostLun.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def volume_name(self):
        """Gets the volume_name of this StorageHostLun.  # noqa: E501

        Name of the storage volume associated with LUN.     # noqa: E501

        :return: The volume_name of this StorageHostLun.  # noqa: E501
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """Sets the volume_name of this StorageHostLun.

        Name of the storage volume associated with LUN.     # noqa: E501

        :param volume_name: The volume_name of this StorageHostLun.  # noqa: E501
        :type: str
        """

        self._volume_name = volume_name

    @property
    def host(self):
        """Gets the host of this StorageHostLun.  # noqa: E501


        :return: The host of this StorageHostLun.  # noqa: E501
        :rtype: StorageHost
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this StorageHostLun.


        :param host: The host of this StorageHostLun.  # noqa: E501
        :type: StorageHost
        """

        self._host = host

    @property
    def storage_array(self):
        """Gets the storage_array of this StorageHostLun.  # noqa: E501


        :return: The storage_array of this StorageHostLun.  # noqa: E501
        :rtype: StorageGenericArray
        """
        return self._storage_array

    @storage_array.setter
    def storage_array(self, storage_array):
        """Sets the storage_array of this StorageHostLun.


        :param storage_array: The storage_array of this StorageHostLun.  # noqa: E501
        :type: StorageGenericArray
        """

        self._storage_array = storage_array

    @property
    def volume(self):
        """Gets the volume of this StorageHostLun.  # noqa: E501


        :return: The volume of this StorageHostLun.  # noqa: E501
        :rtype: StorageVolume
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this StorageHostLun.


        :param volume: The volume of this StorageHostLun.  # noqa: E501
        :type: StorageVolume
        """

        self._volume = volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageHostLun):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageHostLun):
            return True

        return self.to_dict() != other.to_dict()
