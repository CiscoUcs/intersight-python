# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class HyperflexClusterProfileAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data_ip_address': 'str',
        'hypervisor_type': 'str',
        'mac_address_prefix': 'str',
        'mgmt_ip_address': 'str',
        'mgmt_platform': 'str',
        'replication': 'int',
        'storage_data_vlan': 'HyperflexNamedVlan',
        'wwxn_prefix': 'str',
        'associated_cluster': 'HyperflexCluster',
        'auto_support': 'HyperflexAutoSupportPolicy',
        'cluster_network': 'HyperflexClusterNetworkPolicy',
        'cluster_storage': 'HyperflexClusterStoragePolicy',
        'config_result': 'HyperflexConfigResult',
        'ext_fc_storage': 'HyperflexExtFcStoragePolicy',
        'ext_iscsi_storage': 'HyperflexExtIscsiStoragePolicy',
        'local_credential': 'HyperflexLocalCredentialPolicy',
        'node_config': 'HyperflexNodeConfigPolicy',
        'node_profile_config': 'list[HyperflexNodeProfile]',
        'organization': 'OrganizationOrganization',
        'proxy_setting': 'HyperflexProxySettingPolicy',
        'running_workflows': 'list[WorkflowWorkflowInfo]',
        'software_version': 'HyperflexSoftwareVersionPolicy',
        'sys_config': 'HyperflexSysConfigPolicy',
        'ucsm_config': 'HyperflexUcsmConfigPolicy',
        'vcenter_config': 'HyperflexVcenterConfigPolicy'
    }

    attribute_map = {
        'data_ip_address': 'DataIpAddress',
        'hypervisor_type': 'HypervisorType',
        'mac_address_prefix': 'MacAddressPrefix',
        'mgmt_ip_address': 'MgmtIpAddress',
        'mgmt_platform': 'MgmtPlatform',
        'replication': 'Replication',
        'storage_data_vlan': 'StorageDataVlan',
        'wwxn_prefix': 'WwxnPrefix',
        'associated_cluster': 'AssociatedCluster',
        'auto_support': 'AutoSupport',
        'cluster_network': 'ClusterNetwork',
        'cluster_storage': 'ClusterStorage',
        'config_result': 'ConfigResult',
        'ext_fc_storage': 'ExtFcStorage',
        'ext_iscsi_storage': 'ExtIscsiStorage',
        'local_credential': 'LocalCredential',
        'node_config': 'NodeConfig',
        'node_profile_config': 'NodeProfileConfig',
        'organization': 'Organization',
        'proxy_setting': 'ProxySetting',
        'running_workflows': 'RunningWorkflows',
        'software_version': 'SoftwareVersion',
        'sys_config': 'SysConfig',
        'ucsm_config': 'UcsmConfig',
        'vcenter_config': 'VcenterConfig'
    }

    def __init__(self,
                 data_ip_address=None,
                 hypervisor_type='Unknown',
                 mac_address_prefix=None,
                 mgmt_ip_address=None,
                 mgmt_platform='FI',
                 replication=None,
                 storage_data_vlan=None,
                 wwxn_prefix=None,
                 associated_cluster=None,
                 auto_support=None,
                 cluster_network=None,
                 cluster_storage=None,
                 config_result=None,
                 ext_fc_storage=None,
                 ext_iscsi_storage=None,
                 local_credential=None,
                 node_config=None,
                 node_profile_config=None,
                 organization=None,
                 proxy_setting=None,
                 running_workflows=None,
                 software_version=None,
                 sys_config=None,
                 ucsm_config=None,
                 vcenter_config=None,
                 local_vars_configuration=None):  # noqa: E501
        """HyperflexClusterProfileAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._data_ip_address = None
        self._hypervisor_type = None
        self._mac_address_prefix = None
        self._mgmt_ip_address = None
        self._mgmt_platform = None
        self._replication = None
        self._storage_data_vlan = None
        self._wwxn_prefix = None
        self._associated_cluster = None
        self._auto_support = None
        self._cluster_network = None
        self._cluster_storage = None
        self._config_result = None
        self._ext_fc_storage = None
        self._ext_iscsi_storage = None
        self._local_credential = None
        self._node_config = None
        self._node_profile_config = None
        self._organization = None
        self._proxy_setting = None
        self._running_workflows = None
        self._software_version = None
        self._sys_config = None
        self._ucsm_config = None
        self._vcenter_config = None
        self.discriminator = None

        if data_ip_address is not None:
            self.data_ip_address = data_ip_address
        if hypervisor_type is not None:
            self.hypervisor_type = hypervisor_type
        if mac_address_prefix is not None:
            self.mac_address_prefix = mac_address_prefix
        if mgmt_ip_address is not None:
            self.mgmt_ip_address = mgmt_ip_address
        if mgmt_platform is not None:
            self.mgmt_platform = mgmt_platform
        if replication is not None:
            self.replication = replication
        if storage_data_vlan is not None:
            self.storage_data_vlan = storage_data_vlan
        if wwxn_prefix is not None:
            self.wwxn_prefix = wwxn_prefix
        if associated_cluster is not None:
            self.associated_cluster = associated_cluster
        if auto_support is not None:
            self.auto_support = auto_support
        if cluster_network is not None:
            self.cluster_network = cluster_network
        if cluster_storage is not None:
            self.cluster_storage = cluster_storage
        if config_result is not None:
            self.config_result = config_result
        if ext_fc_storage is not None:
            self.ext_fc_storage = ext_fc_storage
        if ext_iscsi_storage is not None:
            self.ext_iscsi_storage = ext_iscsi_storage
        if local_credential is not None:
            self.local_credential = local_credential
        if node_config is not None:
            self.node_config = node_config
        if node_profile_config is not None:
            self.node_profile_config = node_profile_config
        if organization is not None:
            self.organization = organization
        if proxy_setting is not None:
            self.proxy_setting = proxy_setting
        if running_workflows is not None:
            self.running_workflows = running_workflows
        if software_version is not None:
            self.software_version = software_version
        if sys_config is not None:
            self.sys_config = sys_config
        if ucsm_config is not None:
            self.ucsm_config = ucsm_config
        if vcenter_config is not None:
            self.vcenter_config = vcenter_config

    @property
    def data_ip_address(self):
        """Gets the data_ip_address of this HyperflexClusterProfileAllOf.  # noqa: E501

        The storage data IP address for the HyperFlex cluster.    # noqa: E501

        :return: The data_ip_address of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: str
        """
        return self._data_ip_address

    @data_ip_address.setter
    def data_ip_address(self, data_ip_address):
        """Sets the data_ip_address of this HyperflexClusterProfileAllOf.

        The storage data IP address for the HyperFlex cluster.    # noqa: E501

        :param data_ip_address: The data_ip_address of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: str
        """

        self._data_ip_address = data_ip_address

    @property
    def hypervisor_type(self):
        """Gets the hypervisor_type of this HyperflexClusterProfileAllOf.  # noqa: E501

        The hypervisor type for the HyperFlex cluster.    # noqa: E501

        :return: The hypervisor_type of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: str
        """
        return self._hypervisor_type

    @hypervisor_type.setter
    def hypervisor_type(self, hypervisor_type):
        """Sets the hypervisor_type of this HyperflexClusterProfileAllOf.

        The hypervisor type for the HyperFlex cluster.    # noqa: E501

        :param hypervisor_type: The hypervisor_type of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Hyper-V", "ESXi"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and hypervisor_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `hypervisor_type` ({0}), must be one of {1}"  # noqa: E501
                .format(hypervisor_type, allowed_values))

        self._hypervisor_type = hypervisor_type

    @property
    def mac_address_prefix(self):
        """Gets the mac_address_prefix of this HyperflexClusterProfileAllOf.  # noqa: E501

        The MAC address prefix in the form of 00:25:B5:XX.    # noqa: E501

        :return: The mac_address_prefix of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: str
        """
        return self._mac_address_prefix

    @mac_address_prefix.setter
    def mac_address_prefix(self, mac_address_prefix):
        """Sets the mac_address_prefix of this HyperflexClusterProfileAllOf.

        The MAC address prefix in the form of 00:25:B5:XX.    # noqa: E501

        :param mac_address_prefix: The mac_address_prefix of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: str
        """

        self._mac_address_prefix = mac_address_prefix

    @property
    def mgmt_ip_address(self):
        """Gets the mgmt_ip_address of this HyperflexClusterProfileAllOf.  # noqa: E501

        The management IP address for the HyperFlex cluster.    # noqa: E501

        :return: The mgmt_ip_address of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: str
        """
        return self._mgmt_ip_address

    @mgmt_ip_address.setter
    def mgmt_ip_address(self, mgmt_ip_address):
        """Sets the mgmt_ip_address of this HyperflexClusterProfileAllOf.

        The management IP address for the HyperFlex cluster.    # noqa: E501

        :param mgmt_ip_address: The mgmt_ip_address of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: str
        """

        self._mgmt_ip_address = mgmt_ip_address

    @property
    def mgmt_platform(self):
        """Gets the mgmt_platform of this HyperflexClusterProfileAllOf.  # noqa: E501

        The management platform for the HyperFlex cluster.    # noqa: E501

        :return: The mgmt_platform of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: str
        """
        return self._mgmt_platform

    @mgmt_platform.setter
    def mgmt_platform(self, mgmt_platform):
        """Sets the mgmt_platform of this HyperflexClusterProfileAllOf.

        The management platform for the HyperFlex cluster.    # noqa: E501

        :param mgmt_platform: The mgmt_platform of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["FI", "EDGE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and mgmt_platform not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `mgmt_platform` ({0}), must be one of {1}"  # noqa: E501
                .format(mgmt_platform, allowed_values))

        self._mgmt_platform = mgmt_platform

    @property
    def replication(self):
        """Gets the replication of this HyperflexClusterProfileAllOf.  # noqa: E501

        The number of copies of each data block written.    # noqa: E501

        :return: The replication of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: int
        """
        return self._replication

    @replication.setter
    def replication(self, replication):
        """Sets the replication of this HyperflexClusterProfileAllOf.

        The number of copies of each data block written.    # noqa: E501

        :param replication: The replication of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: int
        """

        self._replication = replication

    @property
    def storage_data_vlan(self):
        """Gets the storage_data_vlan of this HyperflexClusterProfileAllOf.  # noqa: E501


        :return: The storage_data_vlan of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: HyperflexNamedVlan
        """
        return self._storage_data_vlan

    @storage_data_vlan.setter
    def storage_data_vlan(self, storage_data_vlan):
        """Sets the storage_data_vlan of this HyperflexClusterProfileAllOf.


        :param storage_data_vlan: The storage_data_vlan of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: HyperflexNamedVlan
        """

        self._storage_data_vlan = storage_data_vlan

    @property
    def wwxn_prefix(self):
        """Gets the wwxn_prefix of this HyperflexClusterProfileAllOf.  # noqa: E501

        The WWxN prefix in the form of 20:00:00:25:B5:XX.     # noqa: E501

        :return: The wwxn_prefix of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: str
        """
        return self._wwxn_prefix

    @wwxn_prefix.setter
    def wwxn_prefix(self, wwxn_prefix):
        """Sets the wwxn_prefix of this HyperflexClusterProfileAllOf.

        The WWxN prefix in the form of 20:00:00:25:B5:XX.     # noqa: E501

        :param wwxn_prefix: The wwxn_prefix of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: str
        """

        self._wwxn_prefix = wwxn_prefix

    @property
    def associated_cluster(self):
        """Gets the associated_cluster of this HyperflexClusterProfileAllOf.  # noqa: E501


        :return: The associated_cluster of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: HyperflexCluster
        """
        return self._associated_cluster

    @associated_cluster.setter
    def associated_cluster(self, associated_cluster):
        """Sets the associated_cluster of this HyperflexClusterProfileAllOf.


        :param associated_cluster: The associated_cluster of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: HyperflexCluster
        """

        self._associated_cluster = associated_cluster

    @property
    def auto_support(self):
        """Gets the auto_support of this HyperflexClusterProfileAllOf.  # noqa: E501


        :return: The auto_support of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: HyperflexAutoSupportPolicy
        """
        return self._auto_support

    @auto_support.setter
    def auto_support(self, auto_support):
        """Sets the auto_support of this HyperflexClusterProfileAllOf.


        :param auto_support: The auto_support of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: HyperflexAutoSupportPolicy
        """

        self._auto_support = auto_support

    @property
    def cluster_network(self):
        """Gets the cluster_network of this HyperflexClusterProfileAllOf.  # noqa: E501


        :return: The cluster_network of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: HyperflexClusterNetworkPolicy
        """
        return self._cluster_network

    @cluster_network.setter
    def cluster_network(self, cluster_network):
        """Sets the cluster_network of this HyperflexClusterProfileAllOf.


        :param cluster_network: The cluster_network of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: HyperflexClusterNetworkPolicy
        """

        self._cluster_network = cluster_network

    @property
    def cluster_storage(self):
        """Gets the cluster_storage of this HyperflexClusterProfileAllOf.  # noqa: E501


        :return: The cluster_storage of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: HyperflexClusterStoragePolicy
        """
        return self._cluster_storage

    @cluster_storage.setter
    def cluster_storage(self, cluster_storage):
        """Sets the cluster_storage of this HyperflexClusterProfileAllOf.


        :param cluster_storage: The cluster_storage of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: HyperflexClusterStoragePolicy
        """

        self._cluster_storage = cluster_storage

    @property
    def config_result(self):
        """Gets the config_result of this HyperflexClusterProfileAllOf.  # noqa: E501


        :return: The config_result of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: HyperflexConfigResult
        """
        return self._config_result

    @config_result.setter
    def config_result(self, config_result):
        """Sets the config_result of this HyperflexClusterProfileAllOf.


        :param config_result: The config_result of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: HyperflexConfigResult
        """

        self._config_result = config_result

    @property
    def ext_fc_storage(self):
        """Gets the ext_fc_storage of this HyperflexClusterProfileAllOf.  # noqa: E501


        :return: The ext_fc_storage of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: HyperflexExtFcStoragePolicy
        """
        return self._ext_fc_storage

    @ext_fc_storage.setter
    def ext_fc_storage(self, ext_fc_storage):
        """Sets the ext_fc_storage of this HyperflexClusterProfileAllOf.


        :param ext_fc_storage: The ext_fc_storage of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: HyperflexExtFcStoragePolicy
        """

        self._ext_fc_storage = ext_fc_storage

    @property
    def ext_iscsi_storage(self):
        """Gets the ext_iscsi_storage of this HyperflexClusterProfileAllOf.  # noqa: E501


        :return: The ext_iscsi_storage of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: HyperflexExtIscsiStoragePolicy
        """
        return self._ext_iscsi_storage

    @ext_iscsi_storage.setter
    def ext_iscsi_storage(self, ext_iscsi_storage):
        """Sets the ext_iscsi_storage of this HyperflexClusterProfileAllOf.


        :param ext_iscsi_storage: The ext_iscsi_storage of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: HyperflexExtIscsiStoragePolicy
        """

        self._ext_iscsi_storage = ext_iscsi_storage

    @property
    def local_credential(self):
        """Gets the local_credential of this HyperflexClusterProfileAllOf.  # noqa: E501


        :return: The local_credential of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: HyperflexLocalCredentialPolicy
        """
        return self._local_credential

    @local_credential.setter
    def local_credential(self, local_credential):
        """Sets the local_credential of this HyperflexClusterProfileAllOf.


        :param local_credential: The local_credential of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: HyperflexLocalCredentialPolicy
        """

        self._local_credential = local_credential

    @property
    def node_config(self):
        """Gets the node_config of this HyperflexClusterProfileAllOf.  # noqa: E501


        :return: The node_config of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: HyperflexNodeConfigPolicy
        """
        return self._node_config

    @node_config.setter
    def node_config(self, node_config):
        """Sets the node_config of this HyperflexClusterProfileAllOf.


        :param node_config: The node_config of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: HyperflexNodeConfigPolicy
        """

        self._node_config = node_config

    @property
    def node_profile_config(self):
        """Gets the node_profile_config of this HyperflexClusterProfileAllOf.  # noqa: E501

        A reference to a hyperflexNodeProfile resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of node profiles representing the configuraion of the corresponding HX cluster nodes.   # noqa: E501

        :return: The node_profile_config of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: list[HyperflexNodeProfile]
        """
        return self._node_profile_config

    @node_profile_config.setter
    def node_profile_config(self, node_profile_config):
        """Sets the node_profile_config of this HyperflexClusterProfileAllOf.

        A reference to a hyperflexNodeProfile resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of node profiles representing the configuraion of the corresponding HX cluster nodes.   # noqa: E501

        :param node_profile_config: The node_profile_config of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: list[HyperflexNodeProfile]
        """

        self._node_profile_config = node_profile_config

    @property
    def organization(self):
        """Gets the organization of this HyperflexClusterProfileAllOf.  # noqa: E501


        :return: The organization of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: OrganizationOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this HyperflexClusterProfileAllOf.


        :param organization: The organization of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: OrganizationOrganization
        """

        self._organization = organization

    @property
    def proxy_setting(self):
        """Gets the proxy_setting of this HyperflexClusterProfileAllOf.  # noqa: E501


        :return: The proxy_setting of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: HyperflexProxySettingPolicy
        """
        return self._proxy_setting

    @proxy_setting.setter
    def proxy_setting(self, proxy_setting):
        """Sets the proxy_setting of this HyperflexClusterProfileAllOf.


        :param proxy_setting: The proxy_setting of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: HyperflexProxySettingPolicy
        """

        self._proxy_setting = proxy_setting

    @property
    def running_workflows(self):
        """Gets the running_workflows of this HyperflexClusterProfileAllOf.  # noqa: E501

        A reference to a workflowWorkflowInfo resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of workflows that are currently running for this cluster profile.   # noqa: E501

        :return: The running_workflows of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: list[WorkflowWorkflowInfo]
        """
        return self._running_workflows

    @running_workflows.setter
    def running_workflows(self, running_workflows):
        """Sets the running_workflows of this HyperflexClusterProfileAllOf.

        A reference to a workflowWorkflowInfo resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of workflows that are currently running for this cluster profile.   # noqa: E501

        :param running_workflows: The running_workflows of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: list[WorkflowWorkflowInfo]
        """

        self._running_workflows = running_workflows

    @property
    def software_version(self):
        """Gets the software_version of this HyperflexClusterProfileAllOf.  # noqa: E501


        :return: The software_version of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: HyperflexSoftwareVersionPolicy
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this HyperflexClusterProfileAllOf.


        :param software_version: The software_version of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: HyperflexSoftwareVersionPolicy
        """

        self._software_version = software_version

    @property
    def sys_config(self):
        """Gets the sys_config of this HyperflexClusterProfileAllOf.  # noqa: E501


        :return: The sys_config of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: HyperflexSysConfigPolicy
        """
        return self._sys_config

    @sys_config.setter
    def sys_config(self, sys_config):
        """Sets the sys_config of this HyperflexClusterProfileAllOf.


        :param sys_config: The sys_config of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: HyperflexSysConfigPolicy
        """

        self._sys_config = sys_config

    @property
    def ucsm_config(self):
        """Gets the ucsm_config of this HyperflexClusterProfileAllOf.  # noqa: E501


        :return: The ucsm_config of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: HyperflexUcsmConfigPolicy
        """
        return self._ucsm_config

    @ucsm_config.setter
    def ucsm_config(self, ucsm_config):
        """Sets the ucsm_config of this HyperflexClusterProfileAllOf.


        :param ucsm_config: The ucsm_config of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: HyperflexUcsmConfigPolicy
        """

        self._ucsm_config = ucsm_config

    @property
    def vcenter_config(self):
        """Gets the vcenter_config of this HyperflexClusterProfileAllOf.  # noqa: E501


        :return: The vcenter_config of this HyperflexClusterProfileAllOf.  # noqa: E501
        :rtype: HyperflexVcenterConfigPolicy
        """
        return self._vcenter_config

    @vcenter_config.setter
    def vcenter_config(self, vcenter_config):
        """Sets the vcenter_config of this HyperflexClusterProfileAllOf.


        :param vcenter_config: The vcenter_config of this HyperflexClusterProfileAllOf.  # noqa: E501
        :type: HyperflexVcenterConfigPolicy
        """

        self._vcenter_config = vcenter_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HyperflexClusterProfileAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HyperflexClusterProfileAllOf):
            return True

        return self.to_dict() != other.to_dict()
