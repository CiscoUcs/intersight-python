# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class VnicFcQosPolicyAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cos': 'int',
        'max_data_field_size': 'int',
        'rate_limit': 'int',
        'organization': 'OrganizationOrganization'
    }

    attribute_map = {
        'cos': 'Cos',
        'max_data_field_size': 'MaxDataFieldSize',
        'rate_limit': 'RateLimit',
        'organization': 'Organization'
    }

    def __init__(self,
                 cos=None,
                 max_data_field_size=None,
                 rate_limit=None,
                 organization=None,
                 local_vars_configuration=None):  # noqa: E501
        """VnicFcQosPolicyAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cos = None
        self._max_data_field_size = None
        self._rate_limit = None
        self._organization = None
        self.discriminator = None

        if cos is not None:
            self.cos = cos
        if max_data_field_size is not None:
            self.max_data_field_size = max_data_field_size
        if rate_limit is not None:
            self.rate_limit = rate_limit
        if organization is not None:
            self.organization = organization

    @property
    def cos(self):
        """Gets the cos of this VnicFcQosPolicyAllOf.  # noqa: E501

        Class of Service to be associated to the traffic on the virtual interface.    # noqa: E501

        :return: The cos of this VnicFcQosPolicyAllOf.  # noqa: E501
        :rtype: int
        """
        return self._cos

    @cos.setter
    def cos(self, cos):
        """Sets the cos of this VnicFcQosPolicyAllOf.

        Class of Service to be associated to the traffic on the virtual interface.    # noqa: E501

        :param cos: The cos of this VnicFcQosPolicyAllOf.  # noqa: E501
        :type: int
        """

        self._cos = cos

    @property
    def max_data_field_size(self):
        """Gets the max_data_field_size of this VnicFcQosPolicyAllOf.  # noqa: E501

        The maximum size of the Fibre Channel frame payload bytes that the virtual interface supports.    # noqa: E501

        :return: The max_data_field_size of this VnicFcQosPolicyAllOf.  # noqa: E501
        :rtype: int
        """
        return self._max_data_field_size

    @max_data_field_size.setter
    def max_data_field_size(self, max_data_field_size):
        """Sets the max_data_field_size of this VnicFcQosPolicyAllOf.

        The maximum size of the Fibre Channel frame payload bytes that the virtual interface supports.    # noqa: E501

        :param max_data_field_size: The max_data_field_size of this VnicFcQosPolicyAllOf.  # noqa: E501
        :type: int
        """

        self._max_data_field_size = max_data_field_size

    @property
    def rate_limit(self):
        """Gets the rate_limit of this VnicFcQosPolicyAllOf.  # noqa: E501

        The value in Mbps to use for limiting the data rate on the virtual interface. Setting this to zero will turn rate limiting off.     # noqa: E501

        :return: The rate_limit of this VnicFcQosPolicyAllOf.  # noqa: E501
        :rtype: int
        """
        return self._rate_limit

    @rate_limit.setter
    def rate_limit(self, rate_limit):
        """Sets the rate_limit of this VnicFcQosPolicyAllOf.

        The value in Mbps to use for limiting the data rate on the virtual interface. Setting this to zero will turn rate limiting off.     # noqa: E501

        :param rate_limit: The rate_limit of this VnicFcQosPolicyAllOf.  # noqa: E501
        :type: int
        """

        self._rate_limit = rate_limit

    @property
    def organization(self):
        """Gets the organization of this VnicFcQosPolicyAllOf.  # noqa: E501


        :return: The organization of this VnicFcQosPolicyAllOf.  # noqa: E501
        :rtype: OrganizationOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this VnicFcQosPolicyAllOf.


        :param organization: The organization of this VnicFcQosPolicyAllOf.  # noqa: E501
        :type: OrganizationOrganization
        """

        self._organization = organization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VnicFcQosPolicyAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VnicFcQosPolicyAllOf):
            return True

        return self.to_dict() != other.to_dict()
