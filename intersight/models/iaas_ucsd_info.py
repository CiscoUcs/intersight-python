# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class IaasUcsdInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'device_id': 'str',
        'guid': 'str',
        'host_name': 'str',
        'ip': 'str',
        'last_backup': 'datetime',
        'node_type': 'str',
        'product_name': 'str',
        'product_vendor': 'str',
        'product_version': 'str',
        'status': 'str',
        'connector_pack': 'list[IaasConnectorPack]',
        'device_status': 'list[IaasDeviceStatus]',
        'license_info': 'IaasLicenseInfo',
        'most_run_tasks': 'list[IaasMostRunTasks]',
        'registered_device': 'AssetDeviceRegistration',
        'ucsd_managed_infra': 'IaasUcsdManagedInfra'
    }

    attribute_map = {
        'device_id': 'DeviceId',
        'guid': 'Guid',
        'host_name': 'HostName',
        'ip': 'Ip',
        'last_backup': 'LastBackup',
        'node_type': 'NodeType',
        'product_name': 'ProductName',
        'product_vendor': 'ProductVendor',
        'product_version': 'ProductVersion',
        'status': 'Status',
        'connector_pack': 'ConnectorPack',
        'device_status': 'DeviceStatus',
        'license_info': 'LicenseInfo',
        'most_run_tasks': 'MostRunTasks',
        'registered_device': 'RegisteredDevice',
        'ucsd_managed_infra': 'UcsdManagedInfra'
    }

    def __init__(self,
                 device_id=None,
                 guid=None,
                 host_name=None,
                 ip=None,
                 last_backup=None,
                 node_type=None,
                 product_name=None,
                 product_vendor=None,
                 product_version=None,
                 status=None,
                 connector_pack=None,
                 device_status=None,
                 license_info=None,
                 most_run_tasks=None,
                 registered_device=None,
                 ucsd_managed_infra=None,
                 local_vars_configuration=None):  # noqa: E501
        """IaasUcsdInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._device_id = None
        self._guid = None
        self._host_name = None
        self._ip = None
        self._last_backup = None
        self._node_type = None
        self._product_name = None
        self._product_vendor = None
        self._product_version = None
        self._status = None
        self._connector_pack = None
        self._device_status = None
        self._license_info = None
        self._most_run_tasks = None
        self._registered_device = None
        self._ucsd_managed_infra = None
        self.discriminator = None

        if device_id is not None:
            self.device_id = device_id
        if guid is not None:
            self.guid = guid
        if host_name is not None:
            self.host_name = host_name
        if ip is not None:
            self.ip = ip
        if last_backup is not None:
            self.last_backup = last_backup
        if node_type is not None:
            self.node_type = node_type
        if product_name is not None:
            self.product_name = product_name
        if product_vendor is not None:
            self.product_vendor = product_vendor
        if product_version is not None:
            self.product_version = product_version
        if status is not None:
            self.status = status
        if connector_pack is not None:
            self.connector_pack = connector_pack
        if device_status is not None:
            self.device_status = device_status
        if license_info is not None:
            self.license_info = license_info
        if most_run_tasks is not None:
            self.most_run_tasks = most_run_tasks
        if registered_device is not None:
            self.registered_device = registered_device
        if ucsd_managed_infra is not None:
            self.ucsd_managed_infra = ucsd_managed_infra

    @property
    def device_id(self):
        """Gets the device_id of this IaasUcsdInfo.  # noqa: E501

        Moid of the UCSD device connector's asset.DeviceRegistration.    # noqa: E501

        :return: The device_id of this IaasUcsdInfo.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this IaasUcsdInfo.

        Moid of the UCSD device connector's asset.DeviceRegistration.    # noqa: E501

        :param device_id: The device_id of this IaasUcsdInfo.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def guid(self):
        """Gets the guid of this IaasUcsdInfo.  # noqa: E501

        Unique ID of UCSD getting registerd with Intersight.    # noqa: E501

        :return: The guid of this IaasUcsdInfo.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this IaasUcsdInfo.

        Unique ID of UCSD getting registerd with Intersight.    # noqa: E501

        :param guid: The guid of this IaasUcsdInfo.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def host_name(self):
        """Gets the host_name of this IaasUcsdInfo.  # noqa: E501

        The UCSD host name.    # noqa: E501

        :return: The host_name of this IaasUcsdInfo.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this IaasUcsdInfo.

        The UCSD host name.    # noqa: E501

        :param host_name: The host_name of this IaasUcsdInfo.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def ip(self):
        """Gets the ip of this IaasUcsdInfo.  # noqa: E501

        The UCSD IP address.    # noqa: E501

        :return: The ip of this IaasUcsdInfo.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this IaasUcsdInfo.

        The UCSD IP address.    # noqa: E501

        :param ip: The ip of this IaasUcsdInfo.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def last_backup(self):
        """Gets the last_backup of this IaasUcsdInfo.  # noqa: E501

        Last successful backup created for this UCS Director appliance if backup is configured.    # noqa: E501

        :return: The last_backup of this IaasUcsdInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._last_backup

    @last_backup.setter
    def last_backup(self, last_backup):
        """Sets the last_backup of this IaasUcsdInfo.

        Last successful backup created for this UCS Director appliance if backup is configured.    # noqa: E501

        :param last_backup: The last_backup of this IaasUcsdInfo.  # noqa: E501
        :type: datetime
        """

        self._last_backup = last_backup

    @property
    def node_type(self):
        """Gets the node_type of this IaasUcsdInfo.  # noqa: E501

        NodeType specifies if UCSD is deployed in Stand-alone or Multi Node.    # noqa: E501

        :return: The node_type of this IaasUcsdInfo.  # noqa: E501
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this IaasUcsdInfo.

        NodeType specifies if UCSD is deployed in Stand-alone or Multi Node.    # noqa: E501

        :param node_type: The node_type of this IaasUcsdInfo.  # noqa: E501
        :type: str
        """

        self._node_type = node_type

    @property
    def product_name(self):
        """Gets the product_name of this IaasUcsdInfo.  # noqa: E501

        The UCSD product name.    # noqa: E501

        :return: The product_name of this IaasUcsdInfo.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this IaasUcsdInfo.

        The UCSD product name.    # noqa: E501

        :param product_name: The product_name of this IaasUcsdInfo.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_vendor(self):
        """Gets the product_vendor of this IaasUcsdInfo.  # noqa: E501

        The UCSD product vendor.    # noqa: E501

        :return: The product_vendor of this IaasUcsdInfo.  # noqa: E501
        :rtype: str
        """
        return self._product_vendor

    @product_vendor.setter
    def product_vendor(self, product_vendor):
        """Sets the product_vendor of this IaasUcsdInfo.

        The UCSD product vendor.    # noqa: E501

        :param product_vendor: The product_vendor of this IaasUcsdInfo.  # noqa: E501
        :type: str
        """

        self._product_vendor = product_vendor

    @property
    def product_version(self):
        """Gets the product_version of this IaasUcsdInfo.  # noqa: E501

        The UCSD product/platform version.    # noqa: E501

        :return: The product_version of this IaasUcsdInfo.  # noqa: E501
        :rtype: str
        """
        return self._product_version

    @product_version.setter
    def product_version(self, product_version):
        """Sets the product_version of this IaasUcsdInfo.

        The UCSD product/platform version.    # noqa: E501

        :param product_version: The product_version of this IaasUcsdInfo.  # noqa: E501
        :type: str
        """

        self._product_version = product_version

    @property
    def status(self):
        """Gets the status of this IaasUcsdInfo.  # noqa: E501

        The UCSD status. Possible values are Active, Inactive, Unknown.     # noqa: E501

        :return: The status of this IaasUcsdInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IaasUcsdInfo.

        The UCSD status. Possible values are Active, Inactive, Unknown.     # noqa: E501

        :param status: The status of this IaasUcsdInfo.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def connector_pack(self):
        """Gets the connector_pack of this IaasUcsdInfo.  # noqa: E501

        A reference to a iaasConnectorPack resource. When the $expand query parameter is specified, the referenced resource is returned inline. Relationship to a collection of connector packs installed on the UCSD.   # noqa: E501

        :return: The connector_pack of this IaasUcsdInfo.  # noqa: E501
        :rtype: list[IaasConnectorPack]
        """
        return self._connector_pack

    @connector_pack.setter
    def connector_pack(self, connector_pack):
        """Sets the connector_pack of this IaasUcsdInfo.

        A reference to a iaasConnectorPack resource. When the $expand query parameter is specified, the referenced resource is returned inline. Relationship to a collection of connector packs installed on the UCSD.   # noqa: E501

        :param connector_pack: The connector_pack of this IaasUcsdInfo.  # noqa: E501
        :type: list[IaasConnectorPack]
        """

        self._connector_pack = connector_pack

    @property
    def device_status(self):
        """Gets the device_status of this IaasUcsdInfo.  # noqa: E501

        A reference to a iaasDeviceStatus resource. When the $expand query parameter is specified, the referenced resource is returned inline. Relationship to a collection of infra accounts managed by the UCSD.   # noqa: E501

        :return: The device_status of this IaasUcsdInfo.  # noqa: E501
        :rtype: list[IaasDeviceStatus]
        """
        return self._device_status

    @device_status.setter
    def device_status(self, device_status):
        """Sets the device_status of this IaasUcsdInfo.

        A reference to a iaasDeviceStatus resource. When the $expand query parameter is specified, the referenced resource is returned inline. Relationship to a collection of infra accounts managed by the UCSD.   # noqa: E501

        :param device_status: The device_status of this IaasUcsdInfo.  # noqa: E501
        :type: list[IaasDeviceStatus]
        """

        self._device_status = device_status

    @property
    def license_info(self):
        """Gets the license_info of this IaasUcsdInfo.  # noqa: E501


        :return: The license_info of this IaasUcsdInfo.  # noqa: E501
        :rtype: IaasLicenseInfo
        """
        return self._license_info

    @license_info.setter
    def license_info(self, license_info):
        """Sets the license_info of this IaasUcsdInfo.


        :param license_info: The license_info of this IaasUcsdInfo.  # noqa: E501
        :type: IaasLicenseInfo
        """

        self._license_info = license_info

    @property
    def most_run_tasks(self):
        """Gets the most_run_tasks of this IaasUcsdInfo.  # noqa: E501

        A reference to a iaasMostRunTasks resource. When the $expand query parameter is specified, the referenced resource is returned inline. Relationship to collection of MostRunTasks objects with cascade on delete of UcsdInfo object.   # noqa: E501

        :return: The most_run_tasks of this IaasUcsdInfo.  # noqa: E501
        :rtype: list[IaasMostRunTasks]
        """
        return self._most_run_tasks

    @most_run_tasks.setter
    def most_run_tasks(self, most_run_tasks):
        """Sets the most_run_tasks of this IaasUcsdInfo.

        A reference to a iaasMostRunTasks resource. When the $expand query parameter is specified, the referenced resource is returned inline. Relationship to collection of MostRunTasks objects with cascade on delete of UcsdInfo object.   # noqa: E501

        :param most_run_tasks: The most_run_tasks of this IaasUcsdInfo.  # noqa: E501
        :type: list[IaasMostRunTasks]
        """

        self._most_run_tasks = most_run_tasks

    @property
    def registered_device(self):
        """Gets the registered_device of this IaasUcsdInfo.  # noqa: E501


        :return: The registered_device of this IaasUcsdInfo.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this IaasUcsdInfo.


        :param registered_device: The registered_device of this IaasUcsdInfo.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    @property
    def ucsd_managed_infra(self):
        """Gets the ucsd_managed_infra of this IaasUcsdInfo.  # noqa: E501


        :return: The ucsd_managed_infra of this IaasUcsdInfo.  # noqa: E501
        :rtype: IaasUcsdManagedInfra
        """
        return self._ucsd_managed_infra

    @ucsd_managed_infra.setter
    def ucsd_managed_infra(self, ucsd_managed_infra):
        """Sets the ucsd_managed_infra of this IaasUcsdInfo.


        :param ucsd_managed_infra: The ucsd_managed_infra of this IaasUcsdInfo.  # noqa: E501
        :type: IaasUcsdManagedInfra
        """

        self._ucsd_managed_infra = ucsd_managed_infra

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IaasUcsdInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IaasUcsdInfo):
            return True

        return self.to_dict() != other.to_dict()
