# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1295
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IaasUcsdManagedInfra(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'advanced_catalog_count': 'int',
        'bm_catalog_count': 'int',
        'container_catalog_count': 'int',
        'esxi_host_count': 'int',
        'external_group_count': 'int',
        'hyperv_host_count': 'int',
        'local_group_count': 'int',
        'standard_catalog_count': 'int',
        'user_count': 'int',
        'vdc_count': 'int',
        'vm_count': 'int',
        'guid': 'IaasUcsdInfoRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'advanced_catalog_count': 'AdvancedCatalogCount',
        'bm_catalog_count': 'BmCatalogCount',
        'container_catalog_count': 'ContainerCatalogCount',
        'esxi_host_count': 'EsxiHostCount',
        'external_group_count': 'ExternalGroupCount',
        'hyperv_host_count': 'HypervHostCount',
        'local_group_count': 'LocalGroupCount',
        'standard_catalog_count': 'StandardCatalogCount',
        'user_count': 'UserCount',
        'vdc_count': 'VdcCount',
        'vm_count': 'VmCount',
        'guid': 'Guid'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, advanced_catalog_count=None, bm_catalog_count=None, container_catalog_count=None, esxi_host_count=None, external_group_count=None, hyperv_host_count=None, local_group_count=None, standard_catalog_count=None, user_count=None, vdc_count=None, vm_count=None, guid=None):
        """
        IaasUcsdManagedInfra - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._advanced_catalog_count = None
        self._bm_catalog_count = None
        self._container_catalog_count = None
        self._esxi_host_count = None
        self._external_group_count = None
        self._hyperv_host_count = None
        self._local_group_count = None
        self._standard_catalog_count = None
        self._user_count = None
        self._vdc_count = None
        self._vm_count = None
        self._guid = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if advanced_catalog_count is not None:
          self.advanced_catalog_count = advanced_catalog_count
        if bm_catalog_count is not None:
          self.bm_catalog_count = bm_catalog_count
        if container_catalog_count is not None:
          self.container_catalog_count = container_catalog_count
        if esxi_host_count is not None:
          self.esxi_host_count = esxi_host_count
        if external_group_count is not None:
          self.external_group_count = external_group_count
        if hyperv_host_count is not None:
          self.hyperv_host_count = hyperv_host_count
        if local_group_count is not None:
          self.local_group_count = local_group_count
        if standard_catalog_count is not None:
          self.standard_catalog_count = standard_catalog_count
        if user_count is not None:
          self.user_count = user_count
        if vdc_count is not None:
          self.vdc_count = vdc_count
        if vm_count is not None:
          self.vm_count = vm_count
        if guid is not None:
          self.guid = guid

    @property
    def account_moid(self):
        """
        Gets the account_moid of this IaasUcsdManagedInfra.
        The Account ID for this managed object.  

        :return: The account_moid of this IaasUcsdManagedInfra.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this IaasUcsdManagedInfra.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this IaasUcsdManagedInfra.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this IaasUcsdManagedInfra.
        The time when this managed object was created.  

        :return: The create_time of this IaasUcsdManagedInfra.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this IaasUcsdManagedInfra.
        The time when this managed object was created.  

        :param create_time: The create_time of this IaasUcsdManagedInfra.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this IaasUcsdManagedInfra.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this IaasUcsdManagedInfra.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this IaasUcsdManagedInfra.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this IaasUcsdManagedInfra.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this IaasUcsdManagedInfra.
        The time when this managed object was last modified.  

        :return: The mod_time of this IaasUcsdManagedInfra.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this IaasUcsdManagedInfra.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this IaasUcsdManagedInfra.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this IaasUcsdManagedInfra.
        The unique identifier of this Managed Object instance.   

        :return: The moid of this IaasUcsdManagedInfra.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this IaasUcsdManagedInfra.
        The unique identifier of this Managed Object instance.   

        :param moid: The moid of this IaasUcsdManagedInfra.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this IaasUcsdManagedInfra.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :return: The object_type of this IaasUcsdManagedInfra.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this IaasUcsdManagedInfra.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :param object_type: The object_type of this IaasUcsdManagedInfra.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this IaasUcsdManagedInfra.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this IaasUcsdManagedInfra.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this IaasUcsdManagedInfra.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this IaasUcsdManagedInfra.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this IaasUcsdManagedInfra.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this IaasUcsdManagedInfra.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this IaasUcsdManagedInfra.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this IaasUcsdManagedInfra.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this IaasUcsdManagedInfra.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this IaasUcsdManagedInfra.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this IaasUcsdManagedInfra.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this IaasUcsdManagedInfra.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this IaasUcsdManagedInfra.
        The versioning info for this managed object.   

        :return: The version_context of this IaasUcsdManagedInfra.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this IaasUcsdManagedInfra.
        The versioning info for this managed object.   

        :param version_context: The version_context of this IaasUcsdManagedInfra.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this IaasUcsdManagedInfra.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this IaasUcsdManagedInfra.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this IaasUcsdManagedInfra.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this IaasUcsdManagedInfra.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this IaasUcsdManagedInfra.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this IaasUcsdManagedInfra.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this IaasUcsdManagedInfra.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this IaasUcsdManagedInfra.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this IaasUcsdManagedInfra.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :return: The permission_resources of this IaasUcsdManagedInfra.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this IaasUcsdManagedInfra.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :param permission_resources: The permission_resources of this IaasUcsdManagedInfra.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def advanced_catalog_count(self):
        """
        Gets the advanced_catalog_count of this IaasUcsdManagedInfra.
        Total advanced catalogs in UCSD.  

        :return: The advanced_catalog_count of this IaasUcsdManagedInfra.
        :rtype: int
        """
        return self._advanced_catalog_count

    @advanced_catalog_count.setter
    def advanced_catalog_count(self, advanced_catalog_count):
        """
        Sets the advanced_catalog_count of this IaasUcsdManagedInfra.
        Total advanced catalogs in UCSD.  

        :param advanced_catalog_count: The advanced_catalog_count of this IaasUcsdManagedInfra.
        :type: int
        """

        self._advanced_catalog_count = advanced_catalog_count

    @property
    def bm_catalog_count(self):
        """
        Gets the bm_catalog_count of this IaasUcsdManagedInfra.
        Total bare metal catalogs in UCSD.  

        :return: The bm_catalog_count of this IaasUcsdManagedInfra.
        :rtype: int
        """
        return self._bm_catalog_count

    @bm_catalog_count.setter
    def bm_catalog_count(self, bm_catalog_count):
        """
        Sets the bm_catalog_count of this IaasUcsdManagedInfra.
        Total bare metal catalogs in UCSD.  

        :param bm_catalog_count: The bm_catalog_count of this IaasUcsdManagedInfra.
        :type: int
        """

        self._bm_catalog_count = bm_catalog_count

    @property
    def container_catalog_count(self):
        """
        Gets the container_catalog_count of this IaasUcsdManagedInfra.
        Total service container catalogs in UCSD.  

        :return: The container_catalog_count of this IaasUcsdManagedInfra.
        :rtype: int
        """
        return self._container_catalog_count

    @container_catalog_count.setter
    def container_catalog_count(self, container_catalog_count):
        """
        Sets the container_catalog_count of this IaasUcsdManagedInfra.
        Total service container catalogs in UCSD.  

        :param container_catalog_count: The container_catalog_count of this IaasUcsdManagedInfra.
        :type: int
        """

        self._container_catalog_count = container_catalog_count

    @property
    def esxi_host_count(self):
        """
        Gets the esxi_host_count of this IaasUcsdManagedInfra.
        Total ESXi hosts in UCSD.  

        :return: The esxi_host_count of this IaasUcsdManagedInfra.
        :rtype: int
        """
        return self._esxi_host_count

    @esxi_host_count.setter
    def esxi_host_count(self, esxi_host_count):
        """
        Sets the esxi_host_count of this IaasUcsdManagedInfra.
        Total ESXi hosts in UCSD.  

        :param esxi_host_count: The esxi_host_count of this IaasUcsdManagedInfra.
        :type: int
        """

        self._esxi_host_count = esxi_host_count

    @property
    def external_group_count(self):
        """
        Gets the external_group_count of this IaasUcsdManagedInfra.
        Total external (Ldap) groups in UCSD.  

        :return: The external_group_count of this IaasUcsdManagedInfra.
        :rtype: int
        """
        return self._external_group_count

    @external_group_count.setter
    def external_group_count(self, external_group_count):
        """
        Sets the external_group_count of this IaasUcsdManagedInfra.
        Total external (Ldap) groups in UCSD.  

        :param external_group_count: The external_group_count of this IaasUcsdManagedInfra.
        :type: int
        """

        self._external_group_count = external_group_count

    @property
    def hyperv_host_count(self):
        """
        Gets the hyperv_host_count of this IaasUcsdManagedInfra.
        Total HyperV hosts in UCSD.  

        :return: The hyperv_host_count of this IaasUcsdManagedInfra.
        :rtype: int
        """
        return self._hyperv_host_count

    @hyperv_host_count.setter
    def hyperv_host_count(self, hyperv_host_count):
        """
        Sets the hyperv_host_count of this IaasUcsdManagedInfra.
        Total HyperV hosts in UCSD.  

        :param hyperv_host_count: The hyperv_host_count of this IaasUcsdManagedInfra.
        :type: int
        """

        self._hyperv_host_count = hyperv_host_count

    @property
    def local_group_count(self):
        """
        Gets the local_group_count of this IaasUcsdManagedInfra.
        Total local groups in UCSD.  

        :return: The local_group_count of this IaasUcsdManagedInfra.
        :rtype: int
        """
        return self._local_group_count

    @local_group_count.setter
    def local_group_count(self, local_group_count):
        """
        Sets the local_group_count of this IaasUcsdManagedInfra.
        Total local groups in UCSD.  

        :param local_group_count: The local_group_count of this IaasUcsdManagedInfra.
        :type: int
        """

        self._local_group_count = local_group_count

    @property
    def standard_catalog_count(self):
        """
        Gets the standard_catalog_count of this IaasUcsdManagedInfra.
        Total standard catalogs in UCSD.  

        :return: The standard_catalog_count of this IaasUcsdManagedInfra.
        :rtype: int
        """
        return self._standard_catalog_count

    @standard_catalog_count.setter
    def standard_catalog_count(self, standard_catalog_count):
        """
        Sets the standard_catalog_count of this IaasUcsdManagedInfra.
        Total standard catalogs in UCSD.  

        :param standard_catalog_count: The standard_catalog_count of this IaasUcsdManagedInfra.
        :type: int
        """

        self._standard_catalog_count = standard_catalog_count

    @property
    def user_count(self):
        """
        Gets the user_count of this IaasUcsdManagedInfra.
        Total user accounts in UCSD.  

        :return: The user_count of this IaasUcsdManagedInfra.
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """
        Sets the user_count of this IaasUcsdManagedInfra.
        Total user accounts in UCSD.  

        :param user_count: The user_count of this IaasUcsdManagedInfra.
        :type: int
        """

        self._user_count = user_count

    @property
    def vdc_count(self):
        """
        Gets the vdc_count of this IaasUcsdManagedInfra.
        Total virtual datacenters in UCSD.  

        :return: The vdc_count of this IaasUcsdManagedInfra.
        :rtype: int
        """
        return self._vdc_count

    @vdc_count.setter
    def vdc_count(self, vdc_count):
        """
        Sets the vdc_count of this IaasUcsdManagedInfra.
        Total virtual datacenters in UCSD.  

        :param vdc_count: The vdc_count of this IaasUcsdManagedInfra.
        :type: int
        """

        self._vdc_count = vdc_count

    @property
    def vm_count(self):
        """
        Gets the vm_count of this IaasUcsdManagedInfra.
        Total Virtual machines in UCSD.   

        :return: The vm_count of this IaasUcsdManagedInfra.
        :rtype: int
        """
        return self._vm_count

    @vm_count.setter
    def vm_count(self, vm_count):
        """
        Sets the vm_count of this IaasUcsdManagedInfra.
        Total Virtual machines in UCSD.   

        :param vm_count: The vm_count of this IaasUcsdManagedInfra.
        :type: int
        """

        self._vm_count = vm_count

    @property
    def guid(self):
        """
        Gets the guid of this IaasUcsdManagedInfra.
        A collection of references to the [iaas.UcsdInfo](mo://iaas.UcsdInfo) Managed Object.  When this managed object is deleted, the referenced [iaas.UcsdInfo](mo://iaas.UcsdInfo) MO unsets its reference to this deleted MO. 

        :return: The guid of this IaasUcsdManagedInfra.
        :rtype: IaasUcsdInfoRef
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """
        Sets the guid of this IaasUcsdManagedInfra.
        A collection of references to the [iaas.UcsdInfo](mo://iaas.UcsdInfo) Managed Object.  When this managed object is deleted, the referenced [iaas.UcsdInfo](mo://iaas.UcsdInfo) MO unsets its reference to this deleted MO. 

        :param guid: The guid of this IaasUcsdManagedInfra.
        :type: IaasUcsdInfoRef
        """

        self._guid = guid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IaasUcsdManagedInfra):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
