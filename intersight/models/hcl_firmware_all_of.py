# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class HclFirmwareAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'driver_name': 'str',
        'driver_version': 'str',
        'error_code': 'str',
        'firmware_version': 'str',
        'id': 'str',
        'latest_driver': 'bool',
        'latest_firmware': 'bool'
    }

    attribute_map = {
        'driver_name': 'DriverName',
        'driver_version': 'DriverVersion',
        'error_code': 'ErrorCode',
        'firmware_version': 'FirmwareVersion',
        'id': 'Id',
        'latest_driver': 'LatestDriver',
        'latest_firmware': 'LatestFirmware'
    }

    def __init__(self,
                 driver_name=None,
                 driver_version=None,
                 error_code='Success',
                 firmware_version=None,
                 id=None,
                 latest_driver=None,
                 latest_firmware=None,
                 local_vars_configuration=None):  # noqa: E501
        """HclFirmwareAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._driver_name = None
        self._driver_version = None
        self._error_code = None
        self._firmware_version = None
        self._id = None
        self._latest_driver = None
        self._latest_firmware = None
        self.discriminator = None

        if driver_name is not None:
            self.driver_name = driver_name
        if driver_version is not None:
            self.driver_version = driver_version
        if error_code is not None:
            self.error_code = error_code
        if firmware_version is not None:
            self.firmware_version = firmware_version
        if id is not None:
            self.id = id
        if latest_driver is not None:
            self.latest_driver = latest_driver
        if latest_firmware is not None:
            self.latest_firmware = latest_firmware

    @property
    def driver_name(self):
        """Gets the driver_name of this HclFirmwareAllOf.  # noqa: E501

        Protocol for which the driver is provided. E.g.  enic, fnic, lsi_mr3.    # noqa: E501

        :return: The driver_name of this HclFirmwareAllOf.  # noqa: E501
        :rtype: str
        """
        return self._driver_name

    @driver_name.setter
    def driver_name(self, driver_name):
        """Sets the driver_name of this HclFirmwareAllOf.

        Protocol for which the driver is provided. E.g.  enic, fnic, lsi_mr3.    # noqa: E501

        :param driver_name: The driver_name of this HclFirmwareAllOf.  # noqa: E501
        :type: str
        """

        self._driver_name = driver_name

    @property
    def driver_version(self):
        """Gets the driver_version of this HclFirmwareAllOf.  # noqa: E501

        Version of the Driver supported.    # noqa: E501

        :return: The driver_version of this HclFirmwareAllOf.  # noqa: E501
        :rtype: str
        """
        return self._driver_version

    @driver_version.setter
    def driver_version(self, driver_version):
        """Sets the driver_version of this HclFirmwareAllOf.

        Version of the Driver supported.    # noqa: E501

        :param driver_version: The driver_version of this HclFirmwareAllOf.  # noqa: E501
        :type: str
        """

        self._driver_version = driver_version

    @property
    def error_code(self):
        """Gets the error_code of this HclFirmwareAllOf.  # noqa: E501

        Error code for the support status.    # noqa: E501

        :return: The error_code of this HclFirmwareAllOf.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this HclFirmwareAllOf.

        Error code for the support status.    # noqa: E501

        :param error_code: The error_code of this HclFirmwareAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "Success", "Unknown", "UnknownServer", "InvalidUcsVersion",
            "ProcessorNotSupported", "OSNotSupported", "OSUnknown",
            "UCSVersionNotSupported",
            "UcsVersionServerOSCombinationNotSupported", "ProductUnknown",
            "ProductNotSupported", "DriverNameNotSupported",
            "FirmwareVersionNotSupported", "DriverVersionNotSupported",
            "FirmwareVersionDriverVersionCombinationNotSupported",
            "FirmwareVersionAndDriverVersionNotSupported",
            "FirmwareVersionAndDriverNameNotSupported", "InternalError",
            "MarshallingError", "Exempted"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and error_code not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `error_code` ({0}), must be one of {1}"  # noqa: E501
                .format(error_code, allowed_values))

        self._error_code = error_code

    @property
    def firmware_version(self):
        """Gets the firmware_version of this HclFirmwareAllOf.  # noqa: E501

        Firmware version of the product/adapter supported.    # noqa: E501

        :return: The firmware_version of this HclFirmwareAllOf.  # noqa: E501
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this HclFirmwareAllOf.

        Firmware version of the product/adapter supported.    # noqa: E501

        :param firmware_version: The firmware_version of this HclFirmwareAllOf.  # noqa: E501
        :type: str
        """

        self._firmware_version = firmware_version

    @property
    def id(self):
        """Gets the id of this HclFirmwareAllOf.  # noqa: E501

        Identifier of the firmware.    # noqa: E501

        :return: The id of this HclFirmwareAllOf.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HclFirmwareAllOf.

        Identifier of the firmware.    # noqa: E501

        :param id: The id of this HclFirmwareAllOf.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def latest_driver(self):
        """Gets the latest_driver of this HclFirmwareAllOf.  # noqa: E501

        True if the driver is latest recommended driver.    # noqa: E501

        :return: The latest_driver of this HclFirmwareAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._latest_driver

    @latest_driver.setter
    def latest_driver(self, latest_driver):
        """Sets the latest_driver of this HclFirmwareAllOf.

        True if the driver is latest recommended driver.    # noqa: E501

        :param latest_driver: The latest_driver of this HclFirmwareAllOf.  # noqa: E501
        :type: bool
        """

        self._latest_driver = latest_driver

    @property
    def latest_firmware(self):
        """Gets the latest_firmware of this HclFirmwareAllOf.  # noqa: E501

        True if the firmware is latest recommended firmware.     # noqa: E501

        :return: The latest_firmware of this HclFirmwareAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._latest_firmware

    @latest_firmware.setter
    def latest_firmware(self, latest_firmware):
        """Sets the latest_firmware of this HclFirmwareAllOf.

        True if the firmware is latest recommended firmware.     # noqa: E501

        :param latest_firmware: The latest_firmware of this HclFirmwareAllOf.  # noqa: E501
        :type: bool
        """

        self._latest_firmware = latest_firmware

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HclFirmwareAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HclFirmwareAllOf):
            return True

        return self.to_dict() != other.to_dict()
