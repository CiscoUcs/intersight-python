# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1415
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AssetParentConnectionSignature(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'device_id': 'str',
        'node_id': 'str',
        'signature': 'str',
        'time_stamp': 'datetime'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'device_id': 'DeviceId',
        'node_id': 'NodeId',
        'signature': 'Signature',
        'time_stamp': 'TimeStamp'
    }

    def __init__(self, object_type=None, device_id=None, node_id=None, signature=None, time_stamp=None):
        """
        AssetParentConnectionSignature - a model defined in Swagger
        """

        self._object_type = None
        self._device_id = None
        self._node_id = None
        self._signature = None
        self._time_stamp = None

        if object_type is not None:
          self.object_type = object_type
        if device_id is not None:
          self.device_id = device_id
        if node_id is not None:
          self.node_id = node_id
        if signature is not None:
          self.signature = signature
        if time_stamp is not None:
          self.time_stamp = time_stamp

    @property
    def object_type(self):
        """
        Gets the object_type of this AssetParentConnectionSignature.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :return: The object_type of this AssetParentConnectionSignature.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this AssetParentConnectionSignature.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :param object_type: The object_type of this AssetParentConnectionSignature.
        :type: str
        """

        self._object_type = object_type

    @property
    def device_id(self):
        """
        Gets the device_id of this AssetParentConnectionSignature.
        The moid of the parent device registration.  

        :return: The device_id of this AssetParentConnectionSignature.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """
        Sets the device_id of this AssetParentConnectionSignature.
        The moid of the parent device registration.  

        :param device_id: The device_id of this AssetParentConnectionSignature.
        :type: str
        """

        self._device_id = device_id

    @property
    def node_id(self):
        """
        Gets the node_id of this AssetParentConnectionSignature.
        The node identity of the parent device, corresponds to the parents ClusterMember.memberIdentity. Used on connect to establish through which device in a cluster the child is connected through.  

        :return: The node_id of this AssetParentConnectionSignature.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """
        Sets the node_id of this AssetParentConnectionSignature.
        The node identity of the parent device, corresponds to the parents ClusterMember.memberIdentity. Used on connect to establish through which device in a cluster the child is connected through.  

        :param node_id: The node_id of this AssetParentConnectionSignature.
        :type: str
        """

        self._node_id = node_id

    @property
    def signature(self):
        """
        Gets the signature of this AssetParentConnectionSignature.
        The result of signing the deviceId appended with the timeStamp fields with the devices private key.  

        :return: The signature of this AssetParentConnectionSignature.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """
        Sets the signature of this AssetParentConnectionSignature.
        The result of signing the deviceId appended with the timeStamp fields with the devices private key.  

        :param signature: The signature of this AssetParentConnectionSignature.
        :type: str
        """
        if signature is not None and not re.search('^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', signature):
            raise ValueError("Invalid value for `signature`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._signature = signature

    @property
    def time_stamp(self):
        """
        Gets the time_stamp of this AssetParentConnectionSignature.
        The time at which the signature was generated. Date is accurate to Intersights clock. Used to expire the signature.   

        :return: The time_stamp of this AssetParentConnectionSignature.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """
        Sets the time_stamp of this AssetParentConnectionSignature.
        The time at which the signature was generated. Date is accurate to Intersights clock. Used to expire the signature.   

        :param time_stamp: The time_stamp of this AssetParentConnectionSignature.
        :type: datetime
        """

        self._time_stamp = time_stamp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AssetParentConnectionSignature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
