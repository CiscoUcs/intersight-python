# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class FirmwareNetworkShareAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cifs_server': 'FirmwareCifsServer',
        'http_server': 'FirmwareHttpServer',
        'is_password_set': 'bool',
        'map_type': 'str',
        'nfs_server': 'FirmwareNfsServer',
        'password': 'str',
        'upgradeoption': 'str',
        'username': 'str'
    }

    attribute_map = {
        'cifs_server': 'CifsServer',
        'http_server': 'HttpServer',
        'is_password_set': 'IsPasswordSet',
        'map_type': 'MapType',
        'nfs_server': 'NfsServer',
        'password': 'Password',
        'upgradeoption': 'Upgradeoption',
        'username': 'Username'
    }

    def __init__(self,
                 cifs_server=None,
                 http_server=None,
                 is_password_set=None,
                 map_type='nfs',
                 nfs_server=None,
                 password=None,
                 upgradeoption='nw_upgrade_full',
                 username=None,
                 local_vars_configuration=None):  # noqa: E501
        """FirmwareNetworkShareAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cifs_server = None
        self._http_server = None
        self._is_password_set = None
        self._map_type = None
        self._nfs_server = None
        self._password = None
        self._upgradeoption = None
        self._username = None
        self.discriminator = None

        if cifs_server is not None:
            self.cifs_server = cifs_server
        if http_server is not None:
            self.http_server = http_server
        if is_password_set is not None:
            self.is_password_set = is_password_set
        if map_type is not None:
            self.map_type = map_type
        if nfs_server is not None:
            self.nfs_server = nfs_server
        if password is not None:
            self.password = password
        if upgradeoption is not None:
            self.upgradeoption = upgradeoption
        if username is not None:
            self.username = username

    @property
    def cifs_server(self):
        """Gets the cifs_server of this FirmwareNetworkShareAllOf.  # noqa: E501


        :return: The cifs_server of this FirmwareNetworkShareAllOf.  # noqa: E501
        :rtype: FirmwareCifsServer
        """
        return self._cifs_server

    @cifs_server.setter
    def cifs_server(self, cifs_server):
        """Sets the cifs_server of this FirmwareNetworkShareAllOf.


        :param cifs_server: The cifs_server of this FirmwareNetworkShareAllOf.  # noqa: E501
        :type: FirmwareCifsServer
        """

        self._cifs_server = cifs_server

    @property
    def http_server(self):
        """Gets the http_server of this FirmwareNetworkShareAllOf.  # noqa: E501


        :return: The http_server of this FirmwareNetworkShareAllOf.  # noqa: E501
        :rtype: FirmwareHttpServer
        """
        return self._http_server

    @http_server.setter
    def http_server(self, http_server):
        """Sets the http_server of this FirmwareNetworkShareAllOf.


        :param http_server: The http_server of this FirmwareNetworkShareAllOf.  # noqa: E501
        :type: FirmwareHttpServer
        """

        self._http_server = http_server

    @property
    def is_password_set(self):
        """Gets the is_password_set of this FirmwareNetworkShareAllOf.  # noqa: E501


        :return: The is_password_set of this FirmwareNetworkShareAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_password_set

    @is_password_set.setter
    def is_password_set(self, is_password_set):
        """Sets the is_password_set of this FirmwareNetworkShareAllOf.


        :param is_password_set: The is_password_set of this FirmwareNetworkShareAllOf.  # noqa: E501
        :type: bool
        """

        self._is_password_set = is_password_set

    @property
    def map_type(self):
        """Gets the map_type of this FirmwareNetworkShareAllOf.  # noqa: E501

        File server protocols like CIFS, NFS, WWW for HTTP (S) that hosts the image.    # noqa: E501

        :return: The map_type of this FirmwareNetworkShareAllOf.  # noqa: E501
        :rtype: str
        """
        return self._map_type

    @map_type.setter
    def map_type(self, map_type):
        """Sets the map_type of this FirmwareNetworkShareAllOf.

        File server protocols like CIFS, NFS, WWW for HTTP (S) that hosts the image.    # noqa: E501

        :param map_type: The map_type of this FirmwareNetworkShareAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["nfs", "cifs", "www"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and map_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `map_type` ({0}), must be one of {1}"  # noqa: E501
                .format(map_type, allowed_values))

        self._map_type = map_type

    @property
    def nfs_server(self):
        """Gets the nfs_server of this FirmwareNetworkShareAllOf.  # noqa: E501


        :return: The nfs_server of this FirmwareNetworkShareAllOf.  # noqa: E501
        :rtype: FirmwareNfsServer
        """
        return self._nfs_server

    @nfs_server.setter
    def nfs_server(self, nfs_server):
        """Sets the nfs_server of this FirmwareNetworkShareAllOf.


        :param nfs_server: The nfs_server of this FirmwareNetworkShareAllOf.  # noqa: E501
        :type: FirmwareNfsServer
        """

        self._nfs_server = nfs_server

    @property
    def password(self):
        """Gets the password of this FirmwareNetworkShareAllOf.  # noqa: E501

        Password as configured on the file server.    # noqa: E501

        :return: The password of this FirmwareNetworkShareAllOf.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this FirmwareNetworkShareAllOf.

        Password as configured on the file server.    # noqa: E501

        :param password: The password of this FirmwareNetworkShareAllOf.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def upgradeoption(self):
        """Gets the upgradeoption of this FirmwareNetworkShareAllOf.  # noqa: E501

        Option to control the upgrade, e.g., 1) nw_upgrade_mount_only - mount the image from a file server and run upgrade on-next server boot 2) nw_upgrade_full - mount the image and run upgrade immediately.    # noqa: E501

        :return: The upgradeoption of this FirmwareNetworkShareAllOf.  # noqa: E501
        :rtype: str
        """
        return self._upgradeoption

    @upgradeoption.setter
    def upgradeoption(self, upgradeoption):
        """Sets the upgradeoption of this FirmwareNetworkShareAllOf.

        Option to control the upgrade, e.g., 1) nw_upgrade_mount_only - mount the image from a file server and run upgrade on-next server boot 2) nw_upgrade_full - mount the image and run upgrade immediately.    # noqa: E501

        :param upgradeoption: The upgradeoption of this FirmwareNetworkShareAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["nw_upgrade_full",
                          "nw_upgrade_mount_only"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and upgradeoption not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `upgradeoption` ({0}), must be one of {1}"  # noqa: E501
                .format(upgradeoption, allowed_values))

        self._upgradeoption = upgradeoption

    @property
    def username(self):
        """Gets the username of this FirmwareNetworkShareAllOf.  # noqa: E501

        Username as configured on the file server.     # noqa: E501

        :return: The username of this FirmwareNetworkShareAllOf.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this FirmwareNetworkShareAllOf.

        Username as configured on the file server.     # noqa: E501

        :param username: The username of this FirmwareNetworkShareAllOf.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirmwareNetworkShareAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FirmwareNetworkShareAllOf):
            return True

        return self.to_dict() != other.to_dict()
