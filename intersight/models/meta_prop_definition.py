# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class MetaPropDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_access': 'str',
        'name': 'str',
        'op_security': 'str',
        'search_weight': 'float'
    }

    attribute_map = {
        'api_access': 'ApiAccess',
        'name': 'Name',
        'op_security': 'OpSecurity',
        'search_weight': 'SearchWeight'
    }

    def __init__(self,
                 api_access='NoAccess',
                 name=None,
                 op_security='ClearText',
                 search_weight=None,
                 local_vars_configuration=None):  # noqa: E501
        """MetaPropDefinition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_access = None
        self._name = None
        self._op_security = None
        self._search_weight = None
        self.discriminator = None

        if api_access is not None:
            self.api_access = api_access
        if name is not None:
            self.name = name
        if op_security is not None:
            self.op_security = op_security
        if search_weight is not None:
            self.search_weight = search_weight

    @property
    def api_access(self):
        """Gets the api_access of this MetaPropDefinition.  # noqa: E501

        API access control for the property. Examples are NoAccess, ReadOnly, CreateOnly etc.    # noqa: E501

        :return: The api_access of this MetaPropDefinition.  # noqa: E501
        :rtype: str
        """
        return self._api_access

    @api_access.setter
    def api_access(self, api_access):
        """Sets the api_access of this MetaPropDefinition.

        API access control for the property. Examples are NoAccess, ReadOnly, CreateOnly etc.    # noqa: E501

        :param api_access: The api_access of this MetaPropDefinition.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "NoAccess", "ReadOnly", "CreateOnly", "ReadWrite", "WriteOnly",
            "ReadOnCreate"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and api_access not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `api_access` ({0}), must be one of {1}"  # noqa: E501
                .format(api_access, allowed_values))

        self._api_access = api_access

    @property
    def name(self):
        """Gets the name of this MetaPropDefinition.  # noqa: E501

        The name of the property.    # noqa: E501

        :return: The name of this MetaPropDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetaPropDefinition.

        The name of the property.    # noqa: E501

        :param name: The name of this MetaPropDefinition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def op_security(self):
        """Gets the op_security of this MetaPropDefinition.  # noqa: E501

        The data-at-rest security protection applied to this property when a Managed Object is persisted.  For example, Encrypted or Cleartext.     # noqa: E501

        :return: The op_security of this MetaPropDefinition.  # noqa: E501
        :rtype: str
        """
        return self._op_security

    @op_security.setter
    def op_security(self, op_security):
        """Sets the op_security of this MetaPropDefinition.

        The data-at-rest security protection applied to this property when a Managed Object is persisted.  For example, Encrypted or Cleartext.     # noqa: E501

        :param op_security: The op_security of this MetaPropDefinition.  # noqa: E501
        :type: str
        """
        allowed_values = ["ClearText", "Encrypted", "Pbkdf2",
                          "Bcrypt"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and op_security not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `op_security` ({0}), must be one of {1}"  # noqa: E501
                .format(op_security, allowed_values))

        self._op_security = op_security

    @property
    def search_weight(self):
        """Gets the search_weight of this MetaPropDefinition.  # noqa: E501

        Enables the property to be searchable from global search. A value of 0 means this property is not globally searchable.     # noqa: E501

        :return: The search_weight of this MetaPropDefinition.  # noqa: E501
        :rtype: float
        """
        return self._search_weight

    @search_weight.setter
    def search_weight(self, search_weight):
        """Sets the search_weight of this MetaPropDefinition.

        Enables the property to be searchable from global search. A value of 0 means this property is not globally searchable.     # noqa: E501

        :param search_weight: The search_weight of this MetaPropDefinition.  # noqa: E501
        :type: float
        """

        self._search_weight = search_weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetaPropDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MetaPropDefinition):
            return True

        return self.to_dict() != other.to_dict()
