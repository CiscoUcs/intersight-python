# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class OsBaseInstallConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'additional_parameters': 'list[OsPlaceHolder]',
        'answers': 'OsAnswers',
        'description': 'str',
        'install_method': 'str',
        'operating_system_parameters': 'OsOperatingSystemParameters'
    }

    attribute_map = {
        'additional_parameters': 'AdditionalParameters',
        'answers': 'Answers',
        'description': 'Description',
        'install_method': 'InstallMethod',
        'operating_system_parameters': 'OperatingSystemParameters'
    }

    def __init__(self,
                 additional_parameters=None,
                 answers=None,
                 description=None,
                 install_method='vMedia',
                 operating_system_parameters=None,
                 local_vars_configuration=None):  # noqa: E501
        """OsBaseInstallConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._additional_parameters = None
        self._answers = None
        self._description = None
        self._install_method = None
        self._operating_system_parameters = None
        self.discriminator = None

        if additional_parameters is not None:
            self.additional_parameters = additional_parameters
        if answers is not None:
            self.answers = answers
        if description is not None:
            self.description = description
        if install_method is not None:
            self.install_method = install_method
        if operating_system_parameters is not None:
            self.operating_system_parameters = operating_system_parameters

    @property
    def additional_parameters(self):
        """Gets the additional_parameters of this OsBaseInstallConfig.  # noqa: E501


        :return: The additional_parameters of this OsBaseInstallConfig.  # noqa: E501
        :rtype: list[OsPlaceHolder]
        """
        return self._additional_parameters

    @additional_parameters.setter
    def additional_parameters(self, additional_parameters):
        """Sets the additional_parameters of this OsBaseInstallConfig.


        :param additional_parameters: The additional_parameters of this OsBaseInstallConfig.  # noqa: E501
        :type: list[OsPlaceHolder]
        """

        self._additional_parameters = additional_parameters

    @property
    def answers(self):
        """Gets the answers of this OsBaseInstallConfig.  # noqa: E501


        :return: The answers of this OsBaseInstallConfig.  # noqa: E501
        :rtype: OsAnswers
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """Sets the answers of this OsBaseInstallConfig.


        :param answers: The answers of this OsBaseInstallConfig.  # noqa: E501
        :type: OsAnswers
        """

        self._answers = answers

    @property
    def description(self):
        """Gets the description of this OsBaseInstallConfig.  # noqa: E501

        User provided description about the OS install configuration.     # noqa: E501

        :return: The description of this OsBaseInstallConfig.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OsBaseInstallConfig.

        User provided description about the OS install configuration.     # noqa: E501

        :param description: The description of this OsBaseInstallConfig.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def install_method(self):
        """Gets the install_method of this OsBaseInstallConfig.  # noqa: E501

        The install method to be used for OS installation - vMedia, iPXE.  Only vMedia is supported as of now.     # noqa: E501

        :return: The install_method of this OsBaseInstallConfig.  # noqa: E501
        :rtype: str
        """
        return self._install_method

    @install_method.setter
    def install_method(self, install_method):
        """Sets the install_method of this OsBaseInstallConfig.

        The install method to be used for OS installation - vMedia, iPXE.  Only vMedia is supported as of now.     # noqa: E501

        :param install_method: The install_method of this OsBaseInstallConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["vMedia"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and install_method not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `install_method` ({0}), must be one of {1}"  # noqa: E501
                .format(install_method, allowed_values))

        self._install_method = install_method

    @property
    def operating_system_parameters(self):
        """Gets the operating_system_parameters of this OsBaseInstallConfig.  # noqa: E501


        :return: The operating_system_parameters of this OsBaseInstallConfig.  # noqa: E501
        :rtype: OsOperatingSystemParameters
        """
        return self._operating_system_parameters

    @operating_system_parameters.setter
    def operating_system_parameters(self, operating_system_parameters):
        """Sets the operating_system_parameters of this OsBaseInstallConfig.


        :param operating_system_parameters: The operating_system_parameters of this OsBaseInstallConfig.  # noqa: E501
        :type: OsOperatingSystemParameters
        """

        self._operating_system_parameters = operating_system_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OsBaseInstallConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OsBaseInstallConfig):
            return True

        return self.to_dict() != other.to_dict()
