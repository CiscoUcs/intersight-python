# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class EquipmentSharedIoModuleAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'config_state': 'str',
        'discovery': 'str',
        'mac_of_shared_iom_aside': 'str',
        'mac_of_shared_iom_bside': 'str',
        'oper_state': 'str',
        'part_number': 'str',
        'reachability': 'str',
        'usr_lbl': 'str',
        'vid': 'str',
        'equipment_system_io_controller': 'EquipmentSystemIoController',
        'port_groups': 'list[PortGroup]',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'config_state': 'ConfigState',
        'discovery': 'Discovery',
        'mac_of_shared_iom_aside': 'MacOfSharedIomAside',
        'mac_of_shared_iom_bside': 'MacOfSharedIomBside',
        'oper_state': 'OperState',
        'part_number': 'PartNumber',
        'reachability': 'Reachability',
        'usr_lbl': 'UsrLbl',
        'vid': 'Vid',
        'equipment_system_io_controller': 'EquipmentSystemIoController',
        'port_groups': 'PortGroups',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 config_state=None,
                 discovery=None,
                 mac_of_shared_iom_aside=None,
                 mac_of_shared_iom_bside=None,
                 oper_state=None,
                 part_number=None,
                 reachability=None,
                 usr_lbl=None,
                 vid=None,
                 equipment_system_io_controller=None,
                 port_groups=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """EquipmentSharedIoModuleAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._config_state = None
        self._discovery = None
        self._mac_of_shared_iom_aside = None
        self._mac_of_shared_iom_bside = None
        self._oper_state = None
        self._part_number = None
        self._reachability = None
        self._usr_lbl = None
        self._vid = None
        self._equipment_system_io_controller = None
        self._port_groups = None
        self._registered_device = None
        self.discriminator = None

        if config_state is not None:
            self.config_state = config_state
        if discovery is not None:
            self.discovery = discovery
        if mac_of_shared_iom_aside is not None:
            self.mac_of_shared_iom_aside = mac_of_shared_iom_aside
        if mac_of_shared_iom_bside is not None:
            self.mac_of_shared_iom_bside = mac_of_shared_iom_bside
        if oper_state is not None:
            self.oper_state = oper_state
        if part_number is not None:
            self.part_number = part_number
        if reachability is not None:
            self.reachability = reachability
        if usr_lbl is not None:
            self.usr_lbl = usr_lbl
        if vid is not None:
            self.vid = vid
        if equipment_system_io_controller is not None:
            self.equipment_system_io_controller = equipment_system_io_controller
        if port_groups is not None:
            self.port_groups = port_groups
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def config_state(self):
        """Gets the config_state of this EquipmentSharedIoModuleAllOf.  # noqa: E501

        This field identifies the configuration state for this SIOM Unit.    # noqa: E501

        :return: The config_state of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :rtype: str
        """
        return self._config_state

    @config_state.setter
    def config_state(self, config_state):
        """Sets the config_state of this EquipmentSharedIoModuleAllOf.

        This field identifies the configuration state for this SIOM Unit.    # noqa: E501

        :param config_state: The config_state of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :type: str
        """

        self._config_state = config_state

    @property
    def discovery(self):
        """Gets the discovery of this EquipmentSharedIoModuleAllOf.  # noqa: E501

        This field identifies the discovery state of SIOM.     # noqa: E501

        :return: The discovery of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :rtype: str
        """
        return self._discovery

    @discovery.setter
    def discovery(self, discovery):
        """Sets the discovery of this EquipmentSharedIoModuleAllOf.

        This field identifies the discovery state of SIOM.     # noqa: E501

        :param discovery: The discovery of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :type: str
        """

        self._discovery = discovery

    @property
    def mac_of_shared_iom_aside(self):
        """Gets the mac_of_shared_iom_aside of this EquipmentSharedIoModuleAllOf.  # noqa: E501

        This field identifies the MAC of IOM-A side.    # noqa: E501

        :return: The mac_of_shared_iom_aside of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :rtype: str
        """
        return self._mac_of_shared_iom_aside

    @mac_of_shared_iom_aside.setter
    def mac_of_shared_iom_aside(self, mac_of_shared_iom_aside):
        """Sets the mac_of_shared_iom_aside of this EquipmentSharedIoModuleAllOf.

        This field identifies the MAC of IOM-A side.    # noqa: E501

        :param mac_of_shared_iom_aside: The mac_of_shared_iom_aside of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :type: str
        """

        self._mac_of_shared_iom_aside = mac_of_shared_iom_aside

    @property
    def mac_of_shared_iom_bside(self):
        """Gets the mac_of_shared_iom_bside of this EquipmentSharedIoModuleAllOf.  # noqa: E501

        This field identifies the MAC of IOM-B side.    # noqa: E501

        :return: The mac_of_shared_iom_bside of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :rtype: str
        """
        return self._mac_of_shared_iom_bside

    @mac_of_shared_iom_bside.setter
    def mac_of_shared_iom_bside(self, mac_of_shared_iom_bside):
        """Sets the mac_of_shared_iom_bside of this EquipmentSharedIoModuleAllOf.

        This field identifies the MAC of IOM-B side.    # noqa: E501

        :param mac_of_shared_iom_bside: The mac_of_shared_iom_bside of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :type: str
        """

        self._mac_of_shared_iom_bside = mac_of_shared_iom_bside

    @property
    def oper_state(self):
        """Gets the oper_state of this EquipmentSharedIoModuleAllOf.  # noqa: E501

        This field identifies the SIOM operational state.    # noqa: E501

        :return: The oper_state of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :rtype: str
        """
        return self._oper_state

    @oper_state.setter
    def oper_state(self, oper_state):
        """Sets the oper_state of this EquipmentSharedIoModuleAllOf.

        This field identifies the SIOM operational state.    # noqa: E501

        :param oper_state: The oper_state of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :type: str
        """

        self._oper_state = oper_state

    @property
    def part_number(self):
        """Gets the part_number of this EquipmentSharedIoModuleAllOf.  # noqa: E501

        This field identifies the Part Number for this SIOM Unit.    # noqa: E501

        :return: The part_number of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this EquipmentSharedIoModuleAllOf.

        This field identifies the Part Number for this SIOM Unit.    # noqa: E501

        :param part_number: The part_number of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def reachability(self):
        """Gets the reachability of this EquipmentSharedIoModuleAllOf.  # noqa: E501

        This field identifies the reachability to FI-A and B side.    # noqa: E501

        :return: The reachability of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :rtype: str
        """
        return self._reachability

    @reachability.setter
    def reachability(self, reachability):
        """Sets the reachability of this EquipmentSharedIoModuleAllOf.

        This field identifies the reachability to FI-A and B side.    # noqa: E501

        :param reachability: The reachability of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :type: str
        """

        self._reachability = reachability

    @property
    def usr_lbl(self):
        """Gets the usr_lbl of this EquipmentSharedIoModuleAllOf.  # noqa: E501

        User label configured for the SIOM.    # noqa: E501

        :return: The usr_lbl of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :rtype: str
        """
        return self._usr_lbl

    @usr_lbl.setter
    def usr_lbl(self, usr_lbl):
        """Sets the usr_lbl of this EquipmentSharedIoModuleAllOf.

        User label configured for the SIOM.    # noqa: E501

        :param usr_lbl: The usr_lbl of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :type: str
        """

        self._usr_lbl = usr_lbl

    @property
    def vid(self):
        """Gets the vid of this EquipmentSharedIoModuleAllOf.  # noqa: E501

        This field identifies the vendor id for this SIOM Unit.     # noqa: E501

        :return: The vid of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :rtype: str
        """
        return self._vid

    @vid.setter
    def vid(self, vid):
        """Sets the vid of this EquipmentSharedIoModuleAllOf.

        This field identifies the vendor id for this SIOM Unit.     # noqa: E501

        :param vid: The vid of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :type: str
        """

        self._vid = vid

    @property
    def equipment_system_io_controller(self):
        """Gets the equipment_system_io_controller of this EquipmentSharedIoModuleAllOf.  # noqa: E501


        :return: The equipment_system_io_controller of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :rtype: EquipmentSystemIoController
        """
        return self._equipment_system_io_controller

    @equipment_system_io_controller.setter
    def equipment_system_io_controller(self, equipment_system_io_controller):
        """Sets the equipment_system_io_controller of this EquipmentSharedIoModuleAllOf.


        :param equipment_system_io_controller: The equipment_system_io_controller of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :type: EquipmentSystemIoController
        """

        self._equipment_system_io_controller = equipment_system_io_controller

    @property
    def port_groups(self):
        """Gets the port_groups of this EquipmentSharedIoModuleAllOf.  # noqa: E501

        A reference to a portGroup resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The port_groups of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :rtype: list[PortGroup]
        """
        return self._port_groups

    @port_groups.setter
    def port_groups(self, port_groups):
        """Sets the port_groups of this EquipmentSharedIoModuleAllOf.

        A reference to a portGroup resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param port_groups: The port_groups of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :type: list[PortGroup]
        """

        self._port_groups = port_groups

    @property
    def registered_device(self):
        """Gets the registered_device of this EquipmentSharedIoModuleAllOf.  # noqa: E501


        :return: The registered_device of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this EquipmentSharedIoModuleAllOf.


        :param registered_device: The registered_device of this EquipmentSharedIoModuleAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EquipmentSharedIoModuleAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EquipmentSharedIoModuleAllOf):
            return True

        return self.to_dict() != other.to_dict()
