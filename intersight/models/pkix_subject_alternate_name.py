# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1461
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PkixSubjectAlternateName(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'dns_name': 'list[str]',
        'email_address': 'list[str]',
        'ip_address': 'list[str]',
        'uri': 'list[str]'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'dns_name': 'DnsName',
        'email_address': 'EmailAddress',
        'ip_address': 'IpAddress',
        'uri': 'Uri'
    }

    def __init__(self, object_type=None, dns_name=None, email_address=None, ip_address=None, uri=None):
        """
        PkixSubjectAlternateName - a model defined in Swagger
        """

        self._object_type = None
        self._dns_name = None
        self._email_address = None
        self._ip_address = None
        self._uri = None

        if object_type is not None:
          self.object_type = object_type
        if dns_name is not None:
          self.dns_name = dns_name
        if email_address is not None:
          self.email_address = email_address
        if ip_address is not None:
          self.ip_address = ip_address
        if uri is not None:
          self.uri = uri

    @property
    def object_type(self):
        """
        Gets the object_type of this PkixSubjectAlternateName.
        The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.

        :return: The object_type of this PkixSubjectAlternateName.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this PkixSubjectAlternateName.
        The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.

        :param object_type: The object_type of this PkixSubjectAlternateName.
        :type: str
        """

        self._object_type = object_type

    @property
    def dns_name(self):
        """
        Gets the dns_name of this PkixSubjectAlternateName.
        Alternate DNS names for the host.

        :return: The dns_name of this PkixSubjectAlternateName.
        :rtype: list[str]
        """
        return self._dns_name

    @dns_name.setter
    def dns_name(self, dns_name):
        """
        Sets the dns_name of this PkixSubjectAlternateName.
        Alternate DNS names for the host.

        :param dns_name: The dns_name of this PkixSubjectAlternateName.
        :type: list[str]
        """

        self._dns_name = dns_name

    @property
    def email_address(self):
        """
        Gets the email_address of this PkixSubjectAlternateName.
        Alternate email addresses for the host.

        :return: The email_address of this PkixSubjectAlternateName.
        :rtype: list[str]
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """
        Sets the email_address of this PkixSubjectAlternateName.
        Alternate email addresses for the host.

        :param email_address: The email_address of this PkixSubjectAlternateName.
        :type: list[str]
        """

        self._email_address = email_address

    @property
    def ip_address(self):
        """
        Gets the ip_address of this PkixSubjectAlternateName.
        Alternate IP addresses for the host.

        :return: The ip_address of this PkixSubjectAlternateName.
        :rtype: list[str]
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """
        Sets the ip_address of this PkixSubjectAlternateName.
        Alternate IP addresses for the host.

        :param ip_address: The ip_address of this PkixSubjectAlternateName.
        :type: list[str]
        """

        self._ip_address = ip_address

    @property
    def uri(self):
        """
        Gets the uri of this PkixSubjectAlternateName.
        Alternate URIs for the host.

        :return: The uri of this PkixSubjectAlternateName.
        :rtype: list[str]
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this PkixSubjectAlternateName.
        Alternate URIs for the host.

        :param uri: The uri of this PkixSubjectAlternateName.
        :type: list[str]
        """

        self._uri = uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PkixSubjectAlternateName):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
