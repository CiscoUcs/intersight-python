# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class FirmwareUpgrade(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'direct_download': 'FirmwareDirectDownload',
        'network_share': 'FirmwareNetworkShare',
        'upgrade_type': 'str',
        'device': 'AssetDeviceRegistration',
        'distributable': 'FirmwareDistributable',
        'server': 'ComputeRackUnit',
        'upgrade_status': 'FirmwareUpgradeStatus'
    }

    attribute_map = {
        'direct_download': 'DirectDownload',
        'network_share': 'NetworkShare',
        'upgrade_type': 'UpgradeType',
        'device': 'Device',
        'distributable': 'Distributable',
        'server': 'Server',
        'upgrade_status': 'UpgradeStatus'
    }

    def __init__(self,
                 direct_download=None,
                 network_share=None,
                 upgrade_type='direct_upgrade',
                 device=None,
                 distributable=None,
                 server=None,
                 upgrade_status=None,
                 local_vars_configuration=None):  # noqa: E501
        """FirmwareUpgrade - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._direct_download = None
        self._network_share = None
        self._upgrade_type = None
        self._device = None
        self._distributable = None
        self._server = None
        self._upgrade_status = None
        self.discriminator = None

        if direct_download is not None:
            self.direct_download = direct_download
        if network_share is not None:
            self.network_share = network_share
        if upgrade_type is not None:
            self.upgrade_type = upgrade_type
        if device is not None:
            self.device = device
        if distributable is not None:
            self.distributable = distributable
        if server is not None:
            self.server = server
        if upgrade_status is not None:
            self.upgrade_status = upgrade_status

    @property
    def direct_download(self):
        """Gets the direct_download of this FirmwareUpgrade.  # noqa: E501


        :return: The direct_download of this FirmwareUpgrade.  # noqa: E501
        :rtype: FirmwareDirectDownload
        """
        return self._direct_download

    @direct_download.setter
    def direct_download(self, direct_download):
        """Sets the direct_download of this FirmwareUpgrade.


        :param direct_download: The direct_download of this FirmwareUpgrade.  # noqa: E501
        :type: FirmwareDirectDownload
        """

        self._direct_download = direct_download

    @property
    def network_share(self):
        """Gets the network_share of this FirmwareUpgrade.  # noqa: E501


        :return: The network_share of this FirmwareUpgrade.  # noqa: E501
        :rtype: FirmwareNetworkShare
        """
        return self._network_share

    @network_share.setter
    def network_share(self, network_share):
        """Sets the network_share of this FirmwareUpgrade.


        :param network_share: The network_share of this FirmwareUpgrade.  # noqa: E501
        :type: FirmwareNetworkShare
        """

        self._network_share = network_share

    @property
    def upgrade_type(self):
        """Gets the upgrade_type of this FirmwareUpgrade.  # noqa: E501

        Desired upgrade mode to choose either direct download based upgrade or network share upgrade.     # noqa: E501

        :return: The upgrade_type of this FirmwareUpgrade.  # noqa: E501
        :rtype: str
        """
        return self._upgrade_type

    @upgrade_type.setter
    def upgrade_type(self, upgrade_type):
        """Sets the upgrade_type of this FirmwareUpgrade.

        Desired upgrade mode to choose either direct download based upgrade or network share upgrade.     # noqa: E501

        :param upgrade_type: The upgrade_type of this FirmwareUpgrade.  # noqa: E501
        :type: str
        """
        allowed_values = ["direct_upgrade", "network_upgrade"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and upgrade_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `upgrade_type` ({0}), must be one of {1}"  # noqa: E501
                .format(upgrade_type, allowed_values))

        self._upgrade_type = upgrade_type

    @property
    def device(self):
        """Gets the device of this FirmwareUpgrade.  # noqa: E501


        :return: The device of this FirmwareUpgrade.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this FirmwareUpgrade.


        :param device: The device of this FirmwareUpgrade.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._device = device

    @property
    def distributable(self):
        """Gets the distributable of this FirmwareUpgrade.  # noqa: E501


        :return: The distributable of this FirmwareUpgrade.  # noqa: E501
        :rtype: FirmwareDistributable
        """
        return self._distributable

    @distributable.setter
    def distributable(self, distributable):
        """Sets the distributable of this FirmwareUpgrade.


        :param distributable: The distributable of this FirmwareUpgrade.  # noqa: E501
        :type: FirmwareDistributable
        """

        self._distributable = distributable

    @property
    def server(self):
        """Gets the server of this FirmwareUpgrade.  # noqa: E501


        :return: The server of this FirmwareUpgrade.  # noqa: E501
        :rtype: ComputeRackUnit
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this FirmwareUpgrade.


        :param server: The server of this FirmwareUpgrade.  # noqa: E501
        :type: ComputeRackUnit
        """

        self._server = server

    @property
    def upgrade_status(self):
        """Gets the upgrade_status of this FirmwareUpgrade.  # noqa: E501


        :return: The upgrade_status of this FirmwareUpgrade.  # noqa: E501
        :rtype: FirmwareUpgradeStatus
        """
        return self._upgrade_status

    @upgrade_status.setter
    def upgrade_status(self, upgrade_status):
        """Sets the upgrade_status of this FirmwareUpgrade.


        :param upgrade_status: The upgrade_status of this FirmwareUpgrade.  # noqa: E501
        :type: FirmwareUpgradeStatus
        """

        self._upgrade_status = upgrade_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirmwareUpgrade):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FirmwareUpgrade):
            return True

        return self.to_dict() != other.to_dict()
