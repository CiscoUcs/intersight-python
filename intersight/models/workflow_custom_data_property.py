# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1461
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorkflowCustomDataProperty(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'catalog_moid': 'str',
        'custom_data_type_id': 'str',
        'custom_data_type_name': 'str'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'catalog_moid': 'CatalogMoid',
        'custom_data_type_id': 'CustomDataTypeId',
        'custom_data_type_name': 'CustomDataTypeName'
    }

    def __init__(self, object_type=None, catalog_moid=None, custom_data_type_id=None, custom_data_type_name=None):
        """
        WorkflowCustomDataProperty - a model defined in Swagger
        """

        self._object_type = None
        self._catalog_moid = None
        self._custom_data_type_id = None
        self._custom_data_type_name = None

        if object_type is not None:
          self.object_type = object_type
        if catalog_moid is not None:
          self.catalog_moid = catalog_moid
        if custom_data_type_id is not None:
          self.custom_data_type_id = custom_data_type_id
        if custom_data_type_name is not None:
          self.custom_data_type_name = custom_data_type_name

    @property
    def object_type(self):
        """
        Gets the object_type of this WorkflowCustomDataProperty.
        The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.

        :return: The object_type of this WorkflowCustomDataProperty.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this WorkflowCustomDataProperty.
        The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.

        :param object_type: The object_type of this WorkflowCustomDataProperty.
        :type: str
        """

        self._object_type = object_type

    @property
    def catalog_moid(self):
        """
        Gets the catalog_moid of this WorkflowCustomDataProperty.
        Specify the catalog moid that this custom data type belongs.

        :return: The catalog_moid of this WorkflowCustomDataProperty.
        :rtype: str
        """
        return self._catalog_moid

    @catalog_moid.setter
    def catalog_moid(self, catalog_moid):
        """
        Sets the catalog_moid of this WorkflowCustomDataProperty.
        Specify the catalog moid that this custom data type belongs.

        :param catalog_moid: The catalog_moid of this WorkflowCustomDataProperty.
        :type: str
        """

        self._catalog_moid = catalog_moid

    @property
    def custom_data_type_id(self):
        """
        Gets the custom_data_type_id of this WorkflowCustomDataProperty.
        The resolved custom data type definition managed object.

        :return: The custom_data_type_id of this WorkflowCustomDataProperty.
        :rtype: str
        """
        return self._custom_data_type_id

    @custom_data_type_id.setter
    def custom_data_type_id(self, custom_data_type_id):
        """
        Sets the custom_data_type_id of this WorkflowCustomDataProperty.
        The resolved custom data type definition managed object.

        :param custom_data_type_id: The custom_data_type_id of this WorkflowCustomDataProperty.
        :type: str
        """

        self._custom_data_type_id = custom_data_type_id

    @property
    def custom_data_type_name(self):
        """
        Gets the custom_data_type_name of this WorkflowCustomDataProperty.
        Name of the custom data type for this input.

        :return: The custom_data_type_name of this WorkflowCustomDataProperty.
        :rtype: str
        """
        return self._custom_data_type_name

    @custom_data_type_name.setter
    def custom_data_type_name(self, custom_data_type_name):
        """
        Sets the custom_data_type_name of this WorkflowCustomDataProperty.
        Name of the custom data type for this input.

        :param custom_data_type_name: The custom_data_type_name of this WorkflowCustomDataProperty.
        :type: str
        """

        self._custom_data_type_name = custom_data_type_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkflowCustomDataProperty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
