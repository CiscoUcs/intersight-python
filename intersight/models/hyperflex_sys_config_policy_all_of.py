# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class HyperflexSysConfigPolicyAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dns_domain_name': 'str',
        'dns_servers': 'list[str]',
        'ntp_servers': 'list[str]',
        'timezone': 'str',
        'cluster_profiles': 'list[HyperflexClusterProfile]',
        'organization': 'OrganizationOrganization'
    }

    attribute_map = {
        'dns_domain_name': 'DnsDomainName',
        'dns_servers': 'DnsServers',
        'ntp_servers': 'NtpServers',
        'timezone': 'Timezone',
        'cluster_profiles': 'ClusterProfiles',
        'organization': 'Organization'
    }

    def __init__(self,
                 dns_domain_name=None,
                 dns_servers=None,
                 ntp_servers=None,
                 timezone='Pacific/Niue',
                 cluster_profiles=None,
                 organization=None,
                 local_vars_configuration=None):  # noqa: E501
        """HyperflexSysConfigPolicyAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dns_domain_name = None
        self._dns_servers = None
        self._ntp_servers = None
        self._timezone = None
        self._cluster_profiles = None
        self._organization = None
        self.discriminator = None

        if dns_domain_name is not None:
            self.dns_domain_name = dns_domain_name
        if dns_servers is not None:
            self.dns_servers = dns_servers
        if ntp_servers is not None:
            self.ntp_servers = ntp_servers
        if timezone is not None:
            self.timezone = timezone
        if cluster_profiles is not None:
            self.cluster_profiles = cluster_profiles
        if organization is not None:
            self.organization = organization

    @property
    def dns_domain_name(self):
        """Gets the dns_domain_name of this HyperflexSysConfigPolicyAllOf.  # noqa: E501

        The DNS Search Domain Name. This setting applies to HyperFlex Data Platform 3.0 or later only.    # noqa: E501

        :return: The dns_domain_name of this HyperflexSysConfigPolicyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._dns_domain_name

    @dns_domain_name.setter
    def dns_domain_name(self, dns_domain_name):
        """Sets the dns_domain_name of this HyperflexSysConfigPolicyAllOf.

        The DNS Search Domain Name. This setting applies to HyperFlex Data Platform 3.0 or later only.    # noqa: E501

        :param dns_domain_name: The dns_domain_name of this HyperflexSysConfigPolicyAllOf.  # noqa: E501
        :type: str
        """

        self._dns_domain_name = dns_domain_name

    @property
    def dns_servers(self):
        """Gets the dns_servers of this HyperflexSysConfigPolicyAllOf.  # noqa: E501


        :return: The dns_servers of this HyperflexSysConfigPolicyAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers):
        """Sets the dns_servers of this HyperflexSysConfigPolicyAllOf.


        :param dns_servers: The dns_servers of this HyperflexSysConfigPolicyAllOf.  # noqa: E501
        :type: list[str]
        """

        self._dns_servers = dns_servers

    @property
    def ntp_servers(self):
        """Gets the ntp_servers of this HyperflexSysConfigPolicyAllOf.  # noqa: E501


        :return: The ntp_servers of this HyperflexSysConfigPolicyAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._ntp_servers

    @ntp_servers.setter
    def ntp_servers(self, ntp_servers):
        """Sets the ntp_servers of this HyperflexSysConfigPolicyAllOf.


        :param ntp_servers: The ntp_servers of this HyperflexSysConfigPolicyAllOf.  # noqa: E501
        :type: list[str]
        """

        self._ntp_servers = ntp_servers

    @property
    def timezone(self):
        """Gets the timezone of this HyperflexSysConfigPolicyAllOf.  # noqa: E501

        The timezone of the HyperFlex cluster's system clock.     # noqa: E501

        :return: The timezone of this HyperflexSysConfigPolicyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this HyperflexSysConfigPolicyAllOf.

        The timezone of the HyperFlex cluster's system clock.     # noqa: E501

        :param timezone: The timezone of this HyperflexSysConfigPolicyAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "Pacific/Niue", "Pacific/Pago_Pago", "Pacific/Honolulu",
            "Pacific/Rarotonga", "Pacific/Tahiti", "Pacific/Marquesas",
            "America/Anchorage", "Pacific/Gambier", "America/Los_Angeles",
            "America/Tijuana", "America/Vancouver", "America/Whitehorse",
            "Pacific/Pitcairn", "America/Dawson_Creek", "America/Denver",
            "America/Edmonton", "America/Hermosillo", "America/Mazatlan",
            "America/Phoenix", "America/Yellowknife", "America/Belize",
            "America/Chicago", "America/Costa_Rica", "America/El_Salvador",
            "America/Guatemala", "America/Managua", "America/Mexico_City",
            "America/Regina", "America/Tegucigalpa", "America/Winnipeg",
            "Pacific/Galapagos", "America/Bogota", "America/Cancun",
            "America/Cayman", "America/Guayaquil", "America/Havana",
            "America/Iqaluit", "America/Jamaica", "America/Lima",
            "America/Nassau", "America/New_York", "America/Panama",
            "America/Port-au-Prince", "America/Rio_Branco", "America/Toronto",
            "Pacific/Easter", "America/Caracas", "America/Asuncion",
            "America/Barbados", "America/Boa_Vista", "America/Campo_Grande",
            "America/Cuiaba", "America/Curacao", "America/Grand_Turk",
            "America/Guyana", "America/Halifax", "America/La_Paz",
            "America/Manaus", "America/Martinique", "America/Port_of_Spain",
            "America/Porto_Velho", "America/Puerto_Rico",
            "America/Santo_Domingo", "America/Thule", "Atlantic/Bermuda",
            "America/St_Johns", "America/Araguaina",
            "America/Argentina/Buenos_Aires", "America/Bahia", "America/Belem",
            "America/Cayenne", "America/Fortaleza", "America/Godthab",
            "America/Maceio", "America/Miquelon", "America/Montevideo",
            "America/Paramaribo", "America/Recife", "America/Santiago",
            "America/Sao_Paulo", "Antarctica/Palmer", "Antarctica/Rothera",
            "Atlantic/Stanley", "America/Noronha", "Atlantic/South_Georgia",
            "America/Scoresbysund", "Atlantic/Azores", "Atlantic/Cape_Verde",
            "Africa/Abidjan", "Africa/Accra", "Africa/Bissau",
            "Africa/Casablanca", "Africa/El_Aaiun", "Africa/Monrovia",
            "America/Danmarkshavn", "Atlantic/Canary", "Atlantic/Faroe",
            "Atlantic/Reykjavik", "Etc/GMT", "Europe/Dublin", "Europe/Lisbon",
            "Europe/London", "Africa/Algiers", "Africa/Ceuta", "Africa/Lagos",
            "Africa/Ndjamena", "Africa/Tunis", "Africa/Windhoek",
            "Europe/Amsterdam", "Europe/Andorra", "Europe/Belgrade",
            "Europe/Berlin", "Europe/Brussels", "Europe/Budapest",
            "Europe/Copenhagen", "Europe/Gibraltar", "Europe/Luxembourg",
            "Europe/Madrid", "Europe/Malta", "Europe/Monaco", "Europe/Oslo",
            "Europe/Paris", "Europe/Prague", "Europe/Rome", "Europe/Stockholm",
            "Europe/Tirane", "Europe/Vienna", "Europe/Warsaw", "Europe/Zurich",
            "Africa/Cairo", "Africa/Johannesburg", "Africa/Maputo",
            "Africa/Tripoli", "Asia/Amman", "Asia/Beirut", "Asia/Damascus",
            "Asia/Gaza", "Asia/Jerusalem", "Asia/Nicosia", "Europe/Athens",
            "Europe/Bucharest", "Europe/Chisinau", "Europe/Helsinki",
            "Europe/Istanbul", "Europe/Kaliningrad", "Europe/Kiev",
            "Europe/Riga", "Europe/Sofia", "Europe/Tallinn", "Europe/Vilnius",
            "Africa/Khartoum", "Africa/Nairobi", "Antarctica/Syowa",
            "Asia/Baghdad", "Asia/Qatar", "Asia/Riyadh", "Europe/Minsk",
            "Europe/Moscow", "Asia/Tehran", "Asia/Baku", "Asia/Dubai",
            "Asia/Tbilisi", "Asia/Yerevan", "Europe/Samara", "Indian/Mahe",
            "Indian/Mauritius", "Indian/Reunion", "Asia/Kabul",
            "Antarctica/Mawson", "Asia/Aqtau", "Asia/Aqtobe", "Asia/Ashgabat",
            "Asia/Dushanbe", "Asia/Karachi", "Asia/Tashkent",
            "Asia/Yekaterinburg", "Indian/Kerguelen", "Indian/Maldives",
            "Asia/Calcutta", "Asia/Kolkata", "Asia/Colombo", "Asia/Katmandu",
            "Antarctica/Vostok", "Asia/Almaty", "Asia/Bishkek", "Asia/Dhaka",
            "Asia/Omsk", "Asia/Thimphu", "Indian/Chagos", "Asia/Rangoon",
            "Indian/Cocos", "Antarctica/Davis", "Asia/Bangkok", "Asia/Hovd",
            "Asia/Jakarta", "Asia/Krasnoyarsk", "Asia/Saigon",
            "Indian/Christmas", "Antarctica/Casey", "Asia/Brunei",
            "Asia/Choibalsan", "Asia/Hong_Kong", "Asia/Irkutsk",
            "Asia/Kuala_Lumpur", "Asia/Macau", "Asia/Makassar", "Asia/Manila",
            "Asia/Shanghai", "Asia/Singapore", "Asia/Taipei",
            "Asia/Ulaanbaatar", "Australia/Perth", "Asia/Pyongyang",
            "Asia/Dili", "Asia/Jayapura", "Asia/Seoul", "Asia/Tokyo",
            "Asia/Yakutsk", "Pacific/Palau", "Australia/Adelaide",
            "Australia/Darwin", "Antarctica/DumontDUrville", "Asia/Magadan",
            "Asia/Vladivostok", "Australia/Brisbane", "Australia/Hobart",
            "Australia/Sydney", "Pacific/Chuuk", "Pacific/Guam",
            "Pacific/Port_Moresby", "Pacific/Efate", "Pacific/Guadalcanal",
            "Pacific/Kosrae", "Pacific/Norfolk", "Pacific/Noumea",
            "Pacific/Pohnpei", "Asia/Kamchatka", "Pacific/Auckland",
            "Pacific/Fiji", "Pacific/Funafuti", "Pacific/Kwajalein",
            "Pacific/Majuro", "Pacific/Nauru", "Pacific/Tarawa",
            "Pacific/Wake", "Pacific/Wallis", "Pacific/Apia",
            "Pacific/Enderbury", "Pacific/Fakaofo", "Pacific/Tongatapu",
            "Pacific/Kiritimati"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and timezone not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `timezone` ({0}), must be one of {1}"  # noqa: E501
                .format(timezone, allowed_values))

        self._timezone = timezone

    @property
    def cluster_profiles(self):
        """Gets the cluster_profiles of this HyperflexSysConfigPolicyAllOf.  # noqa: E501

        A reference to a hyperflexClusterProfile resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of cluster profiles using this policy.   # noqa: E501

        :return: The cluster_profiles of this HyperflexSysConfigPolicyAllOf.  # noqa: E501
        :rtype: list[HyperflexClusterProfile]
        """
        return self._cluster_profiles

    @cluster_profiles.setter
    def cluster_profiles(self, cluster_profiles):
        """Sets the cluster_profiles of this HyperflexSysConfigPolicyAllOf.

        A reference to a hyperflexClusterProfile resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of cluster profiles using this policy.   # noqa: E501

        :param cluster_profiles: The cluster_profiles of this HyperflexSysConfigPolicyAllOf.  # noqa: E501
        :type: list[HyperflexClusterProfile]
        """

        self._cluster_profiles = cluster_profiles

    @property
    def organization(self):
        """Gets the organization of this HyperflexSysConfigPolicyAllOf.  # noqa: E501


        :return: The organization of this HyperflexSysConfigPolicyAllOf.  # noqa: E501
        :rtype: OrganizationOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this HyperflexSysConfigPolicyAllOf.


        :param organization: The organization of this HyperflexSysConfigPolicyAllOf.  # noqa: E501
        :type: OrganizationOrganization
        """

        self._organization = organization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HyperflexSysConfigPolicyAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HyperflexSysConfigPolicyAllOf):
            return True

        return self.to_dict() != other.to_dict()
