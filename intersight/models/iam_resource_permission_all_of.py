# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class IamResourcePermissionAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'permission_roles': 'list[IamPermissionToRoles]',
        'target_app': 'str',
        'holder': 'IamSecurityHolder',
        'resource': 'MoBaseMo'
    }

    attribute_map = {
        'permission_roles': 'PermissionRoles',
        'target_app': 'TargetApp',
        'holder': 'Holder',
        'resource': 'Resource'
    }

    def __init__(self,
                 permission_roles=None,
                 target_app=None,
                 holder=None,
                 resource=None,
                 local_vars_configuration=None):  # noqa: E501
        """IamResourcePermissionAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._permission_roles = None
        self._target_app = None
        self._holder = None
        self._resource = None
        self.discriminator = None

        if permission_roles is not None:
            self.permission_roles = permission_roles
        if target_app is not None:
            self.target_app = target_app
        if holder is not None:
            self.holder = holder
        if resource is not None:
            self.resource = resource

    @property
    def permission_roles(self):
        """Gets the permission_roles of this IamResourcePermissionAllOf.  # noqa: E501


        :return: The permission_roles of this IamResourcePermissionAllOf.  # noqa: E501
        :rtype: list[IamPermissionToRoles]
        """
        return self._permission_roles

    @permission_roles.setter
    def permission_roles(self, permission_roles):
        """Sets the permission_roles of this IamResourcePermissionAllOf.


        :param permission_roles: The permission_roles of this IamResourcePermissionAllOf.  # noqa: E501
        :type: list[IamPermissionToRoles]
        """

        self._permission_roles = permission_roles

    @property
    def target_app(self):
        """Gets the target_app of this IamResourcePermissionAllOf.  # noqa: E501

        Name of the service owning the resource.     # noqa: E501

        :return: The target_app of this IamResourcePermissionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._target_app

    @target_app.setter
    def target_app(self, target_app):
        """Sets the target_app of this IamResourcePermissionAllOf.

        Name of the service owning the resource.     # noqa: E501

        :param target_app: The target_app of this IamResourcePermissionAllOf.  # noqa: E501
        :type: str
        """

        self._target_app = target_app

    @property
    def holder(self):
        """Gets the holder of this IamResourcePermissionAllOf.  # noqa: E501


        :return: The holder of this IamResourcePermissionAllOf.  # noqa: E501
        :rtype: IamSecurityHolder
        """
        return self._holder

    @holder.setter
    def holder(self, holder):
        """Sets the holder of this IamResourcePermissionAllOf.


        :param holder: The holder of this IamResourcePermissionAllOf.  # noqa: E501
        :type: IamSecurityHolder
        """

        self._holder = holder

    @property
    def resource(self):
        """Gets the resource of this IamResourcePermissionAllOf.  # noqa: E501


        :return: The resource of this IamResourcePermissionAllOf.  # noqa: E501
        :rtype: MoBaseMo
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this IamResourcePermissionAllOf.


        :param resource: The resource of this IamResourcePermissionAllOf.  # noqa: E501
        :type: MoBaseMo
        """

        self._resource = resource

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IamResourcePermissionAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IamResourcePermissionAllOf):
            return True

        return self.to_dict() != other.to_dict()
