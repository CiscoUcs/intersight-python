# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class IamLdapPolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'base_properties': 'IamLdapBaseProperties',
        'dns_parameters': 'IamLdapDnsParameters',
        'enable_dns': 'bool',
        'enabled': 'bool',
        'user_search_precedence': 'str',
        'appliance_account': 'IamAccount',
        'groups': 'list[IamLdapGroup]',
        'organization': 'OrganizationOrganization',
        'profiles': 'list[PolicyAbstractConfigProfile]',
        'providers': 'list[IamLdapProvider]'
    }

    attribute_map = {
        'base_properties': 'BaseProperties',
        'dns_parameters': 'DnsParameters',
        'enable_dns': 'EnableDns',
        'enabled': 'Enabled',
        'user_search_precedence': 'UserSearchPrecedence',
        'appliance_account': 'ApplianceAccount',
        'groups': 'Groups',
        'organization': 'Organization',
        'profiles': 'Profiles',
        'providers': 'Providers'
    }

    def __init__(self,
                 base_properties=None,
                 dns_parameters=None,
                 enable_dns=None,
                 enabled=None,
                 user_search_precedence='LocalUserDb',
                 appliance_account=None,
                 groups=None,
                 organization=None,
                 profiles=None,
                 providers=None,
                 local_vars_configuration=None):  # noqa: E501
        """IamLdapPolicy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._base_properties = None
        self._dns_parameters = None
        self._enable_dns = None
        self._enabled = None
        self._user_search_precedence = None
        self._appliance_account = None
        self._groups = None
        self._organization = None
        self._profiles = None
        self._providers = None
        self.discriminator = None

        if base_properties is not None:
            self.base_properties = base_properties
        if dns_parameters is not None:
            self.dns_parameters = dns_parameters
        if enable_dns is not None:
            self.enable_dns = enable_dns
        if enabled is not None:
            self.enabled = enabled
        if user_search_precedence is not None:
            self.user_search_precedence = user_search_precedence
        if appliance_account is not None:
            self.appliance_account = appliance_account
        if groups is not None:
            self.groups = groups
        if organization is not None:
            self.organization = organization
        if profiles is not None:
            self.profiles = profiles
        if providers is not None:
            self.providers = providers

    @property
    def base_properties(self):
        """Gets the base_properties of this IamLdapPolicy.  # noqa: E501


        :return: The base_properties of this IamLdapPolicy.  # noqa: E501
        :rtype: IamLdapBaseProperties
        """
        return self._base_properties

    @base_properties.setter
    def base_properties(self, base_properties):
        """Sets the base_properties of this IamLdapPolicy.


        :param base_properties: The base_properties of this IamLdapPolicy.  # noqa: E501
        :type: IamLdapBaseProperties
        """

        self._base_properties = base_properties

    @property
    def dns_parameters(self):
        """Gets the dns_parameters of this IamLdapPolicy.  # noqa: E501


        :return: The dns_parameters of this IamLdapPolicy.  # noqa: E501
        :rtype: IamLdapDnsParameters
        """
        return self._dns_parameters

    @dns_parameters.setter
    def dns_parameters(self, dns_parameters):
        """Sets the dns_parameters of this IamLdapPolicy.


        :param dns_parameters: The dns_parameters of this IamLdapPolicy.  # noqa: E501
        :type: IamLdapDnsParameters
        """

        self._dns_parameters = dns_parameters

    @property
    def enable_dns(self):
        """Gets the enable_dns of this IamLdapPolicy.  # noqa: E501

        Enables DNS to access LDAP servers.    # noqa: E501

        :return: The enable_dns of this IamLdapPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._enable_dns

    @enable_dns.setter
    def enable_dns(self, enable_dns):
        """Sets the enable_dns of this IamLdapPolicy.

        Enables DNS to access LDAP servers.    # noqa: E501

        :param enable_dns: The enable_dns of this IamLdapPolicy.  # noqa: E501
        :type: bool
        """

        self._enable_dns = enable_dns

    @property
    def enabled(self):
        """Gets the enabled of this IamLdapPolicy.  # noqa: E501

        LDAP server performs authentication.    # noqa: E501

        :return: The enabled of this IamLdapPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this IamLdapPolicy.

        LDAP server performs authentication.    # noqa: E501

        :param enabled: The enabled of this IamLdapPolicy.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def user_search_precedence(self):
        """Gets the user_search_precedence of this IamLdapPolicy.  # noqa: E501

        Search precedence between local user database and LDAP user database.     # noqa: E501

        :return: The user_search_precedence of this IamLdapPolicy.  # noqa: E501
        :rtype: str
        """
        return self._user_search_precedence

    @user_search_precedence.setter
    def user_search_precedence(self, user_search_precedence):
        """Sets the user_search_precedence of this IamLdapPolicy.

        Search precedence between local user database and LDAP user database.     # noqa: E501

        :param user_search_precedence: The user_search_precedence of this IamLdapPolicy.  # noqa: E501
        :type: str
        """
        allowed_values = ["LocalUserDb", "LDAPUserDb"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and user_search_precedence not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `user_search_precedence` ({0}), must be one of {1}"  # noqa: E501
                .format(user_search_precedence, allowed_values))

        self._user_search_precedence = user_search_precedence

    @property
    def appliance_account(self):
        """Gets the appliance_account of this IamLdapPolicy.  # noqa: E501


        :return: The appliance_account of this IamLdapPolicy.  # noqa: E501
        :rtype: IamAccount
        """
        return self._appliance_account

    @appliance_account.setter
    def appliance_account(self, appliance_account):
        """Sets the appliance_account of this IamLdapPolicy.


        :param appliance_account: The appliance_account of this IamLdapPolicy.  # noqa: E501
        :type: IamAccount
        """

        self._appliance_account = appliance_account

    @property
    def groups(self):
        """Gets the groups of this IamLdapPolicy.  # noqa: E501

        A reference to a iamLdapGroup resource. When the $expand query parameter is specified, the referenced resource is returned inline. Relationship to collection of LDAP Groups.   # noqa: E501

        :return: The groups of this IamLdapPolicy.  # noqa: E501
        :rtype: list[IamLdapGroup]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this IamLdapPolicy.

        A reference to a iamLdapGroup resource. When the $expand query parameter is specified, the referenced resource is returned inline. Relationship to collection of LDAP Groups.   # noqa: E501

        :param groups: The groups of this IamLdapPolicy.  # noqa: E501
        :type: list[IamLdapGroup]
        """

        self._groups = groups

    @property
    def organization(self):
        """Gets the organization of this IamLdapPolicy.  # noqa: E501


        :return: The organization of this IamLdapPolicy.  # noqa: E501
        :rtype: OrganizationOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this IamLdapPolicy.


        :param organization: The organization of this IamLdapPolicy.  # noqa: E501
        :type: OrganizationOrganization
        """

        self._organization = organization

    @property
    def profiles(self):
        """Gets the profiles of this IamLdapPolicy.  # noqa: E501

        A reference to a policyAbstractConfigProfile resource. When the $expand query parameter is specified, the referenced resource is returned inline. Relationship to the profile object.   # noqa: E501

        :return: The profiles of this IamLdapPolicy.  # noqa: E501
        :rtype: list[PolicyAbstractConfigProfile]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this IamLdapPolicy.

        A reference to a policyAbstractConfigProfile resource. When the $expand query parameter is specified, the referenced resource is returned inline. Relationship to the profile object.   # noqa: E501

        :param profiles: The profiles of this IamLdapPolicy.  # noqa: E501
        :type: list[PolicyAbstractConfigProfile]
        """

        self._profiles = profiles

    @property
    def providers(self):
        """Gets the providers of this IamLdapPolicy.  # noqa: E501

        A reference to a iamLdapProvider resource. When the $expand query parameter is specified, the referenced resource is returned inline. Relationship to collection of LDAP Providers.   # noqa: E501

        :return: The providers of this IamLdapPolicy.  # noqa: E501
        :rtype: list[IamLdapProvider]
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this IamLdapPolicy.

        A reference to a iamLdapProvider resource. When the $expand query parameter is specified, the referenced resource is returned inline. Relationship to collection of LDAP Providers.   # noqa: E501

        :param providers: The providers of this IamLdapPolicy.  # noqa: E501
        :type: list[IamLdapProvider]
        """

        self._providers = providers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IamLdapPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IamLdapPolicy):
            return True

        return self.to_dict() != other.to_dict()
