# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1415
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AssetProductInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'bill_to': 'AssetOptionalAddressInformation',
        'description': 'str',
        'family': 'str',
        'group': 'str',
        'number': 'str',
        'ship_to': 'AssetOptionalAddressInformation',
        'sub_type': 'str'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'bill_to': 'BillTo',
        'description': 'Description',
        'family': 'Family',
        'group': 'Group',
        'number': 'Number',
        'ship_to': 'ShipTo',
        'sub_type': 'SubType'
    }

    def __init__(self, object_type=None, bill_to=None, description=None, family=None, group=None, number=None, ship_to=None, sub_type=None):
        """
        AssetProductInformation - a model defined in Swagger
        """

        self._object_type = None
        self._bill_to = None
        self._description = None
        self._family = None
        self._group = None
        self._number = None
        self._ship_to = None
        self._sub_type = None

        if object_type is not None:
          self.object_type = object_type
        if bill_to is not None:
          self.bill_to = bill_to
        if description is not None:
          self.description = description
        if family is not None:
          self.family = family
        if group is not None:
          self.group = group
        if number is not None:
          self.number = number
        if ship_to is not None:
          self.ship_to = ship_to
        if sub_type is not None:
          self.sub_type = sub_type

    @property
    def object_type(self):
        """
        Gets the object_type of this AssetProductInformation.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :return: The object_type of this AssetProductInformation.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this AssetProductInformation.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :param object_type: The object_type of this AssetProductInformation.
        :type: str
        """

        self._object_type = object_type

    @property
    def bill_to(self):
        """
        Gets the bill_to of this AssetProductInformation.
        Billing address provided by customer while buying this Cisco product.  

        :return: The bill_to of this AssetProductInformation.
        :rtype: AssetOptionalAddressInformation
        """
        return self._bill_to

    @bill_to.setter
    def bill_to(self, bill_to):
        """
        Sets the bill_to of this AssetProductInformation.
        Billing address provided by customer while buying this Cisco product.  

        :param bill_to: The bill_to of this AssetProductInformation.
        :type: AssetOptionalAddressInformation
        """

        self._bill_to = bill_to

    @property
    def description(self):
        """
        Gets the description of this AssetProductInformation.
        Short description of the Cisco product that helps identify the product easily. example \"DISTI:UCS 6248UP 1RU Fabric Int/No PSU/32 UP/ 12p LIC\".  

        :return: The description of this AssetProductInformation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this AssetProductInformation.
        Short description of the Cisco product that helps identify the product easily. example \"DISTI:UCS 6248UP 1RU Fabric Int/No PSU/32 UP/ 12p LIC\".  

        :param description: The description of this AssetProductInformation.
        :type: str
        """

        self._description = description

    @property
    def family(self):
        """
        Gets the family of this AssetProductInformation.
        Family that the product belongs to. Example \"UCSB\".  

        :return: The family of this AssetProductInformation.
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """
        Sets the family of this AssetProductInformation.
        Family that the product belongs to. Example \"UCSB\".  

        :param family: The family of this AssetProductInformation.
        :type: str
        """

        self._family = family

    @property
    def group(self):
        """
        Gets the group of this AssetProductInformation.
        Group that the product belongs to. It is one higher level categorization above family. example \"Switch\".  

        :return: The group of this AssetProductInformation.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """
        Sets the group of this AssetProductInformation.
        Group that the product belongs to. It is one higher level categorization above family. example \"Switch\".  

        :param group: The group of this AssetProductInformation.
        :type: str
        """

        self._group = group

    @property
    def number(self):
        """
        Gets the number of this AssetProductInformation.
        Product number that identifies the product. example PID. example \"UCS-FI-6248UP-CH2\".  

        :return: The number of this AssetProductInformation.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """
        Sets the number of this AssetProductInformation.
        Product number that identifies the product. example PID. example \"UCS-FI-6248UP-CH2\".  

        :param number: The number of this AssetProductInformation.
        :type: str
        """

        self._number = number

    @property
    def ship_to(self):
        """
        Gets the ship_to of this AssetProductInformation.
        Shipping address provided by customer while buying this Cisco product.  

        :return: The ship_to of this AssetProductInformation.
        :rtype: AssetOptionalAddressInformation
        """
        return self._ship_to

    @ship_to.setter
    def ship_to(self, ship_to):
        """
        Sets the ship_to of this AssetProductInformation.
        Shipping address provided by customer while buying this Cisco product.  

        :param ship_to: The ship_to of this AssetProductInformation.
        :type: AssetOptionalAddressInformation
        """

        self._ship_to = ship_to

    @property
    def sub_type(self):
        """
        Gets the sub_type of this AssetProductInformation.
        Sub type of the product being specified. example \"UCS 6200 SER\".   

        :return: The sub_type of this AssetProductInformation.
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """
        Sets the sub_type of this AssetProductInformation.
        Sub type of the product being specified. example \"UCS 6200 SER\".   

        :param sub_type: The sub_type of this AssetProductInformation.
        :type: str
        """

        self._sub_type = sub_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AssetProductInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
