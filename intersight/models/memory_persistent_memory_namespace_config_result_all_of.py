# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class MemoryPersistentMemoryNamespaceConfigResultAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'config_status': 'str',
        'name': 'str',
        'socket_id': 'str',
        'socket_memory_id': 'str',
        'memory_persistent_memory_config_result':
        'MemoryPersistentMemoryConfigResult',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'config_status': 'ConfigStatus',
        'name': 'Name',
        'socket_id': 'SocketId',
        'socket_memory_id': 'SocketMemoryId',
        'memory_persistent_memory_config_result':
        'MemoryPersistentMemoryConfigResult',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 config_status=None,
                 name=None,
                 socket_id=None,
                 socket_memory_id=None,
                 memory_persistent_memory_config_result=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """MemoryPersistentMemoryNamespaceConfigResultAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._config_status = None
        self._name = None
        self._socket_id = None
        self._socket_memory_id = None
        self._memory_persistent_memory_config_result = None
        self._registered_device = None
        self.discriminator = None

        if config_status is not None:
            self.config_status = config_status
        if name is not None:
            self.name = name
        if socket_id is not None:
            self.socket_id = socket_id
        if socket_memory_id is not None:
            self.socket_memory_id = socket_memory_id
        if memory_persistent_memory_config_result is not None:
            self.memory_persistent_memory_config_result = memory_persistent_memory_config_result
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def config_status(self):
        """Gets the config_status of this MemoryPersistentMemoryNamespaceConfigResultAllOf.  # noqa: E501

        This represents the result of the previously configured Persistent Memory Namespace.    # noqa: E501

        :return: The config_status of this MemoryPersistentMemoryNamespaceConfigResultAllOf.  # noqa: E501
        :rtype: str
        """
        return self._config_status

    @config_status.setter
    def config_status(self, config_status):
        """Sets the config_status of this MemoryPersistentMemoryNamespaceConfigResultAllOf.

        This represents the result of the previously configured Persistent Memory Namespace.    # noqa: E501

        :param config_status: The config_status of this MemoryPersistentMemoryNamespaceConfigResultAllOf.  # noqa: E501
        :type: str
        """

        self._config_status = config_status

    @property
    def name(self):
        """Gets the name of this MemoryPersistentMemoryNamespaceConfigResultAllOf.  # noqa: E501

        This represents the name of a Persistent Memory Namespace to be configured.    # noqa: E501

        :return: The name of this MemoryPersistentMemoryNamespaceConfigResultAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MemoryPersistentMemoryNamespaceConfigResultAllOf.

        This represents the name of a Persistent Memory Namespace to be configured.    # noqa: E501

        :param name: The name of this MemoryPersistentMemoryNamespaceConfigResultAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def socket_id(self):
        """Gets the socket_id of this MemoryPersistentMemoryNamespaceConfigResultAllOf.  # noqa: E501

        This represents the Socket ID in which the Persistent Memory Namespace needed to be configured.    # noqa: E501

        :return: The socket_id of this MemoryPersistentMemoryNamespaceConfigResultAllOf.  # noqa: E501
        :rtype: str
        """
        return self._socket_id

    @socket_id.setter
    def socket_id(self, socket_id):
        """Sets the socket_id of this MemoryPersistentMemoryNamespaceConfigResultAllOf.

        This represents the Socket ID in which the Persistent Memory Namespace needed to be configured.    # noqa: E501

        :param socket_id: The socket_id of this MemoryPersistentMemoryNamespaceConfigResultAllOf.  # noqa: E501
        :type: str
        """

        self._socket_id = socket_id

    @property
    def socket_memory_id(self):
        """Gets the socket_memory_id of this MemoryPersistentMemoryNamespaceConfigResultAllOf.  # noqa: E501

        This represents the Socket Memory ID in which the Persistent Memory Namespace needed to be configured.     # noqa: E501

        :return: The socket_memory_id of this MemoryPersistentMemoryNamespaceConfigResultAllOf.  # noqa: E501
        :rtype: str
        """
        return self._socket_memory_id

    @socket_memory_id.setter
    def socket_memory_id(self, socket_memory_id):
        """Sets the socket_memory_id of this MemoryPersistentMemoryNamespaceConfigResultAllOf.

        This represents the Socket Memory ID in which the Persistent Memory Namespace needed to be configured.     # noqa: E501

        :param socket_memory_id: The socket_memory_id of this MemoryPersistentMemoryNamespaceConfigResultAllOf.  # noqa: E501
        :type: str
        """

        self._socket_memory_id = socket_memory_id

    @property
    def memory_persistent_memory_config_result(self):
        """Gets the memory_persistent_memory_config_result of this MemoryPersistentMemoryNamespaceConfigResultAllOf.  # noqa: E501


        :return: The memory_persistent_memory_config_result of this MemoryPersistentMemoryNamespaceConfigResultAllOf.  # noqa: E501
        :rtype: MemoryPersistentMemoryConfigResult
        """
        return self._memory_persistent_memory_config_result

    @memory_persistent_memory_config_result.setter
    def memory_persistent_memory_config_result(
            self, memory_persistent_memory_config_result):
        """Sets the memory_persistent_memory_config_result of this MemoryPersistentMemoryNamespaceConfigResultAllOf.


        :param memory_persistent_memory_config_result: The memory_persistent_memory_config_result of this MemoryPersistentMemoryNamespaceConfigResultAllOf.  # noqa: E501
        :type: MemoryPersistentMemoryConfigResult
        """

        self._memory_persistent_memory_config_result = memory_persistent_memory_config_result

    @property
    def registered_device(self):
        """Gets the registered_device of this MemoryPersistentMemoryNamespaceConfigResultAllOf.  # noqa: E501


        :return: The registered_device of this MemoryPersistentMemoryNamespaceConfigResultAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this MemoryPersistentMemoryNamespaceConfigResultAllOf.


        :param registered_device: The registered_device of this MemoryPersistentMemoryNamespaceConfigResultAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other,
                          MemoryPersistentMemoryNamespaceConfigResultAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other,
                          MemoryPersistentMemoryNamespaceConfigResultAllOf):
            return True

        return self.to_dict() != other.to_dict()
