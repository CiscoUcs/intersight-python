# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class PortGroupAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'transport': 'str',
        'equipment_shared_io_module': 'EquipmentSharedIoModule',
        'equipment_switch_card': 'EquipmentSwitchCard',
        'ethernet_ports': 'list[EtherPhysicalPort]',
        'fc_ports': 'list[FcPhysicalPort]',
        'registered_device': 'AssetDeviceRegistration',
        'sub_groups': 'list[PortSubGroup]'
    }

    attribute_map = {
        'transport': 'Transport',
        'equipment_shared_io_module': 'EquipmentSharedIoModule',
        'equipment_switch_card': 'EquipmentSwitchCard',
        'ethernet_ports': 'EthernetPorts',
        'fc_ports': 'FcPorts',
        'registered_device': 'RegisteredDevice',
        'sub_groups': 'SubGroups'
    }

    def __init__(self,
                 transport=None,
                 equipment_shared_io_module=None,
                 equipment_switch_card=None,
                 ethernet_ports=None,
                 fc_ports=None,
                 registered_device=None,
                 sub_groups=None,
                 local_vars_configuration=None):  # noqa: E501
        """PortGroupAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._transport = None
        self._equipment_shared_io_module = None
        self._equipment_switch_card = None
        self._ethernet_ports = None
        self._fc_ports = None
        self._registered_device = None
        self._sub_groups = None
        self.discriminator = None

        if transport is not None:
            self.transport = transport
        if equipment_shared_io_module is not None:
            self.equipment_shared_io_module = equipment_shared_io_module
        if equipment_switch_card is not None:
            self.equipment_switch_card = equipment_switch_card
        if ethernet_ports is not None:
            self.ethernet_ports = ethernet_ports
        if fc_ports is not None:
            self.fc_ports = fc_ports
        if registered_device is not None:
            self.registered_device = registered_device
        if sub_groups is not None:
            self.sub_groups = sub_groups

    @property
    def transport(self):
        """Gets the transport of this PortGroupAllOf.  # noqa: E501


        :return: The transport of this PortGroupAllOf.  # noqa: E501
        :rtype: str
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this PortGroupAllOf.


        :param transport: The transport of this PortGroupAllOf.  # noqa: E501
        :type: str
        """

        self._transport = transport

    @property
    def equipment_shared_io_module(self):
        """Gets the equipment_shared_io_module of this PortGroupAllOf.  # noqa: E501


        :return: The equipment_shared_io_module of this PortGroupAllOf.  # noqa: E501
        :rtype: EquipmentSharedIoModule
        """
        return self._equipment_shared_io_module

    @equipment_shared_io_module.setter
    def equipment_shared_io_module(self, equipment_shared_io_module):
        """Sets the equipment_shared_io_module of this PortGroupAllOf.


        :param equipment_shared_io_module: The equipment_shared_io_module of this PortGroupAllOf.  # noqa: E501
        :type: EquipmentSharedIoModule
        """

        self._equipment_shared_io_module = equipment_shared_io_module

    @property
    def equipment_switch_card(self):
        """Gets the equipment_switch_card of this PortGroupAllOf.  # noqa: E501


        :return: The equipment_switch_card of this PortGroupAllOf.  # noqa: E501
        :rtype: EquipmentSwitchCard
        """
        return self._equipment_switch_card

    @equipment_switch_card.setter
    def equipment_switch_card(self, equipment_switch_card):
        """Sets the equipment_switch_card of this PortGroupAllOf.


        :param equipment_switch_card: The equipment_switch_card of this PortGroupAllOf.  # noqa: E501
        :type: EquipmentSwitchCard
        """

        self._equipment_switch_card = equipment_switch_card

    @property
    def ethernet_ports(self):
        """Gets the ethernet_ports of this PortGroupAllOf.  # noqa: E501

        A reference to a etherPhysicalPort resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The ethernet_ports of this PortGroupAllOf.  # noqa: E501
        :rtype: list[EtherPhysicalPort]
        """
        return self._ethernet_ports

    @ethernet_ports.setter
    def ethernet_ports(self, ethernet_ports):
        """Sets the ethernet_ports of this PortGroupAllOf.

        A reference to a etherPhysicalPort resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param ethernet_ports: The ethernet_ports of this PortGroupAllOf.  # noqa: E501
        :type: list[EtherPhysicalPort]
        """

        self._ethernet_ports = ethernet_ports

    @property
    def fc_ports(self):
        """Gets the fc_ports of this PortGroupAllOf.  # noqa: E501

        A reference to a fcPhysicalPort resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The fc_ports of this PortGroupAllOf.  # noqa: E501
        :rtype: list[FcPhysicalPort]
        """
        return self._fc_ports

    @fc_ports.setter
    def fc_ports(self, fc_ports):
        """Sets the fc_ports of this PortGroupAllOf.

        A reference to a fcPhysicalPort resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param fc_ports: The fc_ports of this PortGroupAllOf.  # noqa: E501
        :type: list[FcPhysicalPort]
        """

        self._fc_ports = fc_ports

    @property
    def registered_device(self):
        """Gets the registered_device of this PortGroupAllOf.  # noqa: E501


        :return: The registered_device of this PortGroupAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this PortGroupAllOf.


        :param registered_device: The registered_device of this PortGroupAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    @property
    def sub_groups(self):
        """Gets the sub_groups of this PortGroupAllOf.  # noqa: E501

        A reference to a portSubGroup resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The sub_groups of this PortGroupAllOf.  # noqa: E501
        :rtype: list[PortSubGroup]
        """
        return self._sub_groups

    @sub_groups.setter
    def sub_groups(self, sub_groups):
        """Sets the sub_groups of this PortGroupAllOf.

        A reference to a portSubGroup resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param sub_groups: The sub_groups of this PortGroupAllOf.  # noqa: E501
        :type: list[PortSubGroup]
        """

        self._sub_groups = sub_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortGroupAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PortGroupAllOf):
            return True

        return self.to_dict() != other.to_dict()
