# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class TamQueryEntry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {'name': 'str', 'priority': 'int', 'query': 'str'}

    attribute_map = {'name': 'Name', 'priority': 'Priority', 'query': 'Query'}

    def __init__(self,
                 name=None,
                 priority=None,
                 query=None,
                 local_vars_configuration=None):  # noqa: E501
        """TamQueryEntry - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._priority = None
        self._query = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if priority is not None:
            self.priority = priority
        if query is not None:
            self.query = query

    @property
    def name(self):
        """Gets the name of this TamQueryEntry.  # noqa: E501

        Name is used to unique identify and result of the given query which can be used by subsequent queries as input data source.    # noqa: E501

        :return: The name of this TamQueryEntry.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TamQueryEntry.

        Name is used to unique identify and result of the given query which can be used by subsequent queries as input data source.    # noqa: E501

        :param name: The name of this TamQueryEntry.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this TamQueryEntry.  # noqa: E501

        An integer value depicting the priority of the query among the queries that are part of the same QueryEntry collection.    # noqa: E501

        :return: The priority of this TamQueryEntry.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TamQueryEntry.

        An integer value depicting the priority of the query among the queries that are part of the same QueryEntry collection.    # noqa: E501

        :param priority: The priority of this TamQueryEntry.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def query(self):
        """Gets the query of this TamQueryEntry.  # noqa: E501

        A SparkSQL query to be used on a given data source.     # noqa: E501

        :return: The query of this TamQueryEntry.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this TamQueryEntry.

        A SparkSQL query to be used on a given data source.     # noqa: E501

        :param query: The query of this TamQueryEntry.  # noqa: E501
        :type: str
        """

        self._query = query

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TamQueryEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TamQueryEntry):
            return True

        return self.to_dict() != other.to_dict()
