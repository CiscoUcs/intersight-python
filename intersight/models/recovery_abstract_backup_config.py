# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class RecoveryAbstractBackupConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_name_prefix': 'str',
        'is_password_set': 'bool',
        'location_type': 'str',
        'password': 'str',
        'path': 'str',
        'protocol': 'str',
        'retention_count': 'int',
        'user_name': 'str'
    }

    attribute_map = {
        'file_name_prefix': 'FileNamePrefix',
        'is_password_set': 'IsPasswordSet',
        'location_type': 'LocationType',
        'password': 'Password',
        'path': 'Path',
        'protocol': 'Protocol',
        'retention_count': 'RetentionCount',
        'user_name': 'UserName'
    }

    def __init__(self,
                 file_name_prefix=None,
                 is_password_set=None,
                 location_type='Network Share',
                 password=None,
                 path=None,
                 protocol='SCP',
                 retention_count=None,
                 user_name=None,
                 local_vars_configuration=None):  # noqa: E501
        """RecoveryAbstractBackupConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_name_prefix = None
        self._is_password_set = None
        self._location_type = None
        self._password = None
        self._path = None
        self._protocol = None
        self._retention_count = None
        self._user_name = None
        self.discriminator = None

        if file_name_prefix is not None:
            self.file_name_prefix = file_name_prefix
        if is_password_set is not None:
            self.is_password_set = is_password_set
        if location_type is not None:
            self.location_type = location_type
        if password is not None:
            self.password = password
        if path is not None:
            self.path = path
        if protocol is not None:
            self.protocol = protocol
        if retention_count is not None:
            self.retention_count = retention_count
        if user_name is not None:
            self.user_name = user_name

    @property
    def file_name_prefix(self):
        """Gets the file_name_prefix of this RecoveryAbstractBackupConfig.  # noqa: E501

        The file name for the backup image. This name is added as a prefix in the name for the backup image. A unique file name for the backup image is created along with a timestamp. For example: prefix-1572431305418     # noqa: E501

        :return: The file_name_prefix of this RecoveryAbstractBackupConfig.  # noqa: E501
        :rtype: str
        """
        return self._file_name_prefix

    @file_name_prefix.setter
    def file_name_prefix(self, file_name_prefix):
        """Sets the file_name_prefix of this RecoveryAbstractBackupConfig.

        The file name for the backup image. This name is added as a prefix in the name for the backup image. A unique file name for the backup image is created along with a timestamp. For example: prefix-1572431305418     # noqa: E501

        :param file_name_prefix: The file_name_prefix of this RecoveryAbstractBackupConfig.  # noqa: E501
        :type: str
        """

        self._file_name_prefix = file_name_prefix

    @property
    def is_password_set(self):
        """Gets the is_password_set of this RecoveryAbstractBackupConfig.  # noqa: E501


        :return: The is_password_set of this RecoveryAbstractBackupConfig.  # noqa: E501
        :rtype: bool
        """
        return self._is_password_set

    @is_password_set.setter
    def is_password_set(self, is_password_set):
        """Sets the is_password_set of this RecoveryAbstractBackupConfig.


        :param is_password_set: The is_password_set of this RecoveryAbstractBackupConfig.  # noqa: E501
        :type: bool
        """

        self._is_password_set = is_password_set

    @property
    def location_type(self):
        """Gets the location_type of this RecoveryAbstractBackupConfig.  # noqa: E501

        Specifies whether the backup will be stored locally or remotely.    # noqa: E501

        :return: The location_type of this RecoveryAbstractBackupConfig.  # noqa: E501
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this RecoveryAbstractBackupConfig.

        Specifies whether the backup will be stored locally or remotely.    # noqa: E501

        :param location_type: The location_type of this RecoveryAbstractBackupConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["Network Share", "Local Storage"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and location_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `location_type` ({0}), must be one of {1}"  # noqa: E501
                .format(location_type, allowed_values))

        self._location_type = location_type

    @property
    def password(self):
        """Gets the password of this RecoveryAbstractBackupConfig.  # noqa: E501

        Backup server password.    # noqa: E501

        :return: The password of this RecoveryAbstractBackupConfig.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this RecoveryAbstractBackupConfig.

        Backup server password.    # noqa: E501

        :param password: The password of this RecoveryAbstractBackupConfig.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def path(self):
        """Gets the path of this RecoveryAbstractBackupConfig.  # noqa: E501

        The file system path where the backup images must be stored. Include the IP address/hostname of the network share location and the complete file system path. For example: 172.29.109.234/var/backups/     # noqa: E501

        :return: The path of this RecoveryAbstractBackupConfig.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this RecoveryAbstractBackupConfig.

        The file system path where the backup images must be stored. Include the IP address/hostname of the network share location and the complete file system path. For example: 172.29.109.234/var/backups/     # noqa: E501

        :param path: The path of this RecoveryAbstractBackupConfig.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def protocol(self):
        """Gets the protocol of this RecoveryAbstractBackupConfig.  # noqa: E501

        Protocol for transferring the backup image to the network share location.    # noqa: E501

        :return: The protocol of this RecoveryAbstractBackupConfig.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this RecoveryAbstractBackupConfig.

        Protocol for transferring the backup image to the network share location.    # noqa: E501

        :param protocol: The protocol of this RecoveryAbstractBackupConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["SCP", "SFTP", "FTP"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and protocol not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values))

        self._protocol = protocol

    @property
    def retention_count(self):
        """Gets the retention_count of this RecoveryAbstractBackupConfig.  # noqa: E501

        Number of backup copies maintained on the local or remote server. When the created backup files exceed this number, the initial backup files are overwritten in a sequential manner.     # noqa: E501

        :return: The retention_count of this RecoveryAbstractBackupConfig.  # noqa: E501
        :rtype: int
        """
        return self._retention_count

    @retention_count.setter
    def retention_count(self, retention_count):
        """Sets the retention_count of this RecoveryAbstractBackupConfig.

        Number of backup copies maintained on the local or remote server. When the created backup files exceed this number, the initial backup files are overwritten in a sequential manner.     # noqa: E501

        :param retention_count: The retention_count of this RecoveryAbstractBackupConfig.  # noqa: E501
        :type: int
        """

        self._retention_count = retention_count

    @property
    def user_name(self):
        """Gets the user_name of this RecoveryAbstractBackupConfig.  # noqa: E501

        Backup server user name.     # noqa: E501

        :return: The user_name of this RecoveryAbstractBackupConfig.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this RecoveryAbstractBackupConfig.

        Backup server user name.     # noqa: E501

        :param user_name: The user_name of this RecoveryAbstractBackupConfig.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecoveryAbstractBackupConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RecoveryAbstractBackupConfig):
            return True

        return self.to_dict() != other.to_dict()
