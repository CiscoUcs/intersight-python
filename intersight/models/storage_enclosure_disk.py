# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StorageEnclosureDisk(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'block_size': 'str',
        'disk_id': 'str',
        'disk_state': 'str',
        'health': 'str',
        'num_blocks': 'str',
        'pid': 'str',
        'sas_address1': 'str',
        'sas_address2': 'str',
        'size': 'str',
        'physical_disk': 'StoragePhysicalDisk',
        'registered_device': 'AssetDeviceRegistration',
        'storage_enclosure': 'StorageEnclosure'
    }

    attribute_map = {
        'block_size': 'BlockSize',
        'disk_id': 'DiskId',
        'disk_state': 'DiskState',
        'health': 'Health',
        'num_blocks': 'NumBlocks',
        'pid': 'Pid',
        'sas_address1': 'SasAddress1',
        'sas_address2': 'SasAddress2',
        'size': 'Size',
        'physical_disk': 'PhysicalDisk',
        'registered_device': 'RegisteredDevice',
        'storage_enclosure': 'StorageEnclosure'
    }

    def __init__(self,
                 block_size=None,
                 disk_id=None,
                 disk_state=None,
                 health=None,
                 num_blocks=None,
                 pid=None,
                 sas_address1=None,
                 sas_address2=None,
                 size=None,
                 physical_disk=None,
                 registered_device=None,
                 storage_enclosure=None,
                 local_vars_configuration=None):  # noqa: E501
        """StorageEnclosureDisk - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._block_size = None
        self._disk_id = None
        self._disk_state = None
        self._health = None
        self._num_blocks = None
        self._pid = None
        self._sas_address1 = None
        self._sas_address2 = None
        self._size = None
        self._physical_disk = None
        self._registered_device = None
        self._storage_enclosure = None
        self.discriminator = None

        if block_size is not None:
            self.block_size = block_size
        if disk_id is not None:
            self.disk_id = disk_id
        if disk_state is not None:
            self.disk_state = disk_state
        if health is not None:
            self.health = health
        if num_blocks is not None:
            self.num_blocks = num_blocks
        if pid is not None:
            self.pid = pid
        if sas_address1 is not None:
            self.sas_address1 = sas_address1
        if sas_address2 is not None:
            self.sas_address2 = sas_address2
        if size is not None:
            self.size = size
        if physical_disk is not None:
            self.physical_disk = physical_disk
        if registered_device is not None:
            self.registered_device = registered_device
        if storage_enclosure is not None:
            self.storage_enclosure = storage_enclosure

    @property
    def block_size(self):
        """Gets the block_size of this StorageEnclosureDisk.  # noqa: E501

        The block size of the physical disk in bytes.    # noqa: E501

        :return: The block_size of this StorageEnclosureDisk.  # noqa: E501
        :rtype: str
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this StorageEnclosureDisk.

        The block size of the physical disk in bytes.    # noqa: E501

        :param block_size: The block_size of this StorageEnclosureDisk.  # noqa: E501
        :type: str
        """

        self._block_size = block_size

    @property
    def disk_id(self):
        """Gets the disk_id of this StorageEnclosureDisk.  # noqa: E501

        This field represents the disk Id in the storage enclosure.    # noqa: E501

        :return: The disk_id of this StorageEnclosureDisk.  # noqa: E501
        :rtype: str
        """
        return self._disk_id

    @disk_id.setter
    def disk_id(self, disk_id):
        """Sets the disk_id of this StorageEnclosureDisk.

        This field represents the disk Id in the storage enclosure.    # noqa: E501

        :param disk_id: The disk_id of this StorageEnclosureDisk.  # noqa: E501
        :type: str
        """

        self._disk_id = disk_id

    @property
    def disk_state(self):
        """Gets the disk_state of this StorageEnclosureDisk.  # noqa: E501

        This field identifies the current disk configuration applied in the physical disk.    # noqa: E501

        :return: The disk_state of this StorageEnclosureDisk.  # noqa: E501
        :rtype: str
        """
        return self._disk_state

    @disk_state.setter
    def disk_state(self, disk_state):
        """Sets the disk_state of this StorageEnclosureDisk.

        This field identifies the current disk configuration applied in the physical disk.    # noqa: E501

        :param disk_state: The disk_state of this StorageEnclosureDisk.  # noqa: E501
        :type: str
        """

        self._disk_state = disk_state

    @property
    def health(self):
        """Gets the health of this StorageEnclosureDisk.  # noqa: E501


        :return: The health of this StorageEnclosureDisk.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this StorageEnclosureDisk.


        :param health: The health of this StorageEnclosureDisk.  # noqa: E501
        :type: str
        """

        self._health = health

    @property
    def num_blocks(self):
        """Gets the num_blocks of this StorageEnclosureDisk.  # noqa: E501

        The number of blocks present on the physical disk.    # noqa: E501

        :return: The num_blocks of this StorageEnclosureDisk.  # noqa: E501
        :rtype: str
        """
        return self._num_blocks

    @num_blocks.setter
    def num_blocks(self, num_blocks):
        """Sets the num_blocks of this StorageEnclosureDisk.

        The number of blocks present on the physical disk.    # noqa: E501

        :param num_blocks: The num_blocks of this StorageEnclosureDisk.  # noqa: E501
        :type: str
        """

        self._num_blocks = num_blocks

    @property
    def pid(self):
        """Gets the pid of this StorageEnclosureDisk.  # noqa: E501

        This field identifies the Product ID for physicalDisk.    # noqa: E501

        :return: The pid of this StorageEnclosureDisk.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this StorageEnclosureDisk.

        This field identifies the Product ID for physicalDisk.    # noqa: E501

        :param pid: The pid of this StorageEnclosureDisk.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def sas_address1(self):
        """Gets the sas_address1 of this StorageEnclosureDisk.  # noqa: E501

        This field identifies the SAS address assigned to the disk SAS port-1.    # noqa: E501

        :return: The sas_address1 of this StorageEnclosureDisk.  # noqa: E501
        :rtype: str
        """
        return self._sas_address1

    @sas_address1.setter
    def sas_address1(self, sas_address1):
        """Sets the sas_address1 of this StorageEnclosureDisk.

        This field identifies the SAS address assigned to the disk SAS port-1.    # noqa: E501

        :param sas_address1: The sas_address1 of this StorageEnclosureDisk.  # noqa: E501
        :type: str
        """

        self._sas_address1 = sas_address1

    @property
    def sas_address2(self):
        """Gets the sas_address2 of this StorageEnclosureDisk.  # noqa: E501

        This field identifies the SAS address assigned to the disk SAS port-2.    # noqa: E501

        :return: The sas_address2 of this StorageEnclosureDisk.  # noqa: E501
        :rtype: str
        """
        return self._sas_address2

    @sas_address2.setter
    def sas_address2(self, sas_address2):
        """Sets the sas_address2 of this StorageEnclosureDisk.

        This field identifies the SAS address assigned to the disk SAS port-2.    # noqa: E501

        :param sas_address2: The sas_address2 of this StorageEnclosureDisk.  # noqa: E501
        :type: str
        """

        self._sas_address2 = sas_address2

    @property
    def size(self):
        """Gets the size of this StorageEnclosureDisk.  # noqa: E501

        The size of the physical disk in MB.     # noqa: E501

        :return: The size of this StorageEnclosureDisk.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this StorageEnclosureDisk.

        The size of the physical disk in MB.     # noqa: E501

        :param size: The size of this StorageEnclosureDisk.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def physical_disk(self):
        """Gets the physical_disk of this StorageEnclosureDisk.  # noqa: E501


        :return: The physical_disk of this StorageEnclosureDisk.  # noqa: E501
        :rtype: StoragePhysicalDisk
        """
        return self._physical_disk

    @physical_disk.setter
    def physical_disk(self, physical_disk):
        """Sets the physical_disk of this StorageEnclosureDisk.


        :param physical_disk: The physical_disk of this StorageEnclosureDisk.  # noqa: E501
        :type: StoragePhysicalDisk
        """

        self._physical_disk = physical_disk

    @property
    def registered_device(self):
        """Gets the registered_device of this StorageEnclosureDisk.  # noqa: E501


        :return: The registered_device of this StorageEnclosureDisk.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this StorageEnclosureDisk.


        :param registered_device: The registered_device of this StorageEnclosureDisk.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    @property
    def storage_enclosure(self):
        """Gets the storage_enclosure of this StorageEnclosureDisk.  # noqa: E501


        :return: The storage_enclosure of this StorageEnclosureDisk.  # noqa: E501
        :rtype: StorageEnclosure
        """
        return self._storage_enclosure

    @storage_enclosure.setter
    def storage_enclosure(self, storage_enclosure):
        """Sets the storage_enclosure of this StorageEnclosureDisk.


        :param storage_enclosure: The storage_enclosure of this StorageEnclosureDisk.  # noqa: E501
        :type: StorageEnclosure
        """

        self._storage_enclosure = storage_enclosure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageEnclosureDisk):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageEnclosureDisk):
            return True

        return self.to_dict() != other.to_dict()
