# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1295
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StorageEnclosureDisk(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'device_mo_id': 'str',
        'dn': 'str',
        'rn': 'str',
        'model': 'str',
        'revision': 'str',
        'serial': 'str',
        'vendor': 'str',
        'block_size': 'str',
        'disk_id': 'str',
        'disk_state': 'str',
        'health': 'str',
        'num_blocks': 'str',
        'pid': 'str',
        'sas_address1': 'str',
        'sas_address2': 'str',
        'size': 'str',
        'physical_disk': 'StoragePhysicalDiskRef',
        'registered_device': 'AssetDeviceRegistrationRef',
        'storage_enclosure': 'StorageEnclosureRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'device_mo_id': 'DeviceMoId',
        'dn': 'Dn',
        'rn': 'Rn',
        'model': 'Model',
        'revision': 'Revision',
        'serial': 'Serial',
        'vendor': 'Vendor',
        'block_size': 'BlockSize',
        'disk_id': 'DiskId',
        'disk_state': 'DiskState',
        'health': 'Health',
        'num_blocks': 'NumBlocks',
        'pid': 'Pid',
        'sas_address1': 'SasAddress1',
        'sas_address2': 'SasAddress2',
        'size': 'Size',
        'physical_disk': 'PhysicalDisk',
        'registered_device': 'RegisteredDevice',
        'storage_enclosure': 'StorageEnclosure'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, device_mo_id=None, dn=None, rn=None, model=None, revision=None, serial=None, vendor=None, block_size=None, disk_id=None, disk_state=None, health=None, num_blocks=None, pid=None, sas_address1=None, sas_address2=None, size=None, physical_disk=None, registered_device=None, storage_enclosure=None):
        """
        StorageEnclosureDisk - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._device_mo_id = None
        self._dn = None
        self._rn = None
        self._model = None
        self._revision = None
        self._serial = None
        self._vendor = None
        self._block_size = None
        self._disk_id = None
        self._disk_state = None
        self._health = None
        self._num_blocks = None
        self._pid = None
        self._sas_address1 = None
        self._sas_address2 = None
        self._size = None
        self._physical_disk = None
        self._registered_device = None
        self._storage_enclosure = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if device_mo_id is not None:
          self.device_mo_id = device_mo_id
        if dn is not None:
          self.dn = dn
        if rn is not None:
          self.rn = rn
        if model is not None:
          self.model = model
        if revision is not None:
          self.revision = revision
        if serial is not None:
          self.serial = serial
        if vendor is not None:
          self.vendor = vendor
        if block_size is not None:
          self.block_size = block_size
        if disk_id is not None:
          self.disk_id = disk_id
        if disk_state is not None:
          self.disk_state = disk_state
        if health is not None:
          self.health = health
        if num_blocks is not None:
          self.num_blocks = num_blocks
        if pid is not None:
          self.pid = pid
        if sas_address1 is not None:
          self.sas_address1 = sas_address1
        if sas_address2 is not None:
          self.sas_address2 = sas_address2
        if size is not None:
          self.size = size
        if physical_disk is not None:
          self.physical_disk = physical_disk
        if registered_device is not None:
          self.registered_device = registered_device
        if storage_enclosure is not None:
          self.storage_enclosure = storage_enclosure

    @property
    def account_moid(self):
        """
        Gets the account_moid of this StorageEnclosureDisk.
        The Account ID for this managed object.  

        :return: The account_moid of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this StorageEnclosureDisk.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this StorageEnclosureDisk.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this StorageEnclosureDisk.
        The time when this managed object was created.  

        :return: The create_time of this StorageEnclosureDisk.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this StorageEnclosureDisk.
        The time when this managed object was created.  

        :param create_time: The create_time of this StorageEnclosureDisk.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this StorageEnclosureDisk.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this StorageEnclosureDisk.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this StorageEnclosureDisk.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this StorageEnclosureDisk.
        The time when this managed object was last modified.  

        :return: The mod_time of this StorageEnclosureDisk.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this StorageEnclosureDisk.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this StorageEnclosureDisk.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this StorageEnclosureDisk.
        The unique identifier of this Managed Object instance.   

        :return: The moid of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this StorageEnclosureDisk.
        The unique identifier of this Managed Object instance.   

        :param moid: The moid of this StorageEnclosureDisk.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this StorageEnclosureDisk.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :return: The object_type of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this StorageEnclosureDisk.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :param object_type: The object_type of this StorageEnclosureDisk.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this StorageEnclosureDisk.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this StorageEnclosureDisk.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this StorageEnclosureDisk.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this StorageEnclosureDisk.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this StorageEnclosureDisk.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this StorageEnclosureDisk.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this StorageEnclosureDisk.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this StorageEnclosureDisk.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this StorageEnclosureDisk.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this StorageEnclosureDisk.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this StorageEnclosureDisk.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this StorageEnclosureDisk.
        The versioning info for this managed object.   

        :return: The version_context of this StorageEnclosureDisk.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this StorageEnclosureDisk.
        The versioning info for this managed object.   

        :param version_context: The version_context of this StorageEnclosureDisk.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this StorageEnclosureDisk.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this StorageEnclosureDisk.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this StorageEnclosureDisk.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this StorageEnclosureDisk.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this StorageEnclosureDisk.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this StorageEnclosureDisk.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this StorageEnclosureDisk.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this StorageEnclosureDisk.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this StorageEnclosureDisk.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :return: The permission_resources of this StorageEnclosureDisk.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this StorageEnclosureDisk.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :param permission_resources: The permission_resources of this StorageEnclosureDisk.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def device_mo_id(self):
        """
        Gets the device_mo_id of this StorageEnclosureDisk.

        :return: The device_mo_id of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._device_mo_id

    @device_mo_id.setter
    def device_mo_id(self, device_mo_id):
        """
        Sets the device_mo_id of this StorageEnclosureDisk.

        :param device_mo_id: The device_mo_id of this StorageEnclosureDisk.
        :type: str
        """

        self._device_mo_id = device_mo_id

    @property
    def dn(self):
        """
        Gets the dn of this StorageEnclosureDisk.
        The Distinguished Name unambiguously identifies an object in the system.  

        :return: The dn of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """
        Sets the dn of this StorageEnclosureDisk.
        The Distinguished Name unambiguously identifies an object in the system.  

        :param dn: The dn of this StorageEnclosureDisk.
        :type: str
        """

        self._dn = dn

    @property
    def rn(self):
        """
        Gets the rn of this StorageEnclosureDisk.
        The Relative Name uniquely identifies an object within a given context.   

        :return: The rn of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """
        Sets the rn of this StorageEnclosureDisk.
        The Relative Name uniquely identifies an object within a given context.   

        :param rn: The rn of this StorageEnclosureDisk.
        :type: str
        """

        self._rn = rn

    @property
    def model(self):
        """
        Gets the model of this StorageEnclosureDisk.
        This field identifies the model of the given component.  

        :return: The model of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this StorageEnclosureDisk.
        This field identifies the model of the given component.  

        :param model: The model of this StorageEnclosureDisk.
        :type: str
        """

        self._model = model

    @property
    def revision(self):
        """
        Gets the revision of this StorageEnclosureDisk.

        :return: The revision of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this StorageEnclosureDisk.

        :param revision: The revision of this StorageEnclosureDisk.
        :type: str
        """

        self._revision = revision

    @property
    def serial(self):
        """
        Gets the serial of this StorageEnclosureDisk.
        This field identifies the serial of the given component.  

        :return: The serial of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """
        Sets the serial of this StorageEnclosureDisk.
        This field identifies the serial of the given component.  

        :param serial: The serial of this StorageEnclosureDisk.
        :type: str
        """

        self._serial = serial

    @property
    def vendor(self):
        """
        Gets the vendor of this StorageEnclosureDisk.
        This field identifies the vendor of the given component.   

        :return: The vendor of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """
        Sets the vendor of this StorageEnclosureDisk.
        This field identifies the vendor of the given component.   

        :param vendor: The vendor of this StorageEnclosureDisk.
        :type: str
        """

        self._vendor = vendor

    @property
    def block_size(self):
        """
        Gets the block_size of this StorageEnclosureDisk.
        The block size of the physical disk in bytes.  

        :return: The block_size of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """
        Sets the block_size of this StorageEnclosureDisk.
        The block size of the physical disk in bytes.  

        :param block_size: The block_size of this StorageEnclosureDisk.
        :type: str
        """

        self._block_size = block_size

    @property
    def disk_id(self):
        """
        Gets the disk_id of this StorageEnclosureDisk.
        This field represents the disk Id in the storage enclosure.  

        :return: The disk_id of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._disk_id

    @disk_id.setter
    def disk_id(self, disk_id):
        """
        Sets the disk_id of this StorageEnclosureDisk.
        This field represents the disk Id in the storage enclosure.  

        :param disk_id: The disk_id of this StorageEnclosureDisk.
        :type: str
        """

        self._disk_id = disk_id

    @property
    def disk_state(self):
        """
        Gets the disk_state of this StorageEnclosureDisk.
        This field identifies the current disk configuration applied in the physical disk.  

        :return: The disk_state of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._disk_state

    @disk_state.setter
    def disk_state(self, disk_state):
        """
        Sets the disk_state of this StorageEnclosureDisk.
        This field identifies the current disk configuration applied in the physical disk.  

        :param disk_state: The disk_state of this StorageEnclosureDisk.
        :type: str
        """

        self._disk_state = disk_state

    @property
    def health(self):
        """
        Gets the health of this StorageEnclosureDisk.

        :return: The health of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """
        Sets the health of this StorageEnclosureDisk.

        :param health: The health of this StorageEnclosureDisk.
        :type: str
        """

        self._health = health

    @property
    def num_blocks(self):
        """
        Gets the num_blocks of this StorageEnclosureDisk.
        The number of blocks present on the physical disk.  

        :return: The num_blocks of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._num_blocks

    @num_blocks.setter
    def num_blocks(self, num_blocks):
        """
        Sets the num_blocks of this StorageEnclosureDisk.
        The number of blocks present on the physical disk.  

        :param num_blocks: The num_blocks of this StorageEnclosureDisk.
        :type: str
        """

        self._num_blocks = num_blocks

    @property
    def pid(self):
        """
        Gets the pid of this StorageEnclosureDisk.
        This field identifies the Product ID for physicalDisk.  

        :return: The pid of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """
        Sets the pid of this StorageEnclosureDisk.
        This field identifies the Product ID for physicalDisk.  

        :param pid: The pid of this StorageEnclosureDisk.
        :type: str
        """

        self._pid = pid

    @property
    def sas_address1(self):
        """
        Gets the sas_address1 of this StorageEnclosureDisk.
        This field identifies the SAS address assigned to the disk SAS port-1.  

        :return: The sas_address1 of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._sas_address1

    @sas_address1.setter
    def sas_address1(self, sas_address1):
        """
        Sets the sas_address1 of this StorageEnclosureDisk.
        This field identifies the SAS address assigned to the disk SAS port-1.  

        :param sas_address1: The sas_address1 of this StorageEnclosureDisk.
        :type: str
        """

        self._sas_address1 = sas_address1

    @property
    def sas_address2(self):
        """
        Gets the sas_address2 of this StorageEnclosureDisk.
        This field identifies the SAS address assigned to the disk SAS port-2.  

        :return: The sas_address2 of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._sas_address2

    @sas_address2.setter
    def sas_address2(self, sas_address2):
        """
        Sets the sas_address2 of this StorageEnclosureDisk.
        This field identifies the SAS address assigned to the disk SAS port-2.  

        :param sas_address2: The sas_address2 of this StorageEnclosureDisk.
        :type: str
        """

        self._sas_address2 = sas_address2

    @property
    def size(self):
        """
        Gets the size of this StorageEnclosureDisk.
        The size of the physical disk in MB.   

        :return: The size of this StorageEnclosureDisk.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this StorageEnclosureDisk.
        The size of the physical disk in MB.   

        :param size: The size of this StorageEnclosureDisk.
        :type: str
        """

        self._size = size

    @property
    def physical_disk(self):
        """
        Gets the physical_disk of this StorageEnclosureDisk.
        Physical Disk on a server. 

        :return: The physical_disk of this StorageEnclosureDisk.
        :rtype: StoragePhysicalDiskRef
        """
        return self._physical_disk

    @physical_disk.setter
    def physical_disk(self, physical_disk):
        """
        Sets the physical_disk of this StorageEnclosureDisk.
        Physical Disk on a server. 

        :param physical_disk: The physical_disk of this StorageEnclosureDisk.
        :type: StoragePhysicalDiskRef
        """

        self._physical_disk = physical_disk

    @property
    def registered_device(self):
        """
        Gets the registered_device of this StorageEnclosureDisk.
        The Device to which this Managed Object is associated. 

        :return: The registered_device of this StorageEnclosureDisk.
        :rtype: AssetDeviceRegistrationRef
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """
        Sets the registered_device of this StorageEnclosureDisk.
        The Device to which this Managed Object is associated. 

        :param registered_device: The registered_device of this StorageEnclosureDisk.
        :type: AssetDeviceRegistrationRef
        """

        self._registered_device = registered_device

    @property
    def storage_enclosure(self):
        """
        Gets the storage_enclosure of this StorageEnclosureDisk.
        A collection of references to the [storage.Enclosure](mo://storage.Enclosure) Managed Object.  When this managed object is deleted, the referenced [storage.Enclosure](mo://storage.Enclosure) MO unsets its reference to this deleted MO. 

        :return: The storage_enclosure of this StorageEnclosureDisk.
        :rtype: StorageEnclosureRef
        """
        return self._storage_enclosure

    @storage_enclosure.setter
    def storage_enclosure(self, storage_enclosure):
        """
        Sets the storage_enclosure of this StorageEnclosureDisk.
        A collection of references to the [storage.Enclosure](mo://storage.Enclosure) Managed Object.  When this managed object is deleted, the referenced [storage.Enclosure](mo://storage.Enclosure) MO unsets its reference to this deleted MO. 

        :param storage_enclosure: The storage_enclosure of this StorageEnclosureDisk.
        :type: StorageEnclosureRef
        """

        self._storage_enclosure = storage_enclosure

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StorageEnclosureDisk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
