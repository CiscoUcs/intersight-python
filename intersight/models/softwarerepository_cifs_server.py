# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1415
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SoftwarerepositoryCifsServer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'is_password_set': 'bool',
        'mount_option': 'str',
        'password': 'str',
        'remote_file': 'str',
        'remote_ip': 'str',
        'remote_share': 'str',
        'username': 'str'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'is_password_set': 'IsPasswordSet',
        'mount_option': 'MountOption',
        'password': 'Password',
        'remote_file': 'RemoteFile',
        'remote_ip': 'RemoteIp',
        'remote_share': 'RemoteShare',
        'username': 'Username'
    }

    def __init__(self, object_type=None, is_password_set=None, mount_option=None, password=None, remote_file=None, remote_ip=None, remote_share=None, username=None):
        """
        SoftwarerepositoryCifsServer - a model defined in Swagger
        """

        self._object_type = None
        self._is_password_set = None
        self._mount_option = None
        self._password = None
        self._remote_file = None
        self._remote_ip = None
        self._remote_share = None
        self._username = None

        if object_type is not None:
          self.object_type = object_type
        if is_password_set is not None:
          self.is_password_set = is_password_set
        if mount_option is not None:
          self.mount_option = mount_option
        if password is not None:
          self.password = password
        if remote_file is not None:
          self.remote_file = remote_file
        if remote_ip is not None:
          self.remote_ip = remote_ip
        if remote_share is not None:
          self.remote_share = remote_share
        if username is not None:
          self.username = username

    @property
    def object_type(self):
        """
        Gets the object_type of this SoftwarerepositoryCifsServer.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :return: The object_type of this SoftwarerepositoryCifsServer.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this SoftwarerepositoryCifsServer.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :param object_type: The object_type of this SoftwarerepositoryCifsServer.
        :type: str
        """

        self._object_type = object_type

    @property
    def is_password_set(self):
        """
        Gets the is_password_set of this SoftwarerepositoryCifsServer.

        :return: The is_password_set of this SoftwarerepositoryCifsServer.
        :rtype: bool
        """
        return self._is_password_set

    @is_password_set.setter
    def is_password_set(self, is_password_set):
        """
        Sets the is_password_set of this SoftwarerepositoryCifsServer.

        :param is_password_set: The is_password_set of this SoftwarerepositoryCifsServer.
        :type: bool
        """

        self._is_password_set = is_password_set

    @property
    def mount_option(self):
        """
        Gets the mount_option of this SoftwarerepositoryCifsServer.
        For CIFS, leave the field blank or enter one or more comma seperated options from the following. For Example, \" \" , \" soft \" , \" soft , nounix \" . * soft. * nounix. * noserviceino. * guest. * USERNAME=VALUE. * PASSWORD=VALUE. * sec=VALUE (VALUE could be None, Ntlm, Ntlmi, Ntlmssp, Ntlmsspi, Ntlmv2, Ntlmv2i).   

        :return: The mount_option of this SoftwarerepositoryCifsServer.
        :rtype: str
        """
        return self._mount_option

    @mount_option.setter
    def mount_option(self, mount_option):
        """
        Sets the mount_option of this SoftwarerepositoryCifsServer.
        For CIFS, leave the field blank or enter one or more comma seperated options from the following. For Example, \" \" , \" soft \" , \" soft , nounix \" . * soft. * nounix. * noserviceino. * guest. * USERNAME=VALUE. * PASSWORD=VALUE. * sec=VALUE (VALUE could be None, Ntlm, Ntlmi, Ntlmssp, Ntlmsspi, Ntlmv2, Ntlmv2i).   

        :param mount_option: The mount_option of this SoftwarerepositoryCifsServer.
        :type: str
        """

        self._mount_option = mount_option

    @property
    def password(self):
        """
        Gets the password of this SoftwarerepositoryCifsServer.
        Password configured on the file server.  

        :return: The password of this SoftwarerepositoryCifsServer.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this SoftwarerepositoryCifsServer.
        Password configured on the file server.  

        :param password: The password of this SoftwarerepositoryCifsServer.
        :type: str
        """

        self._password = password

    @property
    def remote_file(self):
        """
        Gets the remote_file of this SoftwarerepositoryCifsServer.
        Filename of the image in the CIFS server. For example:ucs-c220m5-huu-3.1.2c.iso.  

        :return: The remote_file of this SoftwarerepositoryCifsServer.
        :rtype: str
        """
        return self._remote_file

    @remote_file.setter
    def remote_file(self, remote_file):
        """
        Sets the remote_file of this SoftwarerepositoryCifsServer.
        Filename of the image in the CIFS server. For example:ucs-c220m5-huu-3.1.2c.iso.  

        :param remote_file: The remote_file of this SoftwarerepositoryCifsServer.
        :type: str
        """

        self._remote_file = remote_file

    @property
    def remote_ip(self):
        """
        Gets the remote_ip of this SoftwarerepositoryCifsServer.
        Hostname or IP Address of the CIFS server.  

        :return: The remote_ip of this SoftwarerepositoryCifsServer.
        :rtype: str
        """
        return self._remote_ip

    @remote_ip.setter
    def remote_ip(self, remote_ip):
        """
        Sets the remote_ip of this SoftwarerepositoryCifsServer.
        Hostname or IP Address of the CIFS server.  

        :param remote_ip: The remote_ip of this SoftwarerepositoryCifsServer.
        :type: str
        """

        self._remote_ip = remote_ip

    @property
    def remote_share(self):
        """
        Gets the remote_share of this SoftwarerepositoryCifsServer.
        Remote directory where the image is present. For example:/share/subfolder.  

        :return: The remote_share of this SoftwarerepositoryCifsServer.
        :rtype: str
        """
        return self._remote_share

    @remote_share.setter
    def remote_share(self, remote_share):
        """
        Sets the remote_share of this SoftwarerepositoryCifsServer.
        Remote directory where the image is present. For example:/share/subfolder.  

        :param remote_share: The remote_share of this SoftwarerepositoryCifsServer.
        :type: str
        """

        self._remote_share = remote_share

    @property
    def username(self):
        """
        Gets the username of this SoftwarerepositoryCifsServer.
        Username configured on the CIFS server.   

        :return: The username of this SoftwarerepositoryCifsServer.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this SoftwarerepositoryCifsServer.
        Username configured on the CIFS server.   

        :param username: The username of this SoftwarerepositoryCifsServer.
        :type: str
        """

        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SoftwarerepositoryCifsServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
