# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class IaasLicenseUtilizationInfoAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'actual_used': 'int',
        'label': 'str',
        'licensed_limit': 'str',
        'sku': 'str'
    }

    attribute_map = {
        'actual_used': 'ActualUsed',
        'label': 'Label',
        'licensed_limit': 'LicensedLimit',
        'sku': 'Sku'
    }

    def __init__(self,
                 actual_used=None,
                 label=None,
                 licensed_limit=None,
                 sku=None,
                 local_vars_configuration=None):  # noqa: E501
        """IaasLicenseUtilizationInfoAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._actual_used = None
        self._label = None
        self._licensed_limit = None
        self._sku = None
        self.discriminator = None

        if actual_used is not None:
            self.actual_used = actual_used
        if label is not None:
            self.label = label
        if licensed_limit is not None:
            self.licensed_limit = licensed_limit
        if sku is not None:
            self.sku = sku

    @property
    def actual_used(self):
        """Gets the actual_used of this IaasLicenseUtilizationInfoAllOf.  # noqa: E501

        Number of licenses actually used for this feature.    # noqa: E501

        :return: The actual_used of this IaasLicenseUtilizationInfoAllOf.  # noqa: E501
        :rtype: int
        """
        return self._actual_used

    @actual_used.setter
    def actual_used(self, actual_used):
        """Sets the actual_used of this IaasLicenseUtilizationInfoAllOf.

        Number of licenses actually used for this feature.    # noqa: E501

        :param actual_used: The actual_used of this IaasLicenseUtilizationInfoAllOf.  # noqa: E501
        :type: int
        """

        self._actual_used = actual_used

    @property
    def label(self):
        """Gets the label of this IaasLicenseUtilizationInfoAllOf.  # noqa: E501

        License Label.    # noqa: E501

        :return: The label of this IaasLicenseUtilizationInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this IaasLicenseUtilizationInfoAllOf.

        License Label.    # noqa: E501

        :param label: The label of this IaasLicenseUtilizationInfoAllOf.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def licensed_limit(self):
        """Gets the licensed_limit of this IaasLicenseUtilizationInfoAllOf.  # noqa: E501

        License limit for this license feature.    # noqa: E501

        :return: The licensed_limit of this IaasLicenseUtilizationInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._licensed_limit

    @licensed_limit.setter
    def licensed_limit(self, licensed_limit):
        """Sets the licensed_limit of this IaasLicenseUtilizationInfoAllOf.

        License limit for this license feature.    # noqa: E501

        :param licensed_limit: The licensed_limit of this IaasLicenseUtilizationInfoAllOf.  # noqa: E501
        :type: str
        """

        self._licensed_limit = licensed_limit

    @property
    def sku(self):
        """Gets the sku of this IaasLicenseUtilizationInfoAllOf.  # noqa: E501

        SKU for the license.     # noqa: E501

        :return: The sku of this IaasLicenseUtilizationInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this IaasLicenseUtilizationInfoAllOf.

        SKU for the license.     # noqa: E501

        :param sku: The sku of this IaasLicenseUtilizationInfoAllOf.  # noqa: E501
        :type: str
        """

        self._sku = sku

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IaasLicenseUtilizationInfoAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IaasLicenseUtilizationInfoAllOf):
            return True

        return self.to_dict() != other.to_dict()
