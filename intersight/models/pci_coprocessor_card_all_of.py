# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class PciCoprocessorCardAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'card_id': 'int',
        'pci_slot': 'str',
        'compute_board': 'ComputeBoard',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'card_id': 'CardId',
        'pci_slot': 'PciSlot',
        'compute_board': 'ComputeBoard',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 card_id=None,
                 pci_slot=None,
                 compute_board=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """PciCoprocessorCardAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._card_id = None
        self._pci_slot = None
        self._compute_board = None
        self._registered_device = None
        self.discriminator = None

        if card_id is not None:
            self.card_id = card_id
        if pci_slot is not None:
            self.pci_slot = pci_slot
        if compute_board is not None:
            self.compute_board = compute_board
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def card_id(self):
        """Gets the card_id of this PciCoprocessorCardAllOf.  # noqa: E501

        It shows the id for the coprocessor card.    # noqa: E501

        :return: The card_id of this PciCoprocessorCardAllOf.  # noqa: E501
        :rtype: int
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this PciCoprocessorCardAllOf.

        It shows the id for the coprocessor card.    # noqa: E501

        :param card_id: The card_id of this PciCoprocessorCardAllOf.  # noqa: E501
        :type: int
        """

        self._card_id = card_id

    @property
    def pci_slot(self):
        """Gets the pci_slot of this PciCoprocessorCardAllOf.  # noqa: E501

        It shows the PCI slot name for the coprocessor card.     # noqa: E501

        :return: The pci_slot of this PciCoprocessorCardAllOf.  # noqa: E501
        :rtype: str
        """
        return self._pci_slot

    @pci_slot.setter
    def pci_slot(self, pci_slot):
        """Sets the pci_slot of this PciCoprocessorCardAllOf.

        It shows the PCI slot name for the coprocessor card.     # noqa: E501

        :param pci_slot: The pci_slot of this PciCoprocessorCardAllOf.  # noqa: E501
        :type: str
        """

        self._pci_slot = pci_slot

    @property
    def compute_board(self):
        """Gets the compute_board of this PciCoprocessorCardAllOf.  # noqa: E501


        :return: The compute_board of this PciCoprocessorCardAllOf.  # noqa: E501
        :rtype: ComputeBoard
        """
        return self._compute_board

    @compute_board.setter
    def compute_board(self, compute_board):
        """Sets the compute_board of this PciCoprocessorCardAllOf.


        :param compute_board: The compute_board of this PciCoprocessorCardAllOf.  # noqa: E501
        :type: ComputeBoard
        """

        self._compute_board = compute_board

    @property
    def registered_device(self):
        """Gets the registered_device of this PciCoprocessorCardAllOf.  # noqa: E501


        :return: The registered_device of this PciCoprocessorCardAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this PciCoprocessorCardAllOf.


        :param registered_device: The registered_device of this PciCoprocessorCardAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PciCoprocessorCardAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PciCoprocessorCardAllOf):
            return True

        return self.to_dict() != other.to_dict()
