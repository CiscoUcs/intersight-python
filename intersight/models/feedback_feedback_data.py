# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class FeedbackFeedbackData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_name': 'str',
        'comment': 'str',
        'email': 'str',
        'evaluation': 'str',
        'follow_up': 'bool',
        'trace_ids': 'object',
        'type': 'str'
    }

    attribute_map = {
        'account_name': 'AccountName',
        'comment': 'Comment',
        'email': 'Email',
        'evaluation': 'Evaluation',
        'follow_up': 'FollowUp',
        'trace_ids': 'TraceIds',
        'type': 'Type'
    }

    def __init__(self,
                 account_name=None,
                 comment=None,
                 email=None,
                 evaluation='Excellent',
                 follow_up=None,
                 trace_ids=None,
                 type='Evaluation',
                 local_vars_configuration=None):  # noqa: E501
        """FeedbackFeedbackData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_name = None
        self._comment = None
        self._email = None
        self._evaluation = None
        self._follow_up = None
        self._trace_ids = None
        self._type = None
        self.discriminator = None

        if account_name is not None:
            self.account_name = account_name
        if comment is not None:
            self.comment = comment
        if email is not None:
            self.email = email
        if evaluation is not None:
            self.evaluation = evaluation
        if follow_up is not None:
            self.follow_up = follow_up
        if trace_ids is not None:
            self.trace_ids = trace_ids
        if type is not None:
            self.type = type

    @property
    def account_name(self):
        """Gets the account_name of this FeedbackFeedbackData.  # noqa: E501

        Account name of the feedback sender. Copied in order to be persisted in case of account removal.    # noqa: E501

        :return: The account_name of this FeedbackFeedbackData.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this FeedbackFeedbackData.

        Account name of the feedback sender. Copied in order to be persisted in case of account removal.    # noqa: E501

        :param account_name: The account_name of this FeedbackFeedbackData.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def comment(self):
        """Gets the comment of this FeedbackFeedbackData.  # noqa: E501

        Text of the feedback as provided by the user, if it is a bug or a comment.    # noqa: E501

        :return: The comment of this FeedbackFeedbackData.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this FeedbackFeedbackData.

        Text of the feedback as provided by the user, if it is a bug or a comment.    # noqa: E501

        :param comment: The comment of this FeedbackFeedbackData.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def email(self):
        """Gets the email of this FeedbackFeedbackData.  # noqa: E501

        User's email address details.    # noqa: E501

        :return: The email of this FeedbackFeedbackData.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this FeedbackFeedbackData.

        User's email address details.    # noqa: E501

        :param email: The email of this FeedbackFeedbackData.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def evaluation(self):
        """Gets the evaluation of this FeedbackFeedbackData.  # noqa: E501

        Evalation rating as provided by the user to capture user sentiment regarding the issue.    # noqa: E501

        :return: The evaluation of this FeedbackFeedbackData.  # noqa: E501
        :rtype: str
        """
        return self._evaluation

    @evaluation.setter
    def evaluation(self, evaluation):
        """Sets the evaluation of this FeedbackFeedbackData.

        Evalation rating as provided by the user to capture user sentiment regarding the issue.    # noqa: E501

        :param evaluation: The evaluation of this FeedbackFeedbackData.  # noqa: E501
        :type: str
        """
        allowed_values = ["Excellent", "Poor", "Fair", "Good"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and evaluation not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `evaluation` ({0}), must be one of {1}"  # noqa: E501
                .format(evaluation, allowed_values))

        self._evaluation = evaluation

    @property
    def follow_up(self):
        """Gets the follow_up of this FeedbackFeedbackData.  # noqa: E501

        If a user is open for follow-up or not.    # noqa: E501

        :return: The follow_up of this FeedbackFeedbackData.  # noqa: E501
        :rtype: bool
        """
        return self._follow_up

    @follow_up.setter
    def follow_up(self, follow_up):
        """Sets the follow_up of this FeedbackFeedbackData.

        If a user is open for follow-up or not.    # noqa: E501

        :param follow_up: The follow_up of this FeedbackFeedbackData.  # noqa: E501
        :type: bool
        """

        self._follow_up = follow_up

    @property
    def trace_ids(self):
        """Gets the trace_ids of this FeedbackFeedbackData.  # noqa: E501

        Bunch of last traceId for reproducing user last activity.    # noqa: E501

        :return: The trace_ids of this FeedbackFeedbackData.  # noqa: E501
        :rtype: object
        """
        return self._trace_ids

    @trace_ids.setter
    def trace_ids(self, trace_ids):
        """Sets the trace_ids of this FeedbackFeedbackData.

        Bunch of last traceId for reproducing user last activity.    # noqa: E501

        :param trace_ids: The trace_ids of this FeedbackFeedbackData.  # noqa: E501
        :type: object
        """

        self._trace_ids = trace_ids

    @property
    def type(self):
        """Gets the type of this FeedbackFeedbackData.  # noqa: E501

        Type of the feedback from user.     # noqa: E501

        :return: The type of this FeedbackFeedbackData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FeedbackFeedbackData.

        Type of the feedback from user.     # noqa: E501

        :param type: The type of this FeedbackFeedbackData.  # noqa: E501
        :type: str
        """
        allowed_values = ["Evaluation", "Bug"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values))

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeedbackFeedbackData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FeedbackFeedbackData):
            return True

        return self.to_dict() != other.to_dict()
