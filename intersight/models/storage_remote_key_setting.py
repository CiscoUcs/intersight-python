# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StorageRemoteKeySetting(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_password_set': 'bool',
        'password': 'str',
        'port': 'int',
        'primary_server': 'str',
        'secondary_server': 'str',
        'server_certificate': 'str',
        'username': 'str'
    }

    attribute_map = {
        'is_password_set': 'IsPasswordSet',
        'password': 'Password',
        'port': 'Port',
        'primary_server': 'PrimaryServer',
        'secondary_server': 'SecondaryServer',
        'server_certificate': 'ServerCertificate',
        'username': 'Username'
    }

    def __init__(self,
                 is_password_set=None,
                 password=None,
                 port=None,
                 primary_server=None,
                 secondary_server=None,
                 server_certificate=None,
                 username=None,
                 local_vars_configuration=None):  # noqa: E501
        """StorageRemoteKeySetting - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_password_set = None
        self._password = None
        self._port = None
        self._primary_server = None
        self._secondary_server = None
        self._server_certificate = None
        self._username = None
        self.discriminator = None

        if is_password_set is not None:
            self.is_password_set = is_password_set
        if password is not None:
            self.password = password
        if port is not None:
            self.port = port
        if primary_server is not None:
            self.primary_server = primary_server
        if secondary_server is not None:
            self.secondary_server = secondary_server
        if server_certificate is not None:
            self.server_certificate = server_certificate
        if username is not None:
            self.username = username

    @property
    def is_password_set(self):
        """Gets the is_password_set of this StorageRemoteKeySetting.  # noqa: E501


        :return: The is_password_set of this StorageRemoteKeySetting.  # noqa: E501
        :rtype: bool
        """
        return self._is_password_set

    @is_password_set.setter
    def is_password_set(self, is_password_set):
        """Sets the is_password_set of this StorageRemoteKeySetting.


        :param is_password_set: The is_password_set of this StorageRemoteKeySetting.  # noqa: E501
        :type: bool
        """

        self._is_password_set = is_password_set

    @property
    def password(self):
        """Gets the password of this StorageRemoteKeySetting.  # noqa: E501

        The password for the KMIP server login.    # noqa: E501

        :return: The password of this StorageRemoteKeySetting.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this StorageRemoteKeySetting.

        The password for the KMIP server login.    # noqa: E501

        :param password: The password of this StorageRemoteKeySetting.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def port(self):
        """Gets the port of this StorageRemoteKeySetting.  # noqa: E501

        The port to which the KMIP client should connect.    # noqa: E501

        :return: The port of this StorageRemoteKeySetting.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this StorageRemoteKeySetting.

        The port to which the KMIP client should connect.    # noqa: E501

        :param port: The port of this StorageRemoteKeySetting.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def primary_server(self):
        """Gets the primary_server of this StorageRemoteKeySetting.  # noqa: E501

        The IP address of the primary KMIP server. It could be an IPv4 address, an IPv6 address, or a hostname. Hostnames are valid only when Inband is configured for the CIMC address.    # noqa: E501

        :return: The primary_server of this StorageRemoteKeySetting.  # noqa: E501
        :rtype: str
        """
        return self._primary_server

    @primary_server.setter
    def primary_server(self, primary_server):
        """Sets the primary_server of this StorageRemoteKeySetting.

        The IP address of the primary KMIP server. It could be an IPv4 address, an IPv6 address, or a hostname. Hostnames are valid only when Inband is configured for the CIMC address.    # noqa: E501

        :param primary_server: The primary_server of this StorageRemoteKeySetting.  # noqa: E501
        :type: str
        """

        self._primary_server = primary_server

    @property
    def secondary_server(self):
        """Gets the secondary_server of this StorageRemoteKeySetting.  # noqa: E501

        The IP address of the secondary KMIP server. It could be an IPv4 address, an IPv6 address, or a hostname. Hostnames are valid only when Inband is configured for the CIMC address.    # noqa: E501

        :return: The secondary_server of this StorageRemoteKeySetting.  # noqa: E501
        :rtype: str
        """
        return self._secondary_server

    @secondary_server.setter
    def secondary_server(self, secondary_server):
        """Sets the secondary_server of this StorageRemoteKeySetting.

        The IP address of the secondary KMIP server. It could be an IPv4 address, an IPv6 address, or a hostname. Hostnames are valid only when Inband is configured for the CIMC address.    # noqa: E501

        :param secondary_server: The secondary_server of this StorageRemoteKeySetting.  # noqa: E501
        :type: str
        """

        self._secondary_server = secondary_server

    @property
    def server_certificate(self):
        """Gets the server_certificate of this StorageRemoteKeySetting.  # noqa: E501

        The certificate/ public key of the KMIP server. It is required for initiating secure communication with the server.    # noqa: E501

        :return: The server_certificate of this StorageRemoteKeySetting.  # noqa: E501
        :rtype: str
        """
        return self._server_certificate

    @server_certificate.setter
    def server_certificate(self, server_certificate):
        """Sets the server_certificate of this StorageRemoteKeySetting.

        The certificate/ public key of the KMIP server. It is required for initiating secure communication with the server.    # noqa: E501

        :param server_certificate: The server_certificate of this StorageRemoteKeySetting.  # noqa: E501
        :type: str
        """

        self._server_certificate = server_certificate

    @property
    def username(self):
        """Gets the username of this StorageRemoteKeySetting.  # noqa: E501

        The user name for the KMIP server login.     # noqa: E501

        :return: The username of this StorageRemoteKeySetting.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this StorageRemoteKeySetting.

        The user name for the KMIP server login.     # noqa: E501

        :param username: The username of this StorageRemoteKeySetting.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageRemoteKeySetting):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageRemoteKeySetting):
            return True

        return self.to_dict() != other.to_dict()
