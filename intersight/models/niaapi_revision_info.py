# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class NiaapiRevisionInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date_published': 'datetime',
        'revision_comment': 'str',
        'revision_no': 'str'
    }

    attribute_map = {
        'date_published': 'DatePublished',
        'revision_comment': 'RevisionComment',
        'revision_no': 'RevisionNo'
    }

    def __init__(self,
                 date_published=None,
                 revision_comment=None,
                 revision_no=None,
                 local_vars_configuration=None):  # noqa: E501
        """NiaapiRevisionInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._date_published = None
        self._revision_comment = None
        self._revision_no = None
        self.discriminator = None

        if date_published is not None:
            self.date_published = date_published
        if revision_comment is not None:
            self.revision_comment = revision_comment
        if revision_no is not None:
            self.revision_no = revision_no

    @property
    def date_published(self):
        """Gets the date_published of this NiaapiRevisionInfo.  # noqa: E501

        The date the revision is made.    # noqa: E501

        :return: The date_published of this NiaapiRevisionInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._date_published

    @date_published.setter
    def date_published(self, date_published):
        """Sets the date_published of this NiaapiRevisionInfo.

        The date the revision is made.    # noqa: E501

        :param date_published: The date_published of this NiaapiRevisionInfo.  # noqa: E501
        :type: datetime
        """

        self._date_published = date_published

    @property
    def revision_comment(self):
        """Gets the revision_comment of this NiaapiRevisionInfo.  # noqa: E501

        The changes made in this revision.    # noqa: E501

        :return: The revision_comment of this NiaapiRevisionInfo.  # noqa: E501
        :rtype: str
        """
        return self._revision_comment

    @revision_comment.setter
    def revision_comment(self, revision_comment):
        """Sets the revision_comment of this NiaapiRevisionInfo.

        The changes made in this revision.    # noqa: E501

        :param revision_comment: The revision_comment of this NiaapiRevisionInfo.  # noqa: E501
        :type: str
        """

        self._revision_comment = revision_comment

    @property
    def revision_no(self):
        """Gets the revision_no of this NiaapiRevisionInfo.  # noqa: E501

        The Revision No. of this revision.     # noqa: E501

        :return: The revision_no of this NiaapiRevisionInfo.  # noqa: E501
        :rtype: str
        """
        return self._revision_no

    @revision_no.setter
    def revision_no(self, revision_no):
        """Sets the revision_no of this NiaapiRevisionInfo.

        The Revision No. of this revision.     # noqa: E501

        :param revision_no: The revision_no of this NiaapiRevisionInfo.  # noqa: E501
        :type: str
        """

        self._revision_no = revision_no

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NiaapiRevisionInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NiaapiRevisionInfo):
            return True

        return self.to_dict() != other.to_dict()
