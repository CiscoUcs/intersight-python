# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1295
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IamUser(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'client_ip_address': 'str',
        'email': 'str',
        'first_name': 'str',
        'last_login_time': 'datetime',
        'last_name': 'str',
        'name': 'str',
        'user_type': 'str',
        'api_keys': 'list[IamApiKeyRef]',
        'app_registrations': 'list[IamAppRegistrationRef]',
        'idp': 'IamIdpRef',
        'idpreference': 'IamIdpReferenceRef',
        'local_user_password': 'IamLocalUserPasswordRef',
        'oauth_tokens': 'list[IamOAuthTokenRef]',
        'permissions': 'list[IamPermissionRef]',
        'sessions': 'list[IamSessionRef]'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'client_ip_address': 'ClientIpAddress',
        'email': 'Email',
        'first_name': 'FirstName',
        'last_login_time': 'LastLoginTime',
        'last_name': 'LastName',
        'name': 'Name',
        'user_type': 'UserType',
        'api_keys': 'ApiKeys',
        'app_registrations': 'AppRegistrations',
        'idp': 'Idp',
        'idpreference': 'Idpreference',
        'local_user_password': 'LocalUserPassword',
        'oauth_tokens': 'OauthTokens',
        'permissions': 'Permissions',
        'sessions': 'Sessions'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, client_ip_address=None, email=None, first_name=None, last_login_time=None, last_name=None, name=None, user_type=None, api_keys=None, app_registrations=None, idp=None, idpreference=None, local_user_password=None, oauth_tokens=None, permissions=None, sessions=None):
        """
        IamUser - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._client_ip_address = None
        self._email = None
        self._first_name = None
        self._last_login_time = None
        self._last_name = None
        self._name = None
        self._user_type = None
        self._api_keys = None
        self._app_registrations = None
        self._idp = None
        self._idpreference = None
        self._local_user_password = None
        self._oauth_tokens = None
        self._permissions = None
        self._sessions = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if client_ip_address is not None:
          self.client_ip_address = client_ip_address
        if email is not None:
          self.email = email
        if first_name is not None:
          self.first_name = first_name
        if last_login_time is not None:
          self.last_login_time = last_login_time
        if last_name is not None:
          self.last_name = last_name
        if name is not None:
          self.name = name
        if user_type is not None:
          self.user_type = user_type
        if api_keys is not None:
          self.api_keys = api_keys
        if app_registrations is not None:
          self.app_registrations = app_registrations
        if idp is not None:
          self.idp = idp
        if idpreference is not None:
          self.idpreference = idpreference
        if local_user_password is not None:
          self.local_user_password = local_user_password
        if oauth_tokens is not None:
          self.oauth_tokens = oauth_tokens
        if permissions is not None:
          self.permissions = permissions
        if sessions is not None:
          self.sessions = sessions

    @property
    def account_moid(self):
        """
        Gets the account_moid of this IamUser.
        The Account ID for this managed object.  

        :return: The account_moid of this IamUser.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this IamUser.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this IamUser.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this IamUser.
        The time when this managed object was created.  

        :return: The create_time of this IamUser.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this IamUser.
        The time when this managed object was created.  

        :param create_time: The create_time of this IamUser.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this IamUser.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this IamUser.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this IamUser.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this IamUser.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this IamUser.
        The time when this managed object was last modified.  

        :return: The mod_time of this IamUser.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this IamUser.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this IamUser.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this IamUser.
        The unique identifier of this Managed Object instance.   

        :return: The moid of this IamUser.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this IamUser.
        The unique identifier of this Managed Object instance.   

        :param moid: The moid of this IamUser.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this IamUser.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :return: The object_type of this IamUser.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this IamUser.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :param object_type: The object_type of this IamUser.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this IamUser.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this IamUser.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this IamUser.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this IamUser.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this IamUser.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this IamUser.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this IamUser.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this IamUser.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this IamUser.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this IamUser.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this IamUser.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this IamUser.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this IamUser.
        The versioning info for this managed object.   

        :return: The version_context of this IamUser.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this IamUser.
        The versioning info for this managed object.   

        :param version_context: The version_context of this IamUser.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this IamUser.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this IamUser.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this IamUser.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this IamUser.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this IamUser.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this IamUser.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this IamUser.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this IamUser.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this IamUser.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :return: The permission_resources of this IamUser.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this IamUser.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :param permission_resources: The permission_resources of this IamUser.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def client_ip_address(self):
        """
        Gets the client_ip_address of this IamUser.
        IP address from which the user last logged in to Intersight.  

        :return: The client_ip_address of this IamUser.
        :rtype: str
        """
        return self._client_ip_address

    @client_ip_address.setter
    def client_ip_address(self, client_ip_address):
        """
        Sets the client_ip_address of this IamUser.
        IP address from which the user last logged in to Intersight.  

        :param client_ip_address: The client_ip_address of this IamUser.
        :type: str
        """

        self._client_ip_address = client_ip_address

    @property
    def email(self):
        """
        Gets the email of this IamUser.
        Email of the user. Users are added to Intersight using the email configured in the IdP.  

        :return: The email of this IamUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this IamUser.
        Email of the user. Users are added to Intersight using the email configured in the IdP.  

        :param email: The email of this IamUser.
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this IamUser.
        First name of the user. This field is populated from the IdP attributes received after authentication.  

        :return: The first_name of this IamUser.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this IamUser.
        First name of the user. This field is populated from the IdP attributes received after authentication.  

        :param first_name: The first_name of this IamUser.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_login_time(self):
        """
        Gets the last_login_time of this IamUser.
        Last successful login time for user.  

        :return: The last_login_time of this IamUser.
        :rtype: datetime
        """
        return self._last_login_time

    @last_login_time.setter
    def last_login_time(self, last_login_time):
        """
        Sets the last_login_time of this IamUser.
        Last successful login time for user.  

        :param last_login_time: The last_login_time of this IamUser.
        :type: datetime
        """

        self._last_login_time = last_login_time

    @property
    def last_name(self):
        """
        Gets the last_name of this IamUser.
        Last name of the user. This field is populated from the IdP attributes received after authentication.  

        :return: The last_name of this IamUser.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this IamUser.
        Last name of the user. This field is populated from the IdP attributes received after authentication.  

        :param last_name: The last_name of this IamUser.
        :type: str
        """

        self._last_name = last_name

    @property
    def name(self):
        """
        Gets the name of this IamUser.
        UserID as configured in the IdP.  

        :return: The name of this IamUser.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this IamUser.
        UserID as configured in the IdP.  

        :param name: The name of this IamUser.
        :type: str
        """

        self._name = name

    @property
    def user_type(self):
        """
        Gets the user_type of this IamUser.
        Type of the User. If a user is added manually by specifying the email address, or has logged in using groups, based on the IdP attributes received during authentication. If added manually, the user type will be static, otherwise dynamic.   

        :return: The user_type of this IamUser.
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """
        Sets the user_type of this IamUser.
        Type of the User. If a user is added manually by specifying the email address, or has logged in using groups, based on the IdP attributes received during authentication. If added manually, the user type will be static, otherwise dynamic.   

        :param user_type: The user_type of this IamUser.
        :type: str
        """

        self._user_type = user_type

    @property
    def api_keys(self):
        """
        Gets the api_keys of this IamUser.
        Current user's API keys. API keys are used to programatically perform API calls. 

        :return: The api_keys of this IamUser.
        :rtype: list[IamApiKeyRef]
        """
        return self._api_keys

    @api_keys.setter
    def api_keys(self, api_keys):
        """
        Sets the api_keys of this IamUser.
        Current user's API keys. API keys are used to programatically perform API calls. 

        :param api_keys: The api_keys of this IamUser.
        :type: list[IamApiKeyRef]
        """

        self._api_keys = api_keys

    @property
    def app_registrations(self):
        """
        Gets the app_registrations of this IamUser.
        List of registered OAuth2 applications created by the User. 

        :return: The app_registrations of this IamUser.
        :rtype: list[IamAppRegistrationRef]
        """
        return self._app_registrations

    @app_registrations.setter
    def app_registrations(self, app_registrations):
        """
        Sets the app_registrations of this IamUser.
        List of registered OAuth2 applications created by the User. 

        :param app_registrations: The app_registrations of this IamUser.
        :type: list[IamAppRegistrationRef]
        """

        self._app_registrations = app_registrations

    @property
    def idp(self):
        """
        Gets the idp of this IamUser.
        A collection of references to the [iam.Idp](mo://iam.Idp) Managed Object.  When this managed object is deleted, the referenced [iam.Idp](mo://iam.Idp) MO unsets its reference to this deleted MO. 

        :return: The idp of this IamUser.
        :rtype: IamIdpRef
        """
        return self._idp

    @idp.setter
    def idp(self, idp):
        """
        Sets the idp of this IamUser.
        A collection of references to the [iam.Idp](mo://iam.Idp) Managed Object.  When this managed object is deleted, the referenced [iam.Idp](mo://iam.Idp) MO unsets its reference to this deleted MO. 

        :param idp: The idp of this IamUser.
        :type: IamIdpRef
        """

        self._idp = idp

    @property
    def idpreference(self):
        """
        Gets the idpreference of this IamUser.
        A collection of references to the [iam.IdpReference](mo://iam.IdpReference) Managed Object.  When this managed object is deleted, the referenced [iam.IdpReference](mo://iam.IdpReference) MO unsets its reference to this deleted MO. 

        :return: The idpreference of this IamUser.
        :rtype: IamIdpReferenceRef
        """
        return self._idpreference

    @idpreference.setter
    def idpreference(self, idpreference):
        """
        Sets the idpreference of this IamUser.
        A collection of references to the [iam.IdpReference](mo://iam.IdpReference) Managed Object.  When this managed object is deleted, the referenced [iam.IdpReference](mo://iam.IdpReference) MO unsets its reference to this deleted MO. 

        :param idpreference: The idpreference of this IamUser.
        :type: IamIdpReferenceRef
        """

        self._idpreference = idpreference

    @property
    def local_user_password(self):
        """
        Gets the local_user_password of this IamUser.
        A collection of references to the [iam.LocalUserPassword](mo://iam.LocalUserPassword) Managed Object.  When this managed object is deleted, the referenced [iam.LocalUserPassword](mo://iam.LocalUserPassword) MO unsets its reference to this deleted MO. 

        :return: The local_user_password of this IamUser.
        :rtype: IamLocalUserPasswordRef
        """
        return self._local_user_password

    @local_user_password.setter
    def local_user_password(self, local_user_password):
        """
        Sets the local_user_password of this IamUser.
        A collection of references to the [iam.LocalUserPassword](mo://iam.LocalUserPassword) Managed Object.  When this managed object is deleted, the referenced [iam.LocalUserPassword](mo://iam.LocalUserPassword) MO unsets its reference to this deleted MO. 

        :param local_user_password: The local_user_password of this IamUser.
        :type: IamLocalUserPasswordRef
        """

        self._local_user_password = local_user_password

    @property
    def oauth_tokens(self):
        """
        Gets the oauth_tokens of this IamUser.
        Collection of the available OAuthTokens. Each OAuthToken lives 30 days unless it is deleted manually by User. OAuthToken is created when Login performed via OAuth Client (AppRegistration). OAuthToken itself is not sensitive data since it doesn't contain salt, salt is stored in Vault. 

        :return: The oauth_tokens of this IamUser.
        :rtype: list[IamOAuthTokenRef]
        """
        return self._oauth_tokens

    @oauth_tokens.setter
    def oauth_tokens(self, oauth_tokens):
        """
        Sets the oauth_tokens of this IamUser.
        Collection of the available OAuthTokens. Each OAuthToken lives 30 days unless it is deleted manually by User. OAuthToken is created when Login performed via OAuth Client (AppRegistration). OAuthToken itself is not sensitive data since it doesn't contain salt, salt is stored in Vault. 

        :param oauth_tokens: The oauth_tokens of this IamUser.
        :type: list[IamOAuthTokenRef]
        """

        self._oauth_tokens = oauth_tokens

    @property
    def permissions(self):
        """
        Gets the permissions of this IamUser.
        Permissions assigned to the user. Permission provides a way to assign roles to a user or user group to perform operations on object hierarchy. 

        :return: The permissions of this IamUser.
        :rtype: list[IamPermissionRef]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """
        Sets the permissions of this IamUser.
        Permissions assigned to the user. Permission provides a way to assign roles to a user or user group to perform operations on object hierarchy. 

        :param permissions: The permissions of this IamUser.
        :type: list[IamPermissionRef]
        """

        self._permissions = permissions

    @property
    def sessions(self):
        """
        Gets the sessions of this IamUser.
        Current user's web sessions. After a user logs into Intersight, a session object is created. This session object is deleted upon logout, idle timeout, expiry timeout, or manual deletion. 

        :return: The sessions of this IamUser.
        :rtype: list[IamSessionRef]
        """
        return self._sessions

    @sessions.setter
    def sessions(self, sessions):
        """
        Sets the sessions of this IamUser.
        Current user's web sessions. After a user logs into Intersight, a session object is created. This session object is deleted upon logout, idle timeout, expiry timeout, or manual deletion. 

        :param sessions: The sessions of this IamUser.
        :type: list[IamSessionRef]
        """

        self._sessions = sessions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IamUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
