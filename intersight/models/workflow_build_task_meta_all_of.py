# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class WorkflowBuildTaskMetaAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'src': 'str',
        'task_list': 'object',
        'task_type': 'str',
        'workflow_type': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'src': 'Src',
        'task_list': 'TaskList',
        'task_type': 'TaskType',
        'workflow_type': 'WorkflowType'
    }

    def __init__(self,
                 name=None,
                 src=None,
                 task_list=None,
                 task_type=None,
                 workflow_type=None,
                 local_vars_configuration=None):  # noqa: E501
        """WorkflowBuildTaskMetaAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._src = None
        self._task_list = None
        self._task_type = None
        self._workflow_type = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if src is not None:
            self.src = src
        if task_list is not None:
            self.task_list = task_list
        if task_type is not None:
            self.task_type = task_type
        if workflow_type is not None:
            self.workflow_type = workflow_type

    @property
    def name(self):
        """Gets the name of this WorkflowBuildTaskMetaAllOf.  # noqa: E501

        Name for the BuildTaskMeta instance used to created a dynamic workflow.    # noqa: E501

        :return: The name of this WorkflowBuildTaskMetaAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowBuildTaskMetaAllOf.

        Name for the BuildTaskMeta instance used to created a dynamic workflow.    # noqa: E501

        :param name: The name of this WorkflowBuildTaskMetaAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def src(self):
        """Gets the src of this WorkflowBuildTaskMetaAllOf.  # noqa: E501

        Microservice owner for the task in this workflow.    # noqa: E501

        :return: The src of this WorkflowBuildTaskMetaAllOf.  # noqa: E501
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this WorkflowBuildTaskMetaAllOf.

        Microservice owner for the task in this workflow.    # noqa: E501

        :param src: The src of this WorkflowBuildTaskMetaAllOf.  # noqa: E501
        :type: str
        """

        self._src = src

    @property
    def task_list(self):
        """Gets the task_list of this WorkflowBuildTaskMetaAllOf.  # noqa: E501

        Task list used to build the dynamic workflow.    # noqa: E501

        :return: The task_list of this WorkflowBuildTaskMetaAllOf.  # noqa: E501
        :rtype: object
        """
        return self._task_list

    @task_list.setter
    def task_list(self, task_list):
        """Sets the task_list of this WorkflowBuildTaskMetaAllOf.

        Task list used to build the dynamic workflow.    # noqa: E501

        :param task_list: The task_list of this WorkflowBuildTaskMetaAllOf.  # noqa: E501
        :type: object
        """

        self._task_list = task_list

    @property
    def task_type(self):
        """Gets the task_type of this WorkflowBuildTaskMetaAllOf.  # noqa: E501

        The type of the task within this workflow.    # noqa: E501

        :return: The task_type of this WorkflowBuildTaskMetaAllOf.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this WorkflowBuildTaskMetaAllOf.

        The type of the task within this workflow.    # noqa: E501

        :param task_type: The task_type of this WorkflowBuildTaskMetaAllOf.  # noqa: E501
        :type: str
        """

        self._task_type = task_type

    @property
    def workflow_type(self):
        """Gets the workflow_type of this WorkflowBuildTaskMetaAllOf.  # noqa: E501

        The type for the dynamic workflow.     # noqa: E501

        :return: The workflow_type of this WorkflowBuildTaskMetaAllOf.  # noqa: E501
        :rtype: str
        """
        return self._workflow_type

    @workflow_type.setter
    def workflow_type(self, workflow_type):
        """Sets the workflow_type of this WorkflowBuildTaskMetaAllOf.

        The type for the dynamic workflow.     # noqa: E501

        :param workflow_type: The workflow_type of this WorkflowBuildTaskMetaAllOf.  # noqa: E501
        :type: str
        """

        self._workflow_type = workflow_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowBuildTaskMetaAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowBuildTaskMetaAllOf):
            return True

        return self.to_dict() != other.to_dict()
