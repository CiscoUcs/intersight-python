# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class VnicEthIfAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cdn': 'VnicCdn',
        'name': 'str',
        'order': 'int',
        'placement': 'VnicPlacementSettings',
        'usnic_settings': 'VnicUsnicSettings',
        'vmq_settings': 'VnicVmqSettings',
        'eth_adapter_policy': 'VnicEthAdapterPolicy',
        'eth_network_policy': 'VnicEthNetworkPolicy',
        'eth_qos_policy': 'VnicEthQosPolicy',
        'lan_connectivity_policy': 'VnicLanConnectivityPolicy',
        'organization': 'OrganizationOrganization'
    }

    attribute_map = {
        'cdn': 'Cdn',
        'name': 'Name',
        'order': 'Order',
        'placement': 'Placement',
        'usnic_settings': 'UsnicSettings',
        'vmq_settings': 'VmqSettings',
        'eth_adapter_policy': 'EthAdapterPolicy',
        'eth_network_policy': 'EthNetworkPolicy',
        'eth_qos_policy': 'EthQosPolicy',
        'lan_connectivity_policy': 'LanConnectivityPolicy',
        'organization': 'Organization'
    }

    def __init__(self,
                 cdn=None,
                 name=None,
                 order=None,
                 placement=None,
                 usnic_settings=None,
                 vmq_settings=None,
                 eth_adapter_policy=None,
                 eth_network_policy=None,
                 eth_qos_policy=None,
                 lan_connectivity_policy=None,
                 organization=None,
                 local_vars_configuration=None):  # noqa: E501
        """VnicEthIfAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cdn = None
        self._name = None
        self._order = None
        self._placement = None
        self._usnic_settings = None
        self._vmq_settings = None
        self._eth_adapter_policy = None
        self._eth_network_policy = None
        self._eth_qos_policy = None
        self._lan_connectivity_policy = None
        self._organization = None
        self.discriminator = None

        if cdn is not None:
            self.cdn = cdn
        if name is not None:
            self.name = name
        if order is not None:
            self.order = order
        if placement is not None:
            self.placement = placement
        if usnic_settings is not None:
            self.usnic_settings = usnic_settings
        if vmq_settings is not None:
            self.vmq_settings = vmq_settings
        if eth_adapter_policy is not None:
            self.eth_adapter_policy = eth_adapter_policy
        if eth_network_policy is not None:
            self.eth_network_policy = eth_network_policy
        if eth_qos_policy is not None:
            self.eth_qos_policy = eth_qos_policy
        if lan_connectivity_policy is not None:
            self.lan_connectivity_policy = lan_connectivity_policy
        if organization is not None:
            self.organization = organization

    @property
    def cdn(self):
        """Gets the cdn of this VnicEthIfAllOf.  # noqa: E501


        :return: The cdn of this VnicEthIfAllOf.  # noqa: E501
        :rtype: VnicCdn
        """
        return self._cdn

    @cdn.setter
    def cdn(self, cdn):
        """Sets the cdn of this VnicEthIfAllOf.


        :param cdn: The cdn of this VnicEthIfAllOf.  # noqa: E501
        :type: VnicCdn
        """

        self._cdn = cdn

    @property
    def name(self):
        """Gets the name of this VnicEthIfAllOf.  # noqa: E501

        Name of the virtual ethernet interface.    # noqa: E501

        :return: The name of this VnicEthIfAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VnicEthIfAllOf.

        Name of the virtual ethernet interface.    # noqa: E501

        :param name: The name of this VnicEthIfAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def order(self):
        """Gets the order of this VnicEthIfAllOf.  # noqa: E501

        The order in which the virtual interface is brought up. The order assigned to an interface should be unique for all the Ethernet and Fibre-Channel interfaces on each PCI link on a VIC adapter. The maximum value of PCI order is limited by the number of virtual interfaces (Ethernet and Fibre-Channel) on each PCI link on a VIC adapter. All VIC adapters have a single PCI link except VIC 1385 which has two.    # noqa: E501

        :return: The order of this VnicEthIfAllOf.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this VnicEthIfAllOf.

        The order in which the virtual interface is brought up. The order assigned to an interface should be unique for all the Ethernet and Fibre-Channel interfaces on each PCI link on a VIC adapter. The maximum value of PCI order is limited by the number of virtual interfaces (Ethernet and Fibre-Channel) on each PCI link on a VIC adapter. All VIC adapters have a single PCI link except VIC 1385 which has two.    # noqa: E501

        :param order: The order of this VnicEthIfAllOf.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def placement(self):
        """Gets the placement of this VnicEthIfAllOf.  # noqa: E501


        :return: The placement of this VnicEthIfAllOf.  # noqa: E501
        :rtype: VnicPlacementSettings
        """
        return self._placement

    @placement.setter
    def placement(self, placement):
        """Sets the placement of this VnicEthIfAllOf.


        :param placement: The placement of this VnicEthIfAllOf.  # noqa: E501
        :type: VnicPlacementSettings
        """

        self._placement = placement

    @property
    def usnic_settings(self):
        """Gets the usnic_settings of this VnicEthIfAllOf.  # noqa: E501


        :return: The usnic_settings of this VnicEthIfAllOf.  # noqa: E501
        :rtype: VnicUsnicSettings
        """
        return self._usnic_settings

    @usnic_settings.setter
    def usnic_settings(self, usnic_settings):
        """Sets the usnic_settings of this VnicEthIfAllOf.


        :param usnic_settings: The usnic_settings of this VnicEthIfAllOf.  # noqa: E501
        :type: VnicUsnicSettings
        """

        self._usnic_settings = usnic_settings

    @property
    def vmq_settings(self):
        """Gets the vmq_settings of this VnicEthIfAllOf.  # noqa: E501


        :return: The vmq_settings of this VnicEthIfAllOf.  # noqa: E501
        :rtype: VnicVmqSettings
        """
        return self._vmq_settings

    @vmq_settings.setter
    def vmq_settings(self, vmq_settings):
        """Sets the vmq_settings of this VnicEthIfAllOf.


        :param vmq_settings: The vmq_settings of this VnicEthIfAllOf.  # noqa: E501
        :type: VnicVmqSettings
        """

        self._vmq_settings = vmq_settings

    @property
    def eth_adapter_policy(self):
        """Gets the eth_adapter_policy of this VnicEthIfAllOf.  # noqa: E501


        :return: The eth_adapter_policy of this VnicEthIfAllOf.  # noqa: E501
        :rtype: VnicEthAdapterPolicy
        """
        return self._eth_adapter_policy

    @eth_adapter_policy.setter
    def eth_adapter_policy(self, eth_adapter_policy):
        """Sets the eth_adapter_policy of this VnicEthIfAllOf.


        :param eth_adapter_policy: The eth_adapter_policy of this VnicEthIfAllOf.  # noqa: E501
        :type: VnicEthAdapterPolicy
        """

        self._eth_adapter_policy = eth_adapter_policy

    @property
    def eth_network_policy(self):
        """Gets the eth_network_policy of this VnicEthIfAllOf.  # noqa: E501


        :return: The eth_network_policy of this VnicEthIfAllOf.  # noqa: E501
        :rtype: VnicEthNetworkPolicy
        """
        return self._eth_network_policy

    @eth_network_policy.setter
    def eth_network_policy(self, eth_network_policy):
        """Sets the eth_network_policy of this VnicEthIfAllOf.


        :param eth_network_policy: The eth_network_policy of this VnicEthIfAllOf.  # noqa: E501
        :type: VnicEthNetworkPolicy
        """

        self._eth_network_policy = eth_network_policy

    @property
    def eth_qos_policy(self):
        """Gets the eth_qos_policy of this VnicEthIfAllOf.  # noqa: E501


        :return: The eth_qos_policy of this VnicEthIfAllOf.  # noqa: E501
        :rtype: VnicEthQosPolicy
        """
        return self._eth_qos_policy

    @eth_qos_policy.setter
    def eth_qos_policy(self, eth_qos_policy):
        """Sets the eth_qos_policy of this VnicEthIfAllOf.


        :param eth_qos_policy: The eth_qos_policy of this VnicEthIfAllOf.  # noqa: E501
        :type: VnicEthQosPolicy
        """

        self._eth_qos_policy = eth_qos_policy

    @property
    def lan_connectivity_policy(self):
        """Gets the lan_connectivity_policy of this VnicEthIfAllOf.  # noqa: E501


        :return: The lan_connectivity_policy of this VnicEthIfAllOf.  # noqa: E501
        :rtype: VnicLanConnectivityPolicy
        """
        return self._lan_connectivity_policy

    @lan_connectivity_policy.setter
    def lan_connectivity_policy(self, lan_connectivity_policy):
        """Sets the lan_connectivity_policy of this VnicEthIfAllOf.


        :param lan_connectivity_policy: The lan_connectivity_policy of this VnicEthIfAllOf.  # noqa: E501
        :type: VnicLanConnectivityPolicy
        """

        self._lan_connectivity_policy = lan_connectivity_policy

    @property
    def organization(self):
        """Gets the organization of this VnicEthIfAllOf.  # noqa: E501


        :return: The organization of this VnicEthIfAllOf.  # noqa: E501
        :rtype: OrganizationOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this VnicEthIfAllOf.


        :param organization: The organization of this VnicEthIfAllOf.  # noqa: E501
        :type: OrganizationOrganization
        """

        self._organization = organization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VnicEthIfAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VnicEthIfAllOf):
            return True

        return self.to_dict() != other.to_dict()
