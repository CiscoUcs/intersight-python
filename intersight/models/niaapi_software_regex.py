# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-961
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NiaapiSoftwareRegex(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'regex': 'str',
        'software_version': 'str'
    }

    attribute_map = {
        'regex': 'Regex',
        'software_version': 'SoftwareVersion'
    }

    def __init__(self, regex=None, software_version=None):
        """
        NiaapiSoftwareRegex - a model defined in Swagger
        """

        self._regex = None
        self._software_version = None

        if regex is not None:
          self.regex = regex
        if software_version is not None:
          self.software_version = software_version

    @property
    def regex(self):
        """
        Gets the regex of this NiaapiSoftwareRegex.
        Regular Expression pattern used to reconginze the version string.  

        :return: The regex of this NiaapiSoftwareRegex.
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """
        Sets the regex of this NiaapiSoftwareRegex.
        Regular Expression pattern used to reconginze the version string.  

        :param regex: The regex of this NiaapiSoftwareRegex.
        :type: str
        """

        self._regex = regex

    @property
    def software_version(self):
        """
        Gets the software_version of this NiaapiSoftwareRegex.
        Software release. A set of Software releases seperated by comma which can be recongized by according Regex pattern.   

        :return: The software_version of this NiaapiSoftwareRegex.
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """
        Sets the software_version of this NiaapiSoftwareRegex.
        Software release. A set of Software releases seperated by comma which can be recongized by according Regex pattern.   

        :param software_version: The software_version of this NiaapiSoftwareRegex.
        :type: str
        """

        self._software_version = software_version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NiaapiSoftwareRegex):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
