# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class HyperflexAlarm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'acknowledged': 'bool',
        'acknowledged_by': 'str',
        'acknowledged_time': 'int',
        'acknowledged_time_as_utc': 'str',
        'description': 'str',
        'entity_data': 'str',
        'entity_name': 'str',
        'entity_type': 'str',
        'entity_uu_id': 'str',
        'message': 'str',
        'name': 'str',
        'status': 'str',
        'triggered_time': 'int',
        'triggered_time_as_utc': 'str',
        'uuid': 'str',
        'cluster': 'HyperflexCluster'
    }

    attribute_map = {
        'acknowledged': 'Acknowledged',
        'acknowledged_by': 'AcknowledgedBy',
        'acknowledged_time': 'AcknowledgedTime',
        'acknowledged_time_as_utc': 'AcknowledgedTimeAsUtc',
        'description': 'Description',
        'entity_data': 'EntityData',
        'entity_name': 'EntityName',
        'entity_type': 'EntityType',
        'entity_uu_id': 'EntityUuId',
        'message': 'Message',
        'name': 'Name',
        'status': 'Status',
        'triggered_time': 'TriggeredTime',
        'triggered_time_as_utc': 'TriggeredTimeAsUtc',
        'uuid': 'Uuid',
        'cluster': 'Cluster'
    }

    def __init__(self,
                 acknowledged=None,
                 acknowledged_by=None,
                 acknowledged_time=None,
                 acknowledged_time_as_utc=None,
                 description=None,
                 entity_data=None,
                 entity_name=None,
                 entity_type='UNKNOWN',
                 entity_uu_id=None,
                 message=None,
                 name=None,
                 status='UNKNOWN',
                 triggered_time=None,
                 triggered_time_as_utc=None,
                 uuid=None,
                 cluster=None,
                 local_vars_configuration=None):  # noqa: E501
        """HyperflexAlarm - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._acknowledged = None
        self._acknowledged_by = None
        self._acknowledged_time = None
        self._acknowledged_time_as_utc = None
        self._description = None
        self._entity_data = None
        self._entity_name = None
        self._entity_type = None
        self._entity_uu_id = None
        self._message = None
        self._name = None
        self._status = None
        self._triggered_time = None
        self._triggered_time_as_utc = None
        self._uuid = None
        self._cluster = None
        self.discriminator = None

        if acknowledged is not None:
            self.acknowledged = acknowledged
        if acknowledged_by is not None:
            self.acknowledged_by = acknowledged_by
        if acknowledged_time is not None:
            self.acknowledged_time = acknowledged_time
        if acknowledged_time_as_utc is not None:
            self.acknowledged_time_as_utc = acknowledged_time_as_utc
        if description is not None:
            self.description = description
        if entity_data is not None:
            self.entity_data = entity_data
        if entity_name is not None:
            self.entity_name = entity_name
        if entity_type is not None:
            self.entity_type = entity_type
        if entity_uu_id is not None:
            self.entity_uu_id = entity_uu_id
        if message is not None:
            self.message = message
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if triggered_time is not None:
            self.triggered_time = triggered_time
        if triggered_time_as_utc is not None:
            self.triggered_time_as_utc = triggered_time_as_utc
        if uuid is not None:
            self.uuid = uuid
        if cluster is not None:
            self.cluster = cluster

    @property
    def acknowledged(self):
        """Gets the acknowledged of this HyperflexAlarm.  # noqa: E501


        :return: The acknowledged of this HyperflexAlarm.  # noqa: E501
        :rtype: bool
        """
        return self._acknowledged

    @acknowledged.setter
    def acknowledged(self, acknowledged):
        """Sets the acknowledged of this HyperflexAlarm.


        :param acknowledged: The acknowledged of this HyperflexAlarm.  # noqa: E501
        :type: bool
        """

        self._acknowledged = acknowledged

    @property
    def acknowledged_by(self):
        """Gets the acknowledged_by of this HyperflexAlarm.  # noqa: E501


        :return: The acknowledged_by of this HyperflexAlarm.  # noqa: E501
        :rtype: str
        """
        return self._acknowledged_by

    @acknowledged_by.setter
    def acknowledged_by(self, acknowledged_by):
        """Sets the acknowledged_by of this HyperflexAlarm.


        :param acknowledged_by: The acknowledged_by of this HyperflexAlarm.  # noqa: E501
        :type: str
        """

        self._acknowledged_by = acknowledged_by

    @property
    def acknowledged_time(self):
        """Gets the acknowledged_time of this HyperflexAlarm.  # noqa: E501


        :return: The acknowledged_time of this HyperflexAlarm.  # noqa: E501
        :rtype: int
        """
        return self._acknowledged_time

    @acknowledged_time.setter
    def acknowledged_time(self, acknowledged_time):
        """Sets the acknowledged_time of this HyperflexAlarm.


        :param acknowledged_time: The acknowledged_time of this HyperflexAlarm.  # noqa: E501
        :type: int
        """

        self._acknowledged_time = acknowledged_time

    @property
    def acknowledged_time_as_utc(self):
        """Gets the acknowledged_time_as_utc of this HyperflexAlarm.  # noqa: E501


        :return: The acknowledged_time_as_utc of this HyperflexAlarm.  # noqa: E501
        :rtype: str
        """
        return self._acknowledged_time_as_utc

    @acknowledged_time_as_utc.setter
    def acknowledged_time_as_utc(self, acknowledged_time_as_utc):
        """Sets the acknowledged_time_as_utc of this HyperflexAlarm.


        :param acknowledged_time_as_utc: The acknowledged_time_as_utc of this HyperflexAlarm.  # noqa: E501
        :type: str
        """

        self._acknowledged_time_as_utc = acknowledged_time_as_utc

    @property
    def description(self):
        """Gets the description of this HyperflexAlarm.  # noqa: E501


        :return: The description of this HyperflexAlarm.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HyperflexAlarm.


        :param description: The description of this HyperflexAlarm.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def entity_data(self):
        """Gets the entity_data of this HyperflexAlarm.  # noqa: E501


        :return: The entity_data of this HyperflexAlarm.  # noqa: E501
        :rtype: str
        """
        return self._entity_data

    @entity_data.setter
    def entity_data(self, entity_data):
        """Sets the entity_data of this HyperflexAlarm.


        :param entity_data: The entity_data of this HyperflexAlarm.  # noqa: E501
        :type: str
        """

        self._entity_data = entity_data

    @property
    def entity_name(self):
        """Gets the entity_name of this HyperflexAlarm.  # noqa: E501


        :return: The entity_name of this HyperflexAlarm.  # noqa: E501
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this HyperflexAlarm.


        :param entity_name: The entity_name of this HyperflexAlarm.  # noqa: E501
        :type: str
        """

        self._entity_name = entity_name

    @property
    def entity_type(self):
        """Gets the entity_type of this HyperflexAlarm.  # noqa: E501


        :return: The entity_type of this HyperflexAlarm.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this HyperflexAlarm.


        :param entity_type: The entity_type of this HyperflexAlarm.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "UNKNOWN", "DISK", "NODE", "CLUSTER", "DATASTORE", "ZONE",
            "VIRTUALMACHINE"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and entity_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(entity_type, allowed_values))

        self._entity_type = entity_type

    @property
    def entity_uu_id(self):
        """Gets the entity_uu_id of this HyperflexAlarm.  # noqa: E501


        :return: The entity_uu_id of this HyperflexAlarm.  # noqa: E501
        :rtype: str
        """
        return self._entity_uu_id

    @entity_uu_id.setter
    def entity_uu_id(self, entity_uu_id):
        """Sets the entity_uu_id of this HyperflexAlarm.


        :param entity_uu_id: The entity_uu_id of this HyperflexAlarm.  # noqa: E501
        :type: str
        """

        self._entity_uu_id = entity_uu_id

    @property
    def message(self):
        """Gets the message of this HyperflexAlarm.  # noqa: E501


        :return: The message of this HyperflexAlarm.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this HyperflexAlarm.


        :param message: The message of this HyperflexAlarm.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this HyperflexAlarm.  # noqa: E501


        :return: The name of this HyperflexAlarm.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HyperflexAlarm.


        :param name: The name of this HyperflexAlarm.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this HyperflexAlarm.  # noqa: E501


        :return: The status of this HyperflexAlarm.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HyperflexAlarm.


        :param status: The status of this HyperflexAlarm.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "CLEARED", "INFO", "WARNING",
                          "CRITICAL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values))

        self._status = status

    @property
    def triggered_time(self):
        """Gets the triggered_time of this HyperflexAlarm.  # noqa: E501


        :return: The triggered_time of this HyperflexAlarm.  # noqa: E501
        :rtype: int
        """
        return self._triggered_time

    @triggered_time.setter
    def triggered_time(self, triggered_time):
        """Sets the triggered_time of this HyperflexAlarm.


        :param triggered_time: The triggered_time of this HyperflexAlarm.  # noqa: E501
        :type: int
        """

        self._triggered_time = triggered_time

    @property
    def triggered_time_as_utc(self):
        """Gets the triggered_time_as_utc of this HyperflexAlarm.  # noqa: E501


        :return: The triggered_time_as_utc of this HyperflexAlarm.  # noqa: E501
        :rtype: str
        """
        return self._triggered_time_as_utc

    @triggered_time_as_utc.setter
    def triggered_time_as_utc(self, triggered_time_as_utc):
        """Sets the triggered_time_as_utc of this HyperflexAlarm.


        :param triggered_time_as_utc: The triggered_time_as_utc of this HyperflexAlarm.  # noqa: E501
        :type: str
        """

        self._triggered_time_as_utc = triggered_time_as_utc

    @property
    def uuid(self):
        """Gets the uuid of this HyperflexAlarm.  # noqa: E501


        :return: The uuid of this HyperflexAlarm.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this HyperflexAlarm.


        :param uuid: The uuid of this HyperflexAlarm.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def cluster(self):
        """Gets the cluster of this HyperflexAlarm.  # noqa: E501


        :return: The cluster of this HyperflexAlarm.  # noqa: E501
        :rtype: HyperflexCluster
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this HyperflexAlarm.


        :param cluster: The cluster of this HyperflexAlarm.  # noqa: E501
        :type: HyperflexCluster
        """

        self._cluster = cluster

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HyperflexAlarm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HyperflexAlarm):
            return True

        return self.to_dict() != other.to_dict()
