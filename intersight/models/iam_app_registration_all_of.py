# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class IamAppRegistrationAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'client_id': 'str',
        'client_name': 'str',
        'client_secret': 'str',
        'client_type': 'str',
        'description': 'str',
        'grant_types': 'list[str]',
        'redirect_uris': 'list[str]',
        'renew_client_secret': 'bool',
        'response_types': 'list[str]',
        'revocation_timestamp': 'datetime',
        'revoke': 'bool',
        'account': 'IamAccount',
        'oauth_tokens': 'list[IamOAuthToken]',
        'permission': 'IamPermission',
        'roles': 'list[IamRole]',
        'user': 'IamUser'
    }

    attribute_map = {
        'client_id': 'ClientId',
        'client_name': 'ClientName',
        'client_secret': 'ClientSecret',
        'client_type': 'ClientType',
        'description': 'Description',
        'grant_types': 'GrantTypes',
        'redirect_uris': 'RedirectUris',
        'renew_client_secret': 'RenewClientSecret',
        'response_types': 'ResponseTypes',
        'revocation_timestamp': 'RevocationTimestamp',
        'revoke': 'Revoke',
        'account': 'Account',
        'oauth_tokens': 'OauthTokens',
        'permission': 'Permission',
        'roles': 'Roles',
        'user': 'User'
    }

    def __init__(self,
                 client_id=None,
                 client_name=None,
                 client_secret=None,
                 client_type='public',
                 description=None,
                 grant_types=None,
                 redirect_uris=None,
                 renew_client_secret=None,
                 response_types=None,
                 revocation_timestamp=None,
                 revoke=None,
                 account=None,
                 oauth_tokens=None,
                 permission=None,
                 roles=None,
                 user=None,
                 local_vars_configuration=None):  # noqa: E501
        """IamAppRegistrationAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._client_id = None
        self._client_name = None
        self._client_secret = None
        self._client_type = None
        self._description = None
        self._grant_types = None
        self._redirect_uris = None
        self._renew_client_secret = None
        self._response_types = None
        self._revocation_timestamp = None
        self._revoke = None
        self._account = None
        self._oauth_tokens = None
        self._permission = None
        self._roles = None
        self._user = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if client_name is not None:
            self.client_name = client_name
        if client_secret is not None:
            self.client_secret = client_secret
        if client_type is not None:
            self.client_type = client_type
        if description is not None:
            self.description = description
        if grant_types is not None:
            self.grant_types = grant_types
        if redirect_uris is not None:
            self.redirect_uris = redirect_uris
        if renew_client_secret is not None:
            self.renew_client_secret = renew_client_secret
        if response_types is not None:
            self.response_types = response_types
        if revocation_timestamp is not None:
            self.revocation_timestamp = revocation_timestamp
        if revoke is not None:
            self.revoke = revoke
        if account is not None:
            self.account = account
        if oauth_tokens is not None:
            self.oauth_tokens = oauth_tokens
        if permission is not None:
            self.permission = permission
        if roles is not None:
            self.roles = roles
        if user is not None:
            self.user = user

    @property
    def client_id(self):
        """Gets the client_id of this IamAppRegistrationAllOf.  # noqa: E501

        A unique identifier for the OAuth2 client application. The client ID is auto-generated when the AppRegistration object is created.     # noqa: E501

        :return: The client_id of this IamAppRegistrationAllOf.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this IamAppRegistrationAllOf.

        A unique identifier for the OAuth2 client application. The client ID is auto-generated when the AppRegistration object is created.     # noqa: E501

        :param client_id: The client_id of this IamAppRegistrationAllOf.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_name(self):
        """Gets the client_name of this IamAppRegistrationAllOf.  # noqa: E501

        App Registration name specified by user.     # noqa: E501

        :return: The client_name of this IamAppRegistrationAllOf.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this IamAppRegistrationAllOf.

        App Registration name specified by user.     # noqa: E501

        :param client_name: The client_name of this IamAppRegistrationAllOf.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def client_secret(self):
        """Gets the client_secret of this IamAppRegistrationAllOf.  # noqa: E501

        The OAuth2 client secret. The value of this property is generated when grantType includes 'client-credentials'. Otherwise, no client-secret is generated.     # noqa: E501

        :return: The client_secret of this IamAppRegistrationAllOf.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this IamAppRegistrationAllOf.

        The OAuth2 client secret. The value of this property is generated when grantType includes 'client-credentials'. Otherwise, no client-secret is generated.     # noqa: E501

        :param client_secret: The client_secret of this IamAppRegistrationAllOf.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def client_type(self):
        """Gets the client_type of this IamAppRegistrationAllOf.  # noqa: E501

        The type of the OAuth2 client (public or confidential), as specified in https://tools.ietf.org/html/rfc6749#section-2.1.     # noqa: E501

        :return: The client_type of this IamAppRegistrationAllOf.  # noqa: E501
        :rtype: str
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """Sets the client_type of this IamAppRegistrationAllOf.

        The type of the OAuth2 client (public or confidential), as specified in https://tools.ietf.org/html/rfc6749#section-2.1.     # noqa: E501

        :param client_type: The client_type of this IamAppRegistrationAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["public", "confidential"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and client_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `client_type` ({0}), must be one of {1}"  # noqa: E501
                .format(client_type, allowed_values))

        self._client_type = client_type

    @property
    def description(self):
        """Gets the description of this IamAppRegistrationAllOf.  # noqa: E501

        Description of the application.     # noqa: E501

        :return: The description of this IamAppRegistrationAllOf.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IamAppRegistrationAllOf.

        Description of the application.     # noqa: E501

        :param description: The description of this IamAppRegistrationAllOf.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def grant_types(self):
        """Gets the grant_types of this IamAppRegistrationAllOf.  # noqa: E501


        :return: The grant_types of this IamAppRegistrationAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._grant_types

    @grant_types.setter
    def grant_types(self, grant_types):
        """Sets the grant_types of this IamAppRegistrationAllOf.


        :param grant_types: The grant_types of this IamAppRegistrationAllOf.  # noqa: E501
        :type: list[str]
        """
        allowed_values = [
            "authorization_code", "refresh_token", "client_credentials",
            "implicit", "password",
            "urn:ietf:params:oauth:grant-type:jwt-bearer",
            "urn:ietf:params:oauth:grant-type:saml2-bearer"
        ]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation
                and not set(grant_types).issubset(
                    set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `grant_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(
                    ", ".join(map(str,
                                  set(grant_types) -
                                  set(allowed_values))),  # noqa: E501
                    ", ".join(map(str, allowed_values))))

        self._grant_types = grant_types

    @property
    def redirect_uris(self):
        """Gets the redirect_uris of this IamAppRegistrationAllOf.  # noqa: E501


        :return: The redirect_uris of this IamAppRegistrationAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """Sets the redirect_uris of this IamAppRegistrationAllOf.


        :param redirect_uris: The redirect_uris of this IamAppRegistrationAllOf.  # noqa: E501
        :type: list[str]
        """

        self._redirect_uris = redirect_uris

    @property
    def renew_client_secret(self):
        """Gets the renew_client_secret of this IamAppRegistrationAllOf.  # noqa: E501

        Set value to true to renew the client-secret. Applicable to client_credentials grant type.     # noqa: E501

        :return: The renew_client_secret of this IamAppRegistrationAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._renew_client_secret

    @renew_client_secret.setter
    def renew_client_secret(self, renew_client_secret):
        """Sets the renew_client_secret of this IamAppRegistrationAllOf.

        Set value to true to renew the client-secret. Applicable to client_credentials grant type.     # noqa: E501

        :param renew_client_secret: The renew_client_secret of this IamAppRegistrationAllOf.  # noqa: E501
        :type: bool
        """

        self._renew_client_secret = renew_client_secret

    @property
    def response_types(self):
        """Gets the response_types of this IamAppRegistrationAllOf.  # noqa: E501


        :return: The response_types of this IamAppRegistrationAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._response_types

    @response_types.setter
    def response_types(self, response_types):
        """Sets the response_types of this IamAppRegistrationAllOf.


        :param response_types: The response_types of this IamAppRegistrationAllOf.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["code", "token"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation
                and not set(response_types).issubset(
                    set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `response_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(
                    ", ".join(
                        map(str,
                            set(response_types) -
                            set(allowed_values))),  # noqa: E501
                    ", ".join(map(str, allowed_values))))

        self._response_types = response_types

    @property
    def revocation_timestamp(self):
        """Gets the revocation_timestamp of this IamAppRegistrationAllOf.  # noqa: E501

        Used to perform revocation for tokens of AppRegistration. Updated only internally is case Revoke property come from UI with value true. On each request with OAuth2 access token the CreationTime of the OAuth2 token will be compared to RevokationTimestamp of the corresponding App Registration.     # noqa: E501

        :return: The revocation_timestamp of this IamAppRegistrationAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._revocation_timestamp

    @revocation_timestamp.setter
    def revocation_timestamp(self, revocation_timestamp):
        """Sets the revocation_timestamp of this IamAppRegistrationAllOf.

        Used to perform revocation for tokens of AppRegistration. Updated only internally is case Revoke property come from UI with value true. On each request with OAuth2 access token the CreationTime of the OAuth2 token will be compared to RevokationTimestamp of the corresponding App Registration.     # noqa: E501

        :param revocation_timestamp: The revocation_timestamp of this IamAppRegistrationAllOf.  # noqa: E501
        :type: datetime
        """

        self._revocation_timestamp = revocation_timestamp

    @property
    def revoke(self):
        """Gets the revoke of this IamAppRegistrationAllOf.  # noqa: E501

        Used to trigger update the revocationTimestamp value. If UI sent updating request with the Revoke value is true, then update RevocationTimestamp.      # noqa: E501

        :return: The revoke of this IamAppRegistrationAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._revoke

    @revoke.setter
    def revoke(self, revoke):
        """Sets the revoke of this IamAppRegistrationAllOf.

        Used to trigger update the revocationTimestamp value. If UI sent updating request with the Revoke value is true, then update RevocationTimestamp.      # noqa: E501

        :param revoke: The revoke of this IamAppRegistrationAllOf.  # noqa: E501
        :type: bool
        """

        self._revoke = revoke

    @property
    def account(self):
        """Gets the account of this IamAppRegistrationAllOf.  # noqa: E501


        :return: The account of this IamAppRegistrationAllOf.  # noqa: E501
        :rtype: IamAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this IamAppRegistrationAllOf.


        :param account: The account of this IamAppRegistrationAllOf.  # noqa: E501
        :type: IamAccount
        """

        self._account = account

    @property
    def oauth_tokens(self):
        """Gets the oauth_tokens of this IamAppRegistrationAllOf.  # noqa: E501

        A reference to a iamOAuthToken resource. When the $expand query parameter is specified, the referenced resource is returned inline. Collection of the OAuth2 tokens. Each OAuth2 token represents valid OAuth session. OAuth2 token is created when login over OAuth2 is performed using Authorization Code grant type.   # noqa: E501

        :return: The oauth_tokens of this IamAppRegistrationAllOf.  # noqa: E501
        :rtype: list[IamOAuthToken]
        """
        return self._oauth_tokens

    @oauth_tokens.setter
    def oauth_tokens(self, oauth_tokens):
        """Sets the oauth_tokens of this IamAppRegistrationAllOf.

        A reference to a iamOAuthToken resource. When the $expand query parameter is specified, the referenced resource is returned inline. Collection of the OAuth2 tokens. Each OAuth2 token represents valid OAuth session. OAuth2 token is created when login over OAuth2 is performed using Authorization Code grant type.   # noqa: E501

        :param oauth_tokens: The oauth_tokens of this IamAppRegistrationAllOf.  # noqa: E501
        :type: list[IamOAuthToken]
        """

        self._oauth_tokens = oauth_tokens

    @property
    def permission(self):
        """Gets the permission of this IamAppRegistrationAllOf.  # noqa: E501


        :return: The permission of this IamAppRegistrationAllOf.  # noqa: E501
        :rtype: IamPermission
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this IamAppRegistrationAllOf.


        :param permission: The permission of this IamAppRegistrationAllOf.  # noqa: E501
        :type: IamPermission
        """

        self._permission = permission

    @property
    def roles(self):
        """Gets the roles of this IamAppRegistrationAllOf.  # noqa: E501

        A reference to a iamRole resource. When the $expand query parameter is specified, the referenced resource is returned inline. The set of roles that can be used when a OAuth2 client is accessing this registered application. For example, multiple roles may be defined in your Intersight account, but you want users to login with the 'Read-Only' role when accessing Intersight through a registered application. In that case, the 'roles' property should contain a single element referencing the 'Read-Only' role. A user can only assign roles they already have.  This relationship is deprecated. Authorization is now performed by passing the 'scope' query parameter in the first request of the Authorization Code OAuth2 flow. The value of the 'scope' parameter is a list of scope names separated by comma: ROLE.Account Administrator, ROLE.<any role name>.   # noqa: E501

        :return: The roles of this IamAppRegistrationAllOf.  # noqa: E501
        :rtype: list[IamRole]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this IamAppRegistrationAllOf.

        A reference to a iamRole resource. When the $expand query parameter is specified, the referenced resource is returned inline. The set of roles that can be used when a OAuth2 client is accessing this registered application. For example, multiple roles may be defined in your Intersight account, but you want users to login with the 'Read-Only' role when accessing Intersight through a registered application. In that case, the 'roles' property should contain a single element referencing the 'Read-Only' role. A user can only assign roles they already have.  This relationship is deprecated. Authorization is now performed by passing the 'scope' query parameter in the first request of the Authorization Code OAuth2 flow. The value of the 'scope' parameter is a list of scope names separated by comma: ROLE.Account Administrator, ROLE.<any role name>.   # noqa: E501

        :param roles: The roles of this IamAppRegistrationAllOf.  # noqa: E501
        :type: list[IamRole]
        """

        self._roles = roles

    @property
    def user(self):
        """Gets the user of this IamAppRegistrationAllOf.  # noqa: E501


        :return: The user of this IamAppRegistrationAllOf.  # noqa: E501
        :rtype: IamUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this IamAppRegistrationAllOf.


        :param user: The user of this IamAppRegistrationAllOf.  # noqa: E501
        :type: IamUser
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IamAppRegistrationAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IamAppRegistrationAllOf):
            return True

        return self.to_dict() != other.to_dict()
