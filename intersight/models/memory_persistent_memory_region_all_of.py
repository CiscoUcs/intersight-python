# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class MemoryPersistentMemoryRegionAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dimm_locater_ids': 'str',
        'free_capacity': 'str',
        'health_state': 'str',
        'interleaved_set_id': 'str',
        'persistent_memory_type': 'str',
        'region_id': 'str',
        'socket_id': 'str',
        'socket_memory_id': 'str',
        'total_capacity': 'str',
        'memory_persistent_memory_configuration':
        'MemoryPersistentMemoryConfiguration',
        'persistent_memory_namespaces':
        'list[MemoryPersistentMemoryNamespace]',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'dimm_locater_ids': 'DimmLocaterIds',
        'free_capacity': 'FreeCapacity',
        'health_state': 'HealthState',
        'interleaved_set_id': 'InterleavedSetId',
        'persistent_memory_type': 'PersistentMemoryType',
        'region_id': 'RegionId',
        'socket_id': 'SocketId',
        'socket_memory_id': 'SocketMemoryId',
        'total_capacity': 'TotalCapacity',
        'memory_persistent_memory_configuration':
        'MemoryPersistentMemoryConfiguration',
        'persistent_memory_namespaces': 'PersistentMemoryNamespaces',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 dimm_locater_ids=None,
                 free_capacity=None,
                 health_state=None,
                 interleaved_set_id=None,
                 persistent_memory_type=None,
                 region_id=None,
                 socket_id=None,
                 socket_memory_id=None,
                 total_capacity=None,
                 memory_persistent_memory_configuration=None,
                 persistent_memory_namespaces=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """MemoryPersistentMemoryRegionAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dimm_locater_ids = None
        self._free_capacity = None
        self._health_state = None
        self._interleaved_set_id = None
        self._persistent_memory_type = None
        self._region_id = None
        self._socket_id = None
        self._socket_memory_id = None
        self._total_capacity = None
        self._memory_persistent_memory_configuration = None
        self._persistent_memory_namespaces = None
        self._registered_device = None
        self.discriminator = None

        if dimm_locater_ids is not None:
            self.dimm_locater_ids = dimm_locater_ids
        if free_capacity is not None:
            self.free_capacity = free_capacity
        if health_state is not None:
            self.health_state = health_state
        if interleaved_set_id is not None:
            self.interleaved_set_id = interleaved_set_id
        if persistent_memory_type is not None:
            self.persistent_memory_type = persistent_memory_type
        if region_id is not None:
            self.region_id = region_id
        if socket_id is not None:
            self.socket_id = socket_id
        if socket_memory_id is not None:
            self.socket_memory_id = socket_memory_id
        if total_capacity is not None:
            self.total_capacity = total_capacity
        if memory_persistent_memory_configuration is not None:
            self.memory_persistent_memory_configuration = memory_persistent_memory_configuration
        if persistent_memory_namespaces is not None:
            self.persistent_memory_namespaces = persistent_memory_namespaces
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def dimm_locater_ids(self):
        """Gets the dimm_locater_ids of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501

        This represents a set of DIMM locator IDs that are included in the Persistent Memory Region.    # noqa: E501

        :return: The dimm_locater_ids of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._dimm_locater_ids

    @dimm_locater_ids.setter
    def dimm_locater_ids(self, dimm_locater_ids):
        """Sets the dimm_locater_ids of this MemoryPersistentMemoryRegionAllOf.

        This represents a set of DIMM locator IDs that are included in the Persistent Memory Region.    # noqa: E501

        :param dimm_locater_ids: The dimm_locater_ids of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :type: str
        """

        self._dimm_locater_ids = dimm_locater_ids

    @property
    def free_capacity(self):
        """Gets the free_capacity of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501

        This represents the free capacity in GB of a Persistent Memory Region.    # noqa: E501

        :return: The free_capacity of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._free_capacity

    @free_capacity.setter
    def free_capacity(self, free_capacity):
        """Sets the free_capacity of this MemoryPersistentMemoryRegionAllOf.

        This represents the free capacity in GB of a Persistent Memory Region.    # noqa: E501

        :param free_capacity: The free_capacity of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :type: str
        """

        self._free_capacity = free_capacity

    @property
    def health_state(self):
        """Gets the health_state of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501

        This represents the health state of a Persistent Memory Region.    # noqa: E501

        :return: The health_state of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this MemoryPersistentMemoryRegionAllOf.

        This represents the health state of a Persistent Memory Region.    # noqa: E501

        :param health_state: The health_state of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :type: str
        """

        self._health_state = health_state

    @property
    def interleaved_set_id(self):
        """Gets the interleaved_set_id of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501

        This represents the ID of a Interleaved Set formed for a Persistent Memory Region.    # noqa: E501

        :return: The interleaved_set_id of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._interleaved_set_id

    @interleaved_set_id.setter
    def interleaved_set_id(self, interleaved_set_id):
        """Sets the interleaved_set_id of this MemoryPersistentMemoryRegionAllOf.

        This represents the ID of a Interleaved Set formed for a Persistent Memory Region.    # noqa: E501

        :param interleaved_set_id: The interleaved_set_id of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :type: str
        """

        self._interleaved_set_id = interleaved_set_id

    @property
    def persistent_memory_type(self):
        """Gets the persistent_memory_type of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501

        This represents the persistent memory type of a Persistent Memory Region.    # noqa: E501

        :return: The persistent_memory_type of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._persistent_memory_type

    @persistent_memory_type.setter
    def persistent_memory_type(self, persistent_memory_type):
        """Sets the persistent_memory_type of this MemoryPersistentMemoryRegionAllOf.

        This represents the persistent memory type of a Persistent Memory Region.    # noqa: E501

        :param persistent_memory_type: The persistent_memory_type of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :type: str
        """

        self._persistent_memory_type = persistent_memory_type

    @property
    def region_id(self):
        """Gets the region_id of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501

        This represents the ID of a Persistent Memory Region.    # noqa: E501

        :return: The region_id of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this MemoryPersistentMemoryRegionAllOf.

        This represents the ID of a Persistent Memory Region.    # noqa: E501

        :param region_id: The region_id of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :type: str
        """

        self._region_id = region_id

    @property
    def socket_id(self):
        """Gets the socket_id of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501

        This represents the Socket ID of a Persistent Memory Region.    # noqa: E501

        :return: The socket_id of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._socket_id

    @socket_id.setter
    def socket_id(self, socket_id):
        """Sets the socket_id of this MemoryPersistentMemoryRegionAllOf.

        This represents the Socket ID of a Persistent Memory Region.    # noqa: E501

        :param socket_id: The socket_id of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :type: str
        """

        self._socket_id = socket_id

    @property
    def socket_memory_id(self):
        """Gets the socket_memory_id of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501

        This represents the Socket Memory ID of a Persistent Memory Region.    # noqa: E501

        :return: The socket_memory_id of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._socket_memory_id

    @socket_memory_id.setter
    def socket_memory_id(self, socket_memory_id):
        """Sets the socket_memory_id of this MemoryPersistentMemoryRegionAllOf.

        This represents the Socket Memory ID of a Persistent Memory Region.    # noqa: E501

        :param socket_memory_id: The socket_memory_id of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :type: str
        """

        self._socket_memory_id = socket_memory_id

    @property
    def total_capacity(self):
        """Gets the total_capacity of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501

        This represents the total capacity in GB of a Persistent Memory Region.     # noqa: E501

        :return: The total_capacity of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._total_capacity

    @total_capacity.setter
    def total_capacity(self, total_capacity):
        """Sets the total_capacity of this MemoryPersistentMemoryRegionAllOf.

        This represents the total capacity in GB of a Persistent Memory Region.     # noqa: E501

        :param total_capacity: The total_capacity of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :type: str
        """

        self._total_capacity = total_capacity

    @property
    def memory_persistent_memory_configuration(self):
        """Gets the memory_persistent_memory_configuration of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501


        :return: The memory_persistent_memory_configuration of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :rtype: MemoryPersistentMemoryConfiguration
        """
        return self._memory_persistent_memory_configuration

    @memory_persistent_memory_configuration.setter
    def memory_persistent_memory_configuration(
            self, memory_persistent_memory_configuration):
        """Sets the memory_persistent_memory_configuration of this MemoryPersistentMemoryRegionAllOf.


        :param memory_persistent_memory_configuration: The memory_persistent_memory_configuration of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :type: MemoryPersistentMemoryConfiguration
        """

        self._memory_persistent_memory_configuration = memory_persistent_memory_configuration

    @property
    def persistent_memory_namespaces(self):
        """Gets the persistent_memory_namespaces of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501

        A reference to a memoryPersistentMemoryNamespace resource. When the $expand query parameter is specified, the referenced resource is returned inline. This represents the collection of all the persistent memory namespaces configured within a persistent memory region.   # noqa: E501

        :return: The persistent_memory_namespaces of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :rtype: list[MemoryPersistentMemoryNamespace]
        """
        return self._persistent_memory_namespaces

    @persistent_memory_namespaces.setter
    def persistent_memory_namespaces(self, persistent_memory_namespaces):
        """Sets the persistent_memory_namespaces of this MemoryPersistentMemoryRegionAllOf.

        A reference to a memoryPersistentMemoryNamespace resource. When the $expand query parameter is specified, the referenced resource is returned inline. This represents the collection of all the persistent memory namespaces configured within a persistent memory region.   # noqa: E501

        :param persistent_memory_namespaces: The persistent_memory_namespaces of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :type: list[MemoryPersistentMemoryNamespace]
        """

        self._persistent_memory_namespaces = persistent_memory_namespaces

    @property
    def registered_device(self):
        """Gets the registered_device of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501


        :return: The registered_device of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this MemoryPersistentMemoryRegionAllOf.


        :param registered_device: The registered_device of this MemoryPersistentMemoryRegionAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemoryPersistentMemoryRegionAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MemoryPersistentMemoryRegionAllOf):
            return True

        return self.to_dict() != other.to_dict()
