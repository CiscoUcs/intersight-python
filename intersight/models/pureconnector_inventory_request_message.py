# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-961
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PureconnectorInventoryRequestMessage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_name': 'str',
        'dependent_jobs': 'list[PureconnectorInventoryRequestMessage]',
        'job_name': 'str',
        'limit': 'int',
        'response_topic': 'str'
    }

    attribute_map = {
        'api_name': 'ApiName',
        'dependent_jobs': 'DependentJobs',
        'job_name': 'JobName',
        'limit': 'Limit',
        'response_topic': 'ResponseTopic'
    }

    def __init__(self, api_name=None, dependent_jobs=None, job_name=None, limit=None, response_topic=None):
        """
        PureconnectorInventoryRequestMessage - a model defined in Swagger
        """

        self._api_name = None
        self._dependent_jobs = None
        self._job_name = None
        self._limit = None
        self._response_topic = None

        if api_name is not None:
          self.api_name = api_name
        if dependent_jobs is not None:
          self.dependent_jobs = dependent_jobs
        if job_name is not None:
          self.job_name = job_name
        if limit is not None:
          self.limit = limit
        if response_topic is not None:
          self.response_topic = response_topic

    @property
    def api_name(self):
        """
        Gets the api_name of this PureconnectorInventoryRequestMessage.
        Relative url used to fetch inventory from Pure storage array.  

        :return: The api_name of this PureconnectorInventoryRequestMessage.
        :rtype: str
        """
        return self._api_name

    @api_name.setter
    def api_name(self, api_name):
        """
        Sets the api_name of this PureconnectorInventoryRequestMessage.
        Relative url used to fetch inventory from Pure storage array.  

        :param api_name: The api_name of this PureconnectorInventoryRequestMessage.
        :type: str
        """

        self._api_name = api_name

    @property
    def dependent_jobs(self):
        """
        Gets the dependent_jobs of this PureconnectorInventoryRequestMessage.
        Dependent or child inventory jobs.  

        :return: The dependent_jobs of this PureconnectorInventoryRequestMessage.
        :rtype: list[PureconnectorInventoryRequestMessage]
        """
        return self._dependent_jobs

    @dependent_jobs.setter
    def dependent_jobs(self, dependent_jobs):
        """
        Sets the dependent_jobs of this PureconnectorInventoryRequestMessage.
        Dependent or child inventory jobs.  

        :param dependent_jobs: The dependent_jobs of this PureconnectorInventoryRequestMessage.
        :type: list[PureconnectorInventoryRequestMessage]
        """

        self._dependent_jobs = dependent_jobs

    @property
    def job_name(self):
        """
        Gets the job_name of this PureconnectorInventoryRequestMessage.
        Inventory job name. This will be sent back along with inventory response.  

        :return: The job_name of this PureconnectorInventoryRequestMessage.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """
        Sets the job_name of this PureconnectorInventoryRequestMessage.
        Inventory job name. This will be sent back along with inventory response.  

        :param job_name: The job_name of this PureconnectorInventoryRequestMessage.
        :type: str
        """

        self._job_name = job_name

    @property
    def limit(self):
        """
        Gets the limit of this PureconnectorInventoryRequestMessage.
        Maximum number of objects to be retrieved in a singel get request. Itis intented for pagination.  

        :return: The limit of this PureconnectorInventoryRequestMessage.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this PureconnectorInventoryRequestMessage.
        Maximum number of objects to be retrieved in a singel get request. Itis intented for pagination.  

        :param limit: The limit of this PureconnectorInventoryRequestMessage.
        :type: int
        """

        self._limit = limit

    @property
    def response_topic(self):
        """
        Gets the response_topic of this PureconnectorInventoryRequestMessage.
        Pure storage inventory response topic.It is a topic where device connector sends inventory response to.   

        :return: The response_topic of this PureconnectorInventoryRequestMessage.
        :rtype: str
        """
        return self._response_topic

    @response_topic.setter
    def response_topic(self, response_topic):
        """
        Sets the response_topic of this PureconnectorInventoryRequestMessage.
        Pure storage inventory response topic.It is a topic where device connector sends inventory response to.   

        :param response_topic: The response_topic of this PureconnectorInventoryRequestMessage.
        :type: str
        """

        self._response_topic = response_topic

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PureconnectorInventoryRequestMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
