# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ResourceGroup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'per_type_combined_selector': 'list[ResourcePerTypeCombinedSelector]',
        'qualifier': 'str',
        'selectors': 'list[ResourceSelector]',
        'account': 'IamAccount',
        'organizations': 'list[OrganizationOrganization]'
    }

    attribute_map = {
        'name': 'Name',
        'per_type_combined_selector': 'PerTypeCombinedSelector',
        'qualifier': 'Qualifier',
        'selectors': 'Selectors',
        'account': 'Account',
        'organizations': 'Organizations'
    }

    def __init__(self,
                 name=None,
                 per_type_combined_selector=None,
                 qualifier='Allow-Selectors',
                 selectors=None,
                 account=None,
                 organizations=None,
                 local_vars_configuration=None):  # noqa: E501
        """ResourceGroup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._per_type_combined_selector = None
        self._qualifier = None
        self._selectors = None
        self._account = None
        self._organizations = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if per_type_combined_selector is not None:
            self.per_type_combined_selector = per_type_combined_selector
        if qualifier is not None:
            self.qualifier = qualifier
        if selectors is not None:
            self.selectors = selectors
        if account is not None:
            self.account = account
        if organizations is not None:
            self.organizations = organizations

    @property
    def name(self):
        """Gets the name of this ResourceGroup.  # noqa: E501

        The name of this resource group.    # noqa: E501

        :return: The name of this ResourceGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceGroup.

        The name of this resource group.    # noqa: E501

        :param name: The name of this ResourceGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def per_type_combined_selector(self):
        """Gets the per_type_combined_selector of this ResourceGroup.  # noqa: E501


        :return: The per_type_combined_selector of this ResourceGroup.  # noqa: E501
        :rtype: list[ResourcePerTypeCombinedSelector]
        """
        return self._per_type_combined_selector

    @per_type_combined_selector.setter
    def per_type_combined_selector(self, per_type_combined_selector):
        """Sets the per_type_combined_selector of this ResourceGroup.


        :param per_type_combined_selector: The per_type_combined_selector of this ResourceGroup.  # noqa: E501
        :type: list[ResourcePerTypeCombinedSelector]
        """

        self._per_type_combined_selector = per_type_combined_selector

    @property
    def qualifier(self):
        """Gets the qualifier of this ResourceGroup.  # noqa: E501

        Qualifier shall be used to specify if we want to organize resources using multiple resource group or single For an account, resource groups can be of only one of the above types. (Both the types are mutually exclusive for an account.).    # noqa: E501

        :return: The qualifier of this ResourceGroup.  # noqa: E501
        :rtype: str
        """
        return self._qualifier

    @qualifier.setter
    def qualifier(self, qualifier):
        """Sets the qualifier of this ResourceGroup.

        Qualifier shall be used to specify if we want to organize resources using multiple resource group or single For an account, resource groups can be of only one of the above types. (Both the types are mutually exclusive for an account.).    # noqa: E501

        :param qualifier: The qualifier of this ResourceGroup.  # noqa: E501
        :type: str
        """
        allowed_values = ["Allow-Selectors", "Allow-All"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and qualifier not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `qualifier` ({0}), must be one of {1}"  # noqa: E501
                .format(qualifier, allowed_values))

        self._qualifier = qualifier

    @property
    def selectors(self):
        """Gets the selectors of this ResourceGroup.  # noqa: E501


        :return: The selectors of this ResourceGroup.  # noqa: E501
        :rtype: list[ResourceSelector]
        """
        return self._selectors

    @selectors.setter
    def selectors(self, selectors):
        """Sets the selectors of this ResourceGroup.


        :param selectors: The selectors of this ResourceGroup.  # noqa: E501
        :type: list[ResourceSelector]
        """

        self._selectors = selectors

    @property
    def account(self):
        """Gets the account of this ResourceGroup.  # noqa: E501


        :return: The account of this ResourceGroup.  # noqa: E501
        :rtype: IamAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ResourceGroup.


        :param account: The account of this ResourceGroup.  # noqa: E501
        :type: IamAccount
        """

        self._account = account

    @property
    def organizations(self):
        """Gets the organizations of this ResourceGroup.  # noqa: E501

        A reference to a organizationOrganization resource. When the $expand query parameter is specified, the referenced resource is returned inline. A collection of references to the [organization.Organization](mo://organization.Organization) Managed Object.  When this managed object is deleted, the referenced [organization.Organization](mo://organization.Organization) MOs unset their reference to this deleted MO.   # noqa: E501

        :return: The organizations of this ResourceGroup.  # noqa: E501
        :rtype: list[OrganizationOrganization]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this ResourceGroup.

        A reference to a organizationOrganization resource. When the $expand query parameter is specified, the referenced resource is returned inline. A collection of references to the [organization.Organization](mo://organization.Organization) Managed Object.  When this managed object is deleted, the referenced [organization.Organization](mo://organization.Organization) MOs unset their reference to this deleted MO.   # noqa: E501

        :param organizations: The organizations of this ResourceGroup.  # noqa: E501
        :type: list[OrganizationOrganization]
        """

        self._organizations = organizations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourceGroup):
            return True

        return self.to_dict() != other.to_dict()
