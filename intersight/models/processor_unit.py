# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ProcessorUnit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'architecture': 'str',
        'num_cores': 'int',
        'num_cores_enabled': 'str',
        'num_threads': 'str',
        'oper_power_state': 'str',
        'oper_state': 'str',
        'operability': 'str',
        'presence': 'str',
        'processor_id': 'int',
        'socket_designation': 'str',
        'speed': 'float',
        'stepping': 'str',
        'thermal': 'str',
        'compute_board': 'ComputeBoard',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'architecture': 'Architecture',
        'num_cores': 'NumCores',
        'num_cores_enabled': 'NumCoresEnabled',
        'num_threads': 'NumThreads',
        'oper_power_state': 'OperPowerState',
        'oper_state': 'OperState',
        'operability': 'Operability',
        'presence': 'Presence',
        'processor_id': 'ProcessorId',
        'socket_designation': 'SocketDesignation',
        'speed': 'Speed',
        'stepping': 'Stepping',
        'thermal': 'Thermal',
        'compute_board': 'ComputeBoard',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 architecture=None,
                 num_cores=None,
                 num_cores_enabled=None,
                 num_threads=None,
                 oper_power_state=None,
                 oper_state=None,
                 operability=None,
                 presence=None,
                 processor_id=None,
                 socket_designation=None,
                 speed=None,
                 stepping=None,
                 thermal=None,
                 compute_board=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """ProcessorUnit - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._architecture = None
        self._num_cores = None
        self._num_cores_enabled = None
        self._num_threads = None
        self._oper_power_state = None
        self._oper_state = None
        self._operability = None
        self._presence = None
        self._processor_id = None
        self._socket_designation = None
        self._speed = None
        self._stepping = None
        self._thermal = None
        self._compute_board = None
        self._registered_device = None
        self.discriminator = None

        if architecture is not None:
            self.architecture = architecture
        if num_cores is not None:
            self.num_cores = num_cores
        if num_cores_enabled is not None:
            self.num_cores_enabled = num_cores_enabled
        if num_threads is not None:
            self.num_threads = num_threads
        if oper_power_state is not None:
            self.oper_power_state = oper_power_state
        if oper_state is not None:
            self.oper_state = oper_state
        if operability is not None:
            self.operability = operability
        if presence is not None:
            self.presence = presence
        if processor_id is not None:
            self.processor_id = processor_id
        if socket_designation is not None:
            self.socket_designation = socket_designation
        if speed is not None:
            self.speed = speed
        if stepping is not None:
            self.stepping = stepping
        if thermal is not None:
            self.thermal = thermal
        if compute_board is not None:
            self.compute_board = compute_board
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def architecture(self):
        """Gets the architecture of this ProcessorUnit.  # noqa: E501


        :return: The architecture of this ProcessorUnit.  # noqa: E501
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this ProcessorUnit.


        :param architecture: The architecture of this ProcessorUnit.  # noqa: E501
        :type: str
        """

        self._architecture = architecture

    @property
    def num_cores(self):
        """Gets the num_cores of this ProcessorUnit.  # noqa: E501


        :return: The num_cores of this ProcessorUnit.  # noqa: E501
        :rtype: int
        """
        return self._num_cores

    @num_cores.setter
    def num_cores(self, num_cores):
        """Sets the num_cores of this ProcessorUnit.


        :param num_cores: The num_cores of this ProcessorUnit.  # noqa: E501
        :type: int
        """

        self._num_cores = num_cores

    @property
    def num_cores_enabled(self):
        """Gets the num_cores_enabled of this ProcessorUnit.  # noqa: E501


        :return: The num_cores_enabled of this ProcessorUnit.  # noqa: E501
        :rtype: str
        """
        return self._num_cores_enabled

    @num_cores_enabled.setter
    def num_cores_enabled(self, num_cores_enabled):
        """Sets the num_cores_enabled of this ProcessorUnit.


        :param num_cores_enabled: The num_cores_enabled of this ProcessorUnit.  # noqa: E501
        :type: str
        """

        self._num_cores_enabled = num_cores_enabled

    @property
    def num_threads(self):
        """Gets the num_threads of this ProcessorUnit.  # noqa: E501


        :return: The num_threads of this ProcessorUnit.  # noqa: E501
        :rtype: str
        """
        return self._num_threads

    @num_threads.setter
    def num_threads(self, num_threads):
        """Sets the num_threads of this ProcessorUnit.


        :param num_threads: The num_threads of this ProcessorUnit.  # noqa: E501
        :type: str
        """

        self._num_threads = num_threads

    @property
    def oper_power_state(self):
        """Gets the oper_power_state of this ProcessorUnit.  # noqa: E501


        :return: The oper_power_state of this ProcessorUnit.  # noqa: E501
        :rtype: str
        """
        return self._oper_power_state

    @oper_power_state.setter
    def oper_power_state(self, oper_power_state):
        """Sets the oper_power_state of this ProcessorUnit.


        :param oper_power_state: The oper_power_state of this ProcessorUnit.  # noqa: E501
        :type: str
        """

        self._oper_power_state = oper_power_state

    @property
    def oper_state(self):
        """Gets the oper_state of this ProcessorUnit.  # noqa: E501


        :return: The oper_state of this ProcessorUnit.  # noqa: E501
        :rtype: str
        """
        return self._oper_state

    @oper_state.setter
    def oper_state(self, oper_state):
        """Sets the oper_state of this ProcessorUnit.


        :param oper_state: The oper_state of this ProcessorUnit.  # noqa: E501
        :type: str
        """

        self._oper_state = oper_state

    @property
    def operability(self):
        """Gets the operability of this ProcessorUnit.  # noqa: E501


        :return: The operability of this ProcessorUnit.  # noqa: E501
        :rtype: str
        """
        return self._operability

    @operability.setter
    def operability(self, operability):
        """Sets the operability of this ProcessorUnit.


        :param operability: The operability of this ProcessorUnit.  # noqa: E501
        :type: str
        """

        self._operability = operability

    @property
    def presence(self):
        """Gets the presence of this ProcessorUnit.  # noqa: E501


        :return: The presence of this ProcessorUnit.  # noqa: E501
        :rtype: str
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """Sets the presence of this ProcessorUnit.


        :param presence: The presence of this ProcessorUnit.  # noqa: E501
        :type: str
        """

        self._presence = presence

    @property
    def processor_id(self):
        """Gets the processor_id of this ProcessorUnit.  # noqa: E501


        :return: The processor_id of this ProcessorUnit.  # noqa: E501
        :rtype: int
        """
        return self._processor_id

    @processor_id.setter
    def processor_id(self, processor_id):
        """Sets the processor_id of this ProcessorUnit.


        :param processor_id: The processor_id of this ProcessorUnit.  # noqa: E501
        :type: int
        """

        self._processor_id = processor_id

    @property
    def socket_designation(self):
        """Gets the socket_designation of this ProcessorUnit.  # noqa: E501


        :return: The socket_designation of this ProcessorUnit.  # noqa: E501
        :rtype: str
        """
        return self._socket_designation

    @socket_designation.setter
    def socket_designation(self, socket_designation):
        """Sets the socket_designation of this ProcessorUnit.


        :param socket_designation: The socket_designation of this ProcessorUnit.  # noqa: E501
        :type: str
        """

        self._socket_designation = socket_designation

    @property
    def speed(self):
        """Gets the speed of this ProcessorUnit.  # noqa: E501


        :return: The speed of this ProcessorUnit.  # noqa: E501
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this ProcessorUnit.


        :param speed: The speed of this ProcessorUnit.  # noqa: E501
        :type: float
        """

        self._speed = speed

    @property
    def stepping(self):
        """Gets the stepping of this ProcessorUnit.  # noqa: E501


        :return: The stepping of this ProcessorUnit.  # noqa: E501
        :rtype: str
        """
        return self._stepping

    @stepping.setter
    def stepping(self, stepping):
        """Sets the stepping of this ProcessorUnit.


        :param stepping: The stepping of this ProcessorUnit.  # noqa: E501
        :type: str
        """

        self._stepping = stepping

    @property
    def thermal(self):
        """Gets the thermal of this ProcessorUnit.  # noqa: E501


        :return: The thermal of this ProcessorUnit.  # noqa: E501
        :rtype: str
        """
        return self._thermal

    @thermal.setter
    def thermal(self, thermal):
        """Sets the thermal of this ProcessorUnit.


        :param thermal: The thermal of this ProcessorUnit.  # noqa: E501
        :type: str
        """

        self._thermal = thermal

    @property
    def compute_board(self):
        """Gets the compute_board of this ProcessorUnit.  # noqa: E501


        :return: The compute_board of this ProcessorUnit.  # noqa: E501
        :rtype: ComputeBoard
        """
        return self._compute_board

    @compute_board.setter
    def compute_board(self, compute_board):
        """Sets the compute_board of this ProcessorUnit.


        :param compute_board: The compute_board of this ProcessorUnit.  # noqa: E501
        :type: ComputeBoard
        """

        self._compute_board = compute_board

    @property
    def registered_device(self):
        """Gets the registered_device of this ProcessorUnit.  # noqa: E501


        :return: The registered_device of this ProcessorUnit.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this ProcessorUnit.


        :param registered_device: The registered_device of this ProcessorUnit.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessorUnit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProcessorUnit):
            return True

        return self.to_dict() != other.to_dict()
