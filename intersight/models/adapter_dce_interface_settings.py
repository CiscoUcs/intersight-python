# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1415
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AdapterDceInterfaceSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'fec_mode': 'str',
        'interface_id': 'int'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'fec_mode': 'FecMode',
        'interface_id': 'InterfaceId'
    }

    def __init__(self, object_type=None, fec_mode='Auto', interface_id=None):
        """
        AdapterDceInterfaceSettings - a model defined in Swagger
        """

        self._object_type = None
        self._fec_mode = None
        self._interface_id = None

        if object_type is not None:
          self.object_type = object_type
        if fec_mode is not None:
          self.fec_mode = fec_mode
        if interface_id is not None:
          self.interface_id = interface_id

    @property
    def object_type(self):
        """
        Gets the object_type of this AdapterDceInterfaceSettings.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :return: The object_type of this AdapterDceInterfaceSettings.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this AdapterDceInterfaceSettings.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :param object_type: The object_type of this AdapterDceInterfaceSettings.
        :type: str
        """

        self._object_type = object_type

    @property
    def fec_mode(self):
        """
        Gets the fec_mode of this AdapterDceInterfaceSettings.
        Forward Error Correction (FEC) mode setting for the DCE interfaces of the adapter. FEC mode setting is supported only for Cisco VIC 14xx adapters. FEC mode 'cl74' is unsupported for Cisco VIC 1495/1497. This setting will be ignored for unsupported adapters and for unavailable DCE interfaces.  

        :return: The fec_mode of this AdapterDceInterfaceSettings.
        :rtype: str
        """
        return self._fec_mode

    @fec_mode.setter
    def fec_mode(self, fec_mode):
        """
        Sets the fec_mode of this AdapterDceInterfaceSettings.
        Forward Error Correction (FEC) mode setting for the DCE interfaces of the adapter. FEC mode setting is supported only for Cisco VIC 14xx adapters. FEC mode 'cl74' is unsupported for Cisco VIC 1495/1497. This setting will be ignored for unsupported adapters and for unavailable DCE interfaces.  

        :param fec_mode: The fec_mode of this AdapterDceInterfaceSettings.
        :type: str
        """
        allowed_values = ["Auto", "cl91", "cl74", "Off"]
        if fec_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `fec_mode` ({0}), must be one of {1}"
                .format(fec_mode, allowed_values)
            )

        self._fec_mode = fec_mode

    @property
    def interface_id(self):
        """
        Gets the interface_id of this AdapterDceInterfaceSettings.
        DCE interface id on which settings needs to be configured. Supported values are (0-3).   

        :return: The interface_id of this AdapterDceInterfaceSettings.
        :rtype: int
        """
        return self._interface_id

    @interface_id.setter
    def interface_id(self, interface_id):
        """
        Sets the interface_id of this AdapterDceInterfaceSettings.
        DCE interface id on which settings needs to be configured. Supported values are (0-3).   

        :param interface_id: The interface_id of this AdapterDceInterfaceSettings.
        :type: int
        """

        self._interface_id = interface_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AdapterDceInterfaceSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
