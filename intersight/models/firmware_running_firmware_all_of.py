# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class FirmwareRunningFirmwareAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'component': 'str',
        'package_version': 'str',
        'type': 'str',
        'version': 'str',
        'bios_unit': 'BiosUnit',
        'management_controller': 'ManagementController',
        'network_elements': 'list[NetworkElement]',
        'registered_device': 'AssetDeviceRegistration',
        'storage_controller': 'StorageController',
        'storage_physical_disk': 'StoragePhysicalDisk'
    }

    attribute_map = {
        'component': 'Component',
        'package_version': 'PackageVersion',
        'type': 'Type',
        'version': 'Version',
        'bios_unit': 'BiosUnit',
        'management_controller': 'ManagementController',
        'network_elements': 'NetworkElements',
        'registered_device': 'RegisteredDevice',
        'storage_controller': 'StorageController',
        'storage_physical_disk': 'StoragePhysicalDisk'
    }

    def __init__(self,
                 component=None,
                 package_version=None,
                 type=None,
                 version=None,
                 bios_unit=None,
                 management_controller=None,
                 network_elements=None,
                 registered_device=None,
                 storage_controller=None,
                 storage_physical_disk=None,
                 local_vars_configuration=None):  # noqa: E501
        """FirmwareRunningFirmwareAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._component = None
        self._package_version = None
        self._type = None
        self._version = None
        self._bios_unit = None
        self._management_controller = None
        self._network_elements = None
        self._registered_device = None
        self._storage_controller = None
        self._storage_physical_disk = None
        self.discriminator = None

        if component is not None:
            self.component = component
        if package_version is not None:
            self.package_version = package_version
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version
        if bios_unit is not None:
            self.bios_unit = bios_unit
        if management_controller is not None:
            self.management_controller = management_controller
        if network_elements is not None:
            self.network_elements = network_elements
        if registered_device is not None:
            self.registered_device = registered_device
        if storage_controller is not None:
            self.storage_controller = storage_controller
        if storage_physical_disk is not None:
            self.storage_physical_disk = storage_physical_disk

    @property
    def component(self):
        """Gets the component of this FirmwareRunningFirmwareAllOf.  # noqa: E501

        Kind of the firmware - boot-booloader/system/kernel.    # noqa: E501

        :return: The component of this FirmwareRunningFirmwareAllOf.  # noqa: E501
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this FirmwareRunningFirmwareAllOf.

        Kind of the firmware - boot-booloader/system/kernel.    # noqa: E501

        :param component: The component of this FirmwareRunningFirmwareAllOf.  # noqa: E501
        :type: str
        """

        self._component = component

    @property
    def package_version(self):
        """Gets the package_version of this FirmwareRunningFirmwareAllOf.  # noqa: E501

        Package version which the firmware belongs to.    # noqa: E501

        :return: The package_version of this FirmwareRunningFirmwareAllOf.  # noqa: E501
        :rtype: str
        """
        return self._package_version

    @package_version.setter
    def package_version(self, package_version):
        """Sets the package_version of this FirmwareRunningFirmwareAllOf.

        Package version which the firmware belongs to.    # noqa: E501

        :param package_version: The package_version of this FirmwareRunningFirmwareAllOf.  # noqa: E501
        :type: str
        """

        self._package_version = package_version

    @property
    def type(self):
        """Gets the type of this FirmwareRunningFirmwareAllOf.  # noqa: E501

        Type of the firmware.    # noqa: E501

        :return: The type of this FirmwareRunningFirmwareAllOf.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FirmwareRunningFirmwareAllOf.

        Type of the firmware.    # noqa: E501

        :param type: The type of this FirmwareRunningFirmwareAllOf.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this FirmwareRunningFirmwareAllOf.  # noqa: E501

        Version of the firmware.     # noqa: E501

        :return: The version of this FirmwareRunningFirmwareAllOf.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FirmwareRunningFirmwareAllOf.

        Version of the firmware.     # noqa: E501

        :param version: The version of this FirmwareRunningFirmwareAllOf.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def bios_unit(self):
        """Gets the bios_unit of this FirmwareRunningFirmwareAllOf.  # noqa: E501


        :return: The bios_unit of this FirmwareRunningFirmwareAllOf.  # noqa: E501
        :rtype: BiosUnit
        """
        return self._bios_unit

    @bios_unit.setter
    def bios_unit(self, bios_unit):
        """Sets the bios_unit of this FirmwareRunningFirmwareAllOf.


        :param bios_unit: The bios_unit of this FirmwareRunningFirmwareAllOf.  # noqa: E501
        :type: BiosUnit
        """

        self._bios_unit = bios_unit

    @property
    def management_controller(self):
        """Gets the management_controller of this FirmwareRunningFirmwareAllOf.  # noqa: E501


        :return: The management_controller of this FirmwareRunningFirmwareAllOf.  # noqa: E501
        :rtype: ManagementController
        """
        return self._management_controller

    @management_controller.setter
    def management_controller(self, management_controller):
        """Sets the management_controller of this FirmwareRunningFirmwareAllOf.


        :param management_controller: The management_controller of this FirmwareRunningFirmwareAllOf.  # noqa: E501
        :type: ManagementController
        """

        self._management_controller = management_controller

    @property
    def network_elements(self):
        """Gets the network_elements of this FirmwareRunningFirmwareAllOf.  # noqa: E501

        A reference to a networkElement resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The network_elements of this FirmwareRunningFirmwareAllOf.  # noqa: E501
        :rtype: list[NetworkElement]
        """
        return self._network_elements

    @network_elements.setter
    def network_elements(self, network_elements):
        """Sets the network_elements of this FirmwareRunningFirmwareAllOf.

        A reference to a networkElement resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param network_elements: The network_elements of this FirmwareRunningFirmwareAllOf.  # noqa: E501
        :type: list[NetworkElement]
        """

        self._network_elements = network_elements

    @property
    def registered_device(self):
        """Gets the registered_device of this FirmwareRunningFirmwareAllOf.  # noqa: E501


        :return: The registered_device of this FirmwareRunningFirmwareAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this FirmwareRunningFirmwareAllOf.


        :param registered_device: The registered_device of this FirmwareRunningFirmwareAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    @property
    def storage_controller(self):
        """Gets the storage_controller of this FirmwareRunningFirmwareAllOf.  # noqa: E501


        :return: The storage_controller of this FirmwareRunningFirmwareAllOf.  # noqa: E501
        :rtype: StorageController
        """
        return self._storage_controller

    @storage_controller.setter
    def storage_controller(self, storage_controller):
        """Sets the storage_controller of this FirmwareRunningFirmwareAllOf.


        :param storage_controller: The storage_controller of this FirmwareRunningFirmwareAllOf.  # noqa: E501
        :type: StorageController
        """

        self._storage_controller = storage_controller

    @property
    def storage_physical_disk(self):
        """Gets the storage_physical_disk of this FirmwareRunningFirmwareAllOf.  # noqa: E501


        :return: The storage_physical_disk of this FirmwareRunningFirmwareAllOf.  # noqa: E501
        :rtype: StoragePhysicalDisk
        """
        return self._storage_physical_disk

    @storage_physical_disk.setter
    def storage_physical_disk(self, storage_physical_disk):
        """Sets the storage_physical_disk of this FirmwareRunningFirmwareAllOf.


        :param storage_physical_disk: The storage_physical_disk of this FirmwareRunningFirmwareAllOf.  # noqa: E501
        :type: StoragePhysicalDisk
        """

        self._storage_physical_disk = storage_physical_disk

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirmwareRunningFirmwareAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FirmwareRunningFirmwareAllOf):
            return True

        return self.to_dict() != other.to_dict()
