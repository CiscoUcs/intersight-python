# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StorageSnapshot(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_time': 'datetime',
        'name': 'str',
        'protection_group_name': 'str',
        'size': 'int',
        'source': 'str',
        'protection_group_snapshot': 'StorageProtectionGroupSnapshot',
        'storage_array': 'StorageGenericArray',
        'volume': 'StorageVolume'
    }

    attribute_map = {
        'created_time': 'CreatedTime',
        'name': 'Name',
        'protection_group_name': 'ProtectionGroupName',
        'size': 'Size',
        'source': 'Source',
        'protection_group_snapshot': 'ProtectionGroupSnapshot',
        'storage_array': 'StorageArray',
        'volume': 'Volume'
    }

    def __init__(self,
                 created_time=None,
                 name=None,
                 protection_group_name=None,
                 size=None,
                 source=None,
                 protection_group_snapshot=None,
                 storage_array=None,
                 volume=None,
                 local_vars_configuration=None):  # noqa: E501
        """StorageSnapshot - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created_time = None
        self._name = None
        self._protection_group_name = None
        self._size = None
        self._source = None
        self._protection_group_snapshot = None
        self._storage_array = None
        self._volume = None
        self.discriminator = None

        if created_time is not None:
            self.created_time = created_time
        if name is not None:
            self.name = name
        if protection_group_name is not None:
            self.protection_group_name = protection_group_name
        if size is not None:
            self.size = size
        if source is not None:
            self.source = source
        if protection_group_snapshot is not None:
            self.protection_group_snapshot = protection_group_snapshot
        if storage_array is not None:
            self.storage_array = storage_array
        if volume is not None:
            self.volume = volume

    @property
    def created_time(self):
        """Gets the created_time of this StorageSnapshot.  # noqa: E501

        Exact date and time on which snapshot is created.    # noqa: E501

        :return: The created_time of this StorageSnapshot.  # noqa: E501
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this StorageSnapshot.

        Exact date and time on which snapshot is created.    # noqa: E501

        :param created_time: The created_time of this StorageSnapshot.  # noqa: E501
        :type: datetime
        """

        self._created_time = created_time

    @property
    def name(self):
        """Gets the name of this StorageSnapshot.  # noqa: E501

        Name of the snapshot which represents point in time copy of volume.    # noqa: E501

        :return: The name of this StorageSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageSnapshot.

        Name of the snapshot which represents point in time copy of volume.    # noqa: E501

        :param name: The name of this StorageSnapshot.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def protection_group_name(self):
        """Gets the protection_group_name of this StorageSnapshot.  # noqa: E501

        Name of the protection group to which the snapshot belongs. Value is emptry, if the snapshot is created directly on volume.    # noqa: E501

        :return: The protection_group_name of this StorageSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._protection_group_name

    @protection_group_name.setter
    def protection_group_name(self, protection_group_name):
        """Sets the protection_group_name of this StorageSnapshot.

        Name of the protection group to which the snapshot belongs. Value is emptry, if the snapshot is created directly on volume.    # noqa: E501

        :param protection_group_name: The protection_group_name of this StorageSnapshot.  # noqa: E501
        :type: str
        """

        self._protection_group_name = protection_group_name

    @property
    def size(self):
        """Gets the size of this StorageSnapshot.  # noqa: E501

        Snapshot size represented in bytes.    # noqa: E501

        :return: The size of this StorageSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this StorageSnapshot.

        Snapshot size represented in bytes.    # noqa: E501

        :param size: The size of this StorageSnapshot.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def source(self):
        """Gets the source of this StorageSnapshot.  # noqa: E501

        Source object on which the snapshot is created. It is a name of the originating volume.     # noqa: E501

        :return: The source of this StorageSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this StorageSnapshot.

        Source object on which the snapshot is created. It is a name of the originating volume.     # noqa: E501

        :param source: The source of this StorageSnapshot.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def protection_group_snapshot(self):
        """Gets the protection_group_snapshot of this StorageSnapshot.  # noqa: E501


        :return: The protection_group_snapshot of this StorageSnapshot.  # noqa: E501
        :rtype: StorageProtectionGroupSnapshot
        """
        return self._protection_group_snapshot

    @protection_group_snapshot.setter
    def protection_group_snapshot(self, protection_group_snapshot):
        """Sets the protection_group_snapshot of this StorageSnapshot.


        :param protection_group_snapshot: The protection_group_snapshot of this StorageSnapshot.  # noqa: E501
        :type: StorageProtectionGroupSnapshot
        """

        self._protection_group_snapshot = protection_group_snapshot

    @property
    def storage_array(self):
        """Gets the storage_array of this StorageSnapshot.  # noqa: E501


        :return: The storage_array of this StorageSnapshot.  # noqa: E501
        :rtype: StorageGenericArray
        """
        return self._storage_array

    @storage_array.setter
    def storage_array(self, storage_array):
        """Sets the storage_array of this StorageSnapshot.


        :param storage_array: The storage_array of this StorageSnapshot.  # noqa: E501
        :type: StorageGenericArray
        """

        self._storage_array = storage_array

    @property
    def volume(self):
        """Gets the volume of this StorageSnapshot.  # noqa: E501


        :return: The volume of this StorageSnapshot.  # noqa: E501
        :rtype: StorageVolume
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this StorageSnapshot.


        :param volume: The volume of this StorageSnapshot.  # noqa: E501
        :type: StorageVolume
        """

        self._volume = volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageSnapshot):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageSnapshot):
            return True

        return self.to_dict() != other.to_dict()
