# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StorageController(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'controller_flags': 'str',
        'controller_id': 'str',
        'controller_status': 'str',
        'hw_revision': 'str',
        'oob_interface_supported': 'str',
        'oper_state': 'str',
        'operability': 'str',
        'pci_addr': 'str',
        'pci_slot': 'str',
        'presence': 'str',
        'raid_support': 'str',
        'rebuild_rate': 'str',
        'self_encrypt_enabled': 'str',
        'type': 'str',
        'compute_board': 'ComputeBoard',
        'physical_disk_extensions': 'list[StoragePhysicalDiskExtension]',
        'physical_disks': 'list[StoragePhysicalDisk]',
        'registered_device': 'AssetDeviceRegistration',
        'running_firmware': 'list[FirmwareRunningFirmware]',
        'virtual_drive_extensions': 'list[StorageVirtualDriveExtension]',
        'virtual_drives': 'list[StorageVirtualDrive]'
    }

    attribute_map = {
        'controller_flags': 'ControllerFlags',
        'controller_id': 'ControllerId',
        'controller_status': 'ControllerStatus',
        'hw_revision': 'HwRevision',
        'oob_interface_supported': 'OobInterfaceSupported',
        'oper_state': 'OperState',
        'operability': 'Operability',
        'pci_addr': 'PciAddr',
        'pci_slot': 'PciSlot',
        'presence': 'Presence',
        'raid_support': 'RaidSupport',
        'rebuild_rate': 'RebuildRate',
        'self_encrypt_enabled': 'SelfEncryptEnabled',
        'type': 'Type',
        'compute_board': 'ComputeBoard',
        'physical_disk_extensions': 'PhysicalDiskExtensions',
        'physical_disks': 'PhysicalDisks',
        'registered_device': 'RegisteredDevice',
        'running_firmware': 'RunningFirmware',
        'virtual_drive_extensions': 'VirtualDriveExtensions',
        'virtual_drives': 'VirtualDrives'
    }

    def __init__(self,
                 controller_flags=None,
                 controller_id=None,
                 controller_status=None,
                 hw_revision=None,
                 oob_interface_supported=None,
                 oper_state=None,
                 operability=None,
                 pci_addr=None,
                 pci_slot=None,
                 presence=None,
                 raid_support=None,
                 rebuild_rate=None,
                 self_encrypt_enabled=None,
                 type=None,
                 compute_board=None,
                 physical_disk_extensions=None,
                 physical_disks=None,
                 registered_device=None,
                 running_firmware=None,
                 virtual_drive_extensions=None,
                 virtual_drives=None,
                 local_vars_configuration=None):  # noqa: E501
        """StorageController - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._controller_flags = None
        self._controller_id = None
        self._controller_status = None
        self._hw_revision = None
        self._oob_interface_supported = None
        self._oper_state = None
        self._operability = None
        self._pci_addr = None
        self._pci_slot = None
        self._presence = None
        self._raid_support = None
        self._rebuild_rate = None
        self._self_encrypt_enabled = None
        self._type = None
        self._compute_board = None
        self._physical_disk_extensions = None
        self._physical_disks = None
        self._registered_device = None
        self._running_firmware = None
        self._virtual_drive_extensions = None
        self._virtual_drives = None
        self.discriminator = None

        if controller_flags is not None:
            self.controller_flags = controller_flags
        if controller_id is not None:
            self.controller_id = controller_id
        if controller_status is not None:
            self.controller_status = controller_status
        if hw_revision is not None:
            self.hw_revision = hw_revision
        if oob_interface_supported is not None:
            self.oob_interface_supported = oob_interface_supported
        if oper_state is not None:
            self.oper_state = oper_state
        if operability is not None:
            self.operability = operability
        if pci_addr is not None:
            self.pci_addr = pci_addr
        if pci_slot is not None:
            self.pci_slot = pci_slot
        if presence is not None:
            self.presence = presence
        if raid_support is not None:
            self.raid_support = raid_support
        if rebuild_rate is not None:
            self.rebuild_rate = rebuild_rate
        if self_encrypt_enabled is not None:
            self.self_encrypt_enabled = self_encrypt_enabled
        if type is not None:
            self.type = type
        if compute_board is not None:
            self.compute_board = compute_board
        if physical_disk_extensions is not None:
            self.physical_disk_extensions = physical_disk_extensions
        if physical_disks is not None:
            self.physical_disks = physical_disks
        if registered_device is not None:
            self.registered_device = registered_device
        if running_firmware is not None:
            self.running_firmware = running_firmware
        if virtual_drive_extensions is not None:
            self.virtual_drive_extensions = virtual_drive_extensions
        if virtual_drives is not None:
            self.virtual_drives = virtual_drives

    @property
    def controller_flags(self):
        """Gets the controller_flags of this StorageController.  # noqa: E501


        :return: The controller_flags of this StorageController.  # noqa: E501
        :rtype: str
        """
        return self._controller_flags

    @controller_flags.setter
    def controller_flags(self, controller_flags):
        """Sets the controller_flags of this StorageController.


        :param controller_flags: The controller_flags of this StorageController.  # noqa: E501
        :type: str
        """

        self._controller_flags = controller_flags

    @property
    def controller_id(self):
        """Gets the controller_id of this StorageController.  # noqa: E501

        It shows the Id of controller.    # noqa: E501

        :return: The controller_id of this StorageController.  # noqa: E501
        :rtype: str
        """
        return self._controller_id

    @controller_id.setter
    def controller_id(self, controller_id):
        """Sets the controller_id of this StorageController.

        It shows the Id of controller.    # noqa: E501

        :param controller_id: The controller_id of this StorageController.  # noqa: E501
        :type: str
        """

        self._controller_id = controller_id

    @property
    def controller_status(self):
        """Gets the controller_status of this StorageController.  # noqa: E501

        It shows the current status of controller.    # noqa: E501

        :return: The controller_status of this StorageController.  # noqa: E501
        :rtype: str
        """
        return self._controller_status

    @controller_status.setter
    def controller_status(self, controller_status):
        """Sets the controller_status of this StorageController.

        It shows the current status of controller.    # noqa: E501

        :param controller_status: The controller_status of this StorageController.  # noqa: E501
        :type: str
        """

        self._controller_status = controller_status

    @property
    def hw_revision(self):
        """Gets the hw_revision of this StorageController.  # noqa: E501

        It shows the hardware revision of controller.    # noqa: E501

        :return: The hw_revision of this StorageController.  # noqa: E501
        :rtype: str
        """
        return self._hw_revision

    @hw_revision.setter
    def hw_revision(self, hw_revision):
        """Sets the hw_revision of this StorageController.

        It shows the hardware revision of controller.    # noqa: E501

        :param hw_revision: The hw_revision of this StorageController.  # noqa: E501
        :type: str
        """

        self._hw_revision = hw_revision

    @property
    def oob_interface_supported(self):
        """Gets the oob_interface_supported of this StorageController.  # noqa: E501

        It shows CIMC support for out-of-band configuration of controller.    # noqa: E501

        :return: The oob_interface_supported of this StorageController.  # noqa: E501
        :rtype: str
        """
        return self._oob_interface_supported

    @oob_interface_supported.setter
    def oob_interface_supported(self, oob_interface_supported):
        """Sets the oob_interface_supported of this StorageController.

        It shows CIMC support for out-of-band configuration of controller.    # noqa: E501

        :param oob_interface_supported: The oob_interface_supported of this StorageController.  # noqa: E501
        :type: str
        """

        self._oob_interface_supported = oob_interface_supported

    @property
    def oper_state(self):
        """Gets the oper_state of this StorageController.  # noqa: E501

        It shows the current operational state of controller.    # noqa: E501

        :return: The oper_state of this StorageController.  # noqa: E501
        :rtype: str
        """
        return self._oper_state

    @oper_state.setter
    def oper_state(self, oper_state):
        """Sets the oper_state of this StorageController.

        It shows the current operational state of controller.    # noqa: E501

        :param oper_state: The oper_state of this StorageController.  # noqa: E501
        :type: str
        """

        self._oper_state = oper_state

    @property
    def operability(self):
        """Gets the operability of this StorageController.  # noqa: E501


        :return: The operability of this StorageController.  # noqa: E501
        :rtype: str
        """
        return self._operability

    @operability.setter
    def operability(self, operability):
        """Sets the operability of this StorageController.


        :param operability: The operability of this StorageController.  # noqa: E501
        :type: str
        """

        self._operability = operability

    @property
    def pci_addr(self):
        """Gets the pci_addr of this StorageController.  # noqa: E501

        It shows the current pci address of controller.    # noqa: E501

        :return: The pci_addr of this StorageController.  # noqa: E501
        :rtype: str
        """
        return self._pci_addr

    @pci_addr.setter
    def pci_addr(self, pci_addr):
        """Sets the pci_addr of this StorageController.

        It shows the current pci address of controller.    # noqa: E501

        :param pci_addr: The pci_addr of this StorageController.  # noqa: E501
        :type: str
        """

        self._pci_addr = pci_addr

    @property
    def pci_slot(self):
        """Gets the pci_slot of this StorageController.  # noqa: E501

        It shows the pci slot name for the controller.    # noqa: E501

        :return: The pci_slot of this StorageController.  # noqa: E501
        :rtype: str
        """
        return self._pci_slot

    @pci_slot.setter
    def pci_slot(self, pci_slot):
        """Sets the pci_slot of this StorageController.

        It shows the pci slot name for the controller.    # noqa: E501

        :param pci_slot: The pci_slot of this StorageController.  # noqa: E501
        :type: str
        """

        self._pci_slot = pci_slot

    @property
    def presence(self):
        """Gets the presence of this StorageController.  # noqa: E501

        It shows physical presence or absence of the controller on server.    # noqa: E501

        :return: The presence of this StorageController.  # noqa: E501
        :rtype: str
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """Sets the presence of this StorageController.

        It shows physical presence or absence of the controller on server.    # noqa: E501

        :param presence: The presence of this StorageController.  # noqa: E501
        :type: str
        """

        self._presence = presence

    @property
    def raid_support(self):
        """Gets the raid_support of this StorageController.  # noqa: E501

        It shows the RAID levels supported by controller.    # noqa: E501

        :return: The raid_support of this StorageController.  # noqa: E501
        :rtype: str
        """
        return self._raid_support

    @raid_support.setter
    def raid_support(self, raid_support):
        """Sets the raid_support of this StorageController.

        It shows the RAID levels supported by controller.    # noqa: E501

        :param raid_support: The raid_support of this StorageController.  # noqa: E501
        :type: str
        """

        self._raid_support = raid_support

    @property
    def rebuild_rate(self):
        """Gets the rebuild_rate of this StorageController.  # noqa: E501


        :return: The rebuild_rate of this StorageController.  # noqa: E501
        :rtype: str
        """
        return self._rebuild_rate

    @rebuild_rate.setter
    def rebuild_rate(self, rebuild_rate):
        """Sets the rebuild_rate of this StorageController.


        :param rebuild_rate: The rebuild_rate of this StorageController.  # noqa: E501
        :type: str
        """

        self._rebuild_rate = rebuild_rate

    @property
    def self_encrypt_enabled(self):
        """Gets the self_encrypt_enabled of this StorageController.  # noqa: E501


        :return: The self_encrypt_enabled of this StorageController.  # noqa: E501
        :rtype: str
        """
        return self._self_encrypt_enabled

    @self_encrypt_enabled.setter
    def self_encrypt_enabled(self, self_encrypt_enabled):
        """Sets the self_encrypt_enabled of this StorageController.


        :param self_encrypt_enabled: The self_encrypt_enabled of this StorageController.  # noqa: E501
        :type: str
        """

        self._self_encrypt_enabled = self_encrypt_enabled

    @property
    def type(self):
        """Gets the type of this StorageController.  # noqa: E501

        Controller types are SAS, SATA, PCH, NVME.     # noqa: E501

        :return: The type of this StorageController.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StorageController.

        Controller types are SAS, SATA, PCH, NVME.     # noqa: E501

        :param type: The type of this StorageController.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def compute_board(self):
        """Gets the compute_board of this StorageController.  # noqa: E501


        :return: The compute_board of this StorageController.  # noqa: E501
        :rtype: ComputeBoard
        """
        return self._compute_board

    @compute_board.setter
    def compute_board(self, compute_board):
        """Sets the compute_board of this StorageController.


        :param compute_board: The compute_board of this StorageController.  # noqa: E501
        :type: ComputeBoard
        """

        self._compute_board = compute_board

    @property
    def physical_disk_extensions(self):
        """Gets the physical_disk_extensions of this StorageController.  # noqa: E501

        A reference to a storagePhysicalDiskExtension resource. When the $expand query parameter is specified, the referenced resource is returned inline. Indicates a SCSI controller has physical connectivity to specified physical disk.   # noqa: E501

        :return: The physical_disk_extensions of this StorageController.  # noqa: E501
        :rtype: list[StoragePhysicalDiskExtension]
        """
        return self._physical_disk_extensions

    @physical_disk_extensions.setter
    def physical_disk_extensions(self, physical_disk_extensions):
        """Sets the physical_disk_extensions of this StorageController.

        A reference to a storagePhysicalDiskExtension resource. When the $expand query parameter is specified, the referenced resource is returned inline. Indicates a SCSI controller has physical connectivity to specified physical disk.   # noqa: E501

        :param physical_disk_extensions: The physical_disk_extensions of this StorageController.  # noqa: E501
        :type: list[StoragePhysicalDiskExtension]
        """

        self._physical_disk_extensions = physical_disk_extensions

    @property
    def physical_disks(self):
        """Gets the physical_disks of this StorageController.  # noqa: E501

        A reference to a storagePhysicalDisk resource. When the $expand query parameter is specified, the referenced resource is returned inline. Physical Disk on a server.   # noqa: E501

        :return: The physical_disks of this StorageController.  # noqa: E501
        :rtype: list[StoragePhysicalDisk]
        """
        return self._physical_disks

    @physical_disks.setter
    def physical_disks(self, physical_disks):
        """Sets the physical_disks of this StorageController.

        A reference to a storagePhysicalDisk resource. When the $expand query parameter is specified, the referenced resource is returned inline. Physical Disk on a server.   # noqa: E501

        :param physical_disks: The physical_disks of this StorageController.  # noqa: E501
        :type: list[StoragePhysicalDisk]
        """

        self._physical_disks = physical_disks

    @property
    def registered_device(self):
        """Gets the registered_device of this StorageController.  # noqa: E501


        :return: The registered_device of this StorageController.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this StorageController.


        :param registered_device: The registered_device of this StorageController.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    @property
    def running_firmware(self):
        """Gets the running_firmware of this StorageController.  # noqa: E501

        A reference to a firmwareRunningFirmware resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The running_firmware of this StorageController.  # noqa: E501
        :rtype: list[FirmwareRunningFirmware]
        """
        return self._running_firmware

    @running_firmware.setter
    def running_firmware(self, running_firmware):
        """Sets the running_firmware of this StorageController.

        A reference to a firmwareRunningFirmware resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param running_firmware: The running_firmware of this StorageController.  # noqa: E501
        :type: list[FirmwareRunningFirmware]
        """

        self._running_firmware = running_firmware

    @property
    def virtual_drive_extensions(self):
        """Gets the virtual_drive_extensions of this StorageController.  # noqa: E501

        A reference to a storageVirtualDriveExtension resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The virtual_drive_extensions of this StorageController.  # noqa: E501
        :rtype: list[StorageVirtualDriveExtension]
        """
        return self._virtual_drive_extensions

    @virtual_drive_extensions.setter
    def virtual_drive_extensions(self, virtual_drive_extensions):
        """Sets the virtual_drive_extensions of this StorageController.

        A reference to a storageVirtualDriveExtension resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param virtual_drive_extensions: The virtual_drive_extensions of this StorageController.  # noqa: E501
        :type: list[StorageVirtualDriveExtension]
        """

        self._virtual_drive_extensions = virtual_drive_extensions

    @property
    def virtual_drives(self):
        """Gets the virtual_drives of this StorageController.  # noqa: E501

        A reference to a storageVirtualDrive resource. When the $expand query parameter is specified, the referenced resource is returned inline. Storage physical drives are grouped as Drive Group, a drive group then can be partitioned into virtual drives.   # noqa: E501

        :return: The virtual_drives of this StorageController.  # noqa: E501
        :rtype: list[StorageVirtualDrive]
        """
        return self._virtual_drives

    @virtual_drives.setter
    def virtual_drives(self, virtual_drives):
        """Sets the virtual_drives of this StorageController.

        A reference to a storageVirtualDrive resource. When the $expand query parameter is specified, the referenced resource is returned inline. Storage physical drives are grouped as Drive Group, a drive group then can be partitioned into virtual drives.   # noqa: E501

        :param virtual_drives: The virtual_drives of this StorageController.  # noqa: E501
        :type: list[StorageVirtualDrive]
        """

        self._virtual_drives = virtual_drives

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageController):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageController):
            return True

        return self.to_dict() != other.to_dict()
