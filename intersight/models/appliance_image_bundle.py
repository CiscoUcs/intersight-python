# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1461
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApplianceImageBundle(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'ansible_packages': 'list[OnpremImagePackage]',
        'auto_upgrade': 'bool',
        'dc_packages': 'list[OnpremImagePackage]',
        'debug_packages': 'list[OnpremImagePackage]',
        'description': 'str',
        'endpoint_packages': 'list[OnpremImagePackage]',
        'fingerprint': 'str',
        'has_error': 'bool',
        'infra_packages': 'list[OnpremImagePackage]',
        'init_packages': 'list[OnpremImagePackage]',
        'name': 'str',
        'notes': 'str',
        'priority': 'str',
        'release_time': 'datetime',
        'service_packages': 'list[OnpremImagePackage]',
        'status_message': 'str',
        'system_packages': 'list[OnpremImagePackage]',
        'ui_packages': 'list[OnpremImagePackage]',
        'upgrade_end_time': 'datetime',
        'upgrade_grace_period': 'int',
        'upgrade_impact_duration': 'int',
        'upgrade_impact_enum': 'str',
        'upgrade_start_time': 'datetime',
        'version': 'str'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'ansible_packages': 'AnsiblePackages',
        'auto_upgrade': 'AutoUpgrade',
        'dc_packages': 'DcPackages',
        'debug_packages': 'DebugPackages',
        'description': 'Description',
        'endpoint_packages': 'EndpointPackages',
        'fingerprint': 'Fingerprint',
        'has_error': 'HasError',
        'infra_packages': 'InfraPackages',
        'init_packages': 'InitPackages',
        'name': 'Name',
        'notes': 'Notes',
        'priority': 'Priority',
        'release_time': 'ReleaseTime',
        'service_packages': 'ServicePackages',
        'status_message': 'StatusMessage',
        'system_packages': 'SystemPackages',
        'ui_packages': 'UiPackages',
        'upgrade_end_time': 'UpgradeEndTime',
        'upgrade_grace_period': 'UpgradeGracePeriod',
        'upgrade_impact_duration': 'UpgradeImpactDuration',
        'upgrade_impact_enum': 'UpgradeImpactEnum',
        'upgrade_start_time': 'UpgradeStartTime',
        'version': 'Version'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, ansible_packages=None, auto_upgrade=None, dc_packages=None, debug_packages=None, description=None, endpoint_packages=None, fingerprint=None, has_error=None, infra_packages=None, init_packages=None, name=None, notes=None, priority='Normal', release_time=None, service_packages=None, status_message=None, system_packages=None, ui_packages=None, upgrade_end_time=None, upgrade_grace_period=None, upgrade_impact_duration=None, upgrade_impact_enum='None', upgrade_start_time=None, version=None):
        """
        ApplianceImageBundle - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._ansible_packages = None
        self._auto_upgrade = None
        self._dc_packages = None
        self._debug_packages = None
        self._description = None
        self._endpoint_packages = None
        self._fingerprint = None
        self._has_error = None
        self._infra_packages = None
        self._init_packages = None
        self._name = None
        self._notes = None
        self._priority = None
        self._release_time = None
        self._service_packages = None
        self._status_message = None
        self._system_packages = None
        self._ui_packages = None
        self._upgrade_end_time = None
        self._upgrade_grace_period = None
        self._upgrade_impact_duration = None
        self._upgrade_impact_enum = None
        self._upgrade_start_time = None
        self._version = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if ansible_packages is not None:
          self.ansible_packages = ansible_packages
        if auto_upgrade is not None:
          self.auto_upgrade = auto_upgrade
        if dc_packages is not None:
          self.dc_packages = dc_packages
        if debug_packages is not None:
          self.debug_packages = debug_packages
        if description is not None:
          self.description = description
        if endpoint_packages is not None:
          self.endpoint_packages = endpoint_packages
        if fingerprint is not None:
          self.fingerprint = fingerprint
        if has_error is not None:
          self.has_error = has_error
        if infra_packages is not None:
          self.infra_packages = infra_packages
        if init_packages is not None:
          self.init_packages = init_packages
        if name is not None:
          self.name = name
        if notes is not None:
          self.notes = notes
        if priority is not None:
          self.priority = priority
        if release_time is not None:
          self.release_time = release_time
        if service_packages is not None:
          self.service_packages = service_packages
        if status_message is not None:
          self.status_message = status_message
        if system_packages is not None:
          self.system_packages = system_packages
        if ui_packages is not None:
          self.ui_packages = ui_packages
        if upgrade_end_time is not None:
          self.upgrade_end_time = upgrade_end_time
        if upgrade_grace_period is not None:
          self.upgrade_grace_period = upgrade_grace_period
        if upgrade_impact_duration is not None:
          self.upgrade_impact_duration = upgrade_impact_duration
        if upgrade_impact_enum is not None:
          self.upgrade_impact_enum = upgrade_impact_enum
        if upgrade_start_time is not None:
          self.upgrade_start_time = upgrade_start_time
        if version is not None:
          self.version = version

    @property
    def account_moid(self):
        """
        Gets the account_moid of this ApplianceImageBundle.
        The Account ID for this managed object.

        :return: The account_moid of this ApplianceImageBundle.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this ApplianceImageBundle.
        The Account ID for this managed object.

        :param account_moid: The account_moid of this ApplianceImageBundle.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this ApplianceImageBundle.
        The time when this managed object was created.

        :return: The create_time of this ApplianceImageBundle.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this ApplianceImageBundle.
        The time when this managed object was created.

        :param create_time: The create_time of this ApplianceImageBundle.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this ApplianceImageBundle.
        The DomainGroup ID for this managed object.

        :return: The domain_group_moid of this ApplianceImageBundle.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this ApplianceImageBundle.
        The DomainGroup ID for this managed object.

        :param domain_group_moid: The domain_group_moid of this ApplianceImageBundle.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this ApplianceImageBundle.
        The time when this managed object was last modified.

        :return: The mod_time of this ApplianceImageBundle.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this ApplianceImageBundle.
        The time when this managed object was last modified.

        :param mod_time: The mod_time of this ApplianceImageBundle.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this ApplianceImageBundle.
        The unique identifier of this Managed Object instance.

        :return: The moid of this ApplianceImageBundle.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this ApplianceImageBundle.
        The unique identifier of this Managed Object instance.

        :param moid: The moid of this ApplianceImageBundle.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this ApplianceImageBundle.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        :return: The object_type of this ApplianceImageBundle.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this ApplianceImageBundle.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        :param object_type: The object_type of this ApplianceImageBundle.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this ApplianceImageBundle.
        The array of owners which represent effective ownership of this object.

        :return: The owners of this ApplianceImageBundle.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this ApplianceImageBundle.
        The array of owners which represent effective ownership of this object.

        :param owners: The owners of this ApplianceImageBundle.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this ApplianceImageBundle.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.

        :return: The shared_scope of this ApplianceImageBundle.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this ApplianceImageBundle.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.

        :param shared_scope: The shared_scope of this ApplianceImageBundle.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this ApplianceImageBundle.
        The array of tags, which allow to add key, value meta-data to managed objects.

        :return: The tags of this ApplianceImageBundle.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this ApplianceImageBundle.
        The array of tags, which allow to add key, value meta-data to managed objects.

        :param tags: The tags of this ApplianceImageBundle.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this ApplianceImageBundle.
        The versioning info for this managed object.

        :return: The version_context of this ApplianceImageBundle.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this ApplianceImageBundle.
        The versioning info for this managed object.

        :param version_context: The version_context of this ApplianceImageBundle.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this ApplianceImageBundle.
        The array containing the MO references of the ancestors in the object containment hierarchy.

        :return: The ancestors of this ApplianceImageBundle.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this ApplianceImageBundle.
        The array containing the MO references of the ancestors in the object containment hierarchy.

        :param ancestors: The ancestors of this ApplianceImageBundle.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this ApplianceImageBundle.
        The direct ancestor of this managed object in the containment hierarchy.

        :return: The parent of this ApplianceImageBundle.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this ApplianceImageBundle.
        The direct ancestor of this managed object in the containment hierarchy.

        :param parent: The parent of this ApplianceImageBundle.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this ApplianceImageBundle.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.

        :return: The permission_resources of this ApplianceImageBundle.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this ApplianceImageBundle.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.

        :param permission_resources: The permission_resources of this ApplianceImageBundle.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def ansible_packages(self):
        """
        Gets the ansible_packages of this ApplianceImageBundle.
        Collection of the Intersight Appliance's system installation packages.

        :return: The ansible_packages of this ApplianceImageBundle.
        :rtype: list[OnpremImagePackage]
        """
        return self._ansible_packages

    @ansible_packages.setter
    def ansible_packages(self, ansible_packages):
        """
        Sets the ansible_packages of this ApplianceImageBundle.
        Collection of the Intersight Appliance's system installation packages.

        :param ansible_packages: The ansible_packages of this ApplianceImageBundle.
        :type: list[OnpremImagePackage]
        """

        self._ansible_packages = ansible_packages

    @property
    def auto_upgrade(self):
        """
        Gets the auto_upgrade of this ApplianceImageBundle.
        Indicates that the software upgrade was automatically initiated by the Intersight Appliance.

        :return: The auto_upgrade of this ApplianceImageBundle.
        :rtype: bool
        """
        return self._auto_upgrade

    @auto_upgrade.setter
    def auto_upgrade(self, auto_upgrade):
        """
        Sets the auto_upgrade of this ApplianceImageBundle.
        Indicates that the software upgrade was automatically initiated by the Intersight Appliance.

        :param auto_upgrade: The auto_upgrade of this ApplianceImageBundle.
        :type: bool
        """

        self._auto_upgrade = auto_upgrade

    @property
    def dc_packages(self):
        """
        Gets the dc_packages of this ApplianceImageBundle.
        Collection of the Intersight Appliance's device connector packages.

        :return: The dc_packages of this ApplianceImageBundle.
        :rtype: list[OnpremImagePackage]
        """
        return self._dc_packages

    @dc_packages.setter
    def dc_packages(self, dc_packages):
        """
        Sets the dc_packages of this ApplianceImageBundle.
        Collection of the Intersight Appliance's device connector packages.

        :param dc_packages: The dc_packages of this ApplianceImageBundle.
        :type: list[OnpremImagePackage]
        """

        self._dc_packages = dc_packages

    @property
    def debug_packages(self):
        """
        Gets the debug_packages of this ApplianceImageBundle.
        Collection of the Intersight Appliance's developer debug packages. Optional, and not installed by default.

        :return: The debug_packages of this ApplianceImageBundle.
        :rtype: list[OnpremImagePackage]
        """
        return self._debug_packages

    @debug_packages.setter
    def debug_packages(self, debug_packages):
        """
        Sets the debug_packages of this ApplianceImageBundle.
        Collection of the Intersight Appliance's developer debug packages. Optional, and not installed by default.

        :param debug_packages: The debug_packages of this ApplianceImageBundle.
        :type: list[OnpremImagePackage]
        """

        self._debug_packages = debug_packages

    @property
    def description(self):
        """
        Gets the description of this ApplianceImageBundle.
        Short description of the software upgrade bundle.

        :return: The description of this ApplianceImageBundle.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ApplianceImageBundle.
        Short description of the software upgrade bundle.

        :param description: The description of this ApplianceImageBundle.
        :type: str
        """

        self._description = description

    @property
    def endpoint_packages(self):
        """
        Gets the endpoint_packages of this ApplianceImageBundle.
        Collection of the Intersight Appliance's endpoint UI packages such as Cisco UCSM, Cisco HyperFlex etc.

        :return: The endpoint_packages of this ApplianceImageBundle.
        :rtype: list[OnpremImagePackage]
        """
        return self._endpoint_packages

    @endpoint_packages.setter
    def endpoint_packages(self, endpoint_packages):
        """
        Sets the endpoint_packages of this ApplianceImageBundle.
        Collection of the Intersight Appliance's endpoint UI packages such as Cisco UCSM, Cisco HyperFlex etc.

        :param endpoint_packages: The endpoint_packages of this ApplianceImageBundle.
        :type: list[OnpremImagePackage]
        """

        self._endpoint_packages = endpoint_packages

    @property
    def fingerprint(self):
        """
        Gets the fingerprint of this ApplianceImageBundle.
        Fingerprint of the software manifest from which this bundle is created. Fingerprint is calculated using the SHA256 algorithm.

        :return: The fingerprint of this ApplianceImageBundle.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """
        Sets the fingerprint of this ApplianceImageBundle.
        Fingerprint of the software manifest from which this bundle is created. Fingerprint is calculated using the SHA256 algorithm.

        :param fingerprint: The fingerprint of this ApplianceImageBundle.
        :type: str
        """

        self._fingerprint = fingerprint

    @property
    def has_error(self):
        """
        Gets the has_error of this ApplianceImageBundle.
        Indicates that the ImageBundle has errors. The upgrade service sets this field when it encounters errors during the manifest processing.

        :return: The has_error of this ApplianceImageBundle.
        :rtype: bool
        """
        return self._has_error

    @has_error.setter
    def has_error(self, has_error):
        """
        Sets the has_error of this ApplianceImageBundle.
        Indicates that the ImageBundle has errors. The upgrade service sets this field when it encounters errors during the manifest processing.

        :param has_error: The has_error of this ApplianceImageBundle.
        :type: bool
        """

        self._has_error = has_error

    @property
    def infra_packages(self):
        """
        Gets the infra_packages of this ApplianceImageBundle.
        Collection of the Intersight Appliance's infrastructure service packages such as database.

        :return: The infra_packages of this ApplianceImageBundle.
        :rtype: list[OnpremImagePackage]
        """
        return self._infra_packages

    @infra_packages.setter
    def infra_packages(self, infra_packages):
        """
        Sets the infra_packages of this ApplianceImageBundle.
        Collection of the Intersight Appliance's infrastructure service packages such as database.

        :param infra_packages: The infra_packages of this ApplianceImageBundle.
        :type: list[OnpremImagePackage]
        """

        self._infra_packages = infra_packages

    @property
    def init_packages(self):
        """
        Gets the init_packages of this ApplianceImageBundle.
        Collection of the Intersight Appliance's initialization service packages.

        :return: The init_packages of this ApplianceImageBundle.
        :rtype: list[OnpremImagePackage]
        """
        return self._init_packages

    @init_packages.setter
    def init_packages(self, init_packages):
        """
        Sets the init_packages of this ApplianceImageBundle.
        Collection of the Intersight Appliance's initialization service packages.

        :param init_packages: The init_packages of this ApplianceImageBundle.
        :type: list[OnpremImagePackage]
        """

        self._init_packages = init_packages

    @property
    def name(self):
        """
        Gets the name of this ApplianceImageBundle.
        Name of the software upgrade bundle.

        :return: The name of this ApplianceImageBundle.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ApplianceImageBundle.
        Name of the software upgrade bundle.

        :param name: The name of this ApplianceImageBundle.
        :type: str
        """

        self._name = name

    @property
    def notes(self):
        """
        Gets the notes of this ApplianceImageBundle.
        Detailed description of the software upgrade bundle.

        :return: The notes of this ApplianceImageBundle.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """
        Sets the notes of this ApplianceImageBundle.
        Detailed description of the software upgrade bundle.

        :param notes: The notes of this ApplianceImageBundle.
        :type: str
        """

        self._notes = notes

    @property
    def priority(self):
        """
        Gets the priority of this ApplianceImageBundle.
        Software upgrade manifest's upgrade priority. The upgrade service supports two priorities, Normal and Critical. Normal priority is used for regular software upgrades, and the upgrade service uses the Upgrade Policy to compute upgrade start time. Critical priority is used for the critical software security patches, and the upgrade service ignores the Upgrade Policy when it computes the upgrade start time.

        :return: The priority of this ApplianceImageBundle.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this ApplianceImageBundle.
        Software upgrade manifest's upgrade priority. The upgrade service supports two priorities, Normal and Critical. Normal priority is used for regular software upgrades, and the upgrade service uses the Upgrade Policy to compute upgrade start time. Critical priority is used for the critical software security patches, and the upgrade service ignores the Upgrade Policy when it computes the upgrade start time.

        :param priority: The priority of this ApplianceImageBundle.
        :type: str
        """
        allowed_values = ["Normal", "Critical"]
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def release_time(self):
        """
        Gets the release_time of this ApplianceImageBundle.
        Software upgrade manifest's release date and time.

        :return: The release_time of this ApplianceImageBundle.
        :rtype: datetime
        """
        return self._release_time

    @release_time.setter
    def release_time(self, release_time):
        """
        Sets the release_time of this ApplianceImageBundle.
        Software upgrade manifest's release date and time.

        :param release_time: The release_time of this ApplianceImageBundle.
        :type: datetime
        """

        self._release_time = release_time

    @property
    def service_packages(self):
        """
        Gets the service_packages of this ApplianceImageBundle.
        Collection of the Intersight Appliance's micro-services pakages.

        :return: The service_packages of this ApplianceImageBundle.
        :rtype: list[OnpremImagePackage]
        """
        return self._service_packages

    @service_packages.setter
    def service_packages(self, service_packages):
        """
        Sets the service_packages of this ApplianceImageBundle.
        Collection of the Intersight Appliance's micro-services pakages.

        :param service_packages: The service_packages of this ApplianceImageBundle.
        :type: list[OnpremImagePackage]
        """

        self._service_packages = service_packages

    @property
    def status_message(self):
        """
        Gets the status_message of this ApplianceImageBundle.
        Status message set during the manifest processing.

        :return: The status_message of this ApplianceImageBundle.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """
        Sets the status_message of this ApplianceImageBundle.
        Status message set during the manifest processing.

        :param status_message: The status_message of this ApplianceImageBundle.
        :type: str
        """

        self._status_message = status_message

    @property
    def system_packages(self):
        """
        Gets the system_packages of this ApplianceImageBundle.
        Collection of the Intersight Appliance's system packages such as DNS etc.

        :return: The system_packages of this ApplianceImageBundle.
        :rtype: list[OnpremImagePackage]
        """
        return self._system_packages

    @system_packages.setter
    def system_packages(self, system_packages):
        """
        Sets the system_packages of this ApplianceImageBundle.
        Collection of the Intersight Appliance's system packages such as DNS etc.

        :param system_packages: The system_packages of this ApplianceImageBundle.
        :type: list[OnpremImagePackage]
        """

        self._system_packages = system_packages

    @property
    def ui_packages(self):
        """
        Gets the ui_packages of this ApplianceImageBundle.
        Collection of the Intersight Appliance's UI packages of the micro-services.

        :return: The ui_packages of this ApplianceImageBundle.
        :rtype: list[OnpremImagePackage]
        """
        return self._ui_packages

    @ui_packages.setter
    def ui_packages(self, ui_packages):
        """
        Sets the ui_packages of this ApplianceImageBundle.
        Collection of the Intersight Appliance's UI packages of the micro-services.

        :param ui_packages: The ui_packages of this ApplianceImageBundle.
        :type: list[OnpremImagePackage]
        """

        self._ui_packages = ui_packages

    @property
    def upgrade_end_time(self):
        """
        Gets the upgrade_end_time of this ApplianceImageBundle.
        End date of the software upgrade process.

        :return: The upgrade_end_time of this ApplianceImageBundle.
        :rtype: datetime
        """
        return self._upgrade_end_time

    @upgrade_end_time.setter
    def upgrade_end_time(self, upgrade_end_time):
        """
        Sets the upgrade_end_time of this ApplianceImageBundle.
        End date of the software upgrade process.

        :param upgrade_end_time: The upgrade_end_time of this ApplianceImageBundle.
        :type: datetime
        """

        self._upgrade_end_time = upgrade_end_time

    @property
    def upgrade_grace_period(self):
        """
        Gets the upgrade_grace_period of this ApplianceImageBundle.
        Grace period in seconds before the automatic upgrade is initiated. The upgrade service uses the grace period to compute the upgrade start time when it receives an upgrade notfication from the Intersight. If there is an Upgrade Policy configured for the Intersight Appliance, then the upgrade service uses the policy to compute the upgrade start time. However, the upgrade start time cannot not exceed the limit enforced by the grace period.

        :return: The upgrade_grace_period of this ApplianceImageBundle.
        :rtype: int
        """
        return self._upgrade_grace_period

    @upgrade_grace_period.setter
    def upgrade_grace_period(self, upgrade_grace_period):
        """
        Sets the upgrade_grace_period of this ApplianceImageBundle.
        Grace period in seconds before the automatic upgrade is initiated. The upgrade service uses the grace period to compute the upgrade start time when it receives an upgrade notfication from the Intersight. If there is an Upgrade Policy configured for the Intersight Appliance, then the upgrade service uses the policy to compute the upgrade start time. However, the upgrade start time cannot not exceed the limit enforced by the grace period.

        :param upgrade_grace_period: The upgrade_grace_period of this ApplianceImageBundle.
        :type: int
        """

        self._upgrade_grace_period = upgrade_grace_period

    @property
    def upgrade_impact_duration(self):
        """
        Gets the upgrade_impact_duration of this ApplianceImageBundle.
        Duration (in minutes) for which services will be disrupted.

        :return: The upgrade_impact_duration of this ApplianceImageBundle.
        :rtype: int
        """
        return self._upgrade_impact_duration

    @upgrade_impact_duration.setter
    def upgrade_impact_duration(self, upgrade_impact_duration):
        """
        Sets the upgrade_impact_duration of this ApplianceImageBundle.
        Duration (in minutes) for which services will be disrupted.

        :param upgrade_impact_duration: The upgrade_impact_duration of this ApplianceImageBundle.
        :type: int
        """

        self._upgrade_impact_duration = upgrade_impact_duration

    @property
    def upgrade_impact_enum(self):
        """
        Gets the upgrade_impact_enum of this ApplianceImageBundle.
        UpgradeImpactEnum is used to indicate the kind of impact the upgrade has on currently running services on the appliance.

        :return: The upgrade_impact_enum of this ApplianceImageBundle.
        :rtype: str
        """
        return self._upgrade_impact_enum

    @upgrade_impact_enum.setter
    def upgrade_impact_enum(self, upgrade_impact_enum):
        """
        Sets the upgrade_impact_enum of this ApplianceImageBundle.
        UpgradeImpactEnum is used to indicate the kind of impact the upgrade has on currently running services on the appliance.

        :param upgrade_impact_enum: The upgrade_impact_enum of this ApplianceImageBundle.
        :type: str
        """
        allowed_values = ["None", "Disruptive", "Disruptive-reboot"]
        if upgrade_impact_enum not in allowed_values:
            raise ValueError(
                "Invalid value for `upgrade_impact_enum` ({0}), must be one of {1}"
                .format(upgrade_impact_enum, allowed_values)
            )

        self._upgrade_impact_enum = upgrade_impact_enum

    @property
    def upgrade_start_time(self):
        """
        Gets the upgrade_start_time of this ApplianceImageBundle.
        Start date of the software upgrade process.

        :return: The upgrade_start_time of this ApplianceImageBundle.
        :rtype: datetime
        """
        return self._upgrade_start_time

    @upgrade_start_time.setter
    def upgrade_start_time(self, upgrade_start_time):
        """
        Sets the upgrade_start_time of this ApplianceImageBundle.
        Start date of the software upgrade process.

        :param upgrade_start_time: The upgrade_start_time of this ApplianceImageBundle.
        :type: datetime
        """

        self._upgrade_start_time = upgrade_start_time

    @property
    def version(self):
        """
        Gets the version of this ApplianceImageBundle.
        Software upgrade manifest's version.

        :return: The version of this ApplianceImageBundle.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this ApplianceImageBundle.
        Software upgrade manifest's version.

        :param version: The version of this ApplianceImageBundle.
        :type: str
        """

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApplianceImageBundle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
