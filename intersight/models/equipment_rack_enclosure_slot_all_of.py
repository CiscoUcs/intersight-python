# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class EquipmentRackEnclosureSlotAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'rack_id': 'int',
        'rack_unit_dn': 'str',
        'equipment_rack_enclosure': 'EquipmentRackEnclosure',
        'rack_unit': 'ComputeRackUnit',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'rack_id': 'RackId',
        'rack_unit_dn': 'RackUnitDn',
        'equipment_rack_enclosure': 'EquipmentRackEnclosure',
        'rack_unit': 'RackUnit',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 rack_id=None,
                 rack_unit_dn=None,
                 equipment_rack_enclosure=None,
                 rack_unit=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """EquipmentRackEnclosureSlotAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._rack_id = None
        self._rack_unit_dn = None
        self._equipment_rack_enclosure = None
        self._rack_unit = None
        self._registered_device = None
        self.discriminator = None

        if rack_id is not None:
            self.rack_id = rack_id
        if rack_unit_dn is not None:
            self.rack_unit_dn = rack_unit_dn
        if equipment_rack_enclosure is not None:
            self.equipment_rack_enclosure = equipment_rack_enclosure
        if rack_unit is not None:
            self.rack_unit = rack_unit
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def rack_id(self):
        """Gets the rack_id of this EquipmentRackEnclosureSlotAllOf.  # noqa: E501


        :return: The rack_id of this EquipmentRackEnclosureSlotAllOf.  # noqa: E501
        :rtype: int
        """
        return self._rack_id

    @rack_id.setter
    def rack_id(self, rack_id):
        """Sets the rack_id of this EquipmentRackEnclosureSlotAllOf.


        :param rack_id: The rack_id of this EquipmentRackEnclosureSlotAllOf.  # noqa: E501
        :type: int
        """

        self._rack_id = rack_id

    @property
    def rack_unit_dn(self):
        """Gets the rack_unit_dn of this EquipmentRackEnclosureSlotAllOf.  # noqa: E501


        :return: The rack_unit_dn of this EquipmentRackEnclosureSlotAllOf.  # noqa: E501
        :rtype: str
        """
        return self._rack_unit_dn

    @rack_unit_dn.setter
    def rack_unit_dn(self, rack_unit_dn):
        """Sets the rack_unit_dn of this EquipmentRackEnclosureSlotAllOf.


        :param rack_unit_dn: The rack_unit_dn of this EquipmentRackEnclosureSlotAllOf.  # noqa: E501
        :type: str
        """

        self._rack_unit_dn = rack_unit_dn

    @property
    def equipment_rack_enclosure(self):
        """Gets the equipment_rack_enclosure of this EquipmentRackEnclosureSlotAllOf.  # noqa: E501


        :return: The equipment_rack_enclosure of this EquipmentRackEnclosureSlotAllOf.  # noqa: E501
        :rtype: EquipmentRackEnclosure
        """
        return self._equipment_rack_enclosure

    @equipment_rack_enclosure.setter
    def equipment_rack_enclosure(self, equipment_rack_enclosure):
        """Sets the equipment_rack_enclosure of this EquipmentRackEnclosureSlotAllOf.


        :param equipment_rack_enclosure: The equipment_rack_enclosure of this EquipmentRackEnclosureSlotAllOf.  # noqa: E501
        :type: EquipmentRackEnclosure
        """

        self._equipment_rack_enclosure = equipment_rack_enclosure

    @property
    def rack_unit(self):
        """Gets the rack_unit of this EquipmentRackEnclosureSlotAllOf.  # noqa: E501


        :return: The rack_unit of this EquipmentRackEnclosureSlotAllOf.  # noqa: E501
        :rtype: ComputeRackUnit
        """
        return self._rack_unit

    @rack_unit.setter
    def rack_unit(self, rack_unit):
        """Sets the rack_unit of this EquipmentRackEnclosureSlotAllOf.


        :param rack_unit: The rack_unit of this EquipmentRackEnclosureSlotAllOf.  # noqa: E501
        :type: ComputeRackUnit
        """

        self._rack_unit = rack_unit

    @property
    def registered_device(self):
        """Gets the registered_device of this EquipmentRackEnclosureSlotAllOf.  # noqa: E501


        :return: The registered_device of this EquipmentRackEnclosureSlotAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this EquipmentRackEnclosureSlotAllOf.


        :param registered_device: The registered_device of this EquipmentRackEnclosureSlotAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EquipmentRackEnclosureSlotAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EquipmentRackEnclosureSlotAllOf):
            return True

        return self.to_dict() != other.to_dict()
