# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StoragePureReplicationScheduleAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'daily_limit': 'int',
        'replication_blackout_intervals': 'list[StorageReplicationBlackout]',
        'snapshot_expiry_time': 'str',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'daily_limit': 'DailyLimit',
        'replication_blackout_intervals': 'ReplicationBlackoutIntervals',
        'snapshot_expiry_time': 'SnapshotExpiryTime',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 daily_limit=None,
                 replication_blackout_intervals=None,
                 snapshot_expiry_time=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """StoragePureReplicationScheduleAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._daily_limit = None
        self._replication_blackout_intervals = None
        self._snapshot_expiry_time = None
        self._registered_device = None
        self.discriminator = None

        if daily_limit is not None:
            self.daily_limit = daily_limit
        if replication_blackout_intervals is not None:
            self.replication_blackout_intervals = replication_blackout_intervals
        if snapshot_expiry_time is not None:
            self.snapshot_expiry_time = snapshot_expiry_time
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def daily_limit(self):
        """Gets the daily_limit of this StoragePureReplicationScheduleAllOf.  # noqa: E501

        Total number of snapshots per day to be available on target above and over the specified retention time. PureStorage FlashArray maintains all created snapshot until retention period. Daily limit is applied only on the snapshots once retention time is expired. In case of, daily limit is less than the number of snapshot available on source, system select snapshots evenly spaced out throughout the day.     # noqa: E501

        :return: The daily_limit of this StoragePureReplicationScheduleAllOf.  # noqa: E501
        :rtype: int
        """
        return self._daily_limit

    @daily_limit.setter
    def daily_limit(self, daily_limit):
        """Sets the daily_limit of this StoragePureReplicationScheduleAllOf.

        Total number of snapshots per day to be available on target above and over the specified retention time. PureStorage FlashArray maintains all created snapshot until retention period. Daily limit is applied only on the snapshots once retention time is expired. In case of, daily limit is less than the number of snapshot available on source, system select snapshots evenly spaced out throughout the day.     # noqa: E501

        :param daily_limit: The daily_limit of this StoragePureReplicationScheduleAllOf.  # noqa: E501
        :type: int
        """

        self._daily_limit = daily_limit

    @property
    def replication_blackout_intervals(self):
        """Gets the replication_blackout_intervals of this StoragePureReplicationScheduleAllOf.  # noqa: E501


        :return: The replication_blackout_intervals of this StoragePureReplicationScheduleAllOf.  # noqa: E501
        :rtype: list[StorageReplicationBlackout]
        """
        return self._replication_blackout_intervals

    @replication_blackout_intervals.setter
    def replication_blackout_intervals(self, replication_blackout_intervals):
        """Sets the replication_blackout_intervals of this StoragePureReplicationScheduleAllOf.


        :param replication_blackout_intervals: The replication_blackout_intervals of this StoragePureReplicationScheduleAllOf.  # noqa: E501
        :type: list[StorageReplicationBlackout]
        """

        self._replication_blackout_intervals = replication_blackout_intervals

    @property
    def snapshot_expiry_time(self):
        """Gets the snapshot_expiry_time of this StoragePureReplicationScheduleAllOf.  # noqa: E501

        Duration to keep the daily limit snapshots on target array. StorageArray deletes the snapshots permanently from the targets beyond this period.     # noqa: E501

        :return: The snapshot_expiry_time of this StoragePureReplicationScheduleAllOf.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_expiry_time

    @snapshot_expiry_time.setter
    def snapshot_expiry_time(self, snapshot_expiry_time):
        """Sets the snapshot_expiry_time of this StoragePureReplicationScheduleAllOf.

        Duration to keep the daily limit snapshots on target array. StorageArray deletes the snapshots permanently from the targets beyond this period.     # noqa: E501

        :param snapshot_expiry_time: The snapshot_expiry_time of this StoragePureReplicationScheduleAllOf.  # noqa: E501
        :type: str
        """

        self._snapshot_expiry_time = snapshot_expiry_time

    @property
    def registered_device(self):
        """Gets the registered_device of this StoragePureReplicationScheduleAllOf.  # noqa: E501


        :return: The registered_device of this StoragePureReplicationScheduleAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this StoragePureReplicationScheduleAllOf.


        :param registered_device: The registered_device of this StoragePureReplicationScheduleAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoragePureReplicationScheduleAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StoragePureReplicationScheduleAllOf):
            return True

        return self.to_dict() != other.to_dict()
