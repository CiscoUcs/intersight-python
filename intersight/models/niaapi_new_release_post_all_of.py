# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class NiaapiNewReleasePostAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'post_date': 'datetime',
        'post_detail': 'NiaapiNewReleaseDetail',
        'post_type': 'str',
        'postid': 'str',
        'revision': 'str'
    }

    attribute_map = {
        'post_date': 'PostDate',
        'post_detail': 'PostDetail',
        'post_type': 'PostType',
        'postid': 'Postid',
        'revision': 'Revision'
    }

    def __init__(self,
                 post_date=None,
                 post_detail=None,
                 post_type=None,
                 postid=None,
                 revision=None,
                 local_vars_configuration=None):  # noqa: E501
        """NiaapiNewReleasePostAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._post_date = None
        self._post_detail = None
        self._post_type = None
        self._postid = None
        self._revision = None
        self.discriminator = None

        if post_date is not None:
            self.post_date = post_date
        if post_detail is not None:
            self.post_detail = post_detail
        if post_type is not None:
            self.post_type = post_type
        if postid is not None:
            self.postid = postid
        if revision is not None:
            self.revision = revision

    @property
    def post_date(self):
        """Gets the post_date of this NiaapiNewReleasePostAllOf.  # noqa: E501

        The date when this new release notice is posted.    # noqa: E501

        :return: The post_date of this NiaapiNewReleasePostAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._post_date

    @post_date.setter
    def post_date(self, post_date):
        """Sets the post_date of this NiaapiNewReleasePostAllOf.

        The date when this new release notice is posted.    # noqa: E501

        :param post_date: The post_date of this NiaapiNewReleasePostAllOf.  # noqa: E501
        :type: datetime
        """

        self._post_date = post_date

    @property
    def post_detail(self):
        """Gets the post_detail of this NiaapiNewReleasePostAllOf.  # noqa: E501


        :return: The post_detail of this NiaapiNewReleasePostAllOf.  # noqa: E501
        :rtype: NiaapiNewReleaseDetail
        """
        return self._post_detail

    @post_detail.setter
    def post_detail(self, post_detail):
        """Sets the post_detail of this NiaapiNewReleasePostAllOf.


        :param post_detail: The post_detail of this NiaapiNewReleasePostAllOf.  # noqa: E501
        :type: NiaapiNewReleaseDetail
        """

        self._post_detail = post_detail

    @property
    def post_type(self):
        """Gets the post_type of this NiaapiNewReleasePostAllOf.  # noqa: E501

        The document type of this post.    # noqa: E501

        :return: The post_type of this NiaapiNewReleasePostAllOf.  # noqa: E501
        :rtype: str
        """
        return self._post_type

    @post_type.setter
    def post_type(self, post_type):
        """Sets the post_type of this NiaapiNewReleasePostAllOf.

        The document type of this post.    # noqa: E501

        :param post_type: The post_type of this NiaapiNewReleasePostAllOf.  # noqa: E501
        :type: str
        """

        self._post_type = post_type

    @property
    def postid(self):
        """Gets the postid of this NiaapiNewReleasePostAllOf.  # noqa: E501

        Identificator of this inbox post.    # noqa: E501

        :return: The postid of this NiaapiNewReleasePostAllOf.  # noqa: E501
        :rtype: str
        """
        return self._postid

    @postid.setter
    def postid(self, postid):
        """Sets the postid of this NiaapiNewReleasePostAllOf.

        Identificator of this inbox post.    # noqa: E501

        :param postid: The postid of this NiaapiNewReleasePostAllOf.  # noqa: E501
        :type: str
        """

        self._postid = postid

    @property
    def revision(self):
        """Gets the revision of this NiaapiNewReleasePostAllOf.  # noqa: E501

        Revision number of this notice.     # noqa: E501

        :return: The revision of this NiaapiNewReleasePostAllOf.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this NiaapiNewReleasePostAllOf.

        Revision number of this notice.     # noqa: E501

        :param revision: The revision of this NiaapiNewReleasePostAllOf.  # noqa: E501
        :type: str
        """

        self._revision = revision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NiaapiNewReleasePostAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NiaapiNewReleasePostAllOf):
            return True

        return self.to_dict() != other.to_dict()
