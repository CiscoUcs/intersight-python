# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class HyperflexHealth(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'arbitration_service_state': 'str',
        'data_replication_compliance': 'str',
        'resiliency_details': 'HyperflexHxResiliencyInfoDt',
        'state': 'str',
        'uuid': 'str',
        'zk_health': 'str',
        'zone_resiliency_list': 'list[HyperflexHxZoneResiliencyInfoDt]',
        'cluster': 'HyperflexCluster'
    }

    attribute_map = {
        'arbitration_service_state': 'ArbitrationServiceState',
        'data_replication_compliance': 'DataReplicationCompliance',
        'resiliency_details': 'ResiliencyDetails',
        'state': 'State',
        'uuid': 'Uuid',
        'zk_health': 'ZkHealth',
        'zone_resiliency_list': 'ZoneResiliencyList',
        'cluster': 'Cluster'
    }

    def __init__(self,
                 arbitration_service_state='NOT_AVAILABLE',
                 data_replication_compliance='UNKNOWN',
                 resiliency_details=None,
                 state='UNKNOWN',
                 uuid=None,
                 zk_health='NOT_AVAILABLE',
                 zone_resiliency_list=None,
                 cluster=None,
                 local_vars_configuration=None):  # noqa: E501
        """HyperflexHealth - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._arbitration_service_state = None
        self._data_replication_compliance = None
        self._resiliency_details = None
        self._state = None
        self._uuid = None
        self._zk_health = None
        self._zone_resiliency_list = None
        self._cluster = None
        self.discriminator = None

        if arbitration_service_state is not None:
            self.arbitration_service_state = arbitration_service_state
        if data_replication_compliance is not None:
            self.data_replication_compliance = data_replication_compliance
        if resiliency_details is not None:
            self.resiliency_details = resiliency_details
        if state is not None:
            self.state = state
        if uuid is not None:
            self.uuid = uuid
        if zk_health is not None:
            self.zk_health = zk_health
        if zone_resiliency_list is not None:
            self.zone_resiliency_list = zone_resiliency_list
        if cluster is not None:
            self.cluster = cluster

    @property
    def arbitration_service_state(self):
        """Gets the arbitration_service_state of this HyperflexHealth.  # noqa: E501


        :return: The arbitration_service_state of this HyperflexHealth.  # noqa: E501
        :rtype: str
        """
        return self._arbitration_service_state

    @arbitration_service_state.setter
    def arbitration_service_state(self, arbitration_service_state):
        """Sets the arbitration_service_state of this HyperflexHealth.


        :param arbitration_service_state: The arbitration_service_state of this HyperflexHealth.  # noqa: E501
        :type: str
        """
        allowed_values = ["NOT_AVAILABLE", "UNKNOWN", "ONLINE",
                          "OFFLINE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and arbitration_service_state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `arbitration_service_state` ({0}), must be one of {1}"  # noqa: E501
                .format(arbitration_service_state, allowed_values))

        self._arbitration_service_state = arbitration_service_state

    @property
    def data_replication_compliance(self):
        """Gets the data_replication_compliance of this HyperflexHealth.  # noqa: E501


        :return: The data_replication_compliance of this HyperflexHealth.  # noqa: E501
        :rtype: str
        """
        return self._data_replication_compliance

    @data_replication_compliance.setter
    def data_replication_compliance(self, data_replication_compliance):
        """Sets the data_replication_compliance of this HyperflexHealth.


        :param data_replication_compliance: The data_replication_compliance of this HyperflexHealth.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "COMPLIANT",
                          "NON_COMPLIANT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and data_replication_compliance not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `data_replication_compliance` ({0}), must be one of {1}"  # noqa: E501
                .format(data_replication_compliance, allowed_values))

        self._data_replication_compliance = data_replication_compliance

    @property
    def resiliency_details(self):
        """Gets the resiliency_details of this HyperflexHealth.  # noqa: E501


        :return: The resiliency_details of this HyperflexHealth.  # noqa: E501
        :rtype: HyperflexHxResiliencyInfoDt
        """
        return self._resiliency_details

    @resiliency_details.setter
    def resiliency_details(self, resiliency_details):
        """Sets the resiliency_details of this HyperflexHealth.


        :param resiliency_details: The resiliency_details of this HyperflexHealth.  # noqa: E501
        :type: HyperflexHxResiliencyInfoDt
        """

        self._resiliency_details = resiliency_details

    @property
    def state(self):
        """Gets the state of this HyperflexHealth.  # noqa: E501


        :return: The state of this HyperflexHealth.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this HyperflexHealth.


        :param state: The state of this HyperflexHealth.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "UNKNOWN", "ONLINE", "OFFLINE", "ENOSPACE", "READONLY"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values))

        self._state = state

    @property
    def uuid(self):
        """Gets the uuid of this HyperflexHealth.  # noqa: E501


        :return: The uuid of this HyperflexHealth.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this HyperflexHealth.


        :param uuid: The uuid of this HyperflexHealth.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def zk_health(self):
        """Gets the zk_health of this HyperflexHealth.  # noqa: E501


        :return: The zk_health of this HyperflexHealth.  # noqa: E501
        :rtype: str
        """
        return self._zk_health

    @zk_health.setter
    def zk_health(self, zk_health):
        """Sets the zk_health of this HyperflexHealth.


        :param zk_health: The zk_health of this HyperflexHealth.  # noqa: E501
        :type: str
        """
        allowed_values = ["NOT_AVAILABLE", "UNKNOWN", "ONLINE",
                          "OFFLINE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and zk_health not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `zk_health` ({0}), must be one of {1}"  # noqa: E501
                .format(zk_health, allowed_values))

        self._zk_health = zk_health

    @property
    def zone_resiliency_list(self):
        """Gets the zone_resiliency_list of this HyperflexHealth.  # noqa: E501


        :return: The zone_resiliency_list of this HyperflexHealth.  # noqa: E501
        :rtype: list[HyperflexHxZoneResiliencyInfoDt]
        """
        return self._zone_resiliency_list

    @zone_resiliency_list.setter
    def zone_resiliency_list(self, zone_resiliency_list):
        """Sets the zone_resiliency_list of this HyperflexHealth.


        :param zone_resiliency_list: The zone_resiliency_list of this HyperflexHealth.  # noqa: E501
        :type: list[HyperflexHxZoneResiliencyInfoDt]
        """

        self._zone_resiliency_list = zone_resiliency_list

    @property
    def cluster(self):
        """Gets the cluster of this HyperflexHealth.  # noqa: E501


        :return: The cluster of this HyperflexHealth.  # noqa: E501
        :rtype: HyperflexCluster
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this HyperflexHealth.


        :param cluster: The cluster of this HyperflexHealth.  # noqa: E501
        :type: HyperflexCluster
        """

        self._cluster = cluster

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HyperflexHealth):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HyperflexHealth):
            return True

        return self.to_dict() != other.to_dict()
