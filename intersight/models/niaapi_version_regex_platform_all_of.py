# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class NiaapiVersionRegexPlatformAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'anyllregex': 'str',
        'currentlltrain': 'NiaapiSoftwareRegex',
        'latestsltrain': 'NiaapiSoftwareRegex',
        'sltrain': 'list[NiaapiSoftwareRegex]',
        'upcominglltrain': 'NiaapiSoftwareRegex'
    }

    attribute_map = {
        'anyllregex': 'Anyllregex',
        'currentlltrain': 'Currentlltrain',
        'latestsltrain': 'Latestsltrain',
        'sltrain': 'Sltrain',
        'upcominglltrain': 'Upcominglltrain'
    }

    def __init__(self,
                 anyllregex=None,
                 currentlltrain=None,
                 latestsltrain=None,
                 sltrain=None,
                 upcominglltrain=None,
                 local_vars_configuration=None):  # noqa: E501
        """NiaapiVersionRegexPlatformAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._anyllregex = None
        self._currentlltrain = None
        self._latestsltrain = None
        self._sltrain = None
        self._upcominglltrain = None
        self.discriminator = None

        if anyllregex is not None:
            self.anyllregex = anyllregex
        if currentlltrain is not None:
            self.currentlltrain = currentlltrain
        if latestsltrain is not None:
            self.latestsltrain = latestsltrain
        if sltrain is not None:
            self.sltrain = sltrain
        if upcominglltrain is not None:
            self.upcominglltrain = upcominglltrain

    @property
    def anyllregex(self):
        """Gets the anyllregex of this NiaapiVersionRegexPlatformAllOf.  # noqa: E501

        All long live version Regex pattern.    # noqa: E501

        :return: The anyllregex of this NiaapiVersionRegexPlatformAllOf.  # noqa: E501
        :rtype: str
        """
        return self._anyllregex

    @anyllregex.setter
    def anyllregex(self, anyllregex):
        """Sets the anyllregex of this NiaapiVersionRegexPlatformAllOf.

        All long live version Regex pattern.    # noqa: E501

        :param anyllregex: The anyllregex of this NiaapiVersionRegexPlatformAllOf.  # noqa: E501
        :type: str
        """

        self._anyllregex = anyllregex

    @property
    def currentlltrain(self):
        """Gets the currentlltrain of this NiaapiVersionRegexPlatformAllOf.  # noqa: E501


        :return: The currentlltrain of this NiaapiVersionRegexPlatformAllOf.  # noqa: E501
        :rtype: NiaapiSoftwareRegex
        """
        return self._currentlltrain

    @currentlltrain.setter
    def currentlltrain(self, currentlltrain):
        """Sets the currentlltrain of this NiaapiVersionRegexPlatformAllOf.


        :param currentlltrain: The currentlltrain of this NiaapiVersionRegexPlatformAllOf.  # noqa: E501
        :type: NiaapiSoftwareRegex
        """

        self._currentlltrain = currentlltrain

    @property
    def latestsltrain(self):
        """Gets the latestsltrain of this NiaapiVersionRegexPlatformAllOf.  # noqa: E501


        :return: The latestsltrain of this NiaapiVersionRegexPlatformAllOf.  # noqa: E501
        :rtype: NiaapiSoftwareRegex
        """
        return self._latestsltrain

    @latestsltrain.setter
    def latestsltrain(self, latestsltrain):
        """Sets the latestsltrain of this NiaapiVersionRegexPlatformAllOf.


        :param latestsltrain: The latestsltrain of this NiaapiVersionRegexPlatformAllOf.  # noqa: E501
        :type: NiaapiSoftwareRegex
        """

        self._latestsltrain = latestsltrain

    @property
    def sltrain(self):
        """Gets the sltrain of this NiaapiVersionRegexPlatformAllOf.  # noqa: E501


        :return: The sltrain of this NiaapiVersionRegexPlatformAllOf.  # noqa: E501
        :rtype: list[NiaapiSoftwareRegex]
        """
        return self._sltrain

    @sltrain.setter
    def sltrain(self, sltrain):
        """Sets the sltrain of this NiaapiVersionRegexPlatformAllOf.


        :param sltrain: The sltrain of this NiaapiVersionRegexPlatformAllOf.  # noqa: E501
        :type: list[NiaapiSoftwareRegex]
        """

        self._sltrain = sltrain

    @property
    def upcominglltrain(self):
        """Gets the upcominglltrain of this NiaapiVersionRegexPlatformAllOf.  # noqa: E501


        :return: The upcominglltrain of this NiaapiVersionRegexPlatformAllOf.  # noqa: E501
        :rtype: NiaapiSoftwareRegex
        """
        return self._upcominglltrain

    @upcominglltrain.setter
    def upcominglltrain(self, upcominglltrain):
        """Sets the upcominglltrain of this NiaapiVersionRegexPlatformAllOf.


        :param upcominglltrain: The upcominglltrain of this NiaapiVersionRegexPlatformAllOf.  # noqa: E501
        :type: NiaapiSoftwareRegex
        """

        self._upcominglltrain = upcominglltrain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NiaapiVersionRegexPlatformAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NiaapiVersionRegexPlatformAllOf):
            return True

        return self.to_dict() != other.to_dict()
