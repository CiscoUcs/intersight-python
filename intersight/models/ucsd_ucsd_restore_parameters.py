# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1295
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UcsdUcsdRestoreParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'is_password_set': 'bool',
        'location': 'str',
        'password': 'str',
        'protocol': 'str',
        'restore_configuration_files': 'bool',
        'restore_license': 'bool',
        'username': 'str'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'is_password_set': 'IsPasswordSet',
        'location': 'Location',
        'password': 'Password',
        'protocol': 'Protocol',
        'restore_configuration_files': 'RestoreConfigurationFiles',
        'restore_license': 'RestoreLicense',
        'username': 'Username'
    }

    def __init__(self, object_type=None, is_password_set=None, location=None, password=None, protocol=None, restore_configuration_files=None, restore_license=None, username=None):
        """
        UcsdUcsdRestoreParameters - a model defined in Swagger
        """

        self._object_type = None
        self._is_password_set = None
        self._location = None
        self._password = None
        self._protocol = None
        self._restore_configuration_files = None
        self._restore_license = None
        self._username = None

        if object_type is not None:
          self.object_type = object_type
        if is_password_set is not None:
          self.is_password_set = is_password_set
        if location is not None:
          self.location = location
        if password is not None:
          self.password = password
        if protocol is not None:
          self.protocol = protocol
        if restore_configuration_files is not None:
          self.restore_configuration_files = restore_configuration_files
        if restore_license is not None:
          self.restore_license = restore_license
        if username is not None:
          self.username = username

    @property
    def object_type(self):
        """
        Gets the object_type of this UcsdUcsdRestoreParameters.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :return: The object_type of this UcsdUcsdRestoreParameters.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this UcsdUcsdRestoreParameters.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :param object_type: The object_type of this UcsdUcsdRestoreParameters.
        :type: str
        """

        self._object_type = object_type

    @property
    def is_password_set(self):
        """
        Gets the is_password_set of this UcsdUcsdRestoreParameters.

        :return: The is_password_set of this UcsdUcsdRestoreParameters.
        :rtype: bool
        """
        return self._is_password_set

    @is_password_set.setter
    def is_password_set(self, is_password_set):
        """
        Sets the is_password_set of this UcsdUcsdRestoreParameters.

        :param is_password_set: The is_password_set of this UcsdUcsdRestoreParameters.
        :type: bool
        """

        self._is_password_set = is_password_set

    @property
    def location(self):
        """
        Gets the location of this UcsdUcsdRestoreParameters.
        The complete location of the path on the server. The location should be specified in the following format- hostname-or-ipv4address<:port>/absolute-file-path  

        :return: The location of this UcsdUcsdRestoreParameters.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this UcsdUcsdRestoreParameters.
        The complete location of the path on the server. The location should be specified in the following format- hostname-or-ipv4address<:port>/absolute-file-path  

        :param location: The location of this UcsdUcsdRestoreParameters.
        :type: str
        """

        self._location = location

    @property
    def password(self):
        """
        Gets the password of this UcsdUcsdRestoreParameters.
        The password of the target backup server. Only required if the target server is accessed using SFTP or SCP protocol.  

        :return: The password of this UcsdUcsdRestoreParameters.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this UcsdUcsdRestoreParameters.
        The password of the target backup server. Only required if the target server is accessed using SFTP or SCP protocol.  

        :param password: The password of this UcsdUcsdRestoreParameters.
        :type: str
        """

        self._password = password

    @property
    def protocol(self):
        """
        Gets the protocol of this UcsdUcsdRestoreParameters.
        The protocol used to backup the UCS Director.  

        :return: The protocol of this UcsdUcsdRestoreParameters.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """
        Sets the protocol of this UcsdUcsdRestoreParameters.
        The protocol used to backup the UCS Director.  

        :param protocol: The protocol of this UcsdUcsdRestoreParameters.
        :type: str
        """

        self._protocol = protocol

    @property
    def restore_configuration_files(self):
        """
        Gets the restore_configuration_files of this UcsdUcsdRestoreParameters.
        Decides whether UCS Director property files should also be restored  

        :return: The restore_configuration_files of this UcsdUcsdRestoreParameters.
        :rtype: bool
        """
        return self._restore_configuration_files

    @restore_configuration_files.setter
    def restore_configuration_files(self, restore_configuration_files):
        """
        Sets the restore_configuration_files of this UcsdUcsdRestoreParameters.
        Decides whether UCS Director property files should also be restored  

        :param restore_configuration_files: The restore_configuration_files of this UcsdUcsdRestoreParameters.
        :type: bool
        """

        self._restore_configuration_files = restore_configuration_files

    @property
    def restore_license(self):
        """
        Gets the restore_license of this UcsdUcsdRestoreParameters.
        Decides whether license should also be restored  

        :return: The restore_license of this UcsdUcsdRestoreParameters.
        :rtype: bool
        """
        return self._restore_license

    @restore_license.setter
    def restore_license(self, restore_license):
        """
        Sets the restore_license of this UcsdUcsdRestoreParameters.
        Decides whether license should also be restored  

        :param restore_license: The restore_license of this UcsdUcsdRestoreParameters.
        :type: bool
        """

        self._restore_license = restore_license

    @property
    def username(self):
        """
        Gets the username of this UcsdUcsdRestoreParameters.
        The username of the target backup server. Only required if the target server is accessed using SFTP or SCP protocol.   

        :return: The username of this UcsdUcsdRestoreParameters.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this UcsdUcsdRestoreParameters.
        The username of the target backup server. Only required if the target server is accessed using SFTP or SCP protocol.   

        :param username: The username of this UcsdUcsdRestoreParameters.
        :type: str
        """

        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UcsdUcsdRestoreParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
