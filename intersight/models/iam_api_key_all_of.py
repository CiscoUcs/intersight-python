# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class IamApiKeyAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'hash_algorithm': 'str',
        'key_spec': 'PkixKeyGenerationSpec',
        'private_key': 'str',
        'purpose': 'str',
        'signing_algorithm': 'str',
        'permission': 'IamPermission',
        'user': 'IamUser'
    }

    attribute_map = {
        'hash_algorithm': 'HashAlgorithm',
        'key_spec': 'KeySpec',
        'private_key': 'PrivateKey',
        'purpose': 'Purpose',
        'signing_algorithm': 'SigningAlgorithm',
        'permission': 'Permission',
        'user': 'User'
    }

    def __init__(self,
                 hash_algorithm='SHA256',
                 key_spec=None,
                 private_key=None,
                 purpose=None,
                 signing_algorithm='RSASSA-PKCS1-v1_5',
                 permission=None,
                 user=None,
                 local_vars_configuration=None):  # noqa: E501
        """IamApiKeyAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._hash_algorithm = None
        self._key_spec = None
        self._private_key = None
        self._purpose = None
        self._signing_algorithm = None
        self._permission = None
        self._user = None
        self.discriminator = None

        if hash_algorithm is not None:
            self.hash_algorithm = hash_algorithm
        if key_spec is not None:
            self.key_spec = key_spec
        if private_key is not None:
            self.private_key = private_key
        if purpose is not None:
            self.purpose = purpose
        if signing_algorithm is not None:
            self.signing_algorithm = signing_algorithm
        if permission is not None:
            self.permission = permission
        if user is not None:
            self.user = user

    @property
    def hash_algorithm(self):
        """Gets the hash_algorithm of this IamApiKeyAllOf.  # noqa: E501

        The cryptographic hash algorithm to calculate the message digest.     # noqa: E501

        :return: The hash_algorithm of this IamApiKeyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._hash_algorithm

    @hash_algorithm.setter
    def hash_algorithm(self, hash_algorithm):
        """Sets the hash_algorithm of this IamApiKeyAllOf.

        The cryptographic hash algorithm to calculate the message digest.     # noqa: E501

        :param hash_algorithm: The hash_algorithm of this IamApiKeyAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "SHA256", "SHA384", "SHA512", "SHA512_224", "SHA512_256"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and hash_algorithm not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `hash_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(hash_algorithm, allowed_values))

        self._hash_algorithm = hash_algorithm

    @property
    def key_spec(self):
        """Gets the key_spec of this IamApiKeyAllOf.  # noqa: E501


        :return: The key_spec of this IamApiKeyAllOf.  # noqa: E501
        :rtype: PkixKeyGenerationSpec
        """
        return self._key_spec

    @key_spec.setter
    def key_spec(self, key_spec):
        """Sets the key_spec of this IamApiKeyAllOf.


        :param key_spec: The key_spec of this IamApiKeyAllOf.  # noqa: E501
        :type: PkixKeyGenerationSpec
        """

        self._key_spec = key_spec

    @property
    def private_key(self):
        """Gets the private_key of this IamApiKeyAllOf.  # noqa: E501

        Holds the private key for the API key.     # noqa: E501

        :return: The private_key of this IamApiKeyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this IamApiKeyAllOf.

        Holds the private key for the API key.     # noqa: E501

        :param private_key: The private_key of this IamApiKeyAllOf.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def purpose(self):
        """Gets the purpose of this IamApiKeyAllOf.  # noqa: E501

        The purpose of the API Key.    # noqa: E501

        :return: The purpose of this IamApiKeyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this IamApiKeyAllOf.

        The purpose of the API Key.    # noqa: E501

        :param purpose: The purpose of this IamApiKeyAllOf.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def signing_algorithm(self):
        """Gets the signing_algorithm of this IamApiKeyAllOf.  # noqa: E501

        The signing algorithm used by the client to authenticate API requests to Intersight. The following key generation schemes are supported: 1. RSASSA-PSS, as defined in RFC 8017 [RFC8017], Section 8.1, 2. ECDSA P-256, as defined in ANSI X9.62-2005 ECDSA and FIPS 186-4, 3. Ed25519ph, Ed25519ctx, and Ed25519, as defined in RFC 8032 [RFC8032], Section 5.1. The signing algorithm must be compatible with the key generation specification.      # noqa: E501

        :return: The signing_algorithm of this IamApiKeyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._signing_algorithm

    @signing_algorithm.setter
    def signing_algorithm(self, signing_algorithm):
        """Sets the signing_algorithm of this IamApiKeyAllOf.

        The signing algorithm used by the client to authenticate API requests to Intersight. The following key generation schemes are supported: 1. RSASSA-PSS, as defined in RFC 8017 [RFC8017], Section 8.1, 2. ECDSA P-256, as defined in ANSI X9.62-2005 ECDSA and FIPS 186-4, 3. Ed25519ph, Ed25519ctx, and Ed25519, as defined in RFC 8032 [RFC8032], Section 5.1. The signing algorithm must be compatible with the key generation specification.      # noqa: E501

        :param signing_algorithm: The signing_algorithm of this IamApiKeyAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "RSASSA-PKCS1-v1_5", "RSASSA-PSS", "Ed25519", "Ecdsa"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and signing_algorithm not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `signing_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(signing_algorithm, allowed_values))

        self._signing_algorithm = signing_algorithm

    @property
    def permission(self):
        """Gets the permission of this IamApiKeyAllOf.  # noqa: E501


        :return: The permission of this IamApiKeyAllOf.  # noqa: E501
        :rtype: IamPermission
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this IamApiKeyAllOf.


        :param permission: The permission of this IamApiKeyAllOf.  # noqa: E501
        :type: IamPermission
        """

        self._permission = permission

    @property
    def user(self):
        """Gets the user of this IamApiKeyAllOf.  # noqa: E501


        :return: The user of this IamApiKeyAllOf.  # noqa: E501
        :rtype: IamUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this IamApiKeyAllOf.


        :param user: The user of this IamApiKeyAllOf.  # noqa: E501
        :type: IamUser
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IamApiKeyAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IamApiKeyAllOf):
            return True

        return self.to_dict() != other.to_dict()
