# coding: utf-8

"""
    UCS Starship API

    This is the UCS Starship REST API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BiosSecurity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pop_support': 'str',
        'tpm_control': 'str',
        'txt_support': 'str'
    }

    attribute_map = {
        'pop_support': 'PopSupport',
        'tpm_control': 'TpmControl',
        'txt_support': 'TxtSupport'
    }

    def __init__(self, pop_support='platform-default', tpm_control='platform-default', txt_support='platform-default'):
        """
        BiosSecurity - a model defined in Swagger
        """

        self._pop_support = None
        self._tpm_control = None
        self._txt_support = None

        if pop_support is not None:
          self.pop_support = pop_support
        if tpm_control is not None:
          self.tpm_control = tpm_control
        if txt_support is not None:
          self.txt_support = txt_support

    @property
    def pop_support(self):
        """
        Gets the pop_support of this BiosSecurity.
        BIOS Token for setting Power ON Password Support configuration  

        :return: The pop_support of this BiosSecurity.
        :rtype: str
        """
        return self._pop_support

    @pop_support.setter
    def pop_support(self, pop_support):
        """
        Sets the pop_support of this BiosSecurity.
        BIOS Token for setting Power ON Password Support configuration  

        :param pop_support: The pop_support of this BiosSecurity.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if pop_support not in allowed_values:
            raise ValueError(
                "Invalid value for `pop_support` ({0}), must be one of {1}"
                .format(pop_support, allowed_values)
            )

        self._pop_support = pop_support

    @property
    def tpm_control(self):
        """
        Gets the tpm_control of this BiosSecurity.
        BIOS Token for setting Trusted Platform Module State configuration  

        :return: The tpm_control of this BiosSecurity.
        :rtype: str
        """
        return self._tpm_control

    @tpm_control.setter
    def tpm_control(self, tpm_control):
        """
        Sets the tpm_control of this BiosSecurity.
        BIOS Token for setting Trusted Platform Module State configuration  

        :param tpm_control: The tpm_control of this BiosSecurity.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if tpm_control not in allowed_values:
            raise ValueError(
                "Invalid value for `tpm_control` ({0}), must be one of {1}"
                .format(tpm_control, allowed_values)
            )

        self._tpm_control = tpm_control

    @property
    def txt_support(self):
        """
        Gets the txt_support of this BiosSecurity.
        BIOS Token for setting Intel Trusted Execution Technology Support configuration   

        :return: The txt_support of this BiosSecurity.
        :rtype: str
        """
        return self._txt_support

    @txt_support.setter
    def txt_support(self, txt_support):
        """
        Sets the txt_support of this BiosSecurity.
        BIOS Token for setting Intel Trusted Execution Technology Support configuration   

        :param txt_support: The txt_support of this BiosSecurity.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if txt_support not in allowed_values:
            raise ValueError(
                "Invalid value for `txt_support` ({0}), must be one of {1}"
                .format(txt_support, allowed_values)
            )

        self._txt_support = txt_support

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BiosSecurity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
