# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1461
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SdwanRouterNode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'device_template': 'str',
        'name': 'str',
        'network_configuration': 'list[SdwanNetworkConfigurationType]',
        'template_inputs': 'list[SdwanTemplateInputsType]',
        'uuid': 'str',
        'organization': 'OrganizationOrganizationRef',
        'profile': 'SdwanProfileRef',
        'server_node': 'AssetDeviceRegistrationRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'device_template': 'DeviceTemplate',
        'name': 'Name',
        'network_configuration': 'NetworkConfiguration',
        'template_inputs': 'TemplateInputs',
        'uuid': 'Uuid',
        'organization': 'Organization',
        'profile': 'Profile',
        'server_node': 'ServerNode'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, device_template=None, name=None, network_configuration=None, template_inputs=None, uuid=None, organization=None, profile=None, server_node=None):
        """
        SdwanRouterNode - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._device_template = None
        self._name = None
        self._network_configuration = None
        self._template_inputs = None
        self._uuid = None
        self._organization = None
        self._profile = None
        self._server_node = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if device_template is not None:
          self.device_template = device_template
        if name is not None:
          self.name = name
        if network_configuration is not None:
          self.network_configuration = network_configuration
        if template_inputs is not None:
          self.template_inputs = template_inputs
        if uuid is not None:
          self.uuid = uuid
        if organization is not None:
          self.organization = organization
        if profile is not None:
          self.profile = profile
        if server_node is not None:
          self.server_node = server_node

    @property
    def account_moid(self):
        """
        Gets the account_moid of this SdwanRouterNode.
        The Account ID for this managed object.

        :return: The account_moid of this SdwanRouterNode.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this SdwanRouterNode.
        The Account ID for this managed object.

        :param account_moid: The account_moid of this SdwanRouterNode.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this SdwanRouterNode.
        The time when this managed object was created.

        :return: The create_time of this SdwanRouterNode.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this SdwanRouterNode.
        The time when this managed object was created.

        :param create_time: The create_time of this SdwanRouterNode.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this SdwanRouterNode.
        The DomainGroup ID for this managed object.

        :return: The domain_group_moid of this SdwanRouterNode.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this SdwanRouterNode.
        The DomainGroup ID for this managed object.

        :param domain_group_moid: The domain_group_moid of this SdwanRouterNode.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this SdwanRouterNode.
        The time when this managed object was last modified.

        :return: The mod_time of this SdwanRouterNode.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this SdwanRouterNode.
        The time when this managed object was last modified.

        :param mod_time: The mod_time of this SdwanRouterNode.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this SdwanRouterNode.
        The unique identifier of this Managed Object instance.

        :return: The moid of this SdwanRouterNode.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this SdwanRouterNode.
        The unique identifier of this Managed Object instance.

        :param moid: The moid of this SdwanRouterNode.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this SdwanRouterNode.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        :return: The object_type of this SdwanRouterNode.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this SdwanRouterNode.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        :param object_type: The object_type of this SdwanRouterNode.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this SdwanRouterNode.
        The array of owners which represent effective ownership of this object.

        :return: The owners of this SdwanRouterNode.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this SdwanRouterNode.
        The array of owners which represent effective ownership of this object.

        :param owners: The owners of this SdwanRouterNode.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this SdwanRouterNode.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.

        :return: The shared_scope of this SdwanRouterNode.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this SdwanRouterNode.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.

        :param shared_scope: The shared_scope of this SdwanRouterNode.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this SdwanRouterNode.
        The array of tags, which allow to add key, value meta-data to managed objects.

        :return: The tags of this SdwanRouterNode.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this SdwanRouterNode.
        The array of tags, which allow to add key, value meta-data to managed objects.

        :param tags: The tags of this SdwanRouterNode.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this SdwanRouterNode.
        The versioning info for this managed object.

        :return: The version_context of this SdwanRouterNode.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this SdwanRouterNode.
        The versioning info for this managed object.

        :param version_context: The version_context of this SdwanRouterNode.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this SdwanRouterNode.
        The array containing the MO references of the ancestors in the object containment hierarchy.

        :return: The ancestors of this SdwanRouterNode.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this SdwanRouterNode.
        The array containing the MO references of the ancestors in the object containment hierarchy.

        :param ancestors: The ancestors of this SdwanRouterNode.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this SdwanRouterNode.
        The direct ancestor of this managed object in the containment hierarchy.

        :return: The parent of this SdwanRouterNode.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this SdwanRouterNode.
        The direct ancestor of this managed object in the containment hierarchy.

        :param parent: The parent of this SdwanRouterNode.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this SdwanRouterNode.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.

        :return: The permission_resources of this SdwanRouterNode.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this SdwanRouterNode.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.

        :param permission_resources: The permission_resources of this SdwanRouterNode.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def device_template(self):
        """
        Gets the device_template of this SdwanRouterNode.
        Name of the Cisco vManage device template that the current device should be attached to. A device template consists of many feature templates that contain SD-WAN vEdge router configuration.

        :return: The device_template of this SdwanRouterNode.
        :rtype: str
        """
        return self._device_template

    @device_template.setter
    def device_template(self, device_template):
        """
        Sets the device_template of this SdwanRouterNode.
        Name of the Cisco vManage device template that the current device should be attached to. A device template consists of many feature templates that contain SD-WAN vEdge router configuration.

        :param device_template: The device_template of this SdwanRouterNode.
        :type: str
        """

        self._device_template = device_template

    @property
    def name(self):
        """
        Gets the name of this SdwanRouterNode.
        Name of the router node object.

        :return: The name of this SdwanRouterNode.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SdwanRouterNode.
        Name of the router node object.

        :param name: The name of this SdwanRouterNode.
        :type: str
        """

        self._name = name

    @property
    def network_configuration(self):
        """
        Gets the network_configuration of this SdwanRouterNode.
        The configuration required on the hypervisor for setting up SD-WAN networking.

        :return: The network_configuration of this SdwanRouterNode.
        :rtype: list[SdwanNetworkConfigurationType]
        """
        return self._network_configuration

    @network_configuration.setter
    def network_configuration(self, network_configuration):
        """
        Sets the network_configuration of this SdwanRouterNode.
        The configuration required on the hypervisor for setting up SD-WAN networking.

        :param network_configuration: The network_configuration of this SdwanRouterNode.
        :type: list[SdwanNetworkConfigurationType]
        """

        self._network_configuration = network_configuration

    @property
    def template_inputs(self):
        """
        Gets the template_inputs of this SdwanRouterNode.
        Dynamic inputs that are expected based on the template inputs specified in the feature templates attached to the device template.

        :return: The template_inputs of this SdwanRouterNode.
        :rtype: list[SdwanTemplateInputsType]
        """
        return self._template_inputs

    @template_inputs.setter
    def template_inputs(self, template_inputs):
        """
        Sets the template_inputs of this SdwanRouterNode.
        Dynamic inputs that are expected based on the template inputs specified in the feature templates attached to the device template.

        :param template_inputs: The template_inputs of this SdwanRouterNode.
        :type: list[SdwanTemplateInputsType]
        """

        self._template_inputs = template_inputs

    @property
    def uuid(self):
        """
        Gets the uuid of this SdwanRouterNode.
        Uniquely identifies the router by its chassis number.

        :return: The uuid of this SdwanRouterNode.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this SdwanRouterNode.
        Uniquely identifies the router by its chassis number.

        :param uuid: The uuid of this SdwanRouterNode.
        :type: str
        """

        self._uuid = uuid

    @property
    def organization(self):
        """
        Gets the organization of this SdwanRouterNode.
        Relationship to the Organization that owns the Managed Object.

        :return: The organization of this SdwanRouterNode.
        :rtype: OrganizationOrganizationRef
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this SdwanRouterNode.
        Relationship to the Organization that owns the Managed Object.

        :param organization: The organization of this SdwanRouterNode.
        :type: OrganizationOrganizationRef
        """

        self._organization = organization

    @property
    def profile(self):
        """
        Gets the profile of this SdwanRouterNode.
        Relationship to the SD-WAN profile object.

        :return: The profile of this SdwanRouterNode.
        :rtype: SdwanProfileRef
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """
        Sets the profile of this SdwanRouterNode.
        Relationship to the SD-WAN profile object.

        :param profile: The profile of this SdwanRouterNode.
        :type: SdwanProfileRef
        """

        self._profile = profile

    @property
    def server_node(self):
        """
        Gets the server_node of this SdwanRouterNode.
        Relationship to the server node on which vEdge router is to be provisioned.

        :return: The server_node of this SdwanRouterNode.
        :rtype: AssetDeviceRegistrationRef
        """
        return self._server_node

    @server_node.setter
    def server_node(self, server_node):
        """
        Sets the server_node of this SdwanRouterNode.
        Relationship to the server node on which vEdge router is to be provisioned.

        :param server_node: The server_node of this SdwanRouterNode.
        :type: AssetDeviceRegistrationRef
        """

        self._server_node = server_node

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SdwanRouterNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
