# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class EquipmentFanModule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'module_id': 'int',
        'oper_state': 'str',
        'part_number': 'str',
        'pid': 'str',
        'presence': 'str',
        'sku': 'str',
        'tray_id': 'int',
        'vid': 'str',
        'compute_rack_unit': 'ComputeRackUnit',
        'equipment_chassis': 'EquipmentChassis',
        'equipment_rack_enclosure': 'EquipmentRackEnclosure',
        'fans': 'list[EquipmentFan]',
        'network_element': 'NetworkElement',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'description': 'Description',
        'module_id': 'ModuleId',
        'oper_state': 'OperState',
        'part_number': 'PartNumber',
        'pid': 'Pid',
        'presence': 'Presence',
        'sku': 'Sku',
        'tray_id': 'TrayId',
        'vid': 'Vid',
        'compute_rack_unit': 'ComputeRackUnit',
        'equipment_chassis': 'EquipmentChassis',
        'equipment_rack_enclosure': 'EquipmentRackEnclosure',
        'fans': 'Fans',
        'network_element': 'NetworkElement',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 description=None,
                 module_id=None,
                 oper_state=None,
                 part_number=None,
                 pid=None,
                 presence=None,
                 sku=None,
                 tray_id=None,
                 vid=None,
                 compute_rack_unit=None,
                 equipment_chassis=None,
                 equipment_rack_enclosure=None,
                 fans=None,
                 network_element=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """EquipmentFanModule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._module_id = None
        self._oper_state = None
        self._part_number = None
        self._pid = None
        self._presence = None
        self._sku = None
        self._tray_id = None
        self._vid = None
        self._compute_rack_unit = None
        self._equipment_chassis = None
        self._equipment_rack_enclosure = None
        self._fans = None
        self._network_element = None
        self._registered_device = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if module_id is not None:
            self.module_id = module_id
        if oper_state is not None:
            self.oper_state = oper_state
        if part_number is not None:
            self.part_number = part_number
        if pid is not None:
            self.pid = pid
        if presence is not None:
            self.presence = presence
        if sku is not None:
            self.sku = sku
        if tray_id is not None:
            self.tray_id = tray_id
        if vid is not None:
            self.vid = vid
        if compute_rack_unit is not None:
            self.compute_rack_unit = compute_rack_unit
        if equipment_chassis is not None:
            self.equipment_chassis = equipment_chassis
        if equipment_rack_enclosure is not None:
            self.equipment_rack_enclosure = equipment_rack_enclosure
        if fans is not None:
            self.fans = fans
        if network_element is not None:
            self.network_element = network_element
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def description(self):
        """Gets the description of this EquipmentFanModule.  # noqa: E501

        This field is to provide description for the fan module.    # noqa: E501

        :return: The description of this EquipmentFanModule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EquipmentFanModule.

        This field is to provide description for the fan module.    # noqa: E501

        :param description: The description of this EquipmentFanModule.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def module_id(self):
        """Gets the module_id of this EquipmentFanModule.  # noqa: E501

        This field acts as the identifier for this particular Module, within the Fabric Interconnect.    # noqa: E501

        :return: The module_id of this EquipmentFanModule.  # noqa: E501
        :rtype: int
        """
        return self._module_id

    @module_id.setter
    def module_id(self, module_id):
        """Sets the module_id of this EquipmentFanModule.

        This field acts as the identifier for this particular Module, within the Fabric Interconnect.    # noqa: E501

        :param module_id: The module_id of this EquipmentFanModule.  # noqa: E501
        :type: int
        """

        self._module_id = module_id

    @property
    def oper_state(self):
        """Gets the oper_state of this EquipmentFanModule.  # noqa: E501

        This field is used to indicate this fan module's operational state.    # noqa: E501

        :return: The oper_state of this EquipmentFanModule.  # noqa: E501
        :rtype: str
        """
        return self._oper_state

    @oper_state.setter
    def oper_state(self, oper_state):
        """Sets the oper_state of this EquipmentFanModule.

        This field is used to indicate this fan module's operational state.    # noqa: E501

        :param oper_state: The oper_state of this EquipmentFanModule.  # noqa: E501
        :type: str
        """

        self._oper_state = oper_state

    @property
    def part_number(self):
        """Gets the part_number of this EquipmentFanModule.  # noqa: E501

        This field identifies the Part Number for this Fan Module.    # noqa: E501

        :return: The part_number of this EquipmentFanModule.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this EquipmentFanModule.

        This field identifies the Part Number for this Fan Module.    # noqa: E501

        :param part_number: The part_number of this EquipmentFanModule.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def pid(self):
        """Gets the pid of this EquipmentFanModule.  # noqa: E501

        This field identifies the Product ID for the fan module.    # noqa: E501

        :return: The pid of this EquipmentFanModule.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this EquipmentFanModule.

        This field identifies the Product ID for the fan module.    # noqa: E501

        :param pid: The pid of this EquipmentFanModule.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def presence(self):
        """Gets the presence of this EquipmentFanModule.  # noqa: E501

        This field is used to indicate this fan module's presence.    # noqa: E501

        :return: The presence of this EquipmentFanModule.  # noqa: E501
        :rtype: str
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """Sets the presence of this EquipmentFanModule.

        This field is used to indicate this fan module's presence.    # noqa: E501

        :param presence: The presence of this EquipmentFanModule.  # noqa: E501
        :type: str
        """

        self._presence = presence

    @property
    def sku(self):
        """Gets the sku of this EquipmentFanModule.  # noqa: E501

        This field identifies the Stockkeeping Unit for this Fan Module.    # noqa: E501

        :return: The sku of this EquipmentFanModule.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this EquipmentFanModule.

        This field identifies the Stockkeeping Unit for this Fan Module.    # noqa: E501

        :param sku: The sku of this EquipmentFanModule.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def tray_id(self):
        """Gets the tray_id of this EquipmentFanModule.  # noqa: E501

        Tray identifier for the fan module.    # noqa: E501

        :return: The tray_id of this EquipmentFanModule.  # noqa: E501
        :rtype: int
        """
        return self._tray_id

    @tray_id.setter
    def tray_id(self, tray_id):
        """Sets the tray_id of this EquipmentFanModule.

        Tray identifier for the fan module.    # noqa: E501

        :param tray_id: The tray_id of this EquipmentFanModule.  # noqa: E501
        :type: int
        """

        self._tray_id = tray_id

    @property
    def vid(self):
        """Gets the vid of this EquipmentFanModule.  # noqa: E501

        This field identifies the Vendor ID for this Fan Module.     # noqa: E501

        :return: The vid of this EquipmentFanModule.  # noqa: E501
        :rtype: str
        """
        return self._vid

    @vid.setter
    def vid(self, vid):
        """Sets the vid of this EquipmentFanModule.

        This field identifies the Vendor ID for this Fan Module.     # noqa: E501

        :param vid: The vid of this EquipmentFanModule.  # noqa: E501
        :type: str
        """

        self._vid = vid

    @property
    def compute_rack_unit(self):
        """Gets the compute_rack_unit of this EquipmentFanModule.  # noqa: E501


        :return: The compute_rack_unit of this EquipmentFanModule.  # noqa: E501
        :rtype: ComputeRackUnit
        """
        return self._compute_rack_unit

    @compute_rack_unit.setter
    def compute_rack_unit(self, compute_rack_unit):
        """Sets the compute_rack_unit of this EquipmentFanModule.


        :param compute_rack_unit: The compute_rack_unit of this EquipmentFanModule.  # noqa: E501
        :type: ComputeRackUnit
        """

        self._compute_rack_unit = compute_rack_unit

    @property
    def equipment_chassis(self):
        """Gets the equipment_chassis of this EquipmentFanModule.  # noqa: E501


        :return: The equipment_chassis of this EquipmentFanModule.  # noqa: E501
        :rtype: EquipmentChassis
        """
        return self._equipment_chassis

    @equipment_chassis.setter
    def equipment_chassis(self, equipment_chassis):
        """Sets the equipment_chassis of this EquipmentFanModule.


        :param equipment_chassis: The equipment_chassis of this EquipmentFanModule.  # noqa: E501
        :type: EquipmentChassis
        """

        self._equipment_chassis = equipment_chassis

    @property
    def equipment_rack_enclosure(self):
        """Gets the equipment_rack_enclosure of this EquipmentFanModule.  # noqa: E501


        :return: The equipment_rack_enclosure of this EquipmentFanModule.  # noqa: E501
        :rtype: EquipmentRackEnclosure
        """
        return self._equipment_rack_enclosure

    @equipment_rack_enclosure.setter
    def equipment_rack_enclosure(self, equipment_rack_enclosure):
        """Sets the equipment_rack_enclosure of this EquipmentFanModule.


        :param equipment_rack_enclosure: The equipment_rack_enclosure of this EquipmentFanModule.  # noqa: E501
        :type: EquipmentRackEnclosure
        """

        self._equipment_rack_enclosure = equipment_rack_enclosure

    @property
    def fans(self):
        """Gets the fans of this EquipmentFanModule.  # noqa: E501

        A reference to a equipmentFan resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The fans of this EquipmentFanModule.  # noqa: E501
        :rtype: list[EquipmentFan]
        """
        return self._fans

    @fans.setter
    def fans(self, fans):
        """Sets the fans of this EquipmentFanModule.

        A reference to a equipmentFan resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param fans: The fans of this EquipmentFanModule.  # noqa: E501
        :type: list[EquipmentFan]
        """

        self._fans = fans

    @property
    def network_element(self):
        """Gets the network_element of this EquipmentFanModule.  # noqa: E501


        :return: The network_element of this EquipmentFanModule.  # noqa: E501
        :rtype: NetworkElement
        """
        return self._network_element

    @network_element.setter
    def network_element(self, network_element):
        """Sets the network_element of this EquipmentFanModule.


        :param network_element: The network_element of this EquipmentFanModule.  # noqa: E501
        :type: NetworkElement
        """

        self._network_element = network_element

    @property
    def registered_device(self):
        """Gets the registered_device of this EquipmentFanModule.  # noqa: E501


        :return: The registered_device of this EquipmentFanModule.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this EquipmentFanModule.


        :param registered_device: The registered_device of this EquipmentFanModule.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EquipmentFanModule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EquipmentFanModule):
            return True

        return self.to_dict() != other.to_dict()
