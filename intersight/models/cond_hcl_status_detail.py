# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1415
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CondHclStatusDetail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoOptionalTag]',
        'version_context': 'MoOptionalVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'hardware_status': 'str',
        'hcl_cimc_version': 'str',
        'hcl_driver_name': 'str',
        'hcl_driver_version': 'str',
        'hcl_firmware_version': 'str',
        'hcl_model': 'str',
        'inv_cimc_version': 'str',
        'inv_driver_name': 'str',
        'inv_driver_version': 'str',
        'inv_firmware_version': 'str',
        'inv_model': 'str',
        'reason': 'str',
        'software_status': 'str',
        'status': 'str',
        'component': 'InventoryBaseRef',
        'hcl_status': 'CondHclStatusRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'hardware_status': 'HardwareStatus',
        'hcl_cimc_version': 'HclCimcVersion',
        'hcl_driver_name': 'HclDriverName',
        'hcl_driver_version': 'HclDriverVersion',
        'hcl_firmware_version': 'HclFirmwareVersion',
        'hcl_model': 'HclModel',
        'inv_cimc_version': 'InvCimcVersion',
        'inv_driver_name': 'InvDriverName',
        'inv_driver_version': 'InvDriverVersion',
        'inv_firmware_version': 'InvFirmwareVersion',
        'inv_model': 'InvModel',
        'reason': 'Reason',
        'software_status': 'SoftwareStatus',
        'status': 'Status',
        'component': 'Component',
        'hcl_status': 'HclStatus'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, hardware_status='Missing-Os-Driver-Info', hcl_cimc_version=None, hcl_driver_name=None, hcl_driver_version=None, hcl_firmware_version=None, hcl_model=None, inv_cimc_version=None, inv_driver_name=None, inv_driver_version=None, inv_firmware_version=None, inv_model=None, reason='Missing-Os-Driver-Info', software_status='Missing-Os-Driver-Info', status='Incomplete', component=None, hcl_status=None):
        """
        CondHclStatusDetail - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._hardware_status = None
        self._hcl_cimc_version = None
        self._hcl_driver_name = None
        self._hcl_driver_version = None
        self._hcl_firmware_version = None
        self._hcl_model = None
        self._inv_cimc_version = None
        self._inv_driver_name = None
        self._inv_driver_version = None
        self._inv_firmware_version = None
        self._inv_model = None
        self._reason = None
        self._software_status = None
        self._status = None
        self._component = None
        self._hcl_status = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if hardware_status is not None:
          self.hardware_status = hardware_status
        if hcl_cimc_version is not None:
          self.hcl_cimc_version = hcl_cimc_version
        if hcl_driver_name is not None:
          self.hcl_driver_name = hcl_driver_name
        if hcl_driver_version is not None:
          self.hcl_driver_version = hcl_driver_version
        if hcl_firmware_version is not None:
          self.hcl_firmware_version = hcl_firmware_version
        if hcl_model is not None:
          self.hcl_model = hcl_model
        if inv_cimc_version is not None:
          self.inv_cimc_version = inv_cimc_version
        if inv_driver_name is not None:
          self.inv_driver_name = inv_driver_name
        if inv_driver_version is not None:
          self.inv_driver_version = inv_driver_version
        if inv_firmware_version is not None:
          self.inv_firmware_version = inv_firmware_version
        if inv_model is not None:
          self.inv_model = inv_model
        if reason is not None:
          self.reason = reason
        if software_status is not None:
          self.software_status = software_status
        if status is not None:
          self.status = status
        if component is not None:
          self.component = component
        if hcl_status is not None:
          self.hcl_status = hcl_status

    @property
    def account_moid(self):
        """
        Gets the account_moid of this CondHclStatusDetail.
        The Account ID for this managed object.  

        :return: The account_moid of this CondHclStatusDetail.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this CondHclStatusDetail.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this CondHclStatusDetail.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this CondHclStatusDetail.
        The time when this managed object was created.  

        :return: The create_time of this CondHclStatusDetail.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this CondHclStatusDetail.
        The time when this managed object was created.  

        :param create_time: The create_time of this CondHclStatusDetail.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this CondHclStatusDetail.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this CondHclStatusDetail.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this CondHclStatusDetail.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this CondHclStatusDetail.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this CondHclStatusDetail.
        The time when this managed object was last modified.  

        :return: The mod_time of this CondHclStatusDetail.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this CondHclStatusDetail.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this CondHclStatusDetail.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this CondHclStatusDetail.
        The unique identifier of this Managed Object instance.   

        :return: The moid of this CondHclStatusDetail.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this CondHclStatusDetail.
        The unique identifier of this Managed Object instance.   

        :param moid: The moid of this CondHclStatusDetail.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this CondHclStatusDetail.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :return: The object_type of this CondHclStatusDetail.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this CondHclStatusDetail.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :param object_type: The object_type of this CondHclStatusDetail.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this CondHclStatusDetail.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this CondHclStatusDetail.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this CondHclStatusDetail.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this CondHclStatusDetail.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this CondHclStatusDetail.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this CondHclStatusDetail.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this CondHclStatusDetail.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this CondHclStatusDetail.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this CondHclStatusDetail.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this CondHclStatusDetail.
        :rtype: list[MoOptionalTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this CondHclStatusDetail.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this CondHclStatusDetail.
        :type: list[MoOptionalTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this CondHclStatusDetail.
        The versioning info for this managed object.   

        :return: The version_context of this CondHclStatusDetail.
        :rtype: MoOptionalVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this CondHclStatusDetail.
        The versioning info for this managed object.   

        :param version_context: The version_context of this CondHclStatusDetail.
        :type: MoOptionalVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this CondHclStatusDetail.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this CondHclStatusDetail.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this CondHclStatusDetail.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this CondHclStatusDetail.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this CondHclStatusDetail.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this CondHclStatusDetail.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this CondHclStatusDetail.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this CondHclStatusDetail.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this CondHclStatusDetail.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :return: The permission_resources of this CondHclStatusDetail.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this CondHclStatusDetail.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :param permission_resources: The permission_resources of this CondHclStatusDetail.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def hardware_status(self):
        """
        Gets the hardware_status of this CondHclStatusDetail.
        The model is considered as part of the hardware profile for the component. This will provide the HCL validation status for the hardware profile. The reasons can be one of the following \"Incompatible-Server-With-Component\" - the server model and component combination is not listed in HCL \"Incompatible-Firmware\" - The server's firmware is not listed for this component's hardware profile \"Incompatible-Component\" - the component's model is not listed in the HCL \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Not-Evaluated\" - the hardware profile was not evaulated for the component because the server's hw/sw status is not listed or server is exempted. \"Compatible\" - this component's hardware profile is listed in the HCL.  

        :return: The hardware_status of this CondHclStatusDetail.
        :rtype: str
        """
        return self._hardware_status

    @hardware_status.setter
    def hardware_status(self, hardware_status):
        """
        Sets the hardware_status of this CondHclStatusDetail.
        The model is considered as part of the hardware profile for the component. This will provide the HCL validation status for the hardware profile. The reasons can be one of the following \"Incompatible-Server-With-Component\" - the server model and component combination is not listed in HCL \"Incompatible-Firmware\" - The server's firmware is not listed for this component's hardware profile \"Incompatible-Component\" - the component's model is not listed in the HCL \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Not-Evaluated\" - the hardware profile was not evaulated for the component because the server's hw/sw status is not listed or server is exempted. \"Compatible\" - this component's hardware profile is listed in the HCL.  

        :param hardware_status: The hardware_status of this CondHclStatusDetail.
        :type: str
        """
        allowed_values = ["Missing-Os-Driver-Info", "Incompatible-Server-With-Component", "Incompatible-Processor", "Incompatible-Os-Info", "Incompatible-Component-Model", "Incompatible-Firmware", "Incompatible-Driver", "Incompatible-Firmware-Driver", "Service-Unavailable", "Service-Error", "Unrecognized-Protocol", "Not-Evaluated", "Compatible"]
        if hardware_status not in allowed_values:
            raise ValueError(
                "Invalid value for `hardware_status` ({0}), must be one of {1}"
                .format(hardware_status, allowed_values)
            )

        self._hardware_status = hardware_status

    @property
    def hcl_cimc_version(self):
        """
        Gets the hcl_cimc_version of this CondHclStatusDetail.
        The current CIMC version for the server normalized for querying HCL data.  

        :return: The hcl_cimc_version of this CondHclStatusDetail.
        :rtype: str
        """
        return self._hcl_cimc_version

    @hcl_cimc_version.setter
    def hcl_cimc_version(self, hcl_cimc_version):
        """
        Sets the hcl_cimc_version of this CondHclStatusDetail.
        The current CIMC version for the server normalized for querying HCL data.  

        :param hcl_cimc_version: The hcl_cimc_version of this CondHclStatusDetail.
        :type: str
        """

        self._hcl_cimc_version = hcl_cimc_version

    @property
    def hcl_driver_name(self):
        """
        Gets the hcl_driver_name of this CondHclStatusDetail.
        The current driver name of the component we are validating normalized for querying HCL data.  

        :return: The hcl_driver_name of this CondHclStatusDetail.
        :rtype: str
        """
        return self._hcl_driver_name

    @hcl_driver_name.setter
    def hcl_driver_name(self, hcl_driver_name):
        """
        Sets the hcl_driver_name of this CondHclStatusDetail.
        The current driver name of the component we are validating normalized for querying HCL data.  

        :param hcl_driver_name: The hcl_driver_name of this CondHclStatusDetail.
        :type: str
        """

        self._hcl_driver_name = hcl_driver_name

    @property
    def hcl_driver_version(self):
        """
        Gets the hcl_driver_version of this CondHclStatusDetail.
        The current driver version of the component we are validating normalized for querying HCL data.  

        :return: The hcl_driver_version of this CondHclStatusDetail.
        :rtype: str
        """
        return self._hcl_driver_version

    @hcl_driver_version.setter
    def hcl_driver_version(self, hcl_driver_version):
        """
        Sets the hcl_driver_version of this CondHclStatusDetail.
        The current driver version of the component we are validating normalized for querying HCL data.  

        :param hcl_driver_version: The hcl_driver_version of this CondHclStatusDetail.
        :type: str
        """

        self._hcl_driver_version = hcl_driver_version

    @property
    def hcl_firmware_version(self):
        """
        Gets the hcl_firmware_version of this CondHclStatusDetail.
        The current firmware version of the component model normalized for querying HCL data.  

        :return: The hcl_firmware_version of this CondHclStatusDetail.
        :rtype: str
        """
        return self._hcl_firmware_version

    @hcl_firmware_version.setter
    def hcl_firmware_version(self, hcl_firmware_version):
        """
        Sets the hcl_firmware_version of this CondHclStatusDetail.
        The current firmware version of the component model normalized for querying HCL data.  

        :param hcl_firmware_version: The hcl_firmware_version of this CondHclStatusDetail.
        :type: str
        """

        self._hcl_firmware_version = hcl_firmware_version

    @property
    def hcl_model(self):
        """
        Gets the hcl_model of this CondHclStatusDetail.
        The component model we are trying to validate normalized for querying HCL data.  

        :return: The hcl_model of this CondHclStatusDetail.
        :rtype: str
        """
        return self._hcl_model

    @hcl_model.setter
    def hcl_model(self, hcl_model):
        """
        Sets the hcl_model of this CondHclStatusDetail.
        The component model we are trying to validate normalized for querying HCL data.  

        :param hcl_model: The hcl_model of this CondHclStatusDetail.
        :type: str
        """

        self._hcl_model = hcl_model

    @property
    def inv_cimc_version(self):
        """
        Gets the inv_cimc_version of this CondHclStatusDetail.
        The current CIMC version for the server as received from inventory.  

        :return: The inv_cimc_version of this CondHclStatusDetail.
        :rtype: str
        """
        return self._inv_cimc_version

    @inv_cimc_version.setter
    def inv_cimc_version(self, inv_cimc_version):
        """
        Sets the inv_cimc_version of this CondHclStatusDetail.
        The current CIMC version for the server as received from inventory.  

        :param inv_cimc_version: The inv_cimc_version of this CondHclStatusDetail.
        :type: str
        """

        self._inv_cimc_version = inv_cimc_version

    @property
    def inv_driver_name(self):
        """
        Gets the inv_driver_name of this CondHclStatusDetail.
        The current driver name of the component we are validating as received from inventory.  

        :return: The inv_driver_name of this CondHclStatusDetail.
        :rtype: str
        """
        return self._inv_driver_name

    @inv_driver_name.setter
    def inv_driver_name(self, inv_driver_name):
        """
        Sets the inv_driver_name of this CondHclStatusDetail.
        The current driver name of the component we are validating as received from inventory.  

        :param inv_driver_name: The inv_driver_name of this CondHclStatusDetail.
        :type: str
        """

        self._inv_driver_name = inv_driver_name

    @property
    def inv_driver_version(self):
        """
        Gets the inv_driver_version of this CondHclStatusDetail.
        The current driver version of the component we are validating as received from inventory.  

        :return: The inv_driver_version of this CondHclStatusDetail.
        :rtype: str
        """
        return self._inv_driver_version

    @inv_driver_version.setter
    def inv_driver_version(self, inv_driver_version):
        """
        Sets the inv_driver_version of this CondHclStatusDetail.
        The current driver version of the component we are validating as received from inventory.  

        :param inv_driver_version: The inv_driver_version of this CondHclStatusDetail.
        :type: str
        """

        self._inv_driver_version = inv_driver_version

    @property
    def inv_firmware_version(self):
        """
        Gets the inv_firmware_version of this CondHclStatusDetail.
        The current firmware version of the component model as received from inventory.  

        :return: The inv_firmware_version of this CondHclStatusDetail.
        :rtype: str
        """
        return self._inv_firmware_version

    @inv_firmware_version.setter
    def inv_firmware_version(self, inv_firmware_version):
        """
        Sets the inv_firmware_version of this CondHclStatusDetail.
        The current firmware version of the component model as received from inventory.  

        :param inv_firmware_version: The inv_firmware_version of this CondHclStatusDetail.
        :type: str
        """

        self._inv_firmware_version = inv_firmware_version

    @property
    def inv_model(self):
        """
        Gets the inv_model of this CondHclStatusDetail.
        The component model we are trying to validate as received from inventory.  

        :return: The inv_model of this CondHclStatusDetail.
        :rtype: str
        """
        return self._inv_model

    @inv_model.setter
    def inv_model(self, inv_model):
        """
        Sets the inv_model of this CondHclStatusDetail.
        The component model we are trying to validate as received from inventory.  

        :param inv_model: The inv_model of this CondHclStatusDetail.
        :type: str
        """

        self._inv_model = inv_model

    @property
    def reason(self):
        """
        Gets the reason of this CondHclStatusDetail.
        The reason for the status. The reason can be one of \"Incompatible-Server-With-Component\" - HCL validation has failed because the server model is not validated with this component \"Incompatible-Processor\" - HCL validation has failed because the processor is not validated with this server \"Incompatible-Os-Info\" - HCL validation has failed because the os vendor and version is not validated with this server \"Incompatible-Component-Model\" - HCL validation has failed because the component model is not validated \"Incompatible-Firmware\" - HCL validation has failed because the component or server firmware version is not validated \"Incompatible-Driver\" - HCL validation has failed because the driver version is not validated \"Incompatible-Firmware-Driver\" - HCL validation has failed because the firmware version and driver version is not validated \"Missing-Os-Driver-Info\" - HCL validation was not performed because we are missing os driver information form the inventory \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Service-Error\" - HCL data service is available but an error occured when making the request or parsing the response \"Unrecognized-Protocol\" - This service does not recognize the reason code in the response from the HCL data service \"Compatible\" - this component's inventory data has \"Validated\" status with the HCL. \"Not-Evaluated\" - The component is not evaluated against the HCL because the server is exempted.  

        :return: The reason of this CondHclStatusDetail.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """
        Sets the reason of this CondHclStatusDetail.
        The reason for the status. The reason can be one of \"Incompatible-Server-With-Component\" - HCL validation has failed because the server model is not validated with this component \"Incompatible-Processor\" - HCL validation has failed because the processor is not validated with this server \"Incompatible-Os-Info\" - HCL validation has failed because the os vendor and version is not validated with this server \"Incompatible-Component-Model\" - HCL validation has failed because the component model is not validated \"Incompatible-Firmware\" - HCL validation has failed because the component or server firmware version is not validated \"Incompatible-Driver\" - HCL validation has failed because the driver version is not validated \"Incompatible-Firmware-Driver\" - HCL validation has failed because the firmware version and driver version is not validated \"Missing-Os-Driver-Info\" - HCL validation was not performed because we are missing os driver information form the inventory \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Service-Error\" - HCL data service is available but an error occured when making the request or parsing the response \"Unrecognized-Protocol\" - This service does not recognize the reason code in the response from the HCL data service \"Compatible\" - this component's inventory data has \"Validated\" status with the HCL. \"Not-Evaluated\" - The component is not evaluated against the HCL because the server is exempted.  

        :param reason: The reason of this CondHclStatusDetail.
        :type: str
        """
        allowed_values = ["Missing-Os-Driver-Info", "Incompatible-Server-With-Component", "Incompatible-Processor", "Incompatible-Os-Info", "Incompatible-Component-Model", "Incompatible-Firmware", "Incompatible-Driver", "Incompatible-Firmware-Driver", "Service-Unavailable", "Service-Error", "Unrecognized-Protocol", "Not-Evaluated", "Compatible"]
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def software_status(self):
        """
        Gets the software_status of this CondHclStatusDetail.
        The firmware, driver name and driver version are considered as part of the software profile for the component. This will provide the HCL validation status for the software profile. The reasons can be one of the following \"Incompatible-Firmware\" - the component's firmware is not listed under the server's hardware and software profile and the component's hardware profile \"Incompatible-Driver\" - the component's driver is not listed under the server's hardware and software profile and the component's hardware profile \"Incompatible-Firmware-Driver\" - the component's firmware and driver are not listed under the server's hardware and software profile and the component's hardware profile \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Not-Evaluated\" - the component's hardware status was not evaluated because the server's hardware or software profile is not listed or server is exempted. \"Compatible\" - this component's hardware profile is listed in the HCL.  

        :return: The software_status of this CondHclStatusDetail.
        :rtype: str
        """
        return self._software_status

    @software_status.setter
    def software_status(self, software_status):
        """
        Sets the software_status of this CondHclStatusDetail.
        The firmware, driver name and driver version are considered as part of the software profile for the component. This will provide the HCL validation status for the software profile. The reasons can be one of the following \"Incompatible-Firmware\" - the component's firmware is not listed under the server's hardware and software profile and the component's hardware profile \"Incompatible-Driver\" - the component's driver is not listed under the server's hardware and software profile and the component's hardware profile \"Incompatible-Firmware-Driver\" - the component's firmware and driver are not listed under the server's hardware and software profile and the component's hardware profile \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Not-Evaluated\" - the component's hardware status was not evaluated because the server's hardware or software profile is not listed or server is exempted. \"Compatible\" - this component's hardware profile is listed in the HCL.  

        :param software_status: The software_status of this CondHclStatusDetail.
        :type: str
        """
        allowed_values = ["Missing-Os-Driver-Info", "Incompatible-Server-With-Component", "Incompatible-Processor", "Incompatible-Os-Info", "Incompatible-Component-Model", "Incompatible-Firmware", "Incompatible-Driver", "Incompatible-Firmware-Driver", "Service-Unavailable", "Service-Error", "Unrecognized-Protocol", "Not-Evaluated", "Compatible"]
        if software_status not in allowed_values:
            raise ValueError(
                "Invalid value for `software_status` ({0}), must be one of {1}"
                .format(software_status, allowed_values)
            )

        self._software_status = software_status

    @property
    def status(self):
        """
        Gets the status of this CondHclStatusDetail.
        The status for the component model, firmware version, driver name, and driver version after validating against the HCL. The status can be one of the following \"Unknown\" - we do not have enough information to evaluate against the HCL data \"Validated\" - we have validated this component against the HCL and it has \"Validated\" status \"Not-Validated\" - we have validated this component against the HCL and it has \"Not-Validated\" status. \"Not-Evaluated\" - The component is not evaluated against the HCL because the server is exempted.   

        :return: The status of this CondHclStatusDetail.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this CondHclStatusDetail.
        The status for the component model, firmware version, driver name, and driver version after validating against the HCL. The status can be one of the following \"Unknown\" - we do not have enough information to evaluate against the HCL data \"Validated\" - we have validated this component against the HCL and it has \"Validated\" status \"Not-Validated\" - we have validated this component against the HCL and it has \"Not-Validated\" status. \"Not-Evaluated\" - The component is not evaluated against the HCL because the server is exempted.   

        :param status: The status of this CondHclStatusDetail.
        :type: str
        """
        allowed_values = ["Incomplete", "Not-Found", "Not-Listed", "Validated", "Not-Evaluated"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def component(self):
        """
        Gets the component of this CondHclStatusDetail.
        The related component associated to this status detail HclStatusDetail (adapter or storage controller). 

        :return: The component of this CondHclStatusDetail.
        :rtype: InventoryBaseRef
        """
        return self._component

    @component.setter
    def component(self, component):
        """
        Sets the component of this CondHclStatusDetail.
        The related component associated to this status detail HclStatusDetail (adapter or storage controller). 

        :param component: The component of this CondHclStatusDetail.
        :type: InventoryBaseRef
        """

        self._component = component

    @property
    def hcl_status(self):
        """
        Gets the hcl_status of this CondHclStatusDetail.
        A collection of references to the [cond.HclStatus](mo://cond.HclStatus) Managed Object.  When this managed object is deleted, the referenced [cond.HclStatus](mo://cond.HclStatus) MO unsets its reference to this deleted MO. 

        :return: The hcl_status of this CondHclStatusDetail.
        :rtype: CondHclStatusRef
        """
        return self._hcl_status

    @hcl_status.setter
    def hcl_status(self, hcl_status):
        """
        Sets the hcl_status of this CondHclStatusDetail.
        A collection of references to the [cond.HclStatus](mo://cond.HclStatus) Managed Object.  When this managed object is deleted, the referenced [cond.HclStatus](mo://cond.HclStatus) MO unsets its reference to this deleted MO. 

        :param hcl_status: The hcl_status of this CondHclStatusDetail.
        :type: CondHclStatusRef
        """

        self._hcl_status = hcl_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CondHclStatusDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
