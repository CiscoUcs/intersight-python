# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class EquipmentTpmAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'activation_status': 'str',
        'admin_state': 'str',
        'ownership': 'str',
        'presence': 'str',
        'tpm_id': 'int',
        'version': 'str',
        'compute_board': 'ComputeBoard',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'activation_status': 'ActivationStatus',
        'admin_state': 'AdminState',
        'ownership': 'Ownership',
        'presence': 'Presence',
        'tpm_id': 'TpmId',
        'version': 'Version',
        'compute_board': 'ComputeBoard',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 activation_status=None,
                 admin_state=None,
                 ownership=None,
                 presence=None,
                 tpm_id=None,
                 version=None,
                 compute_board=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """EquipmentTpmAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._activation_status = None
        self._admin_state = None
        self._ownership = None
        self._presence = None
        self._tpm_id = None
        self._version = None
        self._compute_board = None
        self._registered_device = None
        self.discriminator = None

        if activation_status is not None:
            self.activation_status = activation_status
        if admin_state is not None:
            self.admin_state = admin_state
        if ownership is not None:
            self.ownership = ownership
        if presence is not None:
            self.presence = presence
        if tpm_id is not None:
            self.tpm_id = tpm_id
        if version is not None:
            self.version = version
        if compute_board is not None:
            self.compute_board = compute_board
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def activation_status(self):
        """Gets the activation_status of this EquipmentTpmAllOf.  # noqa: E501


        :return: The activation_status of this EquipmentTpmAllOf.  # noqa: E501
        :rtype: str
        """
        return self._activation_status

    @activation_status.setter
    def activation_status(self, activation_status):
        """Sets the activation_status of this EquipmentTpmAllOf.


        :param activation_status: The activation_status of this EquipmentTpmAllOf.  # noqa: E501
        :type: str
        """

        self._activation_status = activation_status

    @property
    def admin_state(self):
        """Gets the admin_state of this EquipmentTpmAllOf.  # noqa: E501


        :return: The admin_state of this EquipmentTpmAllOf.  # noqa: E501
        :rtype: str
        """
        return self._admin_state

    @admin_state.setter
    def admin_state(self, admin_state):
        """Sets the admin_state of this EquipmentTpmAllOf.


        :param admin_state: The admin_state of this EquipmentTpmAllOf.  # noqa: E501
        :type: str
        """

        self._admin_state = admin_state

    @property
    def ownership(self):
        """Gets the ownership of this EquipmentTpmAllOf.  # noqa: E501

        Identifies the ownership information of the TPM.    # noqa: E501

        :return: The ownership of this EquipmentTpmAllOf.  # noqa: E501
        :rtype: str
        """
        return self._ownership

    @ownership.setter
    def ownership(self, ownership):
        """Sets the ownership of this EquipmentTpmAllOf.

        Identifies the ownership information of the TPM.    # noqa: E501

        :param ownership: The ownership of this EquipmentTpmAllOf.  # noqa: E501
        :type: str
        """

        self._ownership = ownership

    @property
    def presence(self):
        """Gets the presence of this EquipmentTpmAllOf.  # noqa: E501

        Identifies the presence of the trusted platform module.    # noqa: E501

        :return: The presence of this EquipmentTpmAllOf.  # noqa: E501
        :rtype: str
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """Sets the presence of this EquipmentTpmAllOf.

        Identifies the presence of the trusted platform module.    # noqa: E501

        :param presence: The presence of this EquipmentTpmAllOf.  # noqa: E501
        :type: str
        """

        self._presence = presence

    @property
    def tpm_id(self):
        """Gets the tpm_id of this EquipmentTpmAllOf.  # noqa: E501


        :return: The tpm_id of this EquipmentTpmAllOf.  # noqa: E501
        :rtype: int
        """
        return self._tpm_id

    @tpm_id.setter
    def tpm_id(self, tpm_id):
        """Sets the tpm_id of this EquipmentTpmAllOf.


        :param tpm_id: The tpm_id of this EquipmentTpmAllOf.  # noqa: E501
        :type: int
        """

        self._tpm_id = tpm_id

    @property
    def version(self):
        """Gets the version of this EquipmentTpmAllOf.  # noqa: E501


        :return: The version of this EquipmentTpmAllOf.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EquipmentTpmAllOf.


        :param version: The version of this EquipmentTpmAllOf.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def compute_board(self):
        """Gets the compute_board of this EquipmentTpmAllOf.  # noqa: E501


        :return: The compute_board of this EquipmentTpmAllOf.  # noqa: E501
        :rtype: ComputeBoard
        """
        return self._compute_board

    @compute_board.setter
    def compute_board(self, compute_board):
        """Sets the compute_board of this EquipmentTpmAllOf.


        :param compute_board: The compute_board of this EquipmentTpmAllOf.  # noqa: E501
        :type: ComputeBoard
        """

        self._compute_board = compute_board

    @property
    def registered_device(self):
        """Gets the registered_device of this EquipmentTpmAllOf.  # noqa: E501


        :return: The registered_device of this EquipmentTpmAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this EquipmentTpmAllOf.


        :param registered_device: The registered_device of this EquipmentTpmAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EquipmentTpmAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EquipmentTpmAllOf):
            return True

        return self.to_dict() != other.to_dict()
