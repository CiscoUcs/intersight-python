# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1461
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorkflowWaitTaskPrompt(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'description': 'str',
        'label': 'str',
        'name': 'str',
        'task_status': 'str'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'description': 'Description',
        'label': 'Label',
        'name': 'Name',
        'task_status': 'TaskStatus'
    }

    def __init__(self, object_type=None, description=None, label=None, name=None, task_status='Scheduled'):
        """
        WorkflowWaitTaskPrompt - a model defined in Swagger
        """

        self._object_type = None
        self._description = None
        self._label = None
        self._name = None
        self._task_status = None

        if object_type is not None:
          self.object_type = object_type
        if description is not None:
          self.description = description
        if label is not None:
          self.label = label
        if name is not None:
          self.name = name
        if task_status is not None:
          self.task_status = task_status

    @property
    def object_type(self):
        """
        Gets the object_type of this WorkflowWaitTaskPrompt.
        The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.

        :return: The object_type of this WorkflowWaitTaskPrompt.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this WorkflowWaitTaskPrompt.
        The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.

        :param object_type: The object_type of this WorkflowWaitTaskPrompt.
        :type: str
        """

        self._object_type = object_type

    @property
    def description(self):
        """
        Gets the description of this WorkflowWaitTaskPrompt.
        Description that give more details about what it means to pick this prompt option for the wait task.

        :return: The description of this WorkflowWaitTaskPrompt.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this WorkflowWaitTaskPrompt.
        Description that give more details about what it means to pick this prompt option for the wait task.

        :param description: The description of this WorkflowWaitTaskPrompt.
        :type: str
        """

        self._description = description

    @property
    def label(self):
        """
        Gets the label of this WorkflowWaitTaskPrompt.
        User friendly label for the prompt. This label will be shown to the user as one of available options for the wait task.

        :return: The label of this WorkflowWaitTaskPrompt.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this WorkflowWaitTaskPrompt.
        User friendly label for the prompt. This label will be shown to the user as one of available options for the wait task.

        :param label: The label of this WorkflowWaitTaskPrompt.
        :type: str
        """

        self._label = label

    @property
    def name(self):
        """
        Gets the name of this WorkflowWaitTaskPrompt.
        Name for the wait prompt.

        :return: The name of this WorkflowWaitTaskPrompt.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WorkflowWaitTaskPrompt.
        Name for the wait prompt.

        :param name: The name of this WorkflowWaitTaskPrompt.
        :type: str
        """

        self._name = name

    @property
    def task_status(self):
        """
        Gets the task_status of this WorkflowWaitTaskPrompt.
        Task status for the wait task when this prompt option is selected.

        :return: The task_status of this WorkflowWaitTaskPrompt.
        :rtype: str
        """
        return self._task_status

    @task_status.setter
    def task_status(self, task_status):
        """
        Sets the task_status of this WorkflowWaitTaskPrompt.
        Task status for the wait task when this prompt option is selected.

        :param task_status: The task_status of this WorkflowWaitTaskPrompt.
        :type: str
        """
        allowed_values = ["Scheduled", "InProgress", "NoOp", "Timeout", "Completed", "Failed"]
        if task_status not in allowed_values:
            raise ValueError(
                "Invalid value for `task_status` ({0}), must be one of {1}"
                .format(task_status, allowed_values)
            )

        self._task_status = task_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkflowWaitTaskPrompt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
