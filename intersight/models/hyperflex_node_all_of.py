# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class HyperflexNodeAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'build_number': 'str',
        'display_version': 'str',
        'host_name': 'str',
        'hypervisor': 'str',
        'identity': 'HyperflexHxUuIdDt',
        'ip': 'HyperflexHxNetworkAddressDt',
        'lockdown': 'bool',
        'model_number': 'str',
        'role': 'str',
        'serial_number': 'str',
        'status': 'str',
        'version': 'str',
        'cluster': 'HyperflexCluster',
        'cluster_member': 'AssetClusterMember',
        'physical_server': 'ComputePhysical'
    }

    attribute_map = {
        'build_number': 'BuildNumber',
        'display_version': 'DisplayVersion',
        'host_name': 'HostName',
        'hypervisor': 'Hypervisor',
        'identity': 'Identity',
        'ip': 'Ip',
        'lockdown': 'Lockdown',
        'model_number': 'ModelNumber',
        'role': 'Role',
        'serial_number': 'SerialNumber',
        'status': 'Status',
        'version': 'Version',
        'cluster': 'Cluster',
        'cluster_member': 'ClusterMember',
        'physical_server': 'PhysicalServer'
    }

    def __init__(self,
                 build_number=None,
                 display_version=None,
                 host_name=None,
                 hypervisor=None,
                 identity=None,
                 ip=None,
                 lockdown=None,
                 model_number=None,
                 role='UNKNOWN',
                 serial_number=None,
                 status='UNKNOWN',
                 version=None,
                 cluster=None,
                 cluster_member=None,
                 physical_server=None,
                 local_vars_configuration=None):  # noqa: E501
        """HyperflexNodeAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._build_number = None
        self._display_version = None
        self._host_name = None
        self._hypervisor = None
        self._identity = None
        self._ip = None
        self._lockdown = None
        self._model_number = None
        self._role = None
        self._serial_number = None
        self._status = None
        self._version = None
        self._cluster = None
        self._cluster_member = None
        self._physical_server = None
        self.discriminator = None

        if build_number is not None:
            self.build_number = build_number
        if display_version is not None:
            self.display_version = display_version
        if host_name is not None:
            self.host_name = host_name
        if hypervisor is not None:
            self.hypervisor = hypervisor
        if identity is not None:
            self.identity = identity
        if ip is not None:
            self.ip = ip
        if lockdown is not None:
            self.lockdown = lockdown
        if model_number is not None:
            self.model_number = model_number
        if role is not None:
            self.role = role
        if serial_number is not None:
            self.serial_number = serial_number
        if status is not None:
            self.status = status
        if version is not None:
            self.version = version
        if cluster is not None:
            self.cluster = cluster
        if cluster_member is not None:
            self.cluster_member = cluster_member
        if physical_server is not None:
            self.physical_server = physical_server

    @property
    def build_number(self):
        """Gets the build_number of this HyperflexNodeAllOf.  # noqa: E501


        :return: The build_number of this HyperflexNodeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._build_number

    @build_number.setter
    def build_number(self, build_number):
        """Sets the build_number of this HyperflexNodeAllOf.


        :param build_number: The build_number of this HyperflexNodeAllOf.  # noqa: E501
        :type: str
        """

        self._build_number = build_number

    @property
    def display_version(self):
        """Gets the display_version of this HyperflexNodeAllOf.  # noqa: E501


        :return: The display_version of this HyperflexNodeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._display_version

    @display_version.setter
    def display_version(self, display_version):
        """Sets the display_version of this HyperflexNodeAllOf.


        :param display_version: The display_version of this HyperflexNodeAllOf.  # noqa: E501
        :type: str
        """

        self._display_version = display_version

    @property
    def host_name(self):
        """Gets the host_name of this HyperflexNodeAllOf.  # noqa: E501


        :return: The host_name of this HyperflexNodeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this HyperflexNodeAllOf.


        :param host_name: The host_name of this HyperflexNodeAllOf.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def hypervisor(self):
        """Gets the hypervisor of this HyperflexNodeAllOf.  # noqa: E501


        :return: The hypervisor of this HyperflexNodeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._hypervisor

    @hypervisor.setter
    def hypervisor(self, hypervisor):
        """Sets the hypervisor of this HyperflexNodeAllOf.


        :param hypervisor: The hypervisor of this HyperflexNodeAllOf.  # noqa: E501
        :type: str
        """

        self._hypervisor = hypervisor

    @property
    def identity(self):
        """Gets the identity of this HyperflexNodeAllOf.  # noqa: E501


        :return: The identity of this HyperflexNodeAllOf.  # noqa: E501
        :rtype: HyperflexHxUuIdDt
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this HyperflexNodeAllOf.


        :param identity: The identity of this HyperflexNodeAllOf.  # noqa: E501
        :type: HyperflexHxUuIdDt
        """

        self._identity = identity

    @property
    def ip(self):
        """Gets the ip of this HyperflexNodeAllOf.  # noqa: E501


        :return: The ip of this HyperflexNodeAllOf.  # noqa: E501
        :rtype: HyperflexHxNetworkAddressDt
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this HyperflexNodeAllOf.


        :param ip: The ip of this HyperflexNodeAllOf.  # noqa: E501
        :type: HyperflexHxNetworkAddressDt
        """

        self._ip = ip

    @property
    def lockdown(self):
        """Gets the lockdown of this HyperflexNodeAllOf.  # noqa: E501


        :return: The lockdown of this HyperflexNodeAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._lockdown

    @lockdown.setter
    def lockdown(self, lockdown):
        """Sets the lockdown of this HyperflexNodeAllOf.


        :param lockdown: The lockdown of this HyperflexNodeAllOf.  # noqa: E501
        :type: bool
        """

        self._lockdown = lockdown

    @property
    def model_number(self):
        """Gets the model_number of this HyperflexNodeAllOf.  # noqa: E501


        :return: The model_number of this HyperflexNodeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._model_number

    @model_number.setter
    def model_number(self, model_number):
        """Sets the model_number of this HyperflexNodeAllOf.


        :param model_number: The model_number of this HyperflexNodeAllOf.  # noqa: E501
        :type: str
        """

        self._model_number = model_number

    @property
    def role(self):
        """Gets the role of this HyperflexNodeAllOf.  # noqa: E501


        :return: The role of this HyperflexNodeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this HyperflexNodeAllOf.


        :param role: The role of this HyperflexNodeAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "STORAGE", "COMPUTE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and role not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values))

        self._role = role

    @property
    def serial_number(self):
        """Gets the serial_number of this HyperflexNodeAllOf.  # noqa: E501


        :return: The serial_number of this HyperflexNodeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this HyperflexNodeAllOf.


        :param serial_number: The serial_number of this HyperflexNodeAllOf.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def status(self):
        """Gets the status of this HyperflexNodeAllOf.  # noqa: E501


        :return: The status of this HyperflexNodeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HyperflexNodeAllOf.


        :param status: The status of this HyperflexNodeAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "UNKNOWN", "ONLINE", "OFFLINE", "INMAINTENANCE", "DEGRADED"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values))

        self._status = status

    @property
    def version(self):
        """Gets the version of this HyperflexNodeAllOf.  # noqa: E501


        :return: The version of this HyperflexNodeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this HyperflexNodeAllOf.


        :param version: The version of this HyperflexNodeAllOf.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def cluster(self):
        """Gets the cluster of this HyperflexNodeAllOf.  # noqa: E501


        :return: The cluster of this HyperflexNodeAllOf.  # noqa: E501
        :rtype: HyperflexCluster
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this HyperflexNodeAllOf.


        :param cluster: The cluster of this HyperflexNodeAllOf.  # noqa: E501
        :type: HyperflexCluster
        """

        self._cluster = cluster

    @property
    def cluster_member(self):
        """Gets the cluster_member of this HyperflexNodeAllOf.  # noqa: E501


        :return: The cluster_member of this HyperflexNodeAllOf.  # noqa: E501
        :rtype: AssetClusterMember
        """
        return self._cluster_member

    @cluster_member.setter
    def cluster_member(self, cluster_member):
        """Sets the cluster_member of this HyperflexNodeAllOf.


        :param cluster_member: The cluster_member of this HyperflexNodeAllOf.  # noqa: E501
        :type: AssetClusterMember
        """

        self._cluster_member = cluster_member

    @property
    def physical_server(self):
        """Gets the physical_server of this HyperflexNodeAllOf.  # noqa: E501


        :return: The physical_server of this HyperflexNodeAllOf.  # noqa: E501
        :rtype: ComputePhysical
        """
        return self._physical_server

    @physical_server.setter
    def physical_server(self, physical_server):
        """Sets the physical_server of this HyperflexNodeAllOf.


        :param physical_server: The physical_server of this HyperflexNodeAllOf.  # noqa: E501
        :type: ComputePhysical
        """

        self._physical_server = physical_server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HyperflexNodeAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HyperflexNodeAllOf):
            return True

        return self.to_dict() != other.to_dict()
