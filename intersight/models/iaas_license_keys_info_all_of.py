# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class IaasLicenseKeysInfoAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'count': 'int',
        'expiration_date': 'str',
        'license_id': 'str',
        'pid': 'str'
    }

    attribute_map = {
        'count': 'Count',
        'expiration_date': 'ExpirationDate',
        'license_id': 'LicenseId',
        'pid': 'Pid'
    }

    def __init__(self,
                 count=None,
                 expiration_date=None,
                 license_id=None,
                 pid=None,
                 local_vars_configuration=None):  # noqa: E501
        """IaasLicenseKeysInfoAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._count = None
        self._expiration_date = None
        self._license_id = None
        self._pid = None
        self.discriminator = None

        if count is not None:
            self.count = count
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if license_id is not None:
            self.license_id = license_id
        if pid is not None:
            self.pid = pid

    @property
    def count(self):
        """Gets the count of this IaasLicenseKeysInfoAllOf.  # noqa: E501

        Number of licenses available for the UCSD PID (Product ID).    # noqa: E501

        :return: The count of this IaasLicenseKeysInfoAllOf.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this IaasLicenseKeysInfoAllOf.

        Number of licenses available for the UCSD PID (Product ID).    # noqa: E501

        :param count: The count of this IaasLicenseKeysInfoAllOf.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def expiration_date(self):
        """Gets the expiration_date of this IaasLicenseKeysInfoAllOf.  # noqa: E501

        Expiration date for the license.    # noqa: E501

        :return: The expiration_date of this IaasLicenseKeysInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this IaasLicenseKeysInfoAllOf.

        Expiration date for the license.    # noqa: E501

        :param expiration_date: The expiration_date of this IaasLicenseKeysInfoAllOf.  # noqa: E501
        :type: str
        """

        self._expiration_date = expiration_date

    @property
    def license_id(self):
        """Gets the license_id of this IaasLicenseKeysInfoAllOf.  # noqa: E501

        UCS Director Unique license ID.    # noqa: E501

        :return: The license_id of this IaasLicenseKeysInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._license_id

    @license_id.setter
    def license_id(self, license_id):
        """Sets the license_id of this IaasLicenseKeysInfoAllOf.

        UCS Director Unique license ID.    # noqa: E501

        :param license_id: The license_id of this IaasLicenseKeysInfoAllOf.  # noqa: E501
        :type: str
        """

        self._license_id = license_id

    @property
    def pid(self):
        """Gets the pid of this IaasLicenseKeysInfoAllOf.  # noqa: E501

        PID (Product ID) for UCSD License.     # noqa: E501

        :return: The pid of this IaasLicenseKeysInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this IaasLicenseKeysInfoAllOf.

        PID (Product ID) for UCSD License.     # noqa: E501

        :param pid: The pid of this IaasLicenseKeysInfoAllOf.  # noqa: E501
        :type: str
        """

        self._pid = pid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IaasLicenseKeysInfoAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IaasLicenseKeysInfoAllOf):
            return True

        return self.to_dict() != other.to_dict()
