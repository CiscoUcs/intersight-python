# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StorageFlexFlashControllerPropsAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cards_manageable': 'str',
        'configured_mode': 'str',
        'controller_name': 'str',
        'controller_status': 'str',
        'fw_version': 'str',
        'internal_state': 'str',
        'operating_mode': 'str',
        'physical_drive_count': 'str',
        'product_name': 'str',
        'startup_fw_version': 'str',
        'virtual_drive_count': 'str',
        'registered_device': 'AssetDeviceRegistration',
        'storage_flex_flash_controller': 'StorageFlexFlashController'
    }

    attribute_map = {
        'cards_manageable': 'CardsManageable',
        'configured_mode': 'ConfiguredMode',
        'controller_name': 'ControllerName',
        'controller_status': 'ControllerStatus',
        'fw_version': 'FwVersion',
        'internal_state': 'InternalState',
        'operating_mode': 'OperatingMode',
        'physical_drive_count': 'PhysicalDriveCount',
        'product_name': 'ProductName',
        'startup_fw_version': 'StartupFwVersion',
        'virtual_drive_count': 'VirtualDriveCount',
        'registered_device': 'RegisteredDevice',
        'storage_flex_flash_controller': 'StorageFlexFlashController'
    }

    def __init__(self,
                 cards_manageable=None,
                 configured_mode=None,
                 controller_name=None,
                 controller_status=None,
                 fw_version=None,
                 internal_state=None,
                 operating_mode=None,
                 physical_drive_count=None,
                 product_name=None,
                 startup_fw_version=None,
                 virtual_drive_count=None,
                 registered_device=None,
                 storage_flex_flash_controller=None,
                 local_vars_configuration=None):  # noqa: E501
        """StorageFlexFlashControllerPropsAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cards_manageable = None
        self._configured_mode = None
        self._controller_name = None
        self._controller_status = None
        self._fw_version = None
        self._internal_state = None
        self._operating_mode = None
        self._physical_drive_count = None
        self._product_name = None
        self._startup_fw_version = None
        self._virtual_drive_count = None
        self._registered_device = None
        self._storage_flex_flash_controller = None
        self.discriminator = None

        if cards_manageable is not None:
            self.cards_manageable = cards_manageable
        if configured_mode is not None:
            self.configured_mode = configured_mode
        if controller_name is not None:
            self.controller_name = controller_name
        if controller_status is not None:
            self.controller_status = controller_status
        if fw_version is not None:
            self.fw_version = fw_version
        if internal_state is not None:
            self.internal_state = internal_state
        if operating_mode is not None:
            self.operating_mode = operating_mode
        if physical_drive_count is not None:
            self.physical_drive_count = physical_drive_count
        if product_name is not None:
            self.product_name = product_name
        if startup_fw_version is not None:
            self.startup_fw_version = startup_fw_version
        if virtual_drive_count is not None:
            self.virtual_drive_count = virtual_drive_count
        if registered_device is not None:
            self.registered_device = registered_device
        if storage_flex_flash_controller is not None:
            self.storage_flex_flash_controller = storage_flex_flash_controller

    @property
    def cards_manageable(self):
        """Gets the cards_manageable of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501


        :return: The cards_manageable of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :rtype: str
        """
        return self._cards_manageable

    @cards_manageable.setter
    def cards_manageable(self, cards_manageable):
        """Sets the cards_manageable of this StorageFlexFlashControllerPropsAllOf.


        :param cards_manageable: The cards_manageable of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :type: str
        """

        self._cards_manageable = cards_manageable

    @property
    def configured_mode(self):
        """Gets the configured_mode of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501


        :return: The configured_mode of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :rtype: str
        """
        return self._configured_mode

    @configured_mode.setter
    def configured_mode(self, configured_mode):
        """Sets the configured_mode of this StorageFlexFlashControllerPropsAllOf.


        :param configured_mode: The configured_mode of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :type: str
        """

        self._configured_mode = configured_mode

    @property
    def controller_name(self):
        """Gets the controller_name of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501


        :return: The controller_name of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :rtype: str
        """
        return self._controller_name

    @controller_name.setter
    def controller_name(self, controller_name):
        """Sets the controller_name of this StorageFlexFlashControllerPropsAllOf.


        :param controller_name: The controller_name of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :type: str
        """

        self._controller_name = controller_name

    @property
    def controller_status(self):
        """Gets the controller_status of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501


        :return: The controller_status of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :rtype: str
        """
        return self._controller_status

    @controller_status.setter
    def controller_status(self, controller_status):
        """Sets the controller_status of this StorageFlexFlashControllerPropsAllOf.


        :param controller_status: The controller_status of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :type: str
        """

        self._controller_status = controller_status

    @property
    def fw_version(self):
        """Gets the fw_version of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501


        :return: The fw_version of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :rtype: str
        """
        return self._fw_version

    @fw_version.setter
    def fw_version(self, fw_version):
        """Sets the fw_version of this StorageFlexFlashControllerPropsAllOf.


        :param fw_version: The fw_version of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :type: str
        """

        self._fw_version = fw_version

    @property
    def internal_state(self):
        """Gets the internal_state of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501


        :return: The internal_state of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :rtype: str
        """
        return self._internal_state

    @internal_state.setter
    def internal_state(self, internal_state):
        """Sets the internal_state of this StorageFlexFlashControllerPropsAllOf.


        :param internal_state: The internal_state of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :type: str
        """

        self._internal_state = internal_state

    @property
    def operating_mode(self):
        """Gets the operating_mode of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501


        :return: The operating_mode of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :rtype: str
        """
        return self._operating_mode

    @operating_mode.setter
    def operating_mode(self, operating_mode):
        """Sets the operating_mode of this StorageFlexFlashControllerPropsAllOf.


        :param operating_mode: The operating_mode of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :type: str
        """

        self._operating_mode = operating_mode

    @property
    def physical_drive_count(self):
        """Gets the physical_drive_count of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501


        :return: The physical_drive_count of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :rtype: str
        """
        return self._physical_drive_count

    @physical_drive_count.setter
    def physical_drive_count(self, physical_drive_count):
        """Sets the physical_drive_count of this StorageFlexFlashControllerPropsAllOf.


        :param physical_drive_count: The physical_drive_count of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :type: str
        """

        self._physical_drive_count = physical_drive_count

    @property
    def product_name(self):
        """Gets the product_name of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501


        :return: The product_name of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this StorageFlexFlashControllerPropsAllOf.


        :param product_name: The product_name of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def startup_fw_version(self):
        """Gets the startup_fw_version of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501


        :return: The startup_fw_version of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :rtype: str
        """
        return self._startup_fw_version

    @startup_fw_version.setter
    def startup_fw_version(self, startup_fw_version):
        """Sets the startup_fw_version of this StorageFlexFlashControllerPropsAllOf.


        :param startup_fw_version: The startup_fw_version of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :type: str
        """

        self._startup_fw_version = startup_fw_version

    @property
    def virtual_drive_count(self):
        """Gets the virtual_drive_count of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501


        :return: The virtual_drive_count of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :rtype: str
        """
        return self._virtual_drive_count

    @virtual_drive_count.setter
    def virtual_drive_count(self, virtual_drive_count):
        """Sets the virtual_drive_count of this StorageFlexFlashControllerPropsAllOf.


        :param virtual_drive_count: The virtual_drive_count of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :type: str
        """

        self._virtual_drive_count = virtual_drive_count

    @property
    def registered_device(self):
        """Gets the registered_device of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501


        :return: The registered_device of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this StorageFlexFlashControllerPropsAllOf.


        :param registered_device: The registered_device of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    @property
    def storage_flex_flash_controller(self):
        """Gets the storage_flex_flash_controller of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501


        :return: The storage_flex_flash_controller of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :rtype: StorageFlexFlashController
        """
        return self._storage_flex_flash_controller

    @storage_flex_flash_controller.setter
    def storage_flex_flash_controller(self, storage_flex_flash_controller):
        """Sets the storage_flex_flash_controller of this StorageFlexFlashControllerPropsAllOf.


        :param storage_flex_flash_controller: The storage_flex_flash_controller of this StorageFlexFlashControllerPropsAllOf.  # noqa: E501
        :type: StorageFlexFlashController
        """

        self._storage_flex_flash_controller = storage_flex_flash_controller

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageFlexFlashControllerPropsAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageFlexFlashControllerPropsAllOf):
            return True

        return self.to_dict() != other.to_dict()
