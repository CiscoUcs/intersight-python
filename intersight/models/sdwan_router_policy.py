# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1461
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SdwanRouterPolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'description': 'str',
        'name': 'str',
        'deployment_size': 'str',
        'wan_count': 'int',
        'wan_termination_type': 'str',
        'organization': 'OrganizationOrganizationRef',
        'profiles': 'list[SdwanProfileRef]',
        'solution_image': 'SoftwareSolutionDistributableRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'description': 'Description',
        'name': 'Name',
        'deployment_size': 'DeploymentSize',
        'wan_count': 'WanCount',
        'wan_termination_type': 'WanTerminationType',
        'organization': 'Organization',
        'profiles': 'Profiles',
        'solution_image': 'SolutionImage'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, description=None, name=None, deployment_size='Typical', wan_count=None, wan_termination_type='Single', organization=None, profiles=None, solution_image=None):
        """
        SdwanRouterPolicy - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._description = None
        self._name = None
        self._deployment_size = None
        self._wan_count = None
        self._wan_termination_type = None
        self._organization = None
        self._profiles = None
        self._solution_image = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if description is not None:
          self.description = description
        if name is not None:
          self.name = name
        if deployment_size is not None:
          self.deployment_size = deployment_size
        if wan_count is not None:
          self.wan_count = wan_count
        if wan_termination_type is not None:
          self.wan_termination_type = wan_termination_type
        if organization is not None:
          self.organization = organization
        if profiles is not None:
          self.profiles = profiles
        if solution_image is not None:
          self.solution_image = solution_image

    @property
    def account_moid(self):
        """
        Gets the account_moid of this SdwanRouterPolicy.
        The Account ID for this managed object.

        :return: The account_moid of this SdwanRouterPolicy.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this SdwanRouterPolicy.
        The Account ID for this managed object.

        :param account_moid: The account_moid of this SdwanRouterPolicy.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this SdwanRouterPolicy.
        The time when this managed object was created.

        :return: The create_time of this SdwanRouterPolicy.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this SdwanRouterPolicy.
        The time when this managed object was created.

        :param create_time: The create_time of this SdwanRouterPolicy.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this SdwanRouterPolicy.
        The DomainGroup ID for this managed object.

        :return: The domain_group_moid of this SdwanRouterPolicy.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this SdwanRouterPolicy.
        The DomainGroup ID for this managed object.

        :param domain_group_moid: The domain_group_moid of this SdwanRouterPolicy.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this SdwanRouterPolicy.
        The time when this managed object was last modified.

        :return: The mod_time of this SdwanRouterPolicy.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this SdwanRouterPolicy.
        The time when this managed object was last modified.

        :param mod_time: The mod_time of this SdwanRouterPolicy.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this SdwanRouterPolicy.
        The unique identifier of this Managed Object instance.

        :return: The moid of this SdwanRouterPolicy.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this SdwanRouterPolicy.
        The unique identifier of this Managed Object instance.

        :param moid: The moid of this SdwanRouterPolicy.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this SdwanRouterPolicy.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        :return: The object_type of this SdwanRouterPolicy.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this SdwanRouterPolicy.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        :param object_type: The object_type of this SdwanRouterPolicy.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this SdwanRouterPolicy.
        The array of owners which represent effective ownership of this object.

        :return: The owners of this SdwanRouterPolicy.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this SdwanRouterPolicy.
        The array of owners which represent effective ownership of this object.

        :param owners: The owners of this SdwanRouterPolicy.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this SdwanRouterPolicy.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.

        :return: The shared_scope of this SdwanRouterPolicy.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this SdwanRouterPolicy.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.

        :param shared_scope: The shared_scope of this SdwanRouterPolicy.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this SdwanRouterPolicy.
        The array of tags, which allow to add key, value meta-data to managed objects.

        :return: The tags of this SdwanRouterPolicy.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this SdwanRouterPolicy.
        The array of tags, which allow to add key, value meta-data to managed objects.

        :param tags: The tags of this SdwanRouterPolicy.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this SdwanRouterPolicy.
        The versioning info for this managed object.

        :return: The version_context of this SdwanRouterPolicy.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this SdwanRouterPolicy.
        The versioning info for this managed object.

        :param version_context: The version_context of this SdwanRouterPolicy.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this SdwanRouterPolicy.
        The array containing the MO references of the ancestors in the object containment hierarchy.

        :return: The ancestors of this SdwanRouterPolicy.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this SdwanRouterPolicy.
        The array containing the MO references of the ancestors in the object containment hierarchy.

        :param ancestors: The ancestors of this SdwanRouterPolicy.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this SdwanRouterPolicy.
        The direct ancestor of this managed object in the containment hierarchy.

        :return: The parent of this SdwanRouterPolicy.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this SdwanRouterPolicy.
        The direct ancestor of this managed object in the containment hierarchy.

        :param parent: The parent of this SdwanRouterPolicy.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this SdwanRouterPolicy.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.

        :return: The permission_resources of this SdwanRouterPolicy.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this SdwanRouterPolicy.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.

        :param permission_resources: The permission_resources of this SdwanRouterPolicy.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def description(self):
        """
        Gets the description of this SdwanRouterPolicy.
        Description of the policy.

        :return: The description of this SdwanRouterPolicy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SdwanRouterPolicy.
        Description of the policy.

        :param description: The description of this SdwanRouterPolicy.
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """
        Gets the name of this SdwanRouterPolicy.
        Name of the concrete policy.

        :return: The name of this SdwanRouterPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SdwanRouterPolicy.
        Name of the concrete policy.

        :param name: The name of this SdwanRouterPolicy.
        :type: str
        """

        self._name = name

    @property
    def deployment_size(self):
        """
        Gets the deployment_size of this SdwanRouterPolicy.
        Scale of the SD-WAN router virtual machine deployment.

        :return: The deployment_size of this SdwanRouterPolicy.
        :rtype: str
        """
        return self._deployment_size

    @deployment_size.setter
    def deployment_size(self, deployment_size):
        """
        Sets the deployment_size of this SdwanRouterPolicy.
        Scale of the SD-WAN router virtual machine deployment.

        :param deployment_size: The deployment_size of this SdwanRouterPolicy.
        :type: str
        """
        allowed_values = ["Typical", "Minimal"]
        if deployment_size not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_size` ({0}), must be one of {1}"
                .format(deployment_size, allowed_values)
            )

        self._deployment_size = deployment_size

    @property
    def wan_count(self):
        """
        Gets the wan_count of this SdwanRouterPolicy.
        Number of WAN connections across the SD-WAN site.

        :return: The wan_count of this SdwanRouterPolicy.
        :rtype: int
        """
        return self._wan_count

    @wan_count.setter
    def wan_count(self, wan_count):
        """
        Sets the wan_count of this SdwanRouterPolicy.
        Number of WAN connections across the SD-WAN site.

        :param wan_count: The wan_count of this SdwanRouterPolicy.
        :type: int
        """

        self._wan_count = wan_count

    @property
    def wan_termination_type(self):
        """
        Gets the wan_termination_type of this SdwanRouterPolicy.
        Defines if the WAN networks are singly or dually terminated. Dually terminated WANs are configured on all the SD-WAN routers. Singly terminated WANs are configured only on one of the SD-WAN routers.

        :return: The wan_termination_type of this SdwanRouterPolicy.
        :rtype: str
        """
        return self._wan_termination_type

    @wan_termination_type.setter
    def wan_termination_type(self, wan_termination_type):
        """
        Sets the wan_termination_type of this SdwanRouterPolicy.
        Defines if the WAN networks are singly or dually terminated. Dually terminated WANs are configured on all the SD-WAN routers. Singly terminated WANs are configured only on one of the SD-WAN routers.

        :param wan_termination_type: The wan_termination_type of this SdwanRouterPolicy.
        :type: str
        """
        allowed_values = ["Single", "Dual"]
        if wan_termination_type not in allowed_values:
            raise ValueError(
                "Invalid value for `wan_termination_type` ({0}), must be one of {1}"
                .format(wan_termination_type, allowed_values)
            )

        self._wan_termination_type = wan_termination_type

    @property
    def organization(self):
        """
        Gets the organization of this SdwanRouterPolicy.
        Relationship to the Organization that owns the Managed Object.

        :return: The organization of this SdwanRouterPolicy.
        :rtype: OrganizationOrganizationRef
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this SdwanRouterPolicy.
        Relationship to the Organization that owns the Managed Object.

        :param organization: The organization of this SdwanRouterPolicy.
        :type: OrganizationOrganizationRef
        """

        self._organization = organization

    @property
    def profiles(self):
        """
        Gets the profiles of this SdwanRouterPolicy.
        Relationship to the SD-WAN profile object.

        :return: The profiles of this SdwanRouterPolicy.
        :rtype: list[SdwanProfileRef]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """
        Sets the profiles of this SdwanRouterPolicy.
        Relationship to the SD-WAN profile object.

        :param profiles: The profiles of this SdwanRouterPolicy.
        :type: list[SdwanProfileRef]
        """

        self._profiles = profiles

    @property
    def solution_image(self):
        """
        Gets the solution_image of this SdwanRouterPolicy.
        Relationship to the solution distributable object.

        :return: The solution_image of this SdwanRouterPolicy.
        :rtype: SoftwareSolutionDistributableRef
        """
        return self._solution_image

    @solution_image.setter
    def solution_image(self, solution_image):
        """
        Sets the solution_image of this SdwanRouterPolicy.
        Relationship to the solution distributable object.

        :param solution_image: The solution_image of this SdwanRouterPolicy.
        :type: SoftwareSolutionDistributableRef
        """

        self._solution_image = solution_image

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SdwanRouterPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
