# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1461
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorkflowInternalProperties(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'base_task_type': 'str',
        'constraints': 'WorkflowTaskConstraints',
        'internal': 'bool',
        'owner': 'str'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'base_task_type': 'BaseTaskType',
        'constraints': 'Constraints',
        'internal': 'Internal',
        'owner': 'Owner'
    }

    def __init__(self, object_type=None, base_task_type=None, constraints=None, internal=None, owner=None):
        """
        WorkflowInternalProperties - a model defined in Swagger
        """

        self._object_type = None
        self._base_task_type = None
        self._constraints = None
        self._internal = None
        self._owner = None

        if object_type is not None:
          self.object_type = object_type
        if base_task_type is not None:
          self.base_task_type = base_task_type
        if constraints is not None:
          self.constraints = constraints
        if internal is not None:
          self.internal = internal
        if owner is not None:
          self.owner = owner

    @property
    def object_type(self):
        """
        Gets the object_type of this WorkflowInternalProperties.
        The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.

        :return: The object_type of this WorkflowInternalProperties.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this WorkflowInternalProperties.
        The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.

        :param object_type: The object_type of this WorkflowInternalProperties.
        :type: str
        """

        self._object_type = object_type

    @property
    def base_task_type(self):
        """
        Gets the base_task_type of this WorkflowInternalProperties.
        This field will hold the base task type like HttpBaseTask or RemoteAnsibleBaseTask.

        :return: The base_task_type of this WorkflowInternalProperties.
        :rtype: str
        """
        return self._base_task_type

    @base_task_type.setter
    def base_task_type(self, base_task_type):
        """
        Sets the base_task_type of this WorkflowInternalProperties.
        This field will hold the base task type like HttpBaseTask or RemoteAnsibleBaseTask.

        :param base_task_type: The base_task_type of this WorkflowInternalProperties.
        :type: str
        """

        self._base_task_type = base_task_type

    @property
    def constraints(self):
        """
        Gets the constraints of this WorkflowInternalProperties.
        This field will hold any constraints a concrete task definition will specify in order to limit the environment where the task can execute.

        :return: The constraints of this WorkflowInternalProperties.
        :rtype: WorkflowTaskConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """
        Sets the constraints of this WorkflowInternalProperties.
        This field will hold any constraints a concrete task definition will specify in order to limit the environment where the task can execute.

        :param constraints: The constraints of this WorkflowInternalProperties.
        :type: WorkflowTaskConstraints
        """

        self._constraints = constraints

    @property
    def internal(self):
        """
        Gets the internal of this WorkflowInternalProperties.
        Denotes this is an internal task. Internal tasks will be hidden from the UI when executing a workflow.

        :return: The internal of this WorkflowInternalProperties.
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """
        Sets the internal of this WorkflowInternalProperties.
        Denotes this is an internal task. Internal tasks will be hidden from the UI when executing a workflow.

        :param internal: The internal of this WorkflowInternalProperties.
        :type: bool
        """

        self._internal = internal

    @property
    def owner(self):
        """
        Gets the owner of this WorkflowInternalProperties.
        The service that owns and is responsible for execution of the task.

        :return: The owner of this WorkflowInternalProperties.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this WorkflowInternalProperties.
        The service that owns and is responsible for execution of the task.

        :param owner: The owner of this WorkflowInternalProperties.
        :type: str
        """

        self._owner = owner

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkflowInternalProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
