# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class LicenseLicenseInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active_admin': 'bool',
        'days_left': 'int',
        'end_time': 'datetime',
        'enforce_mode': 'str',
        'error_desc': 'str',
        'evaluation_period': 'int',
        'extra_evaluation': 'int',
        'license_count': 'int',
        'license_state': 'str',
        'license_type': 'str',
        'start_time': 'datetime',
        'trial_admin': 'bool',
        'account_license_data': 'LicenseAccountLicenseData'
    }

    attribute_map = {
        'active_admin': 'ActiveAdmin',
        'days_left': 'DaysLeft',
        'end_time': 'EndTime',
        'enforce_mode': 'EnforceMode',
        'error_desc': 'ErrorDesc',
        'evaluation_period': 'EvaluationPeriod',
        'extra_evaluation': 'ExtraEvaluation',
        'license_count': 'LicenseCount',
        'license_state': 'LicenseState',
        'license_type': 'LicenseType',
        'start_time': 'StartTime',
        'trial_admin': 'TrialAdmin',
        'account_license_data': 'AccountLicenseData'
    }

    def __init__(self,
                 active_admin=None,
                 days_left=None,
                 end_time=None,
                 enforce_mode=None,
                 error_desc=None,
                 evaluation_period=None,
                 extra_evaluation=None,
                 license_count=None,
                 license_state='NotLicensed',
                 license_type='Base',
                 start_time=None,
                 trial_admin=None,
                 account_license_data=None,
                 local_vars_configuration=None):  # noqa: E501
        """LicenseLicenseInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._active_admin = None
        self._days_left = None
        self._end_time = None
        self._enforce_mode = None
        self._error_desc = None
        self._evaluation_period = None
        self._extra_evaluation = None
        self._license_count = None
        self._license_state = None
        self._license_type = None
        self._start_time = None
        self._trial_admin = None
        self._account_license_data = None
        self.discriminator = None

        if active_admin is not None:
            self.active_admin = active_admin
        if days_left is not None:
            self.days_left = days_left
        if end_time is not None:
            self.end_time = end_time
        if enforce_mode is not None:
            self.enforce_mode = enforce_mode
        if error_desc is not None:
            self.error_desc = error_desc
        if evaluation_period is not None:
            self.evaluation_period = evaluation_period
        if extra_evaluation is not None:
            self.extra_evaluation = extra_evaluation
        if license_count is not None:
            self.license_count = license_count
        if license_state is not None:
            self.license_state = license_state
        if license_type is not None:
            self.license_type = license_type
        if start_time is not None:
            self.start_time = start_time
        if trial_admin is not None:
            self.trial_admin = trial_admin
        if account_license_data is not None:
            self.account_license_data = account_license_data

    @property
    def active_admin(self):
        """Gets the active_admin of this LicenseLicenseInfo.  # noqa: E501

        The license administrative state.  Set this property to 'true' to activate the license entitlements.     # noqa: E501

        :return: The active_admin of this LicenseLicenseInfo.  # noqa: E501
        :rtype: bool
        """
        return self._active_admin

    @active_admin.setter
    def active_admin(self, active_admin):
        """Sets the active_admin of this LicenseLicenseInfo.

        The license administrative state.  Set this property to 'true' to activate the license entitlements.     # noqa: E501

        :param active_admin: The active_admin of this LicenseLicenseInfo.  # noqa: E501
        :type: bool
        """

        self._active_admin = active_admin

    @property
    def days_left(self):
        """Gets the days_left of this LicenseLicenseInfo.  # noqa: E501

        The number of days left for licenseState to stay in TrialPeriod or OutOfCompliance state.    # noqa: E501

        :return: The days_left of this LicenseLicenseInfo.  # noqa: E501
        :rtype: int
        """
        return self._days_left

    @days_left.setter
    def days_left(self, days_left):
        """Sets the days_left of this LicenseLicenseInfo.

        The number of days left for licenseState to stay in TrialPeriod or OutOfCompliance state.    # noqa: E501

        :param days_left: The days_left of this LicenseLicenseInfo.  # noqa: E501
        :type: int
        """

        self._days_left = days_left

    @property
    def end_time(self):
        """Gets the end_time of this LicenseLicenseInfo.  # noqa: E501

        The date and time when the trial period expires.  The value of the 'endTime' property is set when the account enters the TrialPeriod or OutOfCompliance state.     # noqa: E501

        :return: The end_time of this LicenseLicenseInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this LicenseLicenseInfo.

        The date and time when the trial period expires.  The value of the 'endTime' property is set when the account enters the TrialPeriod or OutOfCompliance state.     # noqa: E501

        :param end_time: The end_time of this LicenseLicenseInfo.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def enforce_mode(self):
        """Gets the enforce_mode of this LicenseLicenseInfo.  # noqa: E501

        The entitlement mode reported by Cisco Smart Software Manager.    # noqa: E501

        :return: The enforce_mode of this LicenseLicenseInfo.  # noqa: E501
        :rtype: str
        """
        return self._enforce_mode

    @enforce_mode.setter
    def enforce_mode(self, enforce_mode):
        """Sets the enforce_mode of this LicenseLicenseInfo.

        The entitlement mode reported by Cisco Smart Software Manager.    # noqa: E501

        :param enforce_mode: The enforce_mode of this LicenseLicenseInfo.  # noqa: E501
        :type: str
        """

        self._enforce_mode = enforce_mode

    @property
    def error_desc(self):
        """Gets the error_desc of this LicenseLicenseInfo.  # noqa: E501

        The detailed error message when there is any error related to this licensing entitlement.    # noqa: E501

        :return: The error_desc of this LicenseLicenseInfo.  # noqa: E501
        :rtype: str
        """
        return self._error_desc

    @error_desc.setter
    def error_desc(self, error_desc):
        """Sets the error_desc of this LicenseLicenseInfo.

        The detailed error message when there is any error related to this licensing entitlement.    # noqa: E501

        :param error_desc: The error_desc of this LicenseLicenseInfo.  # noqa: E501
        :type: str
        """

        self._error_desc = error_desc

    @property
    def evaluation_period(self):
        """Gets the evaluation_period of this LicenseLicenseInfo.  # noqa: E501

        The default Trial or Grace period customer is entitled to.    # noqa: E501

        :return: The evaluation_period of this LicenseLicenseInfo.  # noqa: E501
        :rtype: int
        """
        return self._evaluation_period

    @evaluation_period.setter
    def evaluation_period(self, evaluation_period):
        """Sets the evaluation_period of this LicenseLicenseInfo.

        The default Trial or Grace period customer is entitled to.    # noqa: E501

        :param evaluation_period: The evaluation_period of this LicenseLicenseInfo.  # noqa: E501
        :type: int
        """

        self._evaluation_period = evaluation_period

    @property
    def extra_evaluation(self):
        """Gets the extra_evaluation of this LicenseLicenseInfo.  # noqa: E501

        The number of days the trial Trial or Grace period is extended.  The trial or grace period can be extended once.     # noqa: E501

        :return: The extra_evaluation of this LicenseLicenseInfo.  # noqa: E501
        :rtype: int
        """
        return self._extra_evaluation

    @extra_evaluation.setter
    def extra_evaluation(self, extra_evaluation):
        """Sets the extra_evaluation of this LicenseLicenseInfo.

        The number of days the trial Trial or Grace period is extended.  The trial or grace period can be extended once.     # noqa: E501

        :param extra_evaluation: The extra_evaluation of this LicenseLicenseInfo.  # noqa: E501
        :type: int
        """

        self._extra_evaluation = extra_evaluation

    @property
    def license_count(self):
        """Gets the license_count of this LicenseLicenseInfo.  # noqa: E501

        The total number of devices claimed in the Intersight account.    # noqa: E501

        :return: The license_count of this LicenseLicenseInfo.  # noqa: E501
        :rtype: int
        """
        return self._license_count

    @license_count.setter
    def license_count(self, license_count):
        """Sets the license_count of this LicenseLicenseInfo.

        The total number of devices claimed in the Intersight account.    # noqa: E501

        :param license_count: The license_count of this LicenseLicenseInfo.  # noqa: E501
        :type: int
        """

        self._license_count = license_count

    @property
    def license_state(self):
        """Gets the license_state of this LicenseLicenseInfo.  # noqa: E501

        The license state defined by Intersight.  The value may be one of NotLicensed, TrialPeriod, OutOfCompliance, Compliance, GraceExpired, or TrialExpired.     # noqa: E501

        :return: The license_state of this LicenseLicenseInfo.  # noqa: E501
        :rtype: str
        """
        return self._license_state

    @license_state.setter
    def license_state(self, license_state):
        """Sets the license_state of this LicenseLicenseInfo.

        The license state defined by Intersight.  The value may be one of NotLicensed, TrialPeriod, OutOfCompliance, Compliance, GraceExpired, or TrialExpired.     # noqa: E501

        :param license_state: The license_state of this LicenseLicenseInfo.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "NotLicensed", "GraceExpired", "TrialPeriod", "OutOfCompliance",
            "Compliance", "TrialExpired"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and license_state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `license_state` ({0}), must be one of {1}"  # noqa: E501
                .format(license_state, allowed_values))

        self._license_state = license_state

    @property
    def license_type(self):
        """Gets the license_type of this LicenseLicenseInfo.  # noqa: E501

        The name of the Intersight license entitlement. For example, this property may be set to 'Essential'.     # noqa: E501

        :return: The license_type of this LicenseLicenseInfo.  # noqa: E501
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this LicenseLicenseInfo.

        The name of the Intersight license entitlement. For example, this property may be set to 'Essential'.     # noqa: E501

        :param license_type: The license_type of this LicenseLicenseInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Base", "Essential", "Standard",
                          "Advantage"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and license_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `license_type` ({0}), must be one of {1}"  # noqa: E501
                .format(license_type, allowed_values))

        self._license_type = license_type

    @property
    def start_time(self):
        """Gets the start_time of this LicenseLicenseInfo.  # noqa: E501

        The date and time when the licenseState entered the TrialPeriod or OutOfCompliance state.    # noqa: E501

        :return: The start_time of this LicenseLicenseInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this LicenseLicenseInfo.

        The date and time when the licenseState entered the TrialPeriod or OutOfCompliance state.    # noqa: E501

        :param start_time: The start_time of this LicenseLicenseInfo.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def trial_admin(self):
        """Gets the trial_admin of this LicenseLicenseInfo.  # noqa: E501

        The administrative state of the trial license.  When the LicenseState is set to 'NotLicensed', 'trialAdmin' can be set to true to start the trial period, i.e. licenseState is set to be TrialPeriod.      # noqa: E501

        :return: The trial_admin of this LicenseLicenseInfo.  # noqa: E501
        :rtype: bool
        """
        return self._trial_admin

    @trial_admin.setter
    def trial_admin(self, trial_admin):
        """Sets the trial_admin of this LicenseLicenseInfo.

        The administrative state of the trial license.  When the LicenseState is set to 'NotLicensed', 'trialAdmin' can be set to true to start the trial period, i.e. licenseState is set to be TrialPeriod.      # noqa: E501

        :param trial_admin: The trial_admin of this LicenseLicenseInfo.  # noqa: E501
        :type: bool
        """

        self._trial_admin = trial_admin

    @property
    def account_license_data(self):
        """Gets the account_license_data of this LicenseLicenseInfo.  # noqa: E501


        :return: The account_license_data of this LicenseLicenseInfo.  # noqa: E501
        :rtype: LicenseAccountLicenseData
        """
        return self._account_license_data

    @account_license_data.setter
    def account_license_data(self, account_license_data):
        """Sets the account_license_data of this LicenseLicenseInfo.


        :param account_license_data: The account_license_data of this LicenseLicenseInfo.  # noqa: E501
        :type: LicenseAccountLicenseData
        """

        self._account_license_data = account_license_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseLicenseInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LicenseLicenseInfo):
            return True

        return self.to_dict() != other.to_dict()
