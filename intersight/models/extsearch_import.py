# coding: utf-8

"""
    UCS Starship API

    This is the UCS Starship REST API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ExtsearchImport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'ancestors': 'list[MoMoRef]',
        'create_time': 'datetime',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'parent': 'MoMoRef',
        'tags': 'list[MoTag]',
        'import_since': 'datetime',
        'import_status': 'str',
        'import_type': 'str',
        'index_name': 'str',
        'index_types': 'list[str]'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'ancestors': 'Ancestors',
        'create_time': 'CreateTime',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'parent': 'Parent',
        'tags': 'Tags',
        'import_since': 'ImportSince',
        'import_status': 'ImportStatus',
        'import_type': 'ImportType',
        'index_name': 'IndexName',
        'index_types': 'IndexTypes'
    }

    def __init__(self, account_moid=None, ancestors=None, create_time=None, mod_time=None, moid=None, object_type=None, owners=None, parent=None, tags=None, import_since=None, import_status=None, import_type=None, index_name=None, index_types=None):
        """
        ExtsearchImport - a model defined in Swagger
        """

        self._account_moid = None
        self._ancestors = None
        self._create_time = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._parent = None
        self._tags = None
        self._import_since = None
        self._import_status = None
        self._import_type = None
        self._index_name = None
        self._index_types = None

        if account_moid is not None:
          self.account_moid = account_moid
        if ancestors is not None:
          self.ancestors = ancestors
        if create_time is not None:
          self.create_time = create_time
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if parent is not None:
          self.parent = parent
        if tags is not None:
          self.tags = tags
        if import_since is not None:
          self.import_since = import_since
        if import_status is not None:
          self.import_status = import_status
        if import_type is not None:
          self.import_type = import_type
        if index_name is not None:
          self.index_name = index_name
        if index_types is not None:
          self.index_types = index_types

    @property
    def account_moid(self):
        """
        Gets the account_moid of this ExtsearchImport.
        The Account ID for this managed object.  

        :return: The account_moid of this ExtsearchImport.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this ExtsearchImport.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this ExtsearchImport.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def ancestors(self):
        """
        Gets the ancestors of this ExtsearchImport.
        Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this ExtsearchImport.
        :rtype: list[MoMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this ExtsearchImport.
        Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this ExtsearchImport.
        :type: list[MoMoRef]
        """

        self._ancestors = ancestors

    @property
    def create_time(self):
        """
        Gets the create_time of this ExtsearchImport.
        The time when this managed object was created.  

        :return: The create_time of this ExtsearchImport.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this ExtsearchImport.
        The time when this managed object was created.  

        :param create_time: The create_time of this ExtsearchImport.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def mod_time(self):
        """
        Gets the mod_time of this ExtsearchImport.
        The time when this managed object was last modified.  

        :return: The mod_time of this ExtsearchImport.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this ExtsearchImport.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this ExtsearchImport.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this ExtsearchImport.
        A unique identifier of this Managed Object instance.  

        :return: The moid of this ExtsearchImport.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this ExtsearchImport.
        A unique identifier of this Managed Object instance.  

        :param moid: The moid of this ExtsearchImport.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this ExtsearchImport.
        The fully-qualified type of this managed object, e.g. the class name.  

        :return: The object_type of this ExtsearchImport.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this ExtsearchImport.
        The fully-qualified type of this managed object, e.g. the class name.  

        :param object_type: The object_type of this ExtsearchImport.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this ExtsearchImport.
        An array of owners which represent effective ownership of this object.   

        :return: The owners of this ExtsearchImport.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this ExtsearchImport.
        An array of owners which represent effective ownership of this object.   

        :param owners: The owners of this ExtsearchImport.
        :type: list[str]
        """

        self._owners = owners

    @property
    def parent(self):
        """
        Gets the parent of this ExtsearchImport.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this ExtsearchImport.
        :rtype: MoMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this ExtsearchImport.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this ExtsearchImport.
        :type: MoMoRef
        """

        self._parent = parent

    @property
    def tags(self):
        """
        Gets the tags of this ExtsearchImport.
        An array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this ExtsearchImport.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this ExtsearchImport.
        An array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this ExtsearchImport.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def import_since(self):
        """
        Gets the import_since of this ExtsearchImport.
        Reimport data only that has ModTime greater than what is specified in importSince. When not specified, ModTime filter will not be used. 

        :return: The import_since of this ExtsearchImport.
        :rtype: datetime
        """
        return self._import_since

    @import_since.setter
    def import_since(self, import_since):
        """
        Sets the import_since of this ExtsearchImport.
        Reimport data only that has ModTime greater than what is specified in importSince. When not specified, ModTime filter will not be used. 

        :param import_since: The import_since of this ExtsearchImport.
        :type: datetime
        """

        self._import_since = import_since

    @property
    def import_status(self):
        """
        Gets the import_status of this ExtsearchImport.
        Current Status of import. Created, Started are possible values.  

        :return: The import_status of this ExtsearchImport.
        :rtype: str
        """
        return self._import_status

    @import_status.setter
    def import_status(self, import_status):
        """
        Sets the import_status of this ExtsearchImport.
        Current Status of import. Created, Started are possible values.  

        :param import_status: The import_status of this ExtsearchImport.
        :type: str
        """

        self._import_status = import_status

    @property
    def import_type(self):
        """
        Gets the import_type of this ExtsearchImport.
        Value that specifies whether to a reimport or create a new index with new schema. reindex and reimport  are possible values. When reindex is selected a new index with a newer version will be created in ES and the old index will be deleted.  

        :return: The import_type of this ExtsearchImport.
        :rtype: str
        """
        return self._import_type

    @import_type.setter
    def import_type(self, import_type):
        """
        Sets the import_type of this ExtsearchImport.
        Value that specifies whether to a reimport or create a new index with new schema. reindex and reimport  are possible values. When reindex is selected a new index with a newer version will be created in ES and the old index will be deleted.  

        :param import_type: The import_type of this ExtsearchImport.
        :type: str
        """

        self._import_type = import_type

    @property
    def index_name(self):
        """
        Gets the index_name of this ExtsearchImport.
        Name of the micro-service that this external search index belongs to. For example, dejavu, aurora.. 

        :return: The index_name of this ExtsearchImport.
        :rtype: str
        """
        return self._index_name

    @index_name.setter
    def index_name(self, index_name):
        """
        Sets the index_name of this ExtsearchImport.
        Name of the micro-service that this external search index belongs to. For example, dejavu, aurora.. 

        :param index_name: The index_name of this ExtsearchImport.
        :type: str
        """

        self._index_name = index_name

    @property
    def index_types(self):
        """
        Gets the index_types of this ExtsearchImport.
        The fully-qualified names of the mo types. For example, \"compute.Blade\". If not specified, reimport will be done on all the mos that have external search enabled. When specified, only those mos will be reimported.  

        :return: The index_types of this ExtsearchImport.
        :rtype: list[str]
        """
        return self._index_types

    @index_types.setter
    def index_types(self, index_types):
        """
        Sets the index_types of this ExtsearchImport.
        The fully-qualified names of the mo types. For example, \"compute.Blade\". If not specified, reimport will be done on all the mos that have external search enabled. When specified, only those mos will be reimported.  

        :param index_types: The index_types of this ExtsearchImport.
        :type: list[str]
        """

        self._index_types = index_types

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ExtsearchImport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
