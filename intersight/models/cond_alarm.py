# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class CondAlarm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'affected_mo_id': 'str',
        'affected_mo_type': 'str',
        'affected_object': 'str',
        'ancestor_mo_id': 'str',
        'ancestor_mo_type': 'str',
        'code': 'str',
        'creation_time': 'datetime',
        'description': 'str',
        'last_transition_time': 'datetime',
        'ms_affected_object': 'str',
        'name': 'str',
        'orig_severity': 'str',
        'severity': 'str',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'affected_mo_id': 'AffectedMoId',
        'affected_mo_type': 'AffectedMoType',
        'affected_object': 'AffectedObject',
        'ancestor_mo_id': 'AncestorMoId',
        'ancestor_mo_type': 'AncestorMoType',
        'code': 'Code',
        'creation_time': 'CreationTime',
        'description': 'Description',
        'last_transition_time': 'LastTransitionTime',
        'ms_affected_object': 'MsAffectedObject',
        'name': 'Name',
        'orig_severity': 'OrigSeverity',
        'severity': 'Severity',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 affected_mo_id=None,
                 affected_mo_type=None,
                 affected_object=None,
                 ancestor_mo_id=None,
                 ancestor_mo_type=None,
                 code=None,
                 creation_time=None,
                 description=None,
                 last_transition_time=None,
                 ms_affected_object=None,
                 name=None,
                 orig_severity='None',
                 severity='None',
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """CondAlarm - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._affected_mo_id = None
        self._affected_mo_type = None
        self._affected_object = None
        self._ancestor_mo_id = None
        self._ancestor_mo_type = None
        self._code = None
        self._creation_time = None
        self._description = None
        self._last_transition_time = None
        self._ms_affected_object = None
        self._name = None
        self._orig_severity = None
        self._severity = None
        self._registered_device = None
        self.discriminator = None

        if affected_mo_id is not None:
            self.affected_mo_id = affected_mo_id
        if affected_mo_type is not None:
            self.affected_mo_type = affected_mo_type
        if affected_object is not None:
            self.affected_object = affected_object
        if ancestor_mo_id is not None:
            self.ancestor_mo_id = ancestor_mo_id
        if ancestor_mo_type is not None:
            self.ancestor_mo_type = ancestor_mo_type
        if code is not None:
            self.code = code
        if creation_time is not None:
            self.creation_time = creation_time
        if description is not None:
            self.description = description
        if last_transition_time is not None:
            self.last_transition_time = last_transition_time
        if ms_affected_object is not None:
            self.ms_affected_object = ms_affected_object
        if name is not None:
            self.name = name
        if orig_severity is not None:
            self.orig_severity = orig_severity
        if severity is not None:
            self.severity = severity
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def affected_mo_id(self):
        """Gets the affected_mo_id of this CondAlarm.  # noqa: E501

        MoId of the affected object from the managed system's point of view.    # noqa: E501

        :return: The affected_mo_id of this CondAlarm.  # noqa: E501
        :rtype: str
        """
        return self._affected_mo_id

    @affected_mo_id.setter
    def affected_mo_id(self, affected_mo_id):
        """Sets the affected_mo_id of this CondAlarm.

        MoId of the affected object from the managed system's point of view.    # noqa: E501

        :param affected_mo_id: The affected_mo_id of this CondAlarm.  # noqa: E501
        :type: str
        """

        self._affected_mo_id = affected_mo_id

    @property
    def affected_mo_type(self):
        """Gets the affected_mo_type of this CondAlarm.  # noqa: E501

        Managed system affected object type. For example Adaptor, FI, CIMC.    # noqa: E501

        :return: The affected_mo_type of this CondAlarm.  # noqa: E501
        :rtype: str
        """
        return self._affected_mo_type

    @affected_mo_type.setter
    def affected_mo_type(self, affected_mo_type):
        """Sets the affected_mo_type of this CondAlarm.

        Managed system affected object type. For example Adaptor, FI, CIMC.    # noqa: E501

        :param affected_mo_type: The affected_mo_type of this CondAlarm.  # noqa: E501
        :type: str
        """

        self._affected_mo_type = affected_mo_type

    @property
    def affected_object(self):
        """Gets the affected_object of this CondAlarm.  # noqa: E501

        A unique key for an alarm instance, consists of a combination of a unique system name and msAffectedObject.    # noqa: E501

        :return: The affected_object of this CondAlarm.  # noqa: E501
        :rtype: str
        """
        return self._affected_object

    @affected_object.setter
    def affected_object(self, affected_object):
        """Sets the affected_object of this CondAlarm.

        A unique key for an alarm instance, consists of a combination of a unique system name and msAffectedObject.    # noqa: E501

        :param affected_object: The affected_object of this CondAlarm.  # noqa: E501
        :type: str
        """

        self._affected_object = affected_object

    @property
    def ancestor_mo_id(self):
        """Gets the ancestor_mo_id of this CondAlarm.  # noqa: E501

        Parent MoId of the fault from managed system. For example, Blade moid for adaptor fault.    # noqa: E501

        :return: The ancestor_mo_id of this CondAlarm.  # noqa: E501
        :rtype: str
        """
        return self._ancestor_mo_id

    @ancestor_mo_id.setter
    def ancestor_mo_id(self, ancestor_mo_id):
        """Sets the ancestor_mo_id of this CondAlarm.

        Parent MoId of the fault from managed system. For example, Blade moid for adaptor fault.    # noqa: E501

        :param ancestor_mo_id: The ancestor_mo_id of this CondAlarm.  # noqa: E501
        :type: str
        """

        self._ancestor_mo_id = ancestor_mo_id

    @property
    def ancestor_mo_type(self):
        """Gets the ancestor_mo_type of this CondAlarm.  # noqa: E501

        Parent MO type of the fault from managed system. For example, Blade for adaptor fault.    # noqa: E501

        :return: The ancestor_mo_type of this CondAlarm.  # noqa: E501
        :rtype: str
        """
        return self._ancestor_mo_type

    @ancestor_mo_type.setter
    def ancestor_mo_type(self, ancestor_mo_type):
        """Sets the ancestor_mo_type of this CondAlarm.

        Parent MO type of the fault from managed system. For example, Blade for adaptor fault.    # noqa: E501

        :param ancestor_mo_type: The ancestor_mo_type of this CondAlarm.  # noqa: E501
        :type: str
        """

        self._ancestor_mo_type = ancestor_mo_type

    @property
    def code(self):
        """Gets the code of this CondAlarm.  # noqa: E501

        A unique alarm code. For alarms mapped from UCS faults, this will be the same as the UCS fault code.    # noqa: E501

        :return: The code of this CondAlarm.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CondAlarm.

        A unique alarm code. For alarms mapped from UCS faults, this will be the same as the UCS fault code.    # noqa: E501

        :param code: The code of this CondAlarm.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def creation_time(self):
        """Gets the creation_time of this CondAlarm.  # noqa: E501

        The time the alarm was created.    # noqa: E501

        :return: The creation_time of this CondAlarm.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this CondAlarm.

        The time the alarm was created.    # noqa: E501

        :param creation_time: The creation_time of this CondAlarm.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def description(self):
        """Gets the description of this CondAlarm.  # noqa: E501

        A longer description of the alarm than the name. The description contains details of the component reporting the issue.    # noqa: E501

        :return: The description of this CondAlarm.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CondAlarm.

        A longer description of the alarm than the name. The description contains details of the component reporting the issue.    # noqa: E501

        :param description: The description of this CondAlarm.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def last_transition_time(self):
        """Gets the last_transition_time of this CondAlarm.  # noqa: E501

        The time the alarm last had a change in severity.    # noqa: E501

        :return: The last_transition_time of this CondAlarm.  # noqa: E501
        :rtype: datetime
        """
        return self._last_transition_time

    @last_transition_time.setter
    def last_transition_time(self, last_transition_time):
        """Sets the last_transition_time of this CondAlarm.

        The time the alarm last had a change in severity.    # noqa: E501

        :param last_transition_time: The last_transition_time of this CondAlarm.  # noqa: E501
        :type: datetime
        """

        self._last_transition_time = last_transition_time

    @property
    def ms_affected_object(self):
        """Gets the ms_affected_object of this CondAlarm.  # noqa: E501

        A unique key for the alarm from the managed system's point of view. For example, in the case of UCS, this is the fault's dn.    # noqa: E501

        :return: The ms_affected_object of this CondAlarm.  # noqa: E501
        :rtype: str
        """
        return self._ms_affected_object

    @ms_affected_object.setter
    def ms_affected_object(self, ms_affected_object):
        """Sets the ms_affected_object of this CondAlarm.

        A unique key for the alarm from the managed system's point of view. For example, in the case of UCS, this is the fault's dn.    # noqa: E501

        :param ms_affected_object: The ms_affected_object of this CondAlarm.  # noqa: E501
        :type: str
        """

        self._ms_affected_object = ms_affected_object

    @property
    def name(self):
        """Gets the name of this CondAlarm.  # noqa: E501

        Uniquely identifies the type of alarm. For alarms originating from Intersight, this will be a descriptive name. For alarms that are mapped from faults, the name will be derived from fault properties. For example, alarms mapped from UCS faults will use a prefix of UCS and appended with the fault code.    # noqa: E501

        :return: The name of this CondAlarm.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CondAlarm.

        Uniquely identifies the type of alarm. For alarms originating from Intersight, this will be a descriptive name. For alarms that are mapped from faults, the name will be derived from fault properties. For example, alarms mapped from UCS faults will use a prefix of UCS and appended with the fault code.    # noqa: E501

        :param name: The name of this CondAlarm.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def orig_severity(self):
        """Gets the orig_severity of this CondAlarm.  # noqa: E501

        The original severity when the alarm was first created.    # noqa: E501

        :return: The orig_severity of this CondAlarm.  # noqa: E501
        :rtype: str
        """
        return self._orig_severity

    @orig_severity.setter
    def orig_severity(self, orig_severity):
        """Sets the orig_severity of this CondAlarm.

        The original severity when the alarm was first created.    # noqa: E501

        :param orig_severity: The orig_severity of this CondAlarm.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Info", "Critical", "Warning",
                          "Cleared"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and orig_severity not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `orig_severity` ({0}), must be one of {1}"  # noqa: E501
                .format(orig_severity, allowed_values))

        self._orig_severity = orig_severity

    @property
    def severity(self):
        """Gets the severity of this CondAlarm.  # noqa: E501

        The severity of the alarm. Valid values are Critical, Warning, Info, and Cleared.     # noqa: E501

        :return: The severity of this CondAlarm.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this CondAlarm.

        The severity of the alarm. Valid values are Critical, Warning, Info, and Cleared.     # noqa: E501

        :param severity: The severity of this CondAlarm.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Info", "Critical", "Warning",
                          "Cleared"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and severity not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values))

        self._severity = severity

    @property
    def registered_device(self):
        """Gets the registered_device of this CondAlarm.  # noqa: E501


        :return: The registered_device of this CondAlarm.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this CondAlarm.


        :param registered_device: The registered_device of this CondAlarm.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CondAlarm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CondAlarm):
            return True

        return self.to_dict() != other.to_dict()
