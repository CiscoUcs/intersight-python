# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class RecoveryBackupSchedule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'execution_time': 'datetime',
        'frequency_unit': 'str',
        'hours': 'int'
    }

    attribute_map = {
        'execution_time': 'ExecutionTime',
        'frequency_unit': 'FrequencyUnit',
        'hours': 'Hours'
    }

    def __init__(self,
                 execution_time=None,
                 frequency_unit='Daily',
                 hours=8,
                 local_vars_configuration=None):  # noqa: E501
        """RecoveryBackupSchedule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._execution_time = None
        self._frequency_unit = None
        self._hours = None
        self.discriminator = None

        if execution_time is not None:
            self.execution_time = execution_time
        if frequency_unit is not None:
            self.frequency_unit = frequency_unit
        if hours is not None:
            self.hours = hours

    @property
    def execution_time(self):
        """Gets the execution_time of this RecoveryBackupSchedule.  # noqa: E501

        The time at which the backup is to be run on a given day. This is used when the frequency unit is daily.    # noqa: E501

        :return: The execution_time of this RecoveryBackupSchedule.  # noqa: E501
        :rtype: datetime
        """
        return self._execution_time

    @execution_time.setter
    def execution_time(self, execution_time):
        """Sets the execution_time of this RecoveryBackupSchedule.

        The time at which the backup is to be run on a given day. This is used when the frequency unit is daily.    # noqa: E501

        :param execution_time: The execution_time of this RecoveryBackupSchedule.  # noqa: E501
        :type: datetime
        """

        self._execution_time = execution_time

    @property
    def frequency_unit(self):
        """Gets the frequency_unit of this RecoveryBackupSchedule.  # noqa: E501

        The frequency at which the backup schedule must run.    # noqa: E501

        :return: The frequency_unit of this RecoveryBackupSchedule.  # noqa: E501
        :rtype: str
        """
        return self._frequency_unit

    @frequency_unit.setter
    def frequency_unit(self, frequency_unit):
        """Sets the frequency_unit of this RecoveryBackupSchedule.

        The frequency at which the backup schedule must run.    # noqa: E501

        :param frequency_unit: The frequency_unit of this RecoveryBackupSchedule.  # noqa: E501
        :type: str
        """
        allowed_values = ["Daily", "Periodic"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and frequency_unit not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `frequency_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency_unit, allowed_values))

        self._frequency_unit = frequency_unit

    @property
    def hours(self):
        """Gets the hours of this RecoveryBackupSchedule.  # noqa: E501

        The frequency, in hours, at which the backup schedule runs.     # noqa: E501

        :return: The hours of this RecoveryBackupSchedule.  # noqa: E501
        :rtype: int
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this RecoveryBackupSchedule.

        The frequency, in hours, at which the backup schedule runs.     # noqa: E501

        :param hours: The hours of this RecoveryBackupSchedule.  # noqa: E501
        :type: int
        """
        allowed_values = [8, 4, 12, 16, 20]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and hours not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `hours` ({0}), must be one of {1}"  # noqa: E501
                .format(hours, allowed_values))

        self._hours = hours

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecoveryBackupSchedule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RecoveryBackupSchedule):
            return True

        return self.to_dict() != other.to_dict()
