# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class IamCertificateRequestAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email_address': 'str',
        'name': 'str',
        'request': 'str',
        'self_signed': 'bool',
        'subject': 'PkixDistinguishedName',
        'subject_alternate_name': 'PkixSubjectAlternateName',
        'account': 'IamAccount',
        'certificate': 'IamCertificate',
        'private_key_spec': 'IamPrivateKeySpec'
    }

    attribute_map = {
        'email_address': 'EmailAddress',
        'name': 'Name',
        'request': 'Request',
        'self_signed': 'SelfSigned',
        'subject': 'Subject',
        'subject_alternate_name': 'SubjectAlternateName',
        'account': 'Account',
        'certificate': 'Certificate',
        'private_key_spec': 'PrivateKeySpec'
    }

    def __init__(self,
                 email_address=None,
                 name=None,
                 request=None,
                 self_signed=None,
                 subject=None,
                 subject_alternate_name=None,
                 account=None,
                 certificate=None,
                 private_key_spec=None,
                 local_vars_configuration=None):  # noqa: E501
        """IamCertificateRequestAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._email_address = None
        self._name = None
        self._request = None
        self._self_signed = None
        self._subject = None
        self._subject_alternate_name = None
        self._account = None
        self._certificate = None
        self._private_key_spec = None
        self.discriminator = None

        if email_address is not None:
            self.email_address = email_address
        if name is not None:
            self.name = name
        if request is not None:
            self.request = request
        if self_signed is not None:
            self.self_signed = self_signed
        if subject is not None:
            self.subject = subject
        if subject_alternate_name is not None:
            self.subject_alternate_name = subject_alternate_name
        if account is not None:
            self.account = account
        if certificate is not None:
            self.certificate = certificate
        if private_key_spec is not None:
            self.private_key_spec = private_key_spec

    @property
    def email_address(self):
        """Gets the email_address of this IamCertificateRequestAllOf.  # noqa: E501

        User input email address, an optional part of the subject of the certificate request.    # noqa: E501

        :return: The email_address of this IamCertificateRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this IamCertificateRequestAllOf.

        User input email address, an optional part of the subject of the certificate request.    # noqa: E501

        :param email_address: The email_address of this IamCertificateRequestAllOf.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def name(self):
        """Gets the name of this IamCertificateRequestAllOf.  # noqa: E501

        Name of the certificate request.    # noqa: E501

        :return: The name of this IamCertificateRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IamCertificateRequestAllOf.

        Name of the certificate request.    # noqa: E501

        :param name: The name of this IamCertificateRequestAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def request(self):
        """Gets the request of this IamCertificateRequestAllOf.  # noqa: E501

        Generated certificate signing request (CSR) in PEM format.    # noqa: E501

        :return: The request of this IamCertificateRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this IamCertificateRequestAllOf.

        Generated certificate signing request (CSR) in PEM format.    # noqa: E501

        :param request: The request of this IamCertificateRequestAllOf.  # noqa: E501
        :type: str
        """

        self._request = request

    @property
    def self_signed(self):
        """Gets the self_signed of this IamCertificateRequestAllOf.  # noqa: E501

        Whether the user wants the generated CSR to be self-signed by the appliance.    # noqa: E501

        :return: The self_signed of this IamCertificateRequestAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._self_signed

    @self_signed.setter
    def self_signed(self, self_signed):
        """Sets the self_signed of this IamCertificateRequestAllOf.

        Whether the user wants the generated CSR to be self-signed by the appliance.    # noqa: E501

        :param self_signed: The self_signed of this IamCertificateRequestAllOf.  # noqa: E501
        :type: bool
        """

        self._self_signed = self_signed

    @property
    def subject(self):
        """Gets the subject of this IamCertificateRequestAllOf.  # noqa: E501


        :return: The subject of this IamCertificateRequestAllOf.  # noqa: E501
        :rtype: PkixDistinguishedName
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this IamCertificateRequestAllOf.


        :param subject: The subject of this IamCertificateRequestAllOf.  # noqa: E501
        :type: PkixDistinguishedName
        """

        self._subject = subject

    @property
    def subject_alternate_name(self):
        """Gets the subject_alternate_name of this IamCertificateRequestAllOf.  # noqa: E501


        :return: The subject_alternate_name of this IamCertificateRequestAllOf.  # noqa: E501
        :rtype: PkixSubjectAlternateName
        """
        return self._subject_alternate_name

    @subject_alternate_name.setter
    def subject_alternate_name(self, subject_alternate_name):
        """Sets the subject_alternate_name of this IamCertificateRequestAllOf.


        :param subject_alternate_name: The subject_alternate_name of this IamCertificateRequestAllOf.  # noqa: E501
        :type: PkixSubjectAlternateName
        """

        self._subject_alternate_name = subject_alternate_name

    @property
    def account(self):
        """Gets the account of this IamCertificateRequestAllOf.  # noqa: E501


        :return: The account of this IamCertificateRequestAllOf.  # noqa: E501
        :rtype: IamAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this IamCertificateRequestAllOf.


        :param account: The account of this IamCertificateRequestAllOf.  # noqa: E501
        :type: IamAccount
        """

        self._account = account

    @property
    def certificate(self):
        """Gets the certificate of this IamCertificateRequestAllOf.  # noqa: E501


        :return: The certificate of this IamCertificateRequestAllOf.  # noqa: E501
        :rtype: IamCertificate
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this IamCertificateRequestAllOf.


        :param certificate: The certificate of this IamCertificateRequestAllOf.  # noqa: E501
        :type: IamCertificate
        """

        self._certificate = certificate

    @property
    def private_key_spec(self):
        """Gets the private_key_spec of this IamCertificateRequestAllOf.  # noqa: E501


        :return: The private_key_spec of this IamCertificateRequestAllOf.  # noqa: E501
        :rtype: IamPrivateKeySpec
        """
        return self._private_key_spec

    @private_key_spec.setter
    def private_key_spec(self, private_key_spec):
        """Sets the private_key_spec of this IamCertificateRequestAllOf.


        :param private_key_spec: The private_key_spec of this IamCertificateRequestAllOf.  # noqa: E501
        :type: IamPrivateKeySpec
        """

        self._private_key_spec = private_key_spec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IamCertificateRequestAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IamCertificateRequestAllOf):
            return True

        return self.to_dict() != other.to_dict()
