# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1461
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VnicFcIf(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'name': 'str',
        'order': 'int',
        'persistent_bindings': 'bool',
        'placement': 'VnicPlacementSettings',
        'type': 'str',
        'fc_adapter_policy': 'VnicFcAdapterPolicyRef',
        'fc_network_policy': 'VnicFcNetworkPolicyRef',
        'fc_qos_policy': 'VnicFcQosPolicyRef',
        'organization': 'OrganizationOrganizationRef',
        'san_connectivity_policy': 'VnicSanConnectivityPolicyRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'name': 'Name',
        'order': 'Order',
        'persistent_bindings': 'PersistentBindings',
        'placement': 'Placement',
        'type': 'Type',
        'fc_adapter_policy': 'FcAdapterPolicy',
        'fc_network_policy': 'FcNetworkPolicy',
        'fc_qos_policy': 'FcQosPolicy',
        'organization': 'Organization',
        'san_connectivity_policy': 'SanConnectivityPolicy'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, name=None, order=None, persistent_bindings=None, placement=None, type='fc-initiator', fc_adapter_policy=None, fc_network_policy=None, fc_qos_policy=None, organization=None, san_connectivity_policy=None):
        """
        VnicFcIf - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._name = None
        self._order = None
        self._persistent_bindings = None
        self._placement = None
        self._type = None
        self._fc_adapter_policy = None
        self._fc_network_policy = None
        self._fc_qos_policy = None
        self._organization = None
        self._san_connectivity_policy = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if name is not None:
          self.name = name
        if order is not None:
          self.order = order
        if persistent_bindings is not None:
          self.persistent_bindings = persistent_bindings
        if placement is not None:
          self.placement = placement
        if type is not None:
          self.type = type
        if fc_adapter_policy is not None:
          self.fc_adapter_policy = fc_adapter_policy
        if fc_network_policy is not None:
          self.fc_network_policy = fc_network_policy
        if fc_qos_policy is not None:
          self.fc_qos_policy = fc_qos_policy
        if organization is not None:
          self.organization = organization
        if san_connectivity_policy is not None:
          self.san_connectivity_policy = san_connectivity_policy

    @property
    def account_moid(self):
        """
        Gets the account_moid of this VnicFcIf.
        The Account ID for this managed object.

        :return: The account_moid of this VnicFcIf.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this VnicFcIf.
        The Account ID for this managed object.

        :param account_moid: The account_moid of this VnicFcIf.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this VnicFcIf.
        The time when this managed object was created.

        :return: The create_time of this VnicFcIf.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this VnicFcIf.
        The time when this managed object was created.

        :param create_time: The create_time of this VnicFcIf.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this VnicFcIf.
        The DomainGroup ID for this managed object.

        :return: The domain_group_moid of this VnicFcIf.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this VnicFcIf.
        The DomainGroup ID for this managed object.

        :param domain_group_moid: The domain_group_moid of this VnicFcIf.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this VnicFcIf.
        The time when this managed object was last modified.

        :return: The mod_time of this VnicFcIf.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this VnicFcIf.
        The time when this managed object was last modified.

        :param mod_time: The mod_time of this VnicFcIf.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this VnicFcIf.
        The unique identifier of this Managed Object instance.

        :return: The moid of this VnicFcIf.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this VnicFcIf.
        The unique identifier of this Managed Object instance.

        :param moid: The moid of this VnicFcIf.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this VnicFcIf.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        :return: The object_type of this VnicFcIf.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this VnicFcIf.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        :param object_type: The object_type of this VnicFcIf.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this VnicFcIf.
        The array of owners which represent effective ownership of this object.

        :return: The owners of this VnicFcIf.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this VnicFcIf.
        The array of owners which represent effective ownership of this object.

        :param owners: The owners of this VnicFcIf.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this VnicFcIf.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.

        :return: The shared_scope of this VnicFcIf.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this VnicFcIf.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.

        :param shared_scope: The shared_scope of this VnicFcIf.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this VnicFcIf.
        The array of tags, which allow to add key, value meta-data to managed objects.

        :return: The tags of this VnicFcIf.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this VnicFcIf.
        The array of tags, which allow to add key, value meta-data to managed objects.

        :param tags: The tags of this VnicFcIf.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this VnicFcIf.
        The versioning info for this managed object.

        :return: The version_context of this VnicFcIf.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this VnicFcIf.
        The versioning info for this managed object.

        :param version_context: The version_context of this VnicFcIf.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this VnicFcIf.
        The array containing the MO references of the ancestors in the object containment hierarchy.

        :return: The ancestors of this VnicFcIf.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this VnicFcIf.
        The array containing the MO references of the ancestors in the object containment hierarchy.

        :param ancestors: The ancestors of this VnicFcIf.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this VnicFcIf.
        The direct ancestor of this managed object in the containment hierarchy.

        :return: The parent of this VnicFcIf.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this VnicFcIf.
        The direct ancestor of this managed object in the containment hierarchy.

        :param parent: The parent of this VnicFcIf.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this VnicFcIf.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.

        :return: The permission_resources of this VnicFcIf.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this VnicFcIf.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.

        :param permission_resources: The permission_resources of this VnicFcIf.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def name(self):
        """
        Gets the name of this VnicFcIf.
        Name of the virtual fibre channel interface.

        :return: The name of this VnicFcIf.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this VnicFcIf.
        Name of the virtual fibre channel interface.

        :param name: The name of this VnicFcIf.
        :type: str
        """

        self._name = name

    @property
    def order(self):
        """
        Gets the order of this VnicFcIf.
        The order in which the virtual interface is brought up. The order assigned to an interface should be unique for all the Ethernet and Fibre-Channel interfaces on each PCI link on a VIC adapter. The maximum value of PCI order is limited by the number of virtual interfaces (Ethernet and Fibre-Channel) on each PCI link on a VIC adapter. All VIC adapters have a single PCI link except VIC 1385 which has two.

        :return: The order of this VnicFcIf.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this VnicFcIf.
        The order in which the virtual interface is brought up. The order assigned to an interface should be unique for all the Ethernet and Fibre-Channel interfaces on each PCI link on a VIC adapter. The maximum value of PCI order is limited by the number of virtual interfaces (Ethernet and Fibre-Channel) on each PCI link on a VIC adapter. All VIC adapters have a single PCI link except VIC 1385 which has two.

        :param order: The order of this VnicFcIf.
        :type: int
        """

        self._order = order

    @property
    def persistent_bindings(self):
        """
        Gets the persistent_bindings of this VnicFcIf.
        Enables retention of LUN ID associations in memory until they are manually cleared.

        :return: The persistent_bindings of this VnicFcIf.
        :rtype: bool
        """
        return self._persistent_bindings

    @persistent_bindings.setter
    def persistent_bindings(self, persistent_bindings):
        """
        Sets the persistent_bindings of this VnicFcIf.
        Enables retention of LUN ID associations in memory until they are manually cleared.

        :param persistent_bindings: The persistent_bindings of this VnicFcIf.
        :type: bool
        """

        self._persistent_bindings = persistent_bindings

    @property
    def placement(self):
        """
        Gets the placement of this VnicFcIf.
        Placement Settings for the virtual interface.

        :return: The placement of this VnicFcIf.
        :rtype: VnicPlacementSettings
        """
        return self._placement

    @placement.setter
    def placement(self, placement):
        """
        Sets the placement of this VnicFcIf.
        Placement Settings for the virtual interface.

        :param placement: The placement of this VnicFcIf.
        :type: VnicPlacementSettings
        """

        self._placement = placement

    @property
    def type(self):
        """
        Gets the type of this VnicFcIf.
        VHBA Type configuration for SAN Connectivity Policy. This configuration is supported only on Cisco VIC 14XX series and higher series of adapters.

        :return: The type of this VnicFcIf.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this VnicFcIf.
        VHBA Type configuration for SAN Connectivity Policy. This configuration is supported only on Cisco VIC 14XX series and higher series of adapters.

        :param type: The type of this VnicFcIf.
        :type: str
        """
        allowed_values = ["fc-initiator", "fc-nvme-initiator", "fc-nvme-target", "fc-target"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def fc_adapter_policy(self):
        """
        Gets the fc_adapter_policy of this VnicFcIf.
        Relationship to the the Fibre Channel Adapter Policy.

        :return: The fc_adapter_policy of this VnicFcIf.
        :rtype: VnicFcAdapterPolicyRef
        """
        return self._fc_adapter_policy

    @fc_adapter_policy.setter
    def fc_adapter_policy(self, fc_adapter_policy):
        """
        Sets the fc_adapter_policy of this VnicFcIf.
        Relationship to the the Fibre Channel Adapter Policy.

        :param fc_adapter_policy: The fc_adapter_policy of this VnicFcIf.
        :type: VnicFcAdapterPolicyRef
        """

        self._fc_adapter_policy = fc_adapter_policy

    @property
    def fc_network_policy(self):
        """
        Gets the fc_network_policy of this VnicFcIf.
        Relationship to the Fibre Channel Network Policy.

        :return: The fc_network_policy of this VnicFcIf.
        :rtype: VnicFcNetworkPolicyRef
        """
        return self._fc_network_policy

    @fc_network_policy.setter
    def fc_network_policy(self, fc_network_policy):
        """
        Sets the fc_network_policy of this VnicFcIf.
        Relationship to the Fibre Channel Network Policy.

        :param fc_network_policy: The fc_network_policy of this VnicFcIf.
        :type: VnicFcNetworkPolicyRef
        """

        self._fc_network_policy = fc_network_policy

    @property
    def fc_qos_policy(self):
        """
        Gets the fc_qos_policy of this VnicFcIf.
        Relationship to the Fibre Channel QoS Policy.

        :return: The fc_qos_policy of this VnicFcIf.
        :rtype: VnicFcQosPolicyRef
        """
        return self._fc_qos_policy

    @fc_qos_policy.setter
    def fc_qos_policy(self, fc_qos_policy):
        """
        Sets the fc_qos_policy of this VnicFcIf.
        Relationship to the Fibre Channel QoS Policy.

        :param fc_qos_policy: The fc_qos_policy of this VnicFcIf.
        :type: VnicFcQosPolicyRef
        """

        self._fc_qos_policy = fc_qos_policy

    @property
    def organization(self):
        """
        Gets the organization of this VnicFcIf.
        Relationship to the Organization that owns the Managed Object.

        :return: The organization of this VnicFcIf.
        :rtype: OrganizationOrganizationRef
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this VnicFcIf.
        Relationship to the Organization that owns the Managed Object.

        :param organization: The organization of this VnicFcIf.
        :type: OrganizationOrganizationRef
        """

        self._organization = organization

    @property
    def san_connectivity_policy(self):
        """
        Gets the san_connectivity_policy of this VnicFcIf.
        Relationship to the SAN Connectivity Policy.

        :return: The san_connectivity_policy of this VnicFcIf.
        :rtype: VnicSanConnectivityPolicyRef
        """
        return self._san_connectivity_policy

    @san_connectivity_policy.setter
    def san_connectivity_policy(self, san_connectivity_policy):
        """
        Sets the san_connectivity_policy of this VnicFcIf.
        Relationship to the SAN Connectivity Policy.

        :param san_connectivity_policy: The san_connectivity_policy of this VnicFcIf.
        :type: VnicSanConnectivityPolicyRef
        """

        self._san_connectivity_policy = san_connectivity_policy

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VnicFcIf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
