# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ContentTextParameterAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_delimiter': 'bool',
        'is_next_capture_on_same_line': 'bool',
        'regex_line': 'str'
    }

    attribute_map = {
        'is_delimiter': 'IsDelimiter',
        'is_next_capture_on_same_line': 'IsNextCaptureOnSameLine',
        'regex_line': 'RegexLine'
    }

    def __init__(self,
                 is_delimiter=None,
                 is_next_capture_on_same_line=None,
                 regex_line=None,
                 local_vars_configuration=None):  # noqa: E501
        """ContentTextParameterAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_delimiter = None
        self._is_next_capture_on_same_line = None
        self._regex_line = None
        self.discriminator = None

        if is_delimiter is not None:
            self.is_delimiter = is_delimiter
        if is_next_capture_on_same_line is not None:
            self.is_next_capture_on_same_line = is_next_capture_on_same_line
        if regex_line is not None:
            self.regex_line = regex_line

    @property
    def is_delimiter(self):
        """Gets the is_delimiter of this ContentTextParameterAllOf.  # noqa: E501

        Data to be extracted from text content can be simple type or complex type or collection of simple/complex types. Complex types are group of simple or complex type.  Delimiter is required to stop parsing list and complex data types.  isDelimiter specifies whether given TextParameter is a delimiter or regular rule to capture the text data.     # noqa: E501

        :return: The is_delimiter of this ContentTextParameterAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_delimiter

    @is_delimiter.setter
    def is_delimiter(self, is_delimiter):
        """Sets the is_delimiter of this ContentTextParameterAllOf.

        Data to be extracted from text content can be simple type or complex type or collection of simple/complex types. Complex types are group of simple or complex type.  Delimiter is required to stop parsing list and complex data types.  isDelimiter specifies whether given TextParameter is a delimiter or regular rule to capture the text data.     # noqa: E501

        :param is_delimiter: The is_delimiter of this ContentTextParameterAllOf.  # noqa: E501
        :type: bool
        """

        self._is_delimiter = is_delimiter

    @property
    def is_next_capture_on_same_line(self):
        """Gets the is_next_capture_on_same_line of this ContentTextParameterAllOf.  # noqa: E501

        Set to true of the next value to capture resides on the same text line of current match. By default textFSM engine gets the next text line on finding the first match.     # noqa: E501

        :return: The is_next_capture_on_same_line of this ContentTextParameterAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_next_capture_on_same_line

    @is_next_capture_on_same_line.setter
    def is_next_capture_on_same_line(self, is_next_capture_on_same_line):
        """Sets the is_next_capture_on_same_line of this ContentTextParameterAllOf.

        Set to true of the next value to capture resides on the same text line of current match. By default textFSM engine gets the next text line on finding the first match.     # noqa: E501

        :param is_next_capture_on_same_line: The is_next_capture_on_same_line of this ContentTextParameterAllOf.  # noqa: E501
        :type: bool
        """

        self._is_next_capture_on_same_line = is_next_capture_on_same_line

    @property
    def regex_line(self):
        """Gets the regex_line of this ContentTextParameterAllOf.  # noqa: E501

        Regular expression of the line containing the data to be extracted from text content.      # noqa: E501

        :return: The regex_line of this ContentTextParameterAllOf.  # noqa: E501
        :rtype: str
        """
        return self._regex_line

    @regex_line.setter
    def regex_line(self, regex_line):
        """Sets the regex_line of this ContentTextParameterAllOf.

        Regular expression of the line containing the data to be extracted from text content.      # noqa: E501

        :param regex_line: The regex_line of this ContentTextParameterAllOf.  # noqa: E501
        :type: str
        """

        self._regex_line = regex_line

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentTextParameterAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContentTextParameterAllOf):
            return True

        return self.to_dict() != other.to_dict()
