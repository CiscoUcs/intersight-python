# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1415
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorkflowWorkerTask(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'description': 'str',
        'label': 'str',
        'name': 'str',
        'input_parameters': 'object',
        'on_failure': 'str',
        'on_success': 'str',
        'catalog_moid': 'str',
        'task_definition_id': 'str',
        'task_definition_name': 'str',
        'version': 'int'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'description': 'Description',
        'label': 'Label',
        'name': 'Name',
        'input_parameters': 'InputParameters',
        'on_failure': 'OnFailure',
        'on_success': 'OnSuccess',
        'catalog_moid': 'CatalogMoid',
        'task_definition_id': 'TaskDefinitionId',
        'task_definition_name': 'TaskDefinitionName',
        'version': 'Version'
    }

    def __init__(self, object_type=None, description=None, label=None, name=None, input_parameters=None, on_failure=None, on_success=None, catalog_moid=None, task_definition_id=None, task_definition_name=None, version=None):
        """
        WorkflowWorkerTask - a model defined in Swagger
        """

        self._object_type = None
        self._description = None
        self._label = None
        self._name = None
        self._input_parameters = None
        self._on_failure = None
        self._on_success = None
        self._catalog_moid = None
        self._task_definition_id = None
        self._task_definition_name = None
        self._version = None

        if object_type is not None:
          self.object_type = object_type
        if description is not None:
          self.description = description
        if label is not None:
          self.label = label
        if name is not None:
          self.name = name
        if input_parameters is not None:
          self.input_parameters = input_parameters
        if on_failure is not None:
          self.on_failure = on_failure
        if on_success is not None:
          self.on_success = on_success
        if catalog_moid is not None:
          self.catalog_moid = catalog_moid
        if task_definition_id is not None:
          self.task_definition_id = task_definition_id
        if task_definition_name is not None:
          self.task_definition_name = task_definition_name
        if version is not None:
          self.version = version

    @property
    def object_type(self):
        """
        Gets the object_type of this WorkflowWorkerTask.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :return: The object_type of this WorkflowWorkerTask.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this WorkflowWorkerTask.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :param object_type: The object_type of this WorkflowWorkerTask.
        :type: str
        """

        self._object_type = object_type

    @property
    def description(self):
        """
        Gets the description of this WorkflowWorkerTask.
        The description of this task instance in the workflow.  

        :return: The description of this WorkflowWorkerTask.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this WorkflowWorkerTask.
        The description of this task instance in the workflow.  

        :param description: The description of this WorkflowWorkerTask.
        :type: str
        """

        self._description = description

    @property
    def label(self):
        """
        Gets the label of this WorkflowWorkerTask.
        A user defined label identifier of the workflow task used for UI display.  

        :return: The label of this WorkflowWorkerTask.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this WorkflowWorkerTask.
        A user defined label identifier of the workflow task used for UI display.  

        :param label: The label of this WorkflowWorkerTask.
        :type: str
        """

        self._label = label

    @property
    def name(self):
        """
        Gets the name of this WorkflowWorkerTask.
        The name of the task within the workflow and it must be unique among all WorkflowTasks within a workflow definition. This name serves as the internal unique identifier for the task and is used to pick input and output parameters to feed into other tasks.   

        :return: The name of this WorkflowWorkerTask.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WorkflowWorkerTask.
        The name of the task within the workflow and it must be unique among all WorkflowTasks within a workflow definition. This name serves as the internal unique identifier for the task and is used to pick input and output parameters to feed into other tasks.   

        :param name: The name of this WorkflowWorkerTask.
        :type: str
        """

        self._name = name

    @property
    def input_parameters(self):
        """
        Gets the input_parameters of this WorkflowWorkerTask.
        JSON formatted map that defines the input given to the task. JSONPath is used for chaining output from previous tasks as inputs into the current task. The format to specify the mapping is '${Source.input/output.JsonPath}'. 'Source' can be either workflow or the name of the task within the workflow. You can map the task input to either a workflow input or a task output. Following this is JSON path expression to extract JSON fragment from source's input/output.  

        :return: The input_parameters of this WorkflowWorkerTask.
        :rtype: object
        """
        return self._input_parameters

    @input_parameters.setter
    def input_parameters(self, input_parameters):
        """
        Sets the input_parameters of this WorkflowWorkerTask.
        JSON formatted map that defines the input given to the task. JSONPath is used for chaining output from previous tasks as inputs into the current task. The format to specify the mapping is '${Source.input/output.JsonPath}'. 'Source' can be either workflow or the name of the task within the workflow. You can map the task input to either a workflow input or a task output. Following this is JSON path expression to extract JSON fragment from source's input/output.  

        :param input_parameters: The input_parameters of this WorkflowWorkerTask.
        :type: object
        """

        self._input_parameters = input_parameters

    @property
    def on_failure(self):
        """
        Gets the on_failure of this WorkflowWorkerTask.
        This specifies the name of the next task to run if Task fails.  This is the unique name given to the task instance within the workflow. In a graph model, denotes an edge to another Task Node.  

        :return: The on_failure of this WorkflowWorkerTask.
        :rtype: str
        """
        return self._on_failure

    @on_failure.setter
    def on_failure(self, on_failure):
        """
        Sets the on_failure of this WorkflowWorkerTask.
        This specifies the name of the next task to run if Task fails.  This is the unique name given to the task instance within the workflow. In a graph model, denotes an edge to another Task Node.  

        :param on_failure: The on_failure of this WorkflowWorkerTask.
        :type: str
        """

        self._on_failure = on_failure

    @property
    def on_success(self):
        """
        Gets the on_success of this WorkflowWorkerTask.
        This specifies the name of the next task to run if Task succeeds.  This is the unique name given to the task instance within the workflow. In a graph model, denotes an edge to another Task Node.   

        :return: The on_success of this WorkflowWorkerTask.
        :rtype: str
        """
        return self._on_success

    @on_success.setter
    def on_success(self, on_success):
        """
        Sets the on_success of this WorkflowWorkerTask.
        This specifies the name of the next task to run if Task succeeds.  This is the unique name given to the task instance within the workflow. In a graph model, denotes an edge to another Task Node.   

        :param on_success: The on_success of this WorkflowWorkerTask.
        :type: str
        """

        self._on_success = on_success

    @property
    def catalog_moid(self):
        """
        Gets the catalog_moid of this WorkflowWorkerTask.
        Specify the catalog moid that this task belongs.  

        :return: The catalog_moid of this WorkflowWorkerTask.
        :rtype: str
        """
        return self._catalog_moid

    @catalog_moid.setter
    def catalog_moid(self, catalog_moid):
        """
        Sets the catalog_moid of this WorkflowWorkerTask.
        Specify the catalog moid that this task belongs.  

        :param catalog_moid: The catalog_moid of this WorkflowWorkerTask.
        :type: str
        """

        self._catalog_moid = catalog_moid

    @property
    def task_definition_id(self):
        """
        Gets the task_definition_id of this WorkflowWorkerTask.
        The resolved referenced task definition managed object.  

        :return: The task_definition_id of this WorkflowWorkerTask.
        :rtype: str
        """
        return self._task_definition_id

    @task_definition_id.setter
    def task_definition_id(self, task_definition_id):
        """
        Sets the task_definition_id of this WorkflowWorkerTask.
        The resolved referenced task definition managed object.  

        :param task_definition_id: The task_definition_id of this WorkflowWorkerTask.
        :type: str
        """

        self._task_definition_id = task_definition_id

    @property
    def task_definition_name(self):
        """
        Gets the task_definition_name of this WorkflowWorkerTask.
        The qualified name of task that should be executed.  

        :return: The task_definition_name of this WorkflowWorkerTask.
        :rtype: str
        """
        return self._task_definition_name

    @task_definition_name.setter
    def task_definition_name(self, task_definition_name):
        """
        Sets the task_definition_name of this WorkflowWorkerTask.
        The qualified name of task that should be executed.  

        :param task_definition_name: The task_definition_name of this WorkflowWorkerTask.
        :type: str
        """

        self._task_definition_name = task_definition_name

    @property
    def version(self):
        """
        Gets the version of this WorkflowWorkerTask.
        The task definition version to use in this workflow. When no version is specified then the default version of the task at the time of creating or updating this workflow is used.   

        :return: The version of this WorkflowWorkerTask.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this WorkflowWorkerTask.
        The task definition version to use in this workflow. When no version is specified then the default version of the task at the time of creating or updating this workflow is used.   

        :param version: The version of this WorkflowWorkerTask.
        :type: int
        """

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkflowWorkerTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
