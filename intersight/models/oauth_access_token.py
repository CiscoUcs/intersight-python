# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-961
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OauthAccessToken(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_type': 'str',
        'expiry_time': 'datetime',
        'status': 'str',
        'token': 'str'
    }

    attribute_map = {
        'api_type': 'ApiType',
        'expiry_time': 'ExpiryTime',
        'status': 'Status',
        'token': 'Token'
    }

    def __init__(self, api_type='Unknown', expiry_time=None, status='Inactive', token=None):
        """
        OauthAccessToken - a model defined in Swagger
        """

        self._api_type = None
        self._expiry_time = None
        self._status = None
        self._token = None

        if api_type is not None:
          self.api_type = api_type
        if expiry_time is not None:
          self.expiry_time = expiry_time
        if status is not None:
          self.status = status
        if token is not None:
          self.token = token

    @property
    def api_type(self):
        """
        Gets the api_type of this OauthAccessToken.
        Oauth api type  

        :return: The api_type of this OauthAccessToken.
        :rtype: str
        """
        return self._api_type

    @api_type.setter
    def api_type(self, api_type):
        """
        Sets the api_type of this OauthAccessToken.
        Oauth api type  

        :param api_type: The api_type of this OauthAccessToken.
        :type: str
        """
        allowed_values = ["Unknown", "License"]
        if api_type not in allowed_values:
            raise ValueError(
                "Invalid value for `api_type` ({0}), must be one of {1}"
                .format(api_type, allowed_values)
            )

        self._api_type = api_type

    @property
    def expiry_time(self):
        """
        Gets the expiry_time of this OauthAccessToken.
        Access token expiry time  

        :return: The expiry_time of this OauthAccessToken.
        :rtype: datetime
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """
        Sets the expiry_time of this OauthAccessToken.
        Access token expiry time  

        :param expiry_time: The expiry_time of this OauthAccessToken.
        :type: datetime
        """

        self._expiry_time = expiry_time

    @property
    def status(self):
        """
        Gets the status of this OauthAccessToken.
        Access token status  

        :return: The status of this OauthAccessToken.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this OauthAccessToken.
        Access token status  

        :param status: The status of this OauthAccessToken.
        :type: str
        """
        allowed_values = ["Inactive", "Active", "Expired"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def token(self):
        """
        Gets the token of this OauthAccessToken.
        Access token   

        :return: The token of this OauthAccessToken.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this OauthAccessToken.
        Access token   

        :param token: The token of this OauthAccessToken.
        :type: str
        """

        self._token = token

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OauthAccessToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
