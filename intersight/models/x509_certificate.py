# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1295
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class X509Certificate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'issuer': 'PkixDistinguishedName',
        'not_after': 'datetime',
        'not_before': 'datetime',
        'pem_certificate': 'str',
        'sha256_fingerprint': 'str',
        'signature_algorithm': 'str',
        'subject': 'PkixDistinguishedName'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'issuer': 'Issuer',
        'not_after': 'NotAfter',
        'not_before': 'NotBefore',
        'pem_certificate': 'PemCertificate',
        'sha256_fingerprint': 'Sha256Fingerprint',
        'signature_algorithm': 'SignatureAlgorithm',
        'subject': 'Subject'
    }

    def __init__(self, object_type=None, issuer=None, not_after=None, not_before=None, pem_certificate=None, sha256_fingerprint=None, signature_algorithm=None, subject=None):
        """
        X509Certificate - a model defined in Swagger
        """

        self._object_type = None
        self._issuer = None
        self._not_after = None
        self._not_before = None
        self._pem_certificate = None
        self._sha256_fingerprint = None
        self._signature_algorithm = None
        self._subject = None

        if object_type is not None:
          self.object_type = object_type
        if issuer is not None:
          self.issuer = issuer
        if not_after is not None:
          self.not_after = not_after
        if not_before is not None:
          self.not_before = not_before
        if pem_certificate is not None:
          self.pem_certificate = pem_certificate
        if sha256_fingerprint is not None:
          self.sha256_fingerprint = sha256_fingerprint
        if signature_algorithm is not None:
          self.signature_algorithm = signature_algorithm
        if subject is not None:
          self.subject = subject

    @property
    def object_type(self):
        """
        Gets the object_type of this X509Certificate.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :return: The object_type of this X509Certificate.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this X509Certificate.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :param object_type: The object_type of this X509Certificate.
        :type: str
        """

        self._object_type = object_type

    @property
    def issuer(self):
        """
        Gets the issuer of this X509Certificate.
        The X.509 distinguished name of the issuer of this certificate.  

        :return: The issuer of this X509Certificate.
        :rtype: PkixDistinguishedName
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """
        Sets the issuer of this X509Certificate.
        The X.509 distinguished name of the issuer of this certificate.  

        :param issuer: The issuer of this X509Certificate.
        :type: PkixDistinguishedName
        """

        self._issuer = issuer

    @property
    def not_after(self):
        """
        Gets the not_after of this X509Certificate.
        The date on which the certificate's validity period ends.  

        :return: The not_after of this X509Certificate.
        :rtype: datetime
        """
        return self._not_after

    @not_after.setter
    def not_after(self, not_after):
        """
        Sets the not_after of this X509Certificate.
        The date on which the certificate's validity period ends.  

        :param not_after: The not_after of this X509Certificate.
        :type: datetime
        """

        self._not_after = not_after

    @property
    def not_before(self):
        """
        Gets the not_before of this X509Certificate.
        The date on which the certificate's validity period begins.  

        :return: The not_before of this X509Certificate.
        :rtype: datetime
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """
        Sets the not_before of this X509Certificate.
        The date on which the certificate's validity period begins.  

        :param not_before: The not_before of this X509Certificate.
        :type: datetime
        """

        self._not_before = not_before

    @property
    def pem_certificate(self):
        """
        Gets the pem_certificate of this X509Certificate.
        The base64 encoded certificate in PEM format.  

        :return: The pem_certificate of this X509Certificate.
        :rtype: str
        """
        return self._pem_certificate

    @pem_certificate.setter
    def pem_certificate(self, pem_certificate):
        """
        Sets the pem_certificate of this X509Certificate.
        The base64 encoded certificate in PEM format.  

        :param pem_certificate: The pem_certificate of this X509Certificate.
        :type: str
        """

        self._pem_certificate = pem_certificate

    @property
    def sha256_fingerprint(self):
        """
        Gets the sha256_fingerprint of this X509Certificate.
        The computed SHA-256 fingerprint of the certificate. Equivalent to 'openssl x509 -fingerprint -sha256'.  

        :return: The sha256_fingerprint of this X509Certificate.
        :rtype: str
        """
        return self._sha256_fingerprint

    @sha256_fingerprint.setter
    def sha256_fingerprint(self, sha256_fingerprint):
        """
        Sets the sha256_fingerprint of this X509Certificate.
        The computed SHA-256 fingerprint of the certificate. Equivalent to 'openssl x509 -fingerprint -sha256'.  

        :param sha256_fingerprint: The sha256_fingerprint of this X509Certificate.
        :type: str
        """

        self._sha256_fingerprint = sha256_fingerprint

    @property
    def signature_algorithm(self):
        """
        Gets the signature_algorithm of this X509Certificate.
        Signature algorithm, as specified in [RFC 5280](https://tools.ietf.org/html/rfc5280).  

        :return: The signature_algorithm of this X509Certificate.
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """
        Sets the signature_algorithm of this X509Certificate.
        Signature algorithm, as specified in [RFC 5280](https://tools.ietf.org/html/rfc5280).  

        :param signature_algorithm: The signature_algorithm of this X509Certificate.
        :type: str
        """

        self._signature_algorithm = signature_algorithm

    @property
    def subject(self):
        """
        Gets the subject of this X509Certificate.
        The X.509 distinguished name of the subject of this certificate.   

        :return: The subject of this X509Certificate.
        :rtype: PkixDistinguishedName
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this X509Certificate.
        The X.509 distinguished name of the subject of this certificate.   

        :param subject: The subject of this X509Certificate.
        :type: PkixDistinguishedName
        """

        self._subject = subject

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, X509Certificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
