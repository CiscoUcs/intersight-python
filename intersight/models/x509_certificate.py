# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class X509Certificate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'issuer': 'PkixDistinguishedName',
        'not_after': 'datetime',
        'not_before': 'datetime',
        'pem_certificate': 'str',
        'sha256_fingerprint': 'str',
        'signature_algorithm': 'str',
        'subject': 'PkixDistinguishedName'
    }

    attribute_map = {
        'issuer': 'Issuer',
        'not_after': 'NotAfter',
        'not_before': 'NotBefore',
        'pem_certificate': 'PemCertificate',
        'sha256_fingerprint': 'Sha256Fingerprint',
        'signature_algorithm': 'SignatureAlgorithm',
        'subject': 'Subject'
    }

    def __init__(self,
                 issuer=None,
                 not_after=None,
                 not_before=None,
                 pem_certificate=None,
                 sha256_fingerprint=None,
                 signature_algorithm=None,
                 subject=None,
                 local_vars_configuration=None):  # noqa: E501
        """X509Certificate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._issuer = None
        self._not_after = None
        self._not_before = None
        self._pem_certificate = None
        self._sha256_fingerprint = None
        self._signature_algorithm = None
        self._subject = None
        self.discriminator = None

        if issuer is not None:
            self.issuer = issuer
        if not_after is not None:
            self.not_after = not_after
        if not_before is not None:
            self.not_before = not_before
        if pem_certificate is not None:
            self.pem_certificate = pem_certificate
        if sha256_fingerprint is not None:
            self.sha256_fingerprint = sha256_fingerprint
        if signature_algorithm is not None:
            self.signature_algorithm = signature_algorithm
        if subject is not None:
            self.subject = subject

    @property
    def issuer(self):
        """Gets the issuer of this X509Certificate.  # noqa: E501


        :return: The issuer of this X509Certificate.  # noqa: E501
        :rtype: PkixDistinguishedName
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this X509Certificate.


        :param issuer: The issuer of this X509Certificate.  # noqa: E501
        :type: PkixDistinguishedName
        """

        self._issuer = issuer

    @property
    def not_after(self):
        """Gets the not_after of this X509Certificate.  # noqa: E501

        The date on which the certificate's validity period ends.    # noqa: E501

        :return: The not_after of this X509Certificate.  # noqa: E501
        :rtype: datetime
        """
        return self._not_after

    @not_after.setter
    def not_after(self, not_after):
        """Sets the not_after of this X509Certificate.

        The date on which the certificate's validity period ends.    # noqa: E501

        :param not_after: The not_after of this X509Certificate.  # noqa: E501
        :type: datetime
        """

        self._not_after = not_after

    @property
    def not_before(self):
        """Gets the not_before of this X509Certificate.  # noqa: E501

        The date on which the certificate's validity period begins.    # noqa: E501

        :return: The not_before of this X509Certificate.  # noqa: E501
        :rtype: datetime
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this X509Certificate.

        The date on which the certificate's validity period begins.    # noqa: E501

        :param not_before: The not_before of this X509Certificate.  # noqa: E501
        :type: datetime
        """

        self._not_before = not_before

    @property
    def pem_certificate(self):
        """Gets the pem_certificate of this X509Certificate.  # noqa: E501

        The base64 encoded certificate in PEM format.    # noqa: E501

        :return: The pem_certificate of this X509Certificate.  # noqa: E501
        :rtype: str
        """
        return self._pem_certificate

    @pem_certificate.setter
    def pem_certificate(self, pem_certificate):
        """Sets the pem_certificate of this X509Certificate.

        The base64 encoded certificate in PEM format.    # noqa: E501

        :param pem_certificate: The pem_certificate of this X509Certificate.  # noqa: E501
        :type: str
        """

        self._pem_certificate = pem_certificate

    @property
    def sha256_fingerprint(self):
        """Gets the sha256_fingerprint of this X509Certificate.  # noqa: E501

        The computed SHA-256 fingerprint of the certificate. Equivalent to 'openssl x509 -fingerprint -sha256'.    # noqa: E501

        :return: The sha256_fingerprint of this X509Certificate.  # noqa: E501
        :rtype: str
        """
        return self._sha256_fingerprint

    @sha256_fingerprint.setter
    def sha256_fingerprint(self, sha256_fingerprint):
        """Sets the sha256_fingerprint of this X509Certificate.

        The computed SHA-256 fingerprint of the certificate. Equivalent to 'openssl x509 -fingerprint -sha256'.    # noqa: E501

        :param sha256_fingerprint: The sha256_fingerprint of this X509Certificate.  # noqa: E501
        :type: str
        """

        self._sha256_fingerprint = sha256_fingerprint

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this X509Certificate.  # noqa: E501

        Signature algorithm, as specified in [RFC 5280](https://tools.ietf.org/html/rfc5280).    # noqa: E501

        :return: The signature_algorithm of this X509Certificate.  # noqa: E501
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this X509Certificate.

        Signature algorithm, as specified in [RFC 5280](https://tools.ietf.org/html/rfc5280).    # noqa: E501

        :param signature_algorithm: The signature_algorithm of this X509Certificate.  # noqa: E501
        :type: str
        """

        self._signature_algorithm = signature_algorithm

    @property
    def subject(self):
        """Gets the subject of this X509Certificate.  # noqa: E501


        :return: The subject of this X509Certificate.  # noqa: E501
        :rtype: PkixDistinguishedName
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this X509Certificate.


        :param subject: The subject of this X509Certificate.  # noqa: E501
        :type: PkixDistinguishedName
        """

        self._subject = subject

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, X509Certificate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, X509Certificate):
            return True

        return self.to_dict() != other.to_dict()
