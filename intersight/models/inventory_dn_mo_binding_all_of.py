# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class InventoryDnMoBindingAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dn': 'str',
        'target_mo_id': 'str',
        'target_mo_type': 'str',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'dn': 'Dn',
        'target_mo_id': 'TargetMoId',
        'target_mo_type': 'TargetMoType',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 dn=None,
                 target_mo_id=None,
                 target_mo_type=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """InventoryDnMoBindingAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dn = None
        self._target_mo_id = None
        self._target_mo_type = None
        self._registered_device = None
        self.discriminator = None

        if dn is not None:
            self.dn = dn
        if target_mo_id is not None:
            self.target_mo_id = target_mo_id
        if target_mo_type is not None:
            self.target_mo_type = target_mo_type
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def dn(self):
        """Gets the dn of this InventoryDnMoBindingAllOf.  # noqa: E501

        Distinguished Name of the UCSM object.    # noqa: E501

        :return: The dn of this InventoryDnMoBindingAllOf.  # noqa: E501
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """Sets the dn of this InventoryDnMoBindingAllOf.

        Distinguished Name of the UCSM object.    # noqa: E501

        :param dn: The dn of this InventoryDnMoBindingAllOf.  # noqa: E501
        :type: str
        """

        self._dn = dn

    @property
    def target_mo_id(self):
        """Gets the target_mo_id of this InventoryDnMoBindingAllOf.  # noqa: E501

        The property targetMoId represents the Binding target's MoId.    # noqa: E501

        :return: The target_mo_id of this InventoryDnMoBindingAllOf.  # noqa: E501
        :rtype: str
        """
        return self._target_mo_id

    @target_mo_id.setter
    def target_mo_id(self, target_mo_id):
        """Sets the target_mo_id of this InventoryDnMoBindingAllOf.

        The property targetMoId represents the Binding target's MoId.    # noqa: E501

        :param target_mo_id: The target_mo_id of this InventoryDnMoBindingAllOf.  # noqa: E501
        :type: str
        """

        self._target_mo_id = target_mo_id

    @property
    def target_mo_type(self):
        """Gets the target_mo_type of this InventoryDnMoBindingAllOf.  # noqa: E501

        The property targetMoType represents the Binding target's Mo type.     # noqa: E501

        :return: The target_mo_type of this InventoryDnMoBindingAllOf.  # noqa: E501
        :rtype: str
        """
        return self._target_mo_type

    @target_mo_type.setter
    def target_mo_type(self, target_mo_type):
        """Sets the target_mo_type of this InventoryDnMoBindingAllOf.

        The property targetMoType represents the Binding target's Mo type.     # noqa: E501

        :param target_mo_type: The target_mo_type of this InventoryDnMoBindingAllOf.  # noqa: E501
        :type: str
        """

        self._target_mo_type = target_mo_type

    @property
    def registered_device(self):
        """Gets the registered_device of this InventoryDnMoBindingAllOf.  # noqa: E501


        :return: The registered_device of this InventoryDnMoBindingAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this InventoryDnMoBindingAllOf.


        :param registered_device: The registered_device of this InventoryDnMoBindingAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventoryDnMoBindingAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InventoryDnMoBindingAllOf):
            return True

        return self.to_dict() != other.to_dict()
