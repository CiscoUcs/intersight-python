# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class EquipmentSystemIoControllerAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'chassis_id': 'str',
        'connection_path': 'str',
        'connection_status': 'str',
        'description': 'str',
        'managing_instance': 'str',
        'oper_state': 'str',
        'part_number': 'str',
        'pid': 'str',
        'system_io_controller_id': 'int',
        'equipment_chassis': 'EquipmentChassis',
        'registered_device': 'AssetDeviceRegistration',
        'shared_io_module': 'EquipmentSharedIoModule'
    }

    attribute_map = {
        'chassis_id': 'ChassisId',
        'connection_path': 'ConnectionPath',
        'connection_status': 'ConnectionStatus',
        'description': 'Description',
        'managing_instance': 'ManagingInstance',
        'oper_state': 'OperState',
        'part_number': 'PartNumber',
        'pid': 'Pid',
        'system_io_controller_id': 'SystemIoControllerId',
        'equipment_chassis': 'EquipmentChassis',
        'registered_device': 'RegisteredDevice',
        'shared_io_module': 'SharedIoModule'
    }

    def __init__(self,
                 chassis_id=None,
                 connection_path=None,
                 connection_status=None,
                 description=None,
                 managing_instance=None,
                 oper_state=None,
                 part_number=None,
                 pid=None,
                 system_io_controller_id=None,
                 equipment_chassis=None,
                 registered_device=None,
                 shared_io_module=None,
                 local_vars_configuration=None):  # noqa: E501
        """EquipmentSystemIoControllerAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._chassis_id = None
        self._connection_path = None
        self._connection_status = None
        self._description = None
        self._managing_instance = None
        self._oper_state = None
        self._part_number = None
        self._pid = None
        self._system_io_controller_id = None
        self._equipment_chassis = None
        self._registered_device = None
        self._shared_io_module = None
        self.discriminator = None

        if chassis_id is not None:
            self.chassis_id = chassis_id
        if connection_path is not None:
            self.connection_path = connection_path
        if connection_status is not None:
            self.connection_status = connection_status
        if description is not None:
            self.description = description
        if managing_instance is not None:
            self.managing_instance = managing_instance
        if oper_state is not None:
            self.oper_state = oper_state
        if part_number is not None:
            self.part_number = part_number
        if pid is not None:
            self.pid = pid
        if system_io_controller_id is not None:
            self.system_io_controller_id = system_io_controller_id
        if equipment_chassis is not None:
            self.equipment_chassis = equipment_chassis
        if registered_device is not None:
            self.registered_device = registered_device
        if shared_io_module is not None:
            self.shared_io_module = shared_io_module

    @property
    def chassis_id(self):
        """Gets the chassis_id of this EquipmentSystemIoControllerAllOf.  # noqa: E501

        The assigned identifier for a chassis.    # noqa: E501

        :return: The chassis_id of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :rtype: str
        """
        return self._chassis_id

    @chassis_id.setter
    def chassis_id(self, chassis_id):
        """Sets the chassis_id of this EquipmentSystemIoControllerAllOf.

        The assigned identifier for a chassis.    # noqa: E501

        :param chassis_id: The chassis_id of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :type: str
        """

        self._chassis_id = chassis_id

    @property
    def connection_path(self):
        """Gets the connection_path of this EquipmentSystemIoControllerAllOf.  # noqa: E501

        Connection Path identifies the data path available between IOModule and FI.    # noqa: E501

        :return: The connection_path of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :rtype: str
        """
        return self._connection_path

    @connection_path.setter
    def connection_path(self, connection_path):
        """Sets the connection_path of this EquipmentSystemIoControllerAllOf.

        Connection Path identifies the data path available between IOModule and FI.    # noqa: E501

        :param connection_path: The connection_path of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :type: str
        """

        self._connection_path = connection_path

    @property
    def connection_status(self):
        """Gets the connection_status of this EquipmentSystemIoControllerAllOf.  # noqa: E501

        Connection status identifies the status of data path.    # noqa: E501

        :return: The connection_status of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :rtype: str
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this EquipmentSystemIoControllerAllOf.

        Connection status identifies the status of data path.    # noqa: E501

        :param connection_status: The connection_status of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :type: str
        """

        self._connection_status = connection_status

    @property
    def description(self):
        """Gets the description of this EquipmentSystemIoControllerAllOf.  # noqa: E501

        This field gives a brief information on systemIOController.    # noqa: E501

        :return: The description of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EquipmentSystemIoControllerAllOf.

        This field gives a brief information on systemIOController.    # noqa: E501

        :param description: The description of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def managing_instance(self):
        """Gets the managing_instance of this EquipmentSystemIoControllerAllOf.  # noqa: E501

        This field identifies the CIMC that manages the controller.    # noqa: E501

        :return: The managing_instance of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :rtype: str
        """
        return self._managing_instance

    @managing_instance.setter
    def managing_instance(self, managing_instance):
        """Sets the managing_instance of this EquipmentSystemIoControllerAllOf.

        This field identifies the CIMC that manages the controller.    # noqa: E501

        :param managing_instance: The managing_instance of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :type: str
        """

        self._managing_instance = managing_instance

    @property
    def oper_state(self):
        """Gets the oper_state of this EquipmentSystemIoControllerAllOf.  # noqa: E501

        This field identifies the SIOC operational state.    # noqa: E501

        :return: The oper_state of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :rtype: str
        """
        return self._oper_state

    @oper_state.setter
    def oper_state(self, oper_state):
        """Sets the oper_state of this EquipmentSystemIoControllerAllOf.

        This field identifies the SIOC operational state.    # noqa: E501

        :param oper_state: The oper_state of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :type: str
        """

        self._oper_state = oper_state

    @property
    def part_number(self):
        """Gets the part_number of this EquipmentSystemIoControllerAllOf.  # noqa: E501

        Part Number identifier for the IO module.    # noqa: E501

        :return: The part_number of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this EquipmentSystemIoControllerAllOf.

        Part Number identifier for the IO module.    # noqa: E501

        :param part_number: The part_number of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def pid(self):
        """Gets the pid of this EquipmentSystemIoControllerAllOf.  # noqa: E501

        This field identifies the Product ID for systemIOController.    # noqa: E501

        :return: The pid of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this EquipmentSystemIoControllerAllOf.

        This field identifies the Product ID for systemIOController.    # noqa: E501

        :param pid: The pid of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def system_io_controller_id(self):
        """Gets the system_io_controller_id of this EquipmentSystemIoControllerAllOf.  # noqa: E501

        This represents system I/O Controller identifier.     # noqa: E501

        :return: The system_io_controller_id of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :rtype: int
        """
        return self._system_io_controller_id

    @system_io_controller_id.setter
    def system_io_controller_id(self, system_io_controller_id):
        """Sets the system_io_controller_id of this EquipmentSystemIoControllerAllOf.

        This represents system I/O Controller identifier.     # noqa: E501

        :param system_io_controller_id: The system_io_controller_id of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :type: int
        """

        self._system_io_controller_id = system_io_controller_id

    @property
    def equipment_chassis(self):
        """Gets the equipment_chassis of this EquipmentSystemIoControllerAllOf.  # noqa: E501


        :return: The equipment_chassis of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :rtype: EquipmentChassis
        """
        return self._equipment_chassis

    @equipment_chassis.setter
    def equipment_chassis(self, equipment_chassis):
        """Sets the equipment_chassis of this EquipmentSystemIoControllerAllOf.


        :param equipment_chassis: The equipment_chassis of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :type: EquipmentChassis
        """

        self._equipment_chassis = equipment_chassis

    @property
    def registered_device(self):
        """Gets the registered_device of this EquipmentSystemIoControllerAllOf.  # noqa: E501


        :return: The registered_device of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this EquipmentSystemIoControllerAllOf.


        :param registered_device: The registered_device of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    @property
    def shared_io_module(self):
        """Gets the shared_io_module of this EquipmentSystemIoControllerAllOf.  # noqa: E501


        :return: The shared_io_module of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :rtype: EquipmentSharedIoModule
        """
        return self._shared_io_module

    @shared_io_module.setter
    def shared_io_module(self, shared_io_module):
        """Sets the shared_io_module of this EquipmentSystemIoControllerAllOf.


        :param shared_io_module: The shared_io_module of this EquipmentSystemIoControllerAllOf.  # noqa: E501
        :type: EquipmentSharedIoModule
        """

        self._shared_io_module = shared_io_module

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EquipmentSystemIoControllerAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EquipmentSystemIoControllerAllOf):
            return True

        return self.to_dict() != other.to_dict()
