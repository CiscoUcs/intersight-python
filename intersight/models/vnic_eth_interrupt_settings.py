# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-961
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VnicEthInterruptSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coalescing_time': 'int',
        'coalescing_type': 'str',
        'count': 'int',
        'mode': 'str'
    }

    attribute_map = {
        'coalescing_time': 'CoalescingTime',
        'coalescing_type': 'CoalescingType',
        'count': 'Count',
        'mode': 'Mode'
    }

    def __init__(self, coalescing_time=None, coalescing_type='MIN', count=None, mode='MSIx'):
        """
        VnicEthInterruptSettings - a model defined in Swagger
        """

        self._coalescing_time = None
        self._coalescing_type = None
        self._count = None
        self._mode = None

        if coalescing_time is not None:
          self.coalescing_time = coalescing_time
        if coalescing_type is not None:
          self.coalescing_type = coalescing_type
        if count is not None:
          self.count = count
        if mode is not None:
          self.mode = mode

    @property
    def coalescing_time(self):
        """
        Gets the coalescing_time of this VnicEthInterruptSettings.
        The time to wait between interrupts or the idle period that must be encountered before an interrupt is sent. To turn off interrupt coalescing, enter 0 (zero) in this field.  

        :return: The coalescing_time of this VnicEthInterruptSettings.
        :rtype: int
        """
        return self._coalescing_time

    @coalescing_time.setter
    def coalescing_time(self, coalescing_time):
        """
        Sets the coalescing_time of this VnicEthInterruptSettings.
        The time to wait between interrupts or the idle period that must be encountered before an interrupt is sent. To turn off interrupt coalescing, enter 0 (zero) in this field.  

        :param coalescing_time: The coalescing_time of this VnicEthInterruptSettings.
        :type: int
        """

        self._coalescing_time = coalescing_time

    @property
    def coalescing_type(self):
        """
        Gets the coalescing_type of this VnicEthInterruptSettings.
        Interrupt Coalescing Type. This can be one of the following:- MIN  — The system waits for the time specified in the Coalescing Time field before sending another interrupt event IDLE — The system does not send an interrupt until there is a period of no activity lasting as least as long as the time specified in the Coalescing Time field.  

        :return: The coalescing_type of this VnicEthInterruptSettings.
        :rtype: str
        """
        return self._coalescing_type

    @coalescing_type.setter
    def coalescing_type(self, coalescing_type):
        """
        Sets the coalescing_type of this VnicEthInterruptSettings.
        Interrupt Coalescing Type. This can be one of the following:- MIN  — The system waits for the time specified in the Coalescing Time field before sending another interrupt event IDLE — The system does not send an interrupt until there is a period of no activity lasting as least as long as the time specified in the Coalescing Time field.  

        :param coalescing_type: The coalescing_type of this VnicEthInterruptSettings.
        :type: str
        """
        allowed_values = ["MIN", "IDLE"]
        if coalescing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `coalescing_type` ({0}), must be one of {1}"
                .format(coalescing_type, allowed_values)
            )

        self._coalescing_type = coalescing_type

    @property
    def count(self):
        """
        Gets the count of this VnicEthInterruptSettings.
        The number of interrupt resources to allocate. Typical value is be equal to the number of completion queue resources.  

        :return: The count of this VnicEthInterruptSettings.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this VnicEthInterruptSettings.
        The number of interrupt resources to allocate. Typical value is be equal to the number of completion queue resources.  

        :param count: The count of this VnicEthInterruptSettings.
        :type: int
        """

        self._count = count

    @property
    def mode(self):
        """
        Gets the mode of this VnicEthInterruptSettings.
        Preferred driver interrupt mode. This can be one of the following:- MSIx — Message Signaled Interrupts (MSI) with the optional extension. MSI   — MSI only. INTx  — PCI INTx interrupts. MSIx is the recommended option.   

        :return: The mode of this VnicEthInterruptSettings.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this VnicEthInterruptSettings.
        Preferred driver interrupt mode. This can be one of the following:- MSIx — Message Signaled Interrupts (MSI) with the optional extension. MSI   — MSI only. INTx  — PCI INTx interrupts. MSIx is the recommended option.   

        :param mode: The mode of this VnicEthInterruptSettings.
        :type: str
        """
        allowed_values = ["MSIx", "MSI", "INTx"]
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VnicEthInterruptSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
