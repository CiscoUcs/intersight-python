# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class VnicEthInterruptSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'coalescing_time': 'int',
        'coalescing_type': 'str',
        'count': 'int',
        'mode': 'str'
    }

    attribute_map = {
        'coalescing_time': 'CoalescingTime',
        'coalescing_type': 'CoalescingType',
        'count': 'Count',
        'mode': 'Mode'
    }

    def __init__(self,
                 coalescing_time=None,
                 coalescing_type='MIN',
                 count=None,
                 mode='MSIx',
                 local_vars_configuration=None):  # noqa: E501
        """VnicEthInterruptSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._coalescing_time = None
        self._coalescing_type = None
        self._count = None
        self._mode = None
        self.discriminator = None

        if coalescing_time is not None:
            self.coalescing_time = coalescing_time
        if coalescing_type is not None:
            self.coalescing_type = coalescing_type
        if count is not None:
            self.count = count
        if mode is not None:
            self.mode = mode

    @property
    def coalescing_time(self):
        """Gets the coalescing_time of this VnicEthInterruptSettings.  # noqa: E501

        The time to wait between interrupts or the idle period that must be encountered before an interrupt is sent. To turn off interrupt coalescing, enter 0 (zero) in this field.    # noqa: E501

        :return: The coalescing_time of this VnicEthInterruptSettings.  # noqa: E501
        :rtype: int
        """
        return self._coalescing_time

    @coalescing_time.setter
    def coalescing_time(self, coalescing_time):
        """Sets the coalescing_time of this VnicEthInterruptSettings.

        The time to wait between interrupts or the idle period that must be encountered before an interrupt is sent. To turn off interrupt coalescing, enter 0 (zero) in this field.    # noqa: E501

        :param coalescing_time: The coalescing_time of this VnicEthInterruptSettings.  # noqa: E501
        :type: int
        """

        self._coalescing_time = coalescing_time

    @property
    def coalescing_type(self):
        """Gets the coalescing_type of this VnicEthInterruptSettings.  # noqa: E501

        Interrupt Coalescing Type. This can be one of the following:- MIN  - The system waits for the time specified in the Coalescing Time field before sending another interrupt event IDLE - The system does not send an interrupt until there is a period of no activity lasting as least as long as the time specified in the Coalescing Time field.    # noqa: E501

        :return: The coalescing_type of this VnicEthInterruptSettings.  # noqa: E501
        :rtype: str
        """
        return self._coalescing_type

    @coalescing_type.setter
    def coalescing_type(self, coalescing_type):
        """Sets the coalescing_type of this VnicEthInterruptSettings.

        Interrupt Coalescing Type. This can be one of the following:- MIN  - The system waits for the time specified in the Coalescing Time field before sending another interrupt event IDLE - The system does not send an interrupt until there is a period of no activity lasting as least as long as the time specified in the Coalescing Time field.    # noqa: E501

        :param coalescing_type: The coalescing_type of this VnicEthInterruptSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["MIN", "IDLE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and coalescing_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `coalescing_type` ({0}), must be one of {1}"  # noqa: E501
                .format(coalescing_type, allowed_values))

        self._coalescing_type = coalescing_type

    @property
    def count(self):
        """Gets the count of this VnicEthInterruptSettings.  # noqa: E501

        The number of interrupt resources to allocate. Typical value is be equal to the number of completion queue resources.    # noqa: E501

        :return: The count of this VnicEthInterruptSettings.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this VnicEthInterruptSettings.

        The number of interrupt resources to allocate. Typical value is be equal to the number of completion queue resources.    # noqa: E501

        :param count: The count of this VnicEthInterruptSettings.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def mode(self):
        """Gets the mode of this VnicEthInterruptSettings.  # noqa: E501

        Preferred driver interrupt mode. This can be one of the following:- MSIx - Message Signaled Interrupts (MSI) with the optional extension. MSI  - MSI only. INTx - PCI INTx interrupts. MSIx is the recommended option.     # noqa: E501

        :return: The mode of this VnicEthInterruptSettings.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this VnicEthInterruptSettings.

        Preferred driver interrupt mode. This can be one of the following:- MSIx - Message Signaled Interrupts (MSI) with the optional extension. MSI  - MSI only. INTx - PCI INTx interrupts. MSIx is the recommended option.     # noqa: E501

        :param mode: The mode of this VnicEthInterruptSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["MSIx", "MSI", "INTx"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values))

        self._mode = mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VnicEthInterruptSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VnicEthInterruptSettings):
            return True

        return self.to_dict() != other.to_dict()
