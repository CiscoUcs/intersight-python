# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ComputeIpAddress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address': 'str',
        'category': 'str',
        'default_gateway': 'str',
        'dn': 'str',
        'http_port': 'int',
        'https_port': 'int',
        'kvm_port': 'int',
        'name': 'str',
        'subnet': 'str',
        'type': 'str'
    }

    attribute_map = {
        'address': 'Address',
        'category': 'Category',
        'default_gateway': 'DefaultGateway',
        'dn': 'Dn',
        'http_port': 'HttpPort',
        'https_port': 'HttpsPort',
        'kvm_port': 'KvmPort',
        'name': 'Name',
        'subnet': 'Subnet',
        'type': 'Type'
    }

    def __init__(self,
                 address=None,
                 category='Equipment',
                 default_gateway=None,
                 dn=None,
                 http_port=None,
                 https_port=None,
                 kvm_port=None,
                 name='Outband',
                 subnet=None,
                 type='MgmtInterface',
                 local_vars_configuration=None):  # noqa: E501
        """ComputeIpAddress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._address = None
        self._category = None
        self._default_gateway = None
        self._dn = None
        self._http_port = None
        self._https_port = None
        self._kvm_port = None
        self._name = None
        self._subnet = None
        self._type = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if category is not None:
            self.category = category
        if default_gateway is not None:
            self.default_gateway = default_gateway
        if dn is not None:
            self.dn = dn
        if http_port is not None:
            self.http_port = http_port
        if https_port is not None:
            self.https_port = https_port
        if kvm_port is not None:
            self.kvm_port = kvm_port
        if name is not None:
            self.name = name
        if subnet is not None:
            self.subnet = subnet
        if type is not None:
            self.type = type

    @property
    def address(self):
        """Gets the address of this ComputeIpAddress.  # noqa: E501


        :return: The address of this ComputeIpAddress.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ComputeIpAddress.


        :param address: The address of this ComputeIpAddress.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def category(self):
        """Gets the category of this ComputeIpAddress.  # noqa: E501


        :return: The category of this ComputeIpAddress.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ComputeIpAddress.


        :param category: The category of this ComputeIpAddress.  # noqa: E501
        :type: str
        """
        allowed_values = ["Equipment", "ServiceProfile"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and category not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values))

        self._category = category

    @property
    def default_gateway(self):
        """Gets the default_gateway of this ComputeIpAddress.  # noqa: E501


        :return: The default_gateway of this ComputeIpAddress.  # noqa: E501
        :rtype: str
        """
        return self._default_gateway

    @default_gateway.setter
    def default_gateway(self, default_gateway):
        """Sets the default_gateway of this ComputeIpAddress.


        :param default_gateway: The default_gateway of this ComputeIpAddress.  # noqa: E501
        :type: str
        """

        self._default_gateway = default_gateway

    @property
    def dn(self):
        """Gets the dn of this ComputeIpAddress.  # noqa: E501


        :return: The dn of this ComputeIpAddress.  # noqa: E501
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """Sets the dn of this ComputeIpAddress.


        :param dn: The dn of this ComputeIpAddress.  # noqa: E501
        :type: str
        """

        self._dn = dn

    @property
    def http_port(self):
        """Gets the http_port of this ComputeIpAddress.  # noqa: E501


        :return: The http_port of this ComputeIpAddress.  # noqa: E501
        :rtype: int
        """
        return self._http_port

    @http_port.setter
    def http_port(self, http_port):
        """Sets the http_port of this ComputeIpAddress.


        :param http_port: The http_port of this ComputeIpAddress.  # noqa: E501
        :type: int
        """

        self._http_port = http_port

    @property
    def https_port(self):
        """Gets the https_port of this ComputeIpAddress.  # noqa: E501


        :return: The https_port of this ComputeIpAddress.  # noqa: E501
        :rtype: int
        """
        return self._https_port

    @https_port.setter
    def https_port(self, https_port):
        """Sets the https_port of this ComputeIpAddress.


        :param https_port: The https_port of this ComputeIpAddress.  # noqa: E501
        :type: int
        """

        self._https_port = https_port

    @property
    def kvm_port(self):
        """Gets the kvm_port of this ComputeIpAddress.  # noqa: E501


        :return: The kvm_port of this ComputeIpAddress.  # noqa: E501
        :rtype: int
        """
        return self._kvm_port

    @kvm_port.setter
    def kvm_port(self, kvm_port):
        """Sets the kvm_port of this ComputeIpAddress.


        :param kvm_port: The kvm_port of this ComputeIpAddress.  # noqa: E501
        :type: int
        """

        self._kvm_port = kvm_port

    @property
    def name(self):
        """Gets the name of this ComputeIpAddress.  # noqa: E501


        :return: The name of this ComputeIpAddress.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComputeIpAddress.


        :param name: The name of this ComputeIpAddress.  # noqa: E501
        :type: str
        """
        allowed_values = ["Outband", "Inband"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and name not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"  # noqa: E501
                .format(name, allowed_values))

        self._name = name

    @property
    def subnet(self):
        """Gets the subnet of this ComputeIpAddress.  # noqa: E501


        :return: The subnet of this ComputeIpAddress.  # noqa: E501
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this ComputeIpAddress.


        :param subnet: The subnet of this ComputeIpAddress.  # noqa: E501
        :type: str
        """

        self._subnet = subnet

    @property
    def type(self):
        """Gets the type of this ComputeIpAddress.  # noqa: E501


        :return: The type of this ComputeIpAddress.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ComputeIpAddress.


        :param type: The type of this ComputeIpAddress.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "MgmtInterface", "VnicIpV4StaticAddr", "VnicIpV4PooledAddr",
            "VnicIpV4MgmtPooledAddr", "VnicIpV6StaticAddr",
            "VnicIpV6MgmtPooledAddr", "VnicIpV4ProfDerivedAddr"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values))

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputeIpAddress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputeIpAddress):
            return True

        return self.to_dict() != other.to_dict()
