# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class OsAnswers(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_answer_file_set': 'bool',
        'answer_file': 'str',
        'hostname': 'str',
        'ip_config_type': 'str',
        'ip_v4_config': 'CommIpV4Interface',
        'is_root_password_set': 'bool',
        'nameserver': 'str',
        'product_key': 'str',
        'root_password': 'str',
        'source': 'str'
    }

    attribute_map = {
        'is_answer_file_set': 'IsAnswerFileSet',
        'answer_file': 'AnswerFile',
        'hostname': 'Hostname',
        'ip_config_type': 'IpConfigType',
        'ip_v4_config': 'IpV4Config',
        'is_root_password_set': 'IsRootPasswordSet',
        'nameserver': 'Nameserver',
        'product_key': 'ProductKey',
        'root_password': 'RootPassword',
        'source': 'Source'
    }

    def __init__(self,
                 is_answer_file_set=None,
                 answer_file=None,
                 hostname=None,
                 ip_config_type='static',
                 ip_v4_config=None,
                 is_root_password_set=None,
                 nameserver=None,
                 product_key=None,
                 root_password=None,
                 source='None',
                 local_vars_configuration=None):  # noqa: E501
        """OsAnswers - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_answer_file_set = None
        self._answer_file = None
        self._hostname = None
        self._ip_config_type = None
        self._ip_v4_config = None
        self._is_root_password_set = None
        self._nameserver = None
        self._product_key = None
        self._root_password = None
        self._source = None
        self.discriminator = None

        if is_answer_file_set is not None:
            self.is_answer_file_set = is_answer_file_set
        if answer_file is not None:
            self.answer_file = answer_file
        if hostname is not None:
            self.hostname = hostname
        if ip_config_type is not None:
            self.ip_config_type = ip_config_type
        if ip_v4_config is not None:
            self.ip_v4_config = ip_v4_config
        if is_root_password_set is not None:
            self.is_root_password_set = is_root_password_set
        if nameserver is not None:
            self.nameserver = nameserver
        if product_key is not None:
            self.product_key = product_key
        if root_password is not None:
            self.root_password = root_password
        if source is not None:
            self.source = source

    @property
    def is_answer_file_set(self):
        """Gets the is_answer_file_set of this OsAnswers.  # noqa: E501

        Indicates whether the value of the 'answerFile' property has been set.    # noqa: E501

        :return: The is_answer_file_set of this OsAnswers.  # noqa: E501
        :rtype: bool
        """
        return self._is_answer_file_set

    @is_answer_file_set.setter
    def is_answer_file_set(self, is_answer_file_set):
        """Sets the is_answer_file_set of this OsAnswers.

        Indicates whether the value of the 'answerFile' property has been set.    # noqa: E501

        :param is_answer_file_set: The is_answer_file_set of this OsAnswers.  # noqa: E501
        :type: bool
        """

        self._is_answer_file_set = is_answer_file_set

    @property
    def answer_file(self):
        """Gets the answer_file of this OsAnswers.  # noqa: E501

        If the source of the answers is a static file, the content of the file is stored as value in this property.  The value is mandatory only when the 'Source' property has been set to 'File'.     # noqa: E501

        :return: The answer_file of this OsAnswers.  # noqa: E501
        :rtype: str
        """
        return self._answer_file

    @answer_file.setter
    def answer_file(self, answer_file):
        """Sets the answer_file of this OsAnswers.

        If the source of the answers is a static file, the content of the file is stored as value in this property.  The value is mandatory only when the 'Source' property has been set to 'File'.     # noqa: E501

        :param answer_file: The answer_file of this OsAnswers.  # noqa: E501
        :type: str
        """

        self._answer_file = answer_file

    @property
    def hostname(self):
        """Gets the hostname of this OsAnswers.  # noqa: E501

        Hostname to be configured for the server in the OS.     # noqa: E501

        :return: The hostname of this OsAnswers.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this OsAnswers.

        Hostname to be configured for the server in the OS.     # noqa: E501

        :param hostname: The hostname of this OsAnswers.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def ip_config_type(self):
        """Gets the ip_config_type of this OsAnswers.  # noqa: E501

        IP configuration type. Values are Static or Dynamic configuration of IP.  In case of static IP configuration, IP address, gateway and other details need to be populated. In case of dynamic the IP configuration is obtained dynamically from DHCP.     # noqa: E501

        :return: The ip_config_type of this OsAnswers.  # noqa: E501
        :rtype: str
        """
        return self._ip_config_type

    @ip_config_type.setter
    def ip_config_type(self, ip_config_type):
        """Sets the ip_config_type of this OsAnswers.

        IP configuration type. Values are Static or Dynamic configuration of IP.  In case of static IP configuration, IP address, gateway and other details need to be populated. In case of dynamic the IP configuration is obtained dynamically from DHCP.     # noqa: E501

        :param ip_config_type: The ip_config_type of this OsAnswers.  # noqa: E501
        :type: str
        """
        allowed_values = ["static", "DHCP"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and ip_config_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `ip_config_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ip_config_type, allowed_values))

        self._ip_config_type = ip_config_type

    @property
    def ip_v4_config(self):
        """Gets the ip_v4_config of this OsAnswers.  # noqa: E501


        :return: The ip_v4_config of this OsAnswers.  # noqa: E501
        :rtype: CommIpV4Interface
        """
        return self._ip_v4_config

    @ip_v4_config.setter
    def ip_v4_config(self, ip_v4_config):
        """Sets the ip_v4_config of this OsAnswers.


        :param ip_v4_config: The ip_v4_config of this OsAnswers.  # noqa: E501
        :type: CommIpV4Interface
        """

        self._ip_v4_config = ip_v4_config

    @property
    def is_root_password_set(self):
        """Gets the is_root_password_set of this OsAnswers.  # noqa: E501


        :return: The is_root_password_set of this OsAnswers.  # noqa: E501
        :rtype: bool
        """
        return self._is_root_password_set

    @is_root_password_set.setter
    def is_root_password_set(self, is_root_password_set):
        """Sets the is_root_password_set of this OsAnswers.


        :param is_root_password_set: The is_root_password_set of this OsAnswers.  # noqa: E501
        :type: bool
        """

        self._is_root_password_set = is_root_password_set

    @property
    def nameserver(self):
        """Gets the nameserver of this OsAnswers.  # noqa: E501

        IP address of the name server to be configured in the OS.     # noqa: E501

        :return: The nameserver of this OsAnswers.  # noqa: E501
        :rtype: str
        """
        return self._nameserver

    @nameserver.setter
    def nameserver(self, nameserver):
        """Sets the nameserver of this OsAnswers.

        IP address of the name server to be configured in the OS.     # noqa: E501

        :param nameserver: The nameserver of this OsAnswers.  # noqa: E501
        :type: str
        """

        self._nameserver = nameserver

    @property
    def product_key(self):
        """Gets the product_key of this OsAnswers.  # noqa: E501

        The product key to be used for a specific version of Windows installation.     # noqa: E501

        :return: The product_key of this OsAnswers.  # noqa: E501
        :rtype: str
        """
        return self._product_key

    @product_key.setter
    def product_key(self, product_key):
        """Sets the product_key of this OsAnswers.

        The product key to be used for a specific version of Windows installation.     # noqa: E501

        :param product_key: The product_key of this OsAnswers.  # noqa: E501
        :type: str
        """

        self._product_key = product_key

    @property
    def root_password(self):
        """Gets the root_password of this OsAnswers.  # noqa: E501

        Password to be configured for the root / administrator user in the OS.     # noqa: E501

        :return: The root_password of this OsAnswers.  # noqa: E501
        :rtype: str
        """
        return self._root_password

    @root_password.setter
    def root_password(self, root_password):
        """Sets the root_password of this OsAnswers.

        Password to be configured for the root / administrator user in the OS.     # noqa: E501

        :param root_password: The root_password of this OsAnswers.  # noqa: E501
        :type: str
        """

        self._root_password = root_password

    @property
    def source(self):
        """Gets the source of this OsAnswers.  # noqa: E501

        Answer values can be provided from three sources - Embedded in OS image, static file, or as placeholder values for an answer file template.  Source of the answers is given as value, Embedded/File/Template. 'Embedded' option indicates that the answer file is embedded within the OS Image. 'File' option indicates that the answers are provided as a file. 'Template' indicates that the placeholders in the selected os.ConfigurationFile MO are replaced with values provided as os.Answers MO.      # noqa: E501

        :return: The source of this OsAnswers.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this OsAnswers.

        Answer values can be provided from three sources - Embedded in OS image, static file, or as placeholder values for an answer file template.  Source of the answers is given as value, Embedded/File/Template. 'Embedded' option indicates that the answer file is embedded within the OS Image. 'File' option indicates that the answers are provided as a file. 'Template' indicates that the placeholders in the selected os.ConfigurationFile MO are replaced with values provided as os.Answers MO.      # noqa: E501

        :param source: The source of this OsAnswers.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Embedded", "File", "Template"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and source not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values))

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OsAnswers):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OsAnswers):
            return True

        return self.to_dict() != other.to_dict()
