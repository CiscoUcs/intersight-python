# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StorageVirtualDriveConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_policy': 'str',
        'boot_drive': 'bool',
        'disk_group_name': 'str',
        'disk_group_policy': 'str',
        'drive_cache': 'str',
        'expand_to_available': 'bool',
        'io_policy': 'str',
        'name': 'str',
        'read_policy': 'str',
        'size': 'int',
        'write_policy': 'str'
    }

    attribute_map = {
        'access_policy': 'AccessPolicy',
        'boot_drive': 'BootDrive',
        'disk_group_name': 'DiskGroupName',
        'disk_group_policy': 'DiskGroupPolicy',
        'drive_cache': 'DriveCache',
        'expand_to_available': 'ExpandToAvailable',
        'io_policy': 'IoPolicy',
        'name': 'Name',
        'read_policy': 'ReadPolicy',
        'size': 'Size',
        'write_policy': 'WritePolicy'
    }

    def __init__(self,
                 access_policy='Default',
                 boot_drive=None,
                 disk_group_name=None,
                 disk_group_policy=None,
                 drive_cache='Default',
                 expand_to_available=None,
                 io_policy='Default',
                 name=None,
                 read_policy='Default',
                 size=None,
                 write_policy='Default',
                 local_vars_configuration=None):  # noqa: E501
        """StorageVirtualDriveConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_policy = None
        self._boot_drive = None
        self._disk_group_name = None
        self._disk_group_policy = None
        self._drive_cache = None
        self._expand_to_available = None
        self._io_policy = None
        self._name = None
        self._read_policy = None
        self._size = None
        self._write_policy = None
        self.discriminator = None

        if access_policy is not None:
            self.access_policy = access_policy
        if boot_drive is not None:
            self.boot_drive = boot_drive
        if disk_group_name is not None:
            self.disk_group_name = disk_group_name
        if disk_group_policy is not None:
            self.disk_group_policy = disk_group_policy
        if drive_cache is not None:
            self.drive_cache = drive_cache
        if expand_to_available is not None:
            self.expand_to_available = expand_to_available
        if io_policy is not None:
            self.io_policy = io_policy
        if name is not None:
            self.name = name
        if read_policy is not None:
            self.read_policy = read_policy
        if size is not None:
            self.size = size
        if write_policy is not None:
            self.write_policy = write_policy

    @property
    def access_policy(self):
        """Gets the access_policy of this StorageVirtualDriveConfig.  # noqa: E501

        This property holds the access policy that host has on this virtual drive.    # noqa: E501

        :return: The access_policy of this StorageVirtualDriveConfig.  # noqa: E501
        :rtype: str
        """
        return self._access_policy

    @access_policy.setter
    def access_policy(self, access_policy):
        """Sets the access_policy of this StorageVirtualDriveConfig.

        This property holds the access policy that host has on this virtual drive.    # noqa: E501

        :param access_policy: The access_policy of this StorageVirtualDriveConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "ReadWrite", "ReadOnly",
                          "Blocked"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and access_policy not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `access_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(access_policy, allowed_values))

        self._access_policy = access_policy

    @property
    def boot_drive(self):
        """Gets the boot_drive of this StorageVirtualDriveConfig.  # noqa: E501

        This flag enables the use of this virtual drive as a boot drive.    # noqa: E501

        :return: The boot_drive of this StorageVirtualDriveConfig.  # noqa: E501
        :rtype: bool
        """
        return self._boot_drive

    @boot_drive.setter
    def boot_drive(self, boot_drive):
        """Sets the boot_drive of this StorageVirtualDriveConfig.

        This flag enables the use of this virtual drive as a boot drive.    # noqa: E501

        :param boot_drive: The boot_drive of this StorageVirtualDriveConfig.  # noqa: E501
        :type: bool
        """

        self._boot_drive = boot_drive

    @property
    def disk_group_name(self):
        """Gets the disk_group_name of this StorageVirtualDriveConfig.  # noqa: E501

        Disk group policy that has the disk group in which this virtual drive needs to be created.    # noqa: E501

        :return: The disk_group_name of this StorageVirtualDriveConfig.  # noqa: E501
        :rtype: str
        """
        return self._disk_group_name

    @disk_group_name.setter
    def disk_group_name(self, disk_group_name):
        """Sets the disk_group_name of this StorageVirtualDriveConfig.

        Disk group policy that has the disk group in which this virtual drive needs to be created.    # noqa: E501

        :param disk_group_name: The disk_group_name of this StorageVirtualDriveConfig.  # noqa: E501
        :type: str
        """

        self._disk_group_name = disk_group_name

    @property
    def disk_group_policy(self):
        """Gets the disk_group_policy of this StorageVirtualDriveConfig.  # noqa: E501

        Disk group policy that has the disk group in which this virtual drive needs to be created.    # noqa: E501

        :return: The disk_group_policy of this StorageVirtualDriveConfig.  # noqa: E501
        :rtype: str
        """
        return self._disk_group_policy

    @disk_group_policy.setter
    def disk_group_policy(self, disk_group_policy):
        """Sets the disk_group_policy of this StorageVirtualDriveConfig.

        Disk group policy that has the disk group in which this virtual drive needs to be created.    # noqa: E501

        :param disk_group_policy: The disk_group_policy of this StorageVirtualDriveConfig.  # noqa: E501
        :type: str
        """

        self._disk_group_policy = disk_group_policy

    @property
    def drive_cache(self):
        """Gets the drive_cache of this StorageVirtualDriveConfig.  # noqa: E501

        This property expect disk cache policy.    # noqa: E501

        :return: The drive_cache of this StorageVirtualDriveConfig.  # noqa: E501
        :rtype: str
        """
        return self._drive_cache

    @drive_cache.setter
    def drive_cache(self, drive_cache):
        """Sets the drive_cache of this StorageVirtualDriveConfig.

        This property expect disk cache policy.    # noqa: E501

        :param drive_cache: The drive_cache of this StorageVirtualDriveConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "NoChange", "Enable",
                          "Disable"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and drive_cache not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `drive_cache` ({0}), must be one of {1}"  # noqa: E501
                .format(drive_cache, allowed_values))

        self._drive_cache = drive_cache

    @property
    def expand_to_available(self):
        """Gets the expand_to_available of this StorageVirtualDriveConfig.  # noqa: E501

        This flag enables this virtual drive to use all the available space in the disk group. When this flag is configured, the size property is ignored.    # noqa: E501

        :return: The expand_to_available of this StorageVirtualDriveConfig.  # noqa: E501
        :rtype: bool
        """
        return self._expand_to_available

    @expand_to_available.setter
    def expand_to_available(self, expand_to_available):
        """Sets the expand_to_available of this StorageVirtualDriveConfig.

        This flag enables this virtual drive to use all the available space in the disk group. When this flag is configured, the size property is ignored.    # noqa: E501

        :param expand_to_available: The expand_to_available of this StorageVirtualDriveConfig.  # noqa: E501
        :type: bool
        """

        self._expand_to_available = expand_to_available

    @property
    def io_policy(self):
        """Gets the io_policy of this StorageVirtualDriveConfig.  # noqa: E501

        This property expects the desired IO mode - direct IO or cached IO.    # noqa: E501

        :return: The io_policy of this StorageVirtualDriveConfig.  # noqa: E501
        :rtype: str
        """
        return self._io_policy

    @io_policy.setter
    def io_policy(self, io_policy):
        """Sets the io_policy of this StorageVirtualDriveConfig.

        This property expects the desired IO mode - direct IO or cached IO.    # noqa: E501

        :param io_policy: The io_policy of this StorageVirtualDriveConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "Direct", "Cached"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and io_policy not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `io_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(io_policy, allowed_values))

        self._io_policy = io_policy

    @property
    def name(self):
        """Gets the name of this StorageVirtualDriveConfig.  # noqa: E501

        The name of the virtual drive. The name can be between 1 and 15 alphanumeric characters. Spaces or any special characters other than - (hyphen), _ (underscore), : (colon), and . (period) are not allowed.    # noqa: E501

        :return: The name of this StorageVirtualDriveConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageVirtualDriveConfig.

        The name of the virtual drive. The name can be between 1 and 15 alphanumeric characters. Spaces or any special characters other than - (hyphen), _ (underscore), : (colon), and . (period) are not allowed.    # noqa: E501

        :param name: The name of this StorageVirtualDriveConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def read_policy(self):
        """Gets the read_policy of this StorageVirtualDriveConfig.  # noqa: E501

        This property holds the read ahead mode to be used.    # noqa: E501

        :return: The read_policy of this StorageVirtualDriveConfig.  # noqa: E501
        :rtype: str
        """
        return self._read_policy

    @read_policy.setter
    def read_policy(self, read_policy):
        """Sets the read_policy of this StorageVirtualDriveConfig.

        This property holds the read ahead mode to be used.    # noqa: E501

        :param read_policy: The read_policy of this StorageVirtualDriveConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "ReadAhead", "NoReadAhead"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and read_policy not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `read_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(read_policy, allowed_values))

        self._read_policy = read_policy

    @property
    def size(self):
        """Gets the size of this StorageVirtualDriveConfig.  # noqa: E501

        Virtual drive size in MB. This is a required field unless the 'Expand to Available' option is enabled.    # noqa: E501

        :return: The size of this StorageVirtualDriveConfig.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this StorageVirtualDriveConfig.

        Virtual drive size in MB. This is a required field unless the 'Expand to Available' option is enabled.    # noqa: E501

        :param size: The size of this StorageVirtualDriveConfig.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def write_policy(self):
        """Gets the write_policy of this StorageVirtualDriveConfig.  # noqa: E501

        This property holds the write mode used to write the data in this virtual drive.     # noqa: E501

        :return: The write_policy of this StorageVirtualDriveConfig.  # noqa: E501
        :rtype: str
        """
        return self._write_policy

    @write_policy.setter
    def write_policy(self, write_policy):
        """Sets the write_policy of this StorageVirtualDriveConfig.

        This property holds the write mode used to write the data in this virtual drive.     # noqa: E501

        :param write_policy: The write_policy of this StorageVirtualDriveConfig.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "Default", "WriteThrough", "WriteBackGoodBbu", "AlwaysWriteBack"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and write_policy not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `write_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(write_policy, allowed_values))

        self._write_policy = write_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageVirtualDriveConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageVirtualDriveConfig):
            return True

        return self.to_dict() != other.to_dict()
