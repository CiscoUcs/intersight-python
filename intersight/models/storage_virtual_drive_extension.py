# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StorageVirtualDriveExtension(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bootable': 'str',
        'container_id': 'int',
        'drive_state': 'str',
        'name': 'str',
        'oper_device_id': 'str',
        'uuid': 'str',
        'vendor_uuid': 'str',
        'virtual_drive_dn': 'str',
        'virtual_drive_id': 'str',
        'registered_device': 'AssetDeviceRegistration',
        'storage_controller': 'StorageController',
        'virtual_drive': 'StorageVirtualDrive'
    }

    attribute_map = {
        'bootable': 'Bootable',
        'container_id': 'ContainerId',
        'drive_state': 'DriveState',
        'name': 'Name',
        'oper_device_id': 'OperDeviceId',
        'uuid': 'Uuid',
        'vendor_uuid': 'VendorUuid',
        'virtual_drive_dn': 'VirtualDriveDn',
        'virtual_drive_id': 'VirtualDriveId',
        'registered_device': 'RegisteredDevice',
        'storage_controller': 'StorageController',
        'virtual_drive': 'VirtualDrive'
    }

    def __init__(self,
                 bootable=None,
                 container_id=None,
                 drive_state=None,
                 name=None,
                 oper_device_id=None,
                 uuid=None,
                 vendor_uuid=None,
                 virtual_drive_dn=None,
                 virtual_drive_id=None,
                 registered_device=None,
                 storage_controller=None,
                 virtual_drive=None,
                 local_vars_configuration=None):  # noqa: E501
        """StorageVirtualDriveExtension - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bootable = None
        self._container_id = None
        self._drive_state = None
        self._name = None
        self._oper_device_id = None
        self._uuid = None
        self._vendor_uuid = None
        self._virtual_drive_dn = None
        self._virtual_drive_id = None
        self._registered_device = None
        self._storage_controller = None
        self._virtual_drive = None
        self.discriminator = None

        if bootable is not None:
            self.bootable = bootable
        if container_id is not None:
            self.container_id = container_id
        if drive_state is not None:
            self.drive_state = drive_state
        if name is not None:
            self.name = name
        if oper_device_id is not None:
            self.oper_device_id = oper_device_id
        if uuid is not None:
            self.uuid = uuid
        if vendor_uuid is not None:
            self.vendor_uuid = vendor_uuid
        if virtual_drive_dn is not None:
            self.virtual_drive_dn = virtual_drive_dn
        if virtual_drive_id is not None:
            self.virtual_drive_id = virtual_drive_id
        if registered_device is not None:
            self.registered_device = registered_device
        if storage_controller is not None:
            self.storage_controller = storage_controller
        if virtual_drive is not None:
            self.virtual_drive = virtual_drive

    @property
    def bootable(self):
        """Gets the bootable of this StorageVirtualDriveExtension.  # noqa: E501

        It shows virtual drive is bootable.    # noqa: E501

        :return: The bootable of this StorageVirtualDriveExtension.  # noqa: E501
        :rtype: str
        """
        return self._bootable

    @bootable.setter
    def bootable(self, bootable):
        """Sets the bootable of this StorageVirtualDriveExtension.

        It shows virtual drive is bootable.    # noqa: E501

        :param bootable: The bootable of this StorageVirtualDriveExtension.  # noqa: E501
        :type: str
        """

        self._bootable = bootable

    @property
    def container_id(self):
        """Gets the container_id of this StorageVirtualDriveExtension.  # noqa: E501


        :return: The container_id of this StorageVirtualDriveExtension.  # noqa: E501
        :rtype: int
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this StorageVirtualDriveExtension.


        :param container_id: The container_id of this StorageVirtualDriveExtension.  # noqa: E501
        :type: int
        """

        self._container_id = container_id

    @property
    def drive_state(self):
        """Gets the drive_state of this StorageVirtualDriveExtension.  # noqa: E501


        :return: The drive_state of this StorageVirtualDriveExtension.  # noqa: E501
        :rtype: str
        """
        return self._drive_state

    @drive_state.setter
    def drive_state(self, drive_state):
        """Sets the drive_state of this StorageVirtualDriveExtension.


        :param drive_state: The drive_state of this StorageVirtualDriveExtension.  # noqa: E501
        :type: str
        """

        self._drive_state = drive_state

    @property
    def name(self):
        """Gets the name of this StorageVirtualDriveExtension.  # noqa: E501


        :return: The name of this StorageVirtualDriveExtension.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageVirtualDriveExtension.


        :param name: The name of this StorageVirtualDriveExtension.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def oper_device_id(self):
        """Gets the oper_device_id of this StorageVirtualDriveExtension.  # noqa: E501


        :return: The oper_device_id of this StorageVirtualDriveExtension.  # noqa: E501
        :rtype: str
        """
        return self._oper_device_id

    @oper_device_id.setter
    def oper_device_id(self, oper_device_id):
        """Sets the oper_device_id of this StorageVirtualDriveExtension.


        :param oper_device_id: The oper_device_id of this StorageVirtualDriveExtension.  # noqa: E501
        :type: str
        """

        self._oper_device_id = oper_device_id

    @property
    def uuid(self):
        """Gets the uuid of this StorageVirtualDriveExtension.  # noqa: E501


        :return: The uuid of this StorageVirtualDriveExtension.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this StorageVirtualDriveExtension.


        :param uuid: The uuid of this StorageVirtualDriveExtension.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def vendor_uuid(self):
        """Gets the vendor_uuid of this StorageVirtualDriveExtension.  # noqa: E501


        :return: The vendor_uuid of this StorageVirtualDriveExtension.  # noqa: E501
        :rtype: str
        """
        return self._vendor_uuid

    @vendor_uuid.setter
    def vendor_uuid(self, vendor_uuid):
        """Sets the vendor_uuid of this StorageVirtualDriveExtension.


        :param vendor_uuid: The vendor_uuid of this StorageVirtualDriveExtension.  # noqa: E501
        :type: str
        """

        self._vendor_uuid = vendor_uuid

    @property
    def virtual_drive_dn(self):
        """Gets the virtual_drive_dn of this StorageVirtualDriveExtension.  # noqa: E501


        :return: The virtual_drive_dn of this StorageVirtualDriveExtension.  # noqa: E501
        :rtype: str
        """
        return self._virtual_drive_dn

    @virtual_drive_dn.setter
    def virtual_drive_dn(self, virtual_drive_dn):
        """Sets the virtual_drive_dn of this StorageVirtualDriveExtension.


        :param virtual_drive_dn: The virtual_drive_dn of this StorageVirtualDriveExtension.  # noqa: E501
        :type: str
        """

        self._virtual_drive_dn = virtual_drive_dn

    @property
    def virtual_drive_id(self):
        """Gets the virtual_drive_id of this StorageVirtualDriveExtension.  # noqa: E501

        It shows virtual drive Id.     # noqa: E501

        :return: The virtual_drive_id of this StorageVirtualDriveExtension.  # noqa: E501
        :rtype: str
        """
        return self._virtual_drive_id

    @virtual_drive_id.setter
    def virtual_drive_id(self, virtual_drive_id):
        """Sets the virtual_drive_id of this StorageVirtualDriveExtension.

        It shows virtual drive Id.     # noqa: E501

        :param virtual_drive_id: The virtual_drive_id of this StorageVirtualDriveExtension.  # noqa: E501
        :type: str
        """

        self._virtual_drive_id = virtual_drive_id

    @property
    def registered_device(self):
        """Gets the registered_device of this StorageVirtualDriveExtension.  # noqa: E501


        :return: The registered_device of this StorageVirtualDriveExtension.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this StorageVirtualDriveExtension.


        :param registered_device: The registered_device of this StorageVirtualDriveExtension.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    @property
    def storage_controller(self):
        """Gets the storage_controller of this StorageVirtualDriveExtension.  # noqa: E501


        :return: The storage_controller of this StorageVirtualDriveExtension.  # noqa: E501
        :rtype: StorageController
        """
        return self._storage_controller

    @storage_controller.setter
    def storage_controller(self, storage_controller):
        """Sets the storage_controller of this StorageVirtualDriveExtension.


        :param storage_controller: The storage_controller of this StorageVirtualDriveExtension.  # noqa: E501
        :type: StorageController
        """

        self._storage_controller = storage_controller

    @property
    def virtual_drive(self):
        """Gets the virtual_drive of this StorageVirtualDriveExtension.  # noqa: E501


        :return: The virtual_drive of this StorageVirtualDriveExtension.  # noqa: E501
        :rtype: StorageVirtualDrive
        """
        return self._virtual_drive

    @virtual_drive.setter
    def virtual_drive(self, virtual_drive):
        """Sets the virtual_drive of this StorageVirtualDriveExtension.


        :param virtual_drive: The virtual_drive of this StorageVirtualDriveExtension.  # noqa: E501
        :type: StorageVirtualDrive
        """

        self._virtual_drive = virtual_drive

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageVirtualDriveExtension):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageVirtualDriveExtension):
            return True

        return self.to_dict() != other.to_dict()
