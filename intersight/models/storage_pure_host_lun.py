# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-961
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StoragePureHostLun(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'ancestors': 'list[MoBaseMoRef]',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'parent': 'MoBaseMoRef',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'hlu': 'str',
        'host': 'StorageHostRef',
        'host_name': 'str',
        'storage_array': 'StorageGenericArrayRef',
        'volume': 'StorageVolumeRef',
        'volume_name': 'str',
        'host_group': 'StorageHostRef',
        'host_group_name': 'str',
        'registered_device': 'AssetDeviceRegistrationRef',
        'shared': 'bool'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'ancestors': 'Ancestors',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'parent': 'Parent',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'hlu': 'Hlu',
        'host': 'Host',
        'host_name': 'HostName',
        'storage_array': 'StorageArray',
        'volume': 'Volume',
        'volume_name': 'VolumeName',
        'host_group': 'HostGroup',
        'host_group_name': 'HostGroupName',
        'registered_device': 'RegisteredDevice',
        'shared': 'Shared'
    }

    def __init__(self, account_moid=None, ancestors=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, parent=None, shared_scope=None, tags=None, version_context=None, hlu=None, host=None, host_name=None, storage_array=None, volume=None, volume_name=None, host_group=None, host_group_name=None, registered_device=None, shared=None):
        """
        StoragePureHostLun - a model defined in Swagger
        """

        self._account_moid = None
        self._ancestors = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._parent = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._hlu = None
        self._host = None
        self._host_name = None
        self._storage_array = None
        self._volume = None
        self._volume_name = None
        self._host_group = None
        self._host_group_name = None
        self._registered_device = None
        self._shared = None

        if account_moid is not None:
          self.account_moid = account_moid
        if ancestors is not None:
          self.ancestors = ancestors
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if parent is not None:
          self.parent = parent
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if hlu is not None:
          self.hlu = hlu
        if host is not None:
          self.host = host
        if host_name is not None:
          self.host_name = host_name
        if storage_array is not None:
          self.storage_array = storage_array
        if volume is not None:
          self.volume = volume
        if volume_name is not None:
          self.volume_name = volume_name
        if host_group is not None:
          self.host_group = host_group
        if host_group_name is not None:
          self.host_group_name = host_group_name
        if registered_device is not None:
          self.registered_device = registered_device
        if shared is not None:
          self.shared = shared

    @property
    def account_moid(self):
        """
        Gets the account_moid of this StoragePureHostLun.
        The Account ID for this managed object.  

        :return: The account_moid of this StoragePureHostLun.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this StoragePureHostLun.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this StoragePureHostLun.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def ancestors(self):
        """
        Gets the ancestors of this StoragePureHostLun.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this StoragePureHostLun.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this StoragePureHostLun.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this StoragePureHostLun.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def create_time(self):
        """
        Gets the create_time of this StoragePureHostLun.
        The time when this managed object was created.  

        :return: The create_time of this StoragePureHostLun.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this StoragePureHostLun.
        The time when this managed object was created.  

        :param create_time: The create_time of this StoragePureHostLun.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this StoragePureHostLun.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this StoragePureHostLun.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this StoragePureHostLun.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this StoragePureHostLun.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this StoragePureHostLun.
        The time when this managed object was last modified.  

        :return: The mod_time of this StoragePureHostLun.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this StoragePureHostLun.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this StoragePureHostLun.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this StoragePureHostLun.
        The unique identifier of this Managed Object instance.  

        :return: The moid of this StoragePureHostLun.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this StoragePureHostLun.
        The unique identifier of this Managed Object instance.  

        :param moid: The moid of this StoragePureHostLun.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this StoragePureHostLun.
        The fully-qualified type of this managed object, e.g. the class name.  

        :return: The object_type of this StoragePureHostLun.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this StoragePureHostLun.
        The fully-qualified type of this managed object, e.g. the class name.  

        :param object_type: The object_type of this StoragePureHostLun.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this StoragePureHostLun.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this StoragePureHostLun.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this StoragePureHostLun.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this StoragePureHostLun.
        :type: list[str]
        """

        self._owners = owners

    @property
    def parent(self):
        """
        Gets the parent of this StoragePureHostLun.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this StoragePureHostLun.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this StoragePureHostLun.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this StoragePureHostLun.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this StoragePureHostLun.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this StoragePureHostLun.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this StoragePureHostLun.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this StoragePureHostLun.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this StoragePureHostLun.
        The array of tags, which allow to add key, value meta-data to managed objects.  

        :return: The tags of this StoragePureHostLun.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this StoragePureHostLun.
        The array of tags, which allow to add key, value meta-data to managed objects.  

        :param tags: The tags of this StoragePureHostLun.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this StoragePureHostLun.
        The versioning info for this managed object.   

        :return: The version_context of this StoragePureHostLun.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this StoragePureHostLun.
        The versioning info for this managed object.   

        :param version_context: The version_context of this StoragePureHostLun.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def hlu(self):
        """
        Gets the hlu of this StoragePureHostLun.
        Logical unit number (LUN) by which hosts address specified volume.  

        :return: The hlu of this StoragePureHostLun.
        :rtype: str
        """
        return self._hlu

    @hlu.setter
    def hlu(self, hlu):
        """
        Sets the hlu of this StoragePureHostLun.
        Logical unit number (LUN) by which hosts address specified volume.  

        :param hlu: The hlu of this StoragePureHostLun.
        :type: str
        """

        self._hlu = hlu

    @property
    def host(self):
        """
        Gets the host of this StoragePureHostLun.
        Host managed object where the volume is associated. 

        :return: The host of this StoragePureHostLun.
        :rtype: StorageHostRef
        """
        return self._host

    @host.setter
    def host(self, host):
        """
        Sets the host of this StoragePureHostLun.
        Host managed object where the volume is associated. 

        :param host: The host of this StoragePureHostLun.
        :type: StorageHostRef
        """

        self._host = host

    @property
    def host_name(self):
        """
        Gets the host_name of this StoragePureHostLun.
        Name of the host associated with LUN.  

        :return: The host_name of this StoragePureHostLun.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """
        Sets the host_name of this StoragePureHostLun.
        Name of the host associated with LUN.  

        :param host_name: The host_name of this StoragePureHostLun.
        :type: str
        """

        self._host_name = host_name

    @property
    def storage_array(self):
        """
        Gets the storage_array of this StoragePureHostLun.
        Storage array managed object. 

        :return: The storage_array of this StoragePureHostLun.
        :rtype: StorageGenericArrayRef
        """
        return self._storage_array

    @storage_array.setter
    def storage_array(self, storage_array):
        """
        Sets the storage_array of this StoragePureHostLun.
        Storage array managed object. 

        :param storage_array: The storage_array of this StoragePureHostLun.
        :type: StorageGenericArrayRef
        """

        self._storage_array = storage_array

    @property
    def volume(self):
        """
        Gets the volume of this StoragePureHostLun.
        Volume managed object used to create host lun. 

        :return: The volume of this StoragePureHostLun.
        :rtype: StorageVolumeRef
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """
        Sets the volume of this StoragePureHostLun.
        Volume managed object used to create host lun. 

        :param volume: The volume of this StoragePureHostLun.
        :type: StorageVolumeRef
        """

        self._volume = volume

    @property
    def volume_name(self):
        """
        Gets the volume_name of this StoragePureHostLun.
        Name of the storage volume associated with LUN.   

        :return: The volume_name of this StoragePureHostLun.
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """
        Sets the volume_name of this StoragePureHostLun.
        Name of the storage volume associated with LUN.   

        :param volume_name: The volume_name of this StoragePureHostLun.
        :type: str
        """

        self._volume_name = volume_name

    @property
    def host_group(self):
        """
        Gets the host_group of this StoragePureHostLun.
        Host group relationship object associated with LUN. It is empty, if volume has direct connection to host. 

        :return: The host_group of this StoragePureHostLun.
        :rtype: StorageHostRef
        """
        return self._host_group

    @host_group.setter
    def host_group(self, host_group):
        """
        Sets the host_group of this StoragePureHostLun.
        Host group relationship object associated with LUN. It is empty, if volume has direct connection to host. 

        :param host_group: The host_group of this StoragePureHostLun.
        :type: StorageHostRef
        """

        self._host_group = host_group

    @property
    def host_group_name(self):
        """
        Gets the host_group_name of this StoragePureHostLun.
        Name of the host group associated with LUN.  

        :return: The host_group_name of this StoragePureHostLun.
        :rtype: str
        """
        return self._host_group_name

    @host_group_name.setter
    def host_group_name(self, host_group_name):
        """
        Sets the host_group_name of this StoragePureHostLun.
        Name of the host group associated with LUN.  

        :param host_group_name: The host_group_name of this StoragePureHostLun.
        :type: str
        """

        self._host_group_name = host_group_name

    @property
    def registered_device(self):
        """
        Gets the registered_device of this StoragePureHostLun.
        Device registration managed object that represents this storage array connection to Intersight. 

        :return: The registered_device of this StoragePureHostLun.
        :rtype: AssetDeviceRegistrationRef
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """
        Sets the registered_device of this StoragePureHostLun.
        Device registration managed object that represents this storage array connection to Intersight. 

        :param registered_device: The registered_device of this StoragePureHostLun.
        :type: AssetDeviceRegistrationRef
        """

        self._registered_device = registered_device

    @property
    def shared(self):
        """
        Gets the shared of this StoragePureHostLun.
        Kind of volume connection to host. True if it is connected through host group. False in case of direct host connection.   

        :return: The shared of this StoragePureHostLun.
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """
        Sets the shared of this StoragePureHostLun.
        Kind of volume connection to host. True if it is connected through host group. False in case of direct host connection.   

        :param shared: The shared of this StoragePureHostLun.
        :type: bool
        """

        self._shared = shared

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StoragePureHostLun):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
