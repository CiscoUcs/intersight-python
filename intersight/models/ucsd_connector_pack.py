# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1461
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UcsdConnectorPack(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'connector_feature': 'str',
        'dependency_names': 'list[str]',
        'downloaded_version': 'str',
        'name': 'str',
        'services': 'list[str]',
        'state': 'str',
        'version': 'str'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'connector_feature': 'ConnectorFeature',
        'dependency_names': 'DependencyNames',
        'downloaded_version': 'DownloadedVersion',
        'name': 'Name',
        'services': 'Services',
        'state': 'State',
        'version': 'Version'
    }

    def __init__(self, object_type=None, connector_feature=None, dependency_names=None, downloaded_version=None, name=None, services=None, state=None, version=None):
        """
        UcsdConnectorPack - a model defined in Swagger
        """

        self._object_type = None
        self._connector_feature = None
        self._dependency_names = None
        self._downloaded_version = None
        self._name = None
        self._services = None
        self._state = None
        self._version = None

        if object_type is not None:
          self.object_type = object_type
        if connector_feature is not None:
          self.connector_feature = connector_feature
        if dependency_names is not None:
          self.dependency_names = dependency_names
        if downloaded_version is not None:
          self.downloaded_version = downloaded_version
        if name is not None:
          self.name = name
        if services is not None:
          self.services = services
        if state is not None:
          self.state = state
        if version is not None:
          self.version = version

    @property
    def object_type(self):
        """
        Gets the object_type of this UcsdConnectorPack.
        The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.

        :return: The object_type of this UcsdConnectorPack.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this UcsdConnectorPack.
        The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.

        :param object_type: The object_type of this UcsdConnectorPack.
        :type: str
        """

        self._object_type = object_type

    @property
    def connector_feature(self):
        """
        Gets the connector_feature of this UcsdConnectorPack.
        State of the connector pack whether it is enabled or disabled.

        :return: The connector_feature of this UcsdConnectorPack.
        :rtype: str
        """
        return self._connector_feature

    @connector_feature.setter
    def connector_feature(self, connector_feature):
        """
        Sets the connector_feature of this UcsdConnectorPack.
        State of the connector pack whether it is enabled or disabled.

        :param connector_feature: The connector_feature of this UcsdConnectorPack.
        :type: str
        """

        self._connector_feature = connector_feature

    @property
    def dependency_names(self):
        """
        Gets the dependency_names of this UcsdConnectorPack.
        List of dependent connectors on the UCS Director for this connector. For example BigData depends on UCS Connector.

        :return: The dependency_names of this UcsdConnectorPack.
        :rtype: list[str]
        """
        return self._dependency_names

    @dependency_names.setter
    def dependency_names(self, dependency_names):
        """
        Sets the dependency_names of this UcsdConnectorPack.
        List of dependent connectors on the UCS Director for this connector. For example BigData depends on UCS Connector.

        :param dependency_names: The dependency_names of this UcsdConnectorPack.
        :type: list[str]
        """

        self._dependency_names = dependency_names

    @property
    def downloaded_version(self):
        """
        Gets the downloaded_version of this UcsdConnectorPack.
        Version of the connector pack that is last downloaded successfully to UCS Director.

        :return: The downloaded_version of this UcsdConnectorPack.
        :rtype: str
        """
        return self._downloaded_version

    @downloaded_version.setter
    def downloaded_version(self, downloaded_version):
        """
        Sets the downloaded_version of this UcsdConnectorPack.
        Version of the connector pack that is last downloaded successfully to UCS Director.

        :param downloaded_version: The downloaded_version of this UcsdConnectorPack.
        :type: str
        """

        self._downloaded_version = downloaded_version

    @property
    def name(self):
        """
        Gets the name of this UcsdConnectorPack.
        Name of the connector pack running on the UCS Director.

        :return: The name of this UcsdConnectorPack.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this UcsdConnectorPack.
        Name of the connector pack running on the UCS Director.

        :param name: The name of this UcsdConnectorPack.
        :type: str
        """

        self._name = name

    @property
    def services(self):
        """
        Gets the services of this UcsdConnectorPack.
        List of dependent connectors on the UCS Director for this connector. For example BigData depends on UCS Connector.

        :return: The services of this UcsdConnectorPack.
        :rtype: list[str]
        """
        return self._services

    @services.setter
    def services(self, services):
        """
        Sets the services of this UcsdConnectorPack.
        List of dependent connectors on the UCS Director for this connector. For example BigData depends on UCS Connector.

        :param services: The services of this UcsdConnectorPack.
        :type: list[str]
        """

        self._services = services

    @property
    def state(self):
        """
        Gets the state of this UcsdConnectorPack.
        State of the connector pack whether it is enabled or disabled.

        :return: The state of this UcsdConnectorPack.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this UcsdConnectorPack.
        State of the connector pack whether it is enabled or disabled.

        :param state: The state of this UcsdConnectorPack.
        :type: str
        """

        self._state = state

    @property
    def version(self):
        """
        Gets the version of this UcsdConnectorPack.
        Version of the connector pack.

        :return: The version of this UcsdConnectorPack.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this UcsdConnectorPack.
        Version of the connector pack.

        :param version: The version of this UcsdConnectorPack.
        :type: str
        """

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UcsdConnectorPack):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
