# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class UcsdConnectorPack(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'connector_feature': 'str',
        'dependency_names': 'list[str]',
        'downloaded_version': 'str',
        'name': 'str',
        'services': 'list[str]',
        'state': 'str',
        'version': 'str'
    }

    attribute_map = {
        'connector_feature': 'ConnectorFeature',
        'dependency_names': 'DependencyNames',
        'downloaded_version': 'DownloadedVersion',
        'name': 'Name',
        'services': 'Services',
        'state': 'State',
        'version': 'Version'
    }

    def __init__(self,
                 connector_feature=None,
                 dependency_names=None,
                 downloaded_version=None,
                 name=None,
                 services=None,
                 state=None,
                 version=None,
                 local_vars_configuration=None):  # noqa: E501
        """UcsdConnectorPack - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._connector_feature = None
        self._dependency_names = None
        self._downloaded_version = None
        self._name = None
        self._services = None
        self._state = None
        self._version = None
        self.discriminator = None

        if connector_feature is not None:
            self.connector_feature = connector_feature
        if dependency_names is not None:
            self.dependency_names = dependency_names
        if downloaded_version is not None:
            self.downloaded_version = downloaded_version
        if name is not None:
            self.name = name
        if services is not None:
            self.services = services
        if state is not None:
            self.state = state
        if version is not None:
            self.version = version

    @property
    def connector_feature(self):
        """Gets the connector_feature of this UcsdConnectorPack.  # noqa: E501

        State of the connector pack whether it is enabled or disabled.    # noqa: E501

        :return: The connector_feature of this UcsdConnectorPack.  # noqa: E501
        :rtype: str
        """
        return self._connector_feature

    @connector_feature.setter
    def connector_feature(self, connector_feature):
        """Sets the connector_feature of this UcsdConnectorPack.

        State of the connector pack whether it is enabled or disabled.    # noqa: E501

        :param connector_feature: The connector_feature of this UcsdConnectorPack.  # noqa: E501
        :type: str
        """

        self._connector_feature = connector_feature

    @property
    def dependency_names(self):
        """Gets the dependency_names of this UcsdConnectorPack.  # noqa: E501


        :return: The dependency_names of this UcsdConnectorPack.  # noqa: E501
        :rtype: list[str]
        """
        return self._dependency_names

    @dependency_names.setter
    def dependency_names(self, dependency_names):
        """Sets the dependency_names of this UcsdConnectorPack.


        :param dependency_names: The dependency_names of this UcsdConnectorPack.  # noqa: E501
        :type: list[str]
        """

        self._dependency_names = dependency_names

    @property
    def downloaded_version(self):
        """Gets the downloaded_version of this UcsdConnectorPack.  # noqa: E501

        Version of the connector pack that is last downloaded successfully to UCS Director.    # noqa: E501

        :return: The downloaded_version of this UcsdConnectorPack.  # noqa: E501
        :rtype: str
        """
        return self._downloaded_version

    @downloaded_version.setter
    def downloaded_version(self, downloaded_version):
        """Sets the downloaded_version of this UcsdConnectorPack.

        Version of the connector pack that is last downloaded successfully to UCS Director.    # noqa: E501

        :param downloaded_version: The downloaded_version of this UcsdConnectorPack.  # noqa: E501
        :type: str
        """

        self._downloaded_version = downloaded_version

    @property
    def name(self):
        """Gets the name of this UcsdConnectorPack.  # noqa: E501

        Name of the connector pack running on the UCS Director.    # noqa: E501

        :return: The name of this UcsdConnectorPack.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UcsdConnectorPack.

        Name of the connector pack running on the UCS Director.    # noqa: E501

        :param name: The name of this UcsdConnectorPack.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def services(self):
        """Gets the services of this UcsdConnectorPack.  # noqa: E501


        :return: The services of this UcsdConnectorPack.  # noqa: E501
        :rtype: list[str]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this UcsdConnectorPack.


        :param services: The services of this UcsdConnectorPack.  # noqa: E501
        :type: list[str]
        """

        self._services = services

    @property
    def state(self):
        """Gets the state of this UcsdConnectorPack.  # noqa: E501

        State of the connector pack whether it is enabled or disabled.    # noqa: E501

        :return: The state of this UcsdConnectorPack.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UcsdConnectorPack.

        State of the connector pack whether it is enabled or disabled.    # noqa: E501

        :param state: The state of this UcsdConnectorPack.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def version(self):
        """Gets the version of this UcsdConnectorPack.  # noqa: E501

        Version of the connector pack.     # noqa: E501

        :return: The version of this UcsdConnectorPack.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UcsdConnectorPack.

        Version of the connector pack.     # noqa: E501

        :param version: The version of this UcsdConnectorPack.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UcsdConnectorPack):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UcsdConnectorPack):
            return True

        return self.to_dict() != other.to_dict()
