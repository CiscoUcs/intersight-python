# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1461
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApplianceBackup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'filename': 'str',
        'protocol': 'str',
        'remote_host': 'str',
        'remote_path': 'str',
        'remote_port': 'int',
        'username': 'str',
        'elapsed_time': 'int',
        'end_time': 'datetime',
        'is_password_set': 'bool',
        'messages': 'list[str]',
        'password': 'str',
        'start_time': 'datetime',
        'status': 'str',
        'account': 'IamAccountRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'filename': 'Filename',
        'protocol': 'Protocol',
        'remote_host': 'RemoteHost',
        'remote_path': 'RemotePath',
        'remote_port': 'RemotePort',
        'username': 'Username',
        'elapsed_time': 'ElapsedTime',
        'end_time': 'EndTime',
        'is_password_set': 'IsPasswordSet',
        'messages': 'Messages',
        'password': 'Password',
        'start_time': 'StartTime',
        'status': 'Status',
        'account': 'Account'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, filename=None, protocol='scp', remote_host=None, remote_path=None, remote_port=None, username=None, elapsed_time=None, end_time=None, is_password_set=None, messages=None, password=None, start_time=None, status='Started', account=None):
        """
        ApplianceBackup - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._filename = None
        self._protocol = None
        self._remote_host = None
        self._remote_path = None
        self._remote_port = None
        self._username = None
        self._elapsed_time = None
        self._end_time = None
        self._is_password_set = None
        self._messages = None
        self._password = None
        self._start_time = None
        self._status = None
        self._account = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if filename is not None:
          self.filename = filename
        if protocol is not None:
          self.protocol = protocol
        if remote_host is not None:
          self.remote_host = remote_host
        if remote_path is not None:
          self.remote_path = remote_path
        if remote_port is not None:
          self.remote_port = remote_port
        if username is not None:
          self.username = username
        if elapsed_time is not None:
          self.elapsed_time = elapsed_time
        if end_time is not None:
          self.end_time = end_time
        if is_password_set is not None:
          self.is_password_set = is_password_set
        if messages is not None:
          self.messages = messages
        if password is not None:
          self.password = password
        if start_time is not None:
          self.start_time = start_time
        if status is not None:
          self.status = status
        if account is not None:
          self.account = account

    @property
    def account_moid(self):
        """
        Gets the account_moid of this ApplianceBackup.
        The Account ID for this managed object.

        :return: The account_moid of this ApplianceBackup.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this ApplianceBackup.
        The Account ID for this managed object.

        :param account_moid: The account_moid of this ApplianceBackup.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this ApplianceBackup.
        The time when this managed object was created.

        :return: The create_time of this ApplianceBackup.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this ApplianceBackup.
        The time when this managed object was created.

        :param create_time: The create_time of this ApplianceBackup.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this ApplianceBackup.
        The DomainGroup ID for this managed object.

        :return: The domain_group_moid of this ApplianceBackup.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this ApplianceBackup.
        The DomainGroup ID for this managed object.

        :param domain_group_moid: The domain_group_moid of this ApplianceBackup.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this ApplianceBackup.
        The time when this managed object was last modified.

        :return: The mod_time of this ApplianceBackup.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this ApplianceBackup.
        The time when this managed object was last modified.

        :param mod_time: The mod_time of this ApplianceBackup.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this ApplianceBackup.
        The unique identifier of this Managed Object instance.

        :return: The moid of this ApplianceBackup.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this ApplianceBackup.
        The unique identifier of this Managed Object instance.

        :param moid: The moid of this ApplianceBackup.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this ApplianceBackup.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        :return: The object_type of this ApplianceBackup.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this ApplianceBackup.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        :param object_type: The object_type of this ApplianceBackup.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this ApplianceBackup.
        The array of owners which represent effective ownership of this object.

        :return: The owners of this ApplianceBackup.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this ApplianceBackup.
        The array of owners which represent effective ownership of this object.

        :param owners: The owners of this ApplianceBackup.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this ApplianceBackup.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.

        :return: The shared_scope of this ApplianceBackup.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this ApplianceBackup.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.

        :param shared_scope: The shared_scope of this ApplianceBackup.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this ApplianceBackup.
        The array of tags, which allow to add key, value meta-data to managed objects.

        :return: The tags of this ApplianceBackup.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this ApplianceBackup.
        The array of tags, which allow to add key, value meta-data to managed objects.

        :param tags: The tags of this ApplianceBackup.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this ApplianceBackup.
        The versioning info for this managed object.

        :return: The version_context of this ApplianceBackup.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this ApplianceBackup.
        The versioning info for this managed object.

        :param version_context: The version_context of this ApplianceBackup.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this ApplianceBackup.
        The array containing the MO references of the ancestors in the object containment hierarchy.

        :return: The ancestors of this ApplianceBackup.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this ApplianceBackup.
        The array containing the MO references of the ancestors in the object containment hierarchy.

        :param ancestors: The ancestors of this ApplianceBackup.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this ApplianceBackup.
        The direct ancestor of this managed object in the containment hierarchy.

        :return: The parent of this ApplianceBackup.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this ApplianceBackup.
        The direct ancestor of this managed object in the containment hierarchy.

        :param parent: The parent of this ApplianceBackup.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this ApplianceBackup.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.

        :return: The permission_resources of this ApplianceBackup.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this ApplianceBackup.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.

        :param permission_resources: The permission_resources of this ApplianceBackup.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def filename(self):
        """
        Gets the filename of this ApplianceBackup.
        Backup filename to backup or restore.

        :return: The filename of this ApplianceBackup.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """
        Sets the filename of this ApplianceBackup.
        Backup filename to backup or restore.

        :param filename: The filename of this ApplianceBackup.
        :type: str
        """

        self._filename = filename

    @property
    def protocol(self):
        """
        Gets the protocol of this ApplianceBackup.
        Communication protocol used by the file server (e.g. scp or sftp).

        :return: The protocol of this ApplianceBackup.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """
        Sets the protocol of this ApplianceBackup.
        Communication protocol used by the file server (e.g. scp or sftp).

        :param protocol: The protocol of this ApplianceBackup.
        :type: str
        """
        allowed_values = ["scp", "sftp"]
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def remote_host(self):
        """
        Gets the remote_host of this ApplianceBackup.
        Hostname of the remote file server.

        :return: The remote_host of this ApplianceBackup.
        :rtype: str
        """
        return self._remote_host

    @remote_host.setter
    def remote_host(self, remote_host):
        """
        Sets the remote_host of this ApplianceBackup.
        Hostname of the remote file server.

        :param remote_host: The remote_host of this ApplianceBackup.
        :type: str
        """

        self._remote_host = remote_host

    @property
    def remote_path(self):
        """
        Gets the remote_path of this ApplianceBackup.
        File server directory to copy the file.

        :return: The remote_path of this ApplianceBackup.
        :rtype: str
        """
        return self._remote_path

    @remote_path.setter
    def remote_path(self, remote_path):
        """
        Sets the remote_path of this ApplianceBackup.
        File server directory to copy the file.

        :param remote_path: The remote_path of this ApplianceBackup.
        :type: str
        """

        self._remote_path = remote_path

    @property
    def remote_port(self):
        """
        Gets the remote_port of this ApplianceBackup.
        Remote TCP port on the file server (e.g. 22 for scp).

        :return: The remote_port of this ApplianceBackup.
        :rtype: int
        """
        return self._remote_port

    @remote_port.setter
    def remote_port(self, remote_port):
        """
        Sets the remote_port of this ApplianceBackup.
        Remote TCP port on the file server (e.g. 22 for scp).

        :param remote_port: The remote_port of this ApplianceBackup.
        :type: int
        """

        self._remote_port = remote_port

    @property
    def username(self):
        """
        Gets the username of this ApplianceBackup.
        Username to authenticate the fileserver.

        :return: The username of this ApplianceBackup.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this ApplianceBackup.
        Username to authenticate the fileserver.

        :param username: The username of this ApplianceBackup.
        :type: str
        """

        self._username = username

    @property
    def elapsed_time(self):
        """
        Gets the elapsed_time of this ApplianceBackup.
        Elapsed time in seconds since the backup process has started.

        :return: The elapsed_time of this ApplianceBackup.
        :rtype: int
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time):
        """
        Sets the elapsed_time of this ApplianceBackup.
        Elapsed time in seconds since the backup process has started.

        :param elapsed_time: The elapsed_time of this ApplianceBackup.
        :type: int
        """

        self._elapsed_time = elapsed_time

    @property
    def end_time(self):
        """
        Gets the end_time of this ApplianceBackup.
        End date and time of the backup process.

        :return: The end_time of this ApplianceBackup.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this ApplianceBackup.
        End date and time of the backup process.

        :param end_time: The end_time of this ApplianceBackup.
        :type: datetime
        """

        self._end_time = end_time

    @property
    def is_password_set(self):
        """
        Gets the is_password_set of this ApplianceBackup.

        :return: The is_password_set of this ApplianceBackup.
        :rtype: bool
        """
        return self._is_password_set

    @is_password_set.setter
    def is_password_set(self, is_password_set):
        """
        Sets the is_password_set of this ApplianceBackup.

        :param is_password_set: The is_password_set of this ApplianceBackup.
        :type: bool
        """

        self._is_password_set = is_password_set

    @property
    def messages(self):
        """
        Gets the messages of this ApplianceBackup.
        Messages generated during the backup process.

        :return: The messages of this ApplianceBackup.
        :rtype: list[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """
        Sets the messages of this ApplianceBackup.
        Messages generated during the backup process.

        :param messages: The messages of this ApplianceBackup.
        :type: list[str]
        """

        self._messages = messages

    @property
    def password(self):
        """
        Gets the password of this ApplianceBackup.
        Password to authenticate the fileserver.

        :return: The password of this ApplianceBackup.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this ApplianceBackup.
        Password to authenticate the fileserver.

        :param password: The password of this ApplianceBackup.
        :type: str
        """

        self._password = password

    @property
    def start_time(self):
        """
        Gets the start_time of this ApplianceBackup.
        Start date and time of the backup process.

        :return: The start_time of this ApplianceBackup.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this ApplianceBackup.
        Start date and time of the backup process.

        :param start_time: The start_time of this ApplianceBackup.
        :type: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """
        Gets the status of this ApplianceBackup.
        Status of the backup managed object.

        :return: The status of this ApplianceBackup.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ApplianceBackup.
        Status of the backup managed object.

        :param status: The status of this ApplianceBackup.
        :type: str
        """
        allowed_values = ["Started", "Created", "Failed", "Completed", "Copied"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def account(self):
        """
        Gets the account of this ApplianceBackup.
        Backup managed object to Account relationship.

        :return: The account of this ApplianceBackup.
        :rtype: IamAccountRef
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this ApplianceBackup.
        Backup managed object to Account relationship.

        :param account: The account of this ApplianceBackup.
        :type: IamAccountRef
        """

        self._account = account

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApplianceBackup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
