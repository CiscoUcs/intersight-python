# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1415
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VnicPlogiSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'retries': 'int',
        'timeout': 'int'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'retries': 'Retries',
        'timeout': 'Timeout'
    }

    def __init__(self, object_type=None, retries=None, timeout=None):
        """
        VnicPlogiSettings - a model defined in Swagger
        """

        self._object_type = None
        self._retries = None
        self._timeout = None

        if object_type is not None:
          self.object_type = object_type
        if retries is not None:
          self.retries = retries
        if timeout is not None:
          self.timeout = timeout

    @property
    def object_type(self):
        """
        Gets the object_type of this VnicPlogiSettings.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :return: The object_type of this VnicPlogiSettings.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this VnicPlogiSettings.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :param object_type: The object_type of this VnicPlogiSettings.
        :type: str
        """

        self._object_type = object_type

    @property
    def retries(self):
        """
        Gets the retries of this VnicPlogiSettings.
        The number of times that the system tries to log in to a port after the first failure.  

        :return: The retries of this VnicPlogiSettings.
        :rtype: int
        """
        return self._retries

    @retries.setter
    def retries(self, retries):
        """
        Sets the retries of this VnicPlogiSettings.
        The number of times that the system tries to log in to a port after the first failure.  

        :param retries: The retries of this VnicPlogiSettings.
        :type: int
        """

        self._retries = retries

    @property
    def timeout(self):
        """
        Gets the timeout of this VnicPlogiSettings.
        The number of milliseconds that the system waits before it tries to log in again.   

        :return: The timeout of this VnicPlogiSettings.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """
        Sets the timeout of this VnicPlogiSettings.
        The number of milliseconds that the system waits before it tries to log in again.   

        :param timeout: The timeout of this VnicPlogiSettings.
        :type: int
        """

        self._timeout = timeout

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VnicPlogiSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
