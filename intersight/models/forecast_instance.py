# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1461
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ForecastInstance(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'alt_model': 'list[float]',
        'device_id': 'str',
        'full_cap_days': 'int',
        'metric_name': 'str',
        'min_days_for_forecast': 'int',
        'model': 'ForecastModel',
        'threshold_days': 'int',
        'forecast_def': 'ForecastDefinitionRef',
        'registered_device': 'AssetDeviceRegistrationRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'alt_model': 'AltModel',
        'device_id': 'DeviceId',
        'full_cap_days': 'FullCapDays',
        'metric_name': 'MetricName',
        'min_days_for_forecast': 'MinDaysForForecast',
        'model': 'Model',
        'threshold_days': 'ThresholdDays',
        'forecast_def': 'ForecastDef',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, alt_model=None, device_id=None, full_cap_days=None, metric_name=None, min_days_for_forecast=None, model=None, threshold_days=None, forecast_def=None, registered_device=None):
        """
        ForecastInstance - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._alt_model = None
        self._device_id = None
        self._full_cap_days = None
        self._metric_name = None
        self._min_days_for_forecast = None
        self._model = None
        self._threshold_days = None
        self._forecast_def = None
        self._registered_device = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if alt_model is not None:
          self.alt_model = alt_model
        if device_id is not None:
          self.device_id = device_id
        if full_cap_days is not None:
          self.full_cap_days = full_cap_days
        if metric_name is not None:
          self.metric_name = metric_name
        if min_days_for_forecast is not None:
          self.min_days_for_forecast = min_days_for_forecast
        if model is not None:
          self.model = model
        if threshold_days is not None:
          self.threshold_days = threshold_days
        if forecast_def is not None:
          self.forecast_def = forecast_def
        if registered_device is not None:
          self.registered_device = registered_device

    @property
    def account_moid(self):
        """
        Gets the account_moid of this ForecastInstance.
        The Account ID for this managed object.

        :return: The account_moid of this ForecastInstance.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this ForecastInstance.
        The Account ID for this managed object.

        :param account_moid: The account_moid of this ForecastInstance.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this ForecastInstance.
        The time when this managed object was created.

        :return: The create_time of this ForecastInstance.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this ForecastInstance.
        The time when this managed object was created.

        :param create_time: The create_time of this ForecastInstance.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this ForecastInstance.
        The DomainGroup ID for this managed object.

        :return: The domain_group_moid of this ForecastInstance.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this ForecastInstance.
        The DomainGroup ID for this managed object.

        :param domain_group_moid: The domain_group_moid of this ForecastInstance.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this ForecastInstance.
        The time when this managed object was last modified.

        :return: The mod_time of this ForecastInstance.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this ForecastInstance.
        The time when this managed object was last modified.

        :param mod_time: The mod_time of this ForecastInstance.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this ForecastInstance.
        The unique identifier of this Managed Object instance.

        :return: The moid of this ForecastInstance.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this ForecastInstance.
        The unique identifier of this Managed Object instance.

        :param moid: The moid of this ForecastInstance.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this ForecastInstance.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        :return: The object_type of this ForecastInstance.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this ForecastInstance.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        :param object_type: The object_type of this ForecastInstance.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this ForecastInstance.
        The array of owners which represent effective ownership of this object.

        :return: The owners of this ForecastInstance.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this ForecastInstance.
        The array of owners which represent effective ownership of this object.

        :param owners: The owners of this ForecastInstance.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this ForecastInstance.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.

        :return: The shared_scope of this ForecastInstance.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this ForecastInstance.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.

        :param shared_scope: The shared_scope of this ForecastInstance.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this ForecastInstance.
        The array of tags, which allow to add key, value meta-data to managed objects.

        :return: The tags of this ForecastInstance.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this ForecastInstance.
        The array of tags, which allow to add key, value meta-data to managed objects.

        :param tags: The tags of this ForecastInstance.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this ForecastInstance.
        The versioning info for this managed object.

        :return: The version_context of this ForecastInstance.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this ForecastInstance.
        The versioning info for this managed object.

        :param version_context: The version_context of this ForecastInstance.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this ForecastInstance.
        The array containing the MO references of the ancestors in the object containment hierarchy.

        :return: The ancestors of this ForecastInstance.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this ForecastInstance.
        The array containing the MO references of the ancestors in the object containment hierarchy.

        :param ancestors: The ancestors of this ForecastInstance.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this ForecastInstance.
        The direct ancestor of this managed object in the containment hierarchy.

        :return: The parent of this ForecastInstance.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this ForecastInstance.
        The direct ancestor of this managed object in the containment hierarchy.

        :param parent: The parent of this ForecastInstance.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this ForecastInstance.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.

        :return: The permission_resources of this ForecastInstance.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this ForecastInstance.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.

        :param permission_resources: The permission_resources of this ForecastInstance.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def alt_model(self):
        """
        Gets the alt_model of this ForecastInstance.
        Experimental predictive model generated from the historical data using experimental algorithm. The two models are used to plot and do a comparision.

        :return: The alt_model of this ForecastInstance.
        :rtype: list[float]
        """
        return self._alt_model

    @alt_model.setter
    def alt_model(self, alt_model):
        """
        Sets the alt_model of this ForecastInstance.
        Experimental predictive model generated from the historical data using experimental algorithm. The two models are used to plot and do a comparision.

        :param alt_model: The alt_model of this ForecastInstance.
        :type: list[float]
        """

        self._alt_model = alt_model

    @property
    def device_id(self):
        """
        Gets the device_id of this ForecastInstance.
        The Moid of the Intersight managed device instance for which regression model is derived.

        :return: The device_id of this ForecastInstance.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """
        Sets the device_id of this ForecastInstance.
        The Moid of the Intersight managed device instance for which regression model is derived.

        :param device_id: The device_id of this ForecastInstance.
        :type: str
        """

        self._device_id = device_id

    @property
    def full_cap_days(self):
        """
        Gets the full_cap_days of this ForecastInstance.
        The number of days remaining before the device reaches its full functional capacity.

        :return: The full_cap_days of this ForecastInstance.
        :rtype: int
        """
        return self._full_cap_days

    @full_cap_days.setter
    def full_cap_days(self, full_cap_days):
        """
        Sets the full_cap_days of this ForecastInstance.
        The number of days remaining before the device reaches its full functional capacity.

        :param full_cap_days: The full_cap_days of this ForecastInstance.
        :type: int
        """

        self._full_cap_days = full_cap_days

    @property
    def metric_name(self):
        """
        Gets the metric_name of this ForecastInstance.
        The name of the metric for which regression model is generated.

        :return: The metric_name of this ForecastInstance.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """
        Sets the metric_name of this ForecastInstance.
        The name of the metric for which regression model is generated.

        :param metric_name: The metric_name of this ForecastInstance.
        :type: str
        """

        self._metric_name = metric_name

    @property
    def min_days_for_forecast(self):
        """
        Gets the min_days_for_forecast of this ForecastInstance.
        The minimum number of days the HyperFlex cluster should be up for computing forecast.

        :return: The min_days_for_forecast of this ForecastInstance.
        :rtype: int
        """
        return self._min_days_for_forecast

    @min_days_for_forecast.setter
    def min_days_for_forecast(self, min_days_for_forecast):
        """
        Sets the min_days_for_forecast of this ForecastInstance.
        The minimum number of days the HyperFlex cluster should be up for computing forecast.

        :param min_days_for_forecast: The min_days_for_forecast of this ForecastInstance.
        :type: int
        """

        self._min_days_for_forecast = min_days_for_forecast

    @property
    def model(self):
        """
        Gets the model of this ForecastInstance.
        Predictive model generated from the historical data of a device or source.

        :return: The model of this ForecastInstance.
        :rtype: ForecastModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this ForecastInstance.
        Predictive model generated from the historical data of a device or source.

        :param model: The model of this ForecastInstance.
        :type: ForecastModel
        """

        self._model = model

    @property
    def threshold_days(self):
        """
        Gets the threshold_days of this ForecastInstance.
        The number of days remaining before the device reaches the specified threshold for the metric as defined in definition.

        :return: The threshold_days of this ForecastInstance.
        :rtype: int
        """
        return self._threshold_days

    @threshold_days.setter
    def threshold_days(self, threshold_days):
        """
        Sets the threshold_days of this ForecastInstance.
        The number of days remaining before the device reaches the specified threshold for the metric as defined in definition.

        :param threshold_days: The threshold_days of this ForecastInstance.
        :type: int
        """

        self._threshold_days = threshold_days

    @property
    def forecast_def(self):
        """
        Gets the forecast_def of this ForecastInstance.
        The relationship to the forecast definition based on which the instance is generated.

        :return: The forecast_def of this ForecastInstance.
        :rtype: ForecastDefinitionRef
        """
        return self._forecast_def

    @forecast_def.setter
    def forecast_def(self, forecast_def):
        """
        Sets the forecast_def of this ForecastInstance.
        The relationship to the forecast definition based on which the instance is generated.

        :param forecast_def: The forecast_def of this ForecastInstance.
        :type: ForecastDefinitionRef
        """

        self._forecast_def = forecast_def

    @property
    def registered_device(self):
        """
        Gets the registered_device of this ForecastInstance.
        The relationship to the registered device for which forecast is computed.

        :return: The registered_device of this ForecastInstance.
        :rtype: AssetDeviceRegistrationRef
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """
        Sets the registered_device of this ForecastInstance.
        The relationship to the registered device for which forecast is computed.

        :param registered_device: The registered_device of this ForecastInstance.
        :type: AssetDeviceRegistrationRef
        """

        self._registered_device = registered_device

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ForecastInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
