# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class IamOAuthToken(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_expiration_time': 'datetime',
        'client_id': 'str',
        'client_ip_address': 'str',
        'client_name': 'str',
        'expiration_time': 'datetime',
        'last_login_client': 'str',
        'last_login_time': 'datetime',
        'token_id': 'str',
        'user_meta': 'IamClientMeta',
        'app_registration': 'IamAppRegistration',
        'permission': 'IamPermission',
        'user': 'IamUser'
    }

    attribute_map = {
        'access_expiration_time': 'AccessExpirationTime',
        'client_id': 'ClientId',
        'client_ip_address': 'ClientIpAddress',
        'client_name': 'ClientName',
        'expiration_time': 'ExpirationTime',
        'last_login_client': 'LastLoginClient',
        'last_login_time': 'LastLoginTime',
        'token_id': 'TokenId',
        'user_meta': 'UserMeta',
        'app_registration': 'AppRegistration',
        'permission': 'Permission',
        'user': 'User'
    }

    def __init__(self,
                 access_expiration_time=None,
                 client_id=None,
                 client_ip_address=None,
                 client_name=None,
                 expiration_time=None,
                 last_login_client=None,
                 last_login_time=None,
                 token_id=None,
                 user_meta=None,
                 app_registration=None,
                 permission=None,
                 user=None,
                 local_vars_configuration=None):  # noqa: E501
        """IamOAuthToken - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_expiration_time = None
        self._client_id = None
        self._client_ip_address = None
        self._client_name = None
        self._expiration_time = None
        self._last_login_client = None
        self._last_login_time = None
        self._token_id = None
        self._user_meta = None
        self._app_registration = None
        self._permission = None
        self._user = None
        self.discriminator = None

        if access_expiration_time is not None:
            self.access_expiration_time = access_expiration_time
        if client_id is not None:
            self.client_id = client_id
        if client_ip_address is not None:
            self.client_ip_address = client_ip_address
        if client_name is not None:
            self.client_name = client_name
        if expiration_time is not None:
            self.expiration_time = expiration_time
        if last_login_client is not None:
            self.last_login_client = last_login_client
        if last_login_time is not None:
            self.last_login_time = last_login_time
        if token_id is not None:
            self.token_id = token_id
        if user_meta is not None:
            self.user_meta = user_meta
        if app_registration is not None:
            self.app_registration = app_registration
        if permission is not None:
            self.permission = permission
        if user is not None:
            self.user = user

    @property
    def access_expiration_time(self):
        """Gets the access_expiration_time of this IamOAuthToken.  # noqa: E501

        Expiration time for the JWT token to which it can be used for api calls.    # noqa: E501

        :return: The access_expiration_time of this IamOAuthToken.  # noqa: E501
        :rtype: datetime
        """
        return self._access_expiration_time

    @access_expiration_time.setter
    def access_expiration_time(self, access_expiration_time):
        """Sets the access_expiration_time of this IamOAuthToken.

        Expiration time for the JWT token to which it can be used for api calls.    # noqa: E501

        :param access_expiration_time: The access_expiration_time of this IamOAuthToken.  # noqa: E501
        :type: datetime
        """

        self._access_expiration_time = access_expiration_time

    @property
    def client_id(self):
        """Gets the client_id of this IamOAuthToken.  # noqa: E501

        The identifier of the registered application to which the token belongs.    # noqa: E501

        :return: The client_id of this IamOAuthToken.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this IamOAuthToken.

        The identifier of the registered application to which the token belongs.    # noqa: E501

        :param client_id: The client_id of this IamOAuthToken.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_ip_address(self):
        """Gets the client_ip_address of this IamOAuthToken.  # noqa: E501

        The user agent IP address from which the auth token is launched.    # noqa: E501

        :return: The client_ip_address of this IamOAuthToken.  # noqa: E501
        :rtype: str
        """
        return self._client_ip_address

    @client_ip_address.setter
    def client_ip_address(self, client_ip_address):
        """Sets the client_ip_address of this IamOAuthToken.

        The user agent IP address from which the auth token is launched.    # noqa: E501

        :param client_ip_address: The client_ip_address of this IamOAuthToken.  # noqa: E501
        :type: str
        """

        self._client_ip_address = client_ip_address

    @property
    def client_name(self):
        """Gets the client_name of this IamOAuthToken.  # noqa: E501

        The name of the registered application to which the token belongs.    # noqa: E501

        :return: The client_name of this IamOAuthToken.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this IamOAuthToken.

        The name of the registered application to which the token belongs.    # noqa: E501

        :param client_name: The client_name of this IamOAuthToken.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def expiration_time(self):
        """Gets the expiration_time of this IamOAuthToken.  # noqa: E501

        Expiration time for the JWT token to which it can be refreshed.    # noqa: E501

        :return: The expiration_time of this IamOAuthToken.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this IamOAuthToken.

        Expiration time for the JWT token to which it can be refreshed.    # noqa: E501

        :param expiration_time: The expiration_time of this IamOAuthToken.  # noqa: E501
        :type: datetime
        """

        self._expiration_time = expiration_time

    @property
    def last_login_client(self):
        """Gets the last_login_client of this IamOAuthToken.  # noqa: E501

        The client address from which last login is initiated.    # noqa: E501

        :return: The last_login_client of this IamOAuthToken.  # noqa: E501
        :rtype: str
        """
        return self._last_login_client

    @last_login_client.setter
    def last_login_client(self, last_login_client):
        """Sets the last_login_client of this IamOAuthToken.

        The client address from which last login is initiated.    # noqa: E501

        :param last_login_client: The last_login_client of this IamOAuthToken.  # noqa: E501
        :type: str
        """

        self._last_login_client = last_login_client

    @property
    def last_login_time(self):
        """Gets the last_login_time of this IamOAuthToken.  # noqa: E501

        The last login time for user.    # noqa: E501

        :return: The last_login_time of this IamOAuthToken.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login_time

    @last_login_time.setter
    def last_login_time(self, last_login_time):
        """Sets the last_login_time of this IamOAuthToken.

        The last login time for user.    # noqa: E501

        :param last_login_time: The last_login_time of this IamOAuthToken.  # noqa: E501
        :type: datetime
        """

        self._last_login_time = last_login_time

    @property
    def token_id(self):
        """Gets the token_id of this IamOAuthToken.  # noqa: E501

        Token identifier. Not the Access Token itself.     # noqa: E501

        :return: The token_id of this IamOAuthToken.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this IamOAuthToken.

        Token identifier. Not the Access Token itself.     # noqa: E501

        :param token_id: The token_id of this IamOAuthToken.  # noqa: E501
        :type: str
        """

        self._token_id = token_id

    @property
    def user_meta(self):
        """Gets the user_meta of this IamOAuthToken.  # noqa: E501


        :return: The user_meta of this IamOAuthToken.  # noqa: E501
        :rtype: IamClientMeta
        """
        return self._user_meta

    @user_meta.setter
    def user_meta(self, user_meta):
        """Sets the user_meta of this IamOAuthToken.


        :param user_meta: The user_meta of this IamOAuthToken.  # noqa: E501
        :type: IamClientMeta
        """

        self._user_meta = user_meta

    @property
    def app_registration(self):
        """Gets the app_registration of this IamOAuthToken.  # noqa: E501


        :return: The app_registration of this IamOAuthToken.  # noqa: E501
        :rtype: IamAppRegistration
        """
        return self._app_registration

    @app_registration.setter
    def app_registration(self, app_registration):
        """Sets the app_registration of this IamOAuthToken.


        :param app_registration: The app_registration of this IamOAuthToken.  # noqa: E501
        :type: IamAppRegistration
        """

        self._app_registration = app_registration

    @property
    def permission(self):
        """Gets the permission of this IamOAuthToken.  # noqa: E501


        :return: The permission of this IamOAuthToken.  # noqa: E501
        :rtype: IamPermission
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this IamOAuthToken.


        :param permission: The permission of this IamOAuthToken.  # noqa: E501
        :type: IamPermission
        """

        self._permission = permission

    @property
    def user(self):
        """Gets the user of this IamOAuthToken.  # noqa: E501


        :return: The user of this IamOAuthToken.  # noqa: E501
        :rtype: IamUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this IamOAuthToken.


        :param user: The user of this IamOAuthToken.  # noqa: E501
        :type: IamUser
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IamOAuthToken):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IamOAuthToken):
            return True

        return self.to_dict() != other.to_dict()
