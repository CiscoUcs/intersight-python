# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1461
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IamOAuthToken(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'access_expiration_time': 'datetime',
        'client_id': 'str',
        'client_ip_address': 'str',
        'client_name': 'str',
        'expiration_time': 'datetime',
        'last_login_client': 'str',
        'last_login_time': 'datetime',
        'token_id': 'str',
        'user_meta': 'IamClientMeta',
        'app_registration': 'IamAppRegistrationRef',
        'permission': 'IamPermissionRef',
        'user': 'IamUserRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'access_expiration_time': 'AccessExpirationTime',
        'client_id': 'ClientId',
        'client_ip_address': 'ClientIpAddress',
        'client_name': 'ClientName',
        'expiration_time': 'ExpirationTime',
        'last_login_client': 'LastLoginClient',
        'last_login_time': 'LastLoginTime',
        'token_id': 'TokenId',
        'user_meta': 'UserMeta',
        'app_registration': 'AppRegistration',
        'permission': 'Permission',
        'user': 'User'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, access_expiration_time=None, client_id=None, client_ip_address=None, client_name=None, expiration_time=None, last_login_client=None, last_login_time=None, token_id=None, user_meta=None, app_registration=None, permission=None, user=None):
        """
        IamOAuthToken - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._access_expiration_time = None
        self._client_id = None
        self._client_ip_address = None
        self._client_name = None
        self._expiration_time = None
        self._last_login_client = None
        self._last_login_time = None
        self._token_id = None
        self._user_meta = None
        self._app_registration = None
        self._permission = None
        self._user = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if access_expiration_time is not None:
          self.access_expiration_time = access_expiration_time
        if client_id is not None:
          self.client_id = client_id
        if client_ip_address is not None:
          self.client_ip_address = client_ip_address
        if client_name is not None:
          self.client_name = client_name
        if expiration_time is not None:
          self.expiration_time = expiration_time
        if last_login_client is not None:
          self.last_login_client = last_login_client
        if last_login_time is not None:
          self.last_login_time = last_login_time
        if token_id is not None:
          self.token_id = token_id
        if user_meta is not None:
          self.user_meta = user_meta
        if app_registration is not None:
          self.app_registration = app_registration
        if permission is not None:
          self.permission = permission
        if user is not None:
          self.user = user

    @property
    def account_moid(self):
        """
        Gets the account_moid of this IamOAuthToken.
        The Account ID for this managed object.

        :return: The account_moid of this IamOAuthToken.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this IamOAuthToken.
        The Account ID for this managed object.

        :param account_moid: The account_moid of this IamOAuthToken.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this IamOAuthToken.
        The time when this managed object was created.

        :return: The create_time of this IamOAuthToken.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this IamOAuthToken.
        The time when this managed object was created.

        :param create_time: The create_time of this IamOAuthToken.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this IamOAuthToken.
        The DomainGroup ID for this managed object.

        :return: The domain_group_moid of this IamOAuthToken.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this IamOAuthToken.
        The DomainGroup ID for this managed object.

        :param domain_group_moid: The domain_group_moid of this IamOAuthToken.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this IamOAuthToken.
        The time when this managed object was last modified.

        :return: The mod_time of this IamOAuthToken.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this IamOAuthToken.
        The time when this managed object was last modified.

        :param mod_time: The mod_time of this IamOAuthToken.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this IamOAuthToken.
        The unique identifier of this Managed Object instance.

        :return: The moid of this IamOAuthToken.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this IamOAuthToken.
        The unique identifier of this Managed Object instance.

        :param moid: The moid of this IamOAuthToken.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this IamOAuthToken.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        :return: The object_type of this IamOAuthToken.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this IamOAuthToken.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        :param object_type: The object_type of this IamOAuthToken.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this IamOAuthToken.
        The array of owners which represent effective ownership of this object.

        :return: The owners of this IamOAuthToken.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this IamOAuthToken.
        The array of owners which represent effective ownership of this object.

        :param owners: The owners of this IamOAuthToken.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this IamOAuthToken.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.

        :return: The shared_scope of this IamOAuthToken.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this IamOAuthToken.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.

        :param shared_scope: The shared_scope of this IamOAuthToken.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this IamOAuthToken.
        The array of tags, which allow to add key, value meta-data to managed objects.

        :return: The tags of this IamOAuthToken.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this IamOAuthToken.
        The array of tags, which allow to add key, value meta-data to managed objects.

        :param tags: The tags of this IamOAuthToken.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this IamOAuthToken.
        The versioning info for this managed object.

        :return: The version_context of this IamOAuthToken.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this IamOAuthToken.
        The versioning info for this managed object.

        :param version_context: The version_context of this IamOAuthToken.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this IamOAuthToken.
        The array containing the MO references of the ancestors in the object containment hierarchy.

        :return: The ancestors of this IamOAuthToken.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this IamOAuthToken.
        The array containing the MO references of the ancestors in the object containment hierarchy.

        :param ancestors: The ancestors of this IamOAuthToken.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this IamOAuthToken.
        The direct ancestor of this managed object in the containment hierarchy.

        :return: The parent of this IamOAuthToken.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this IamOAuthToken.
        The direct ancestor of this managed object in the containment hierarchy.

        :param parent: The parent of this IamOAuthToken.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this IamOAuthToken.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.

        :return: The permission_resources of this IamOAuthToken.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this IamOAuthToken.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.

        :param permission_resources: The permission_resources of this IamOAuthToken.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def access_expiration_time(self):
        """
        Gets the access_expiration_time of this IamOAuthToken.
        Expiration time for the JWT token to which it can be used for api calls.

        :return: The access_expiration_time of this IamOAuthToken.
        :rtype: datetime
        """
        return self._access_expiration_time

    @access_expiration_time.setter
    def access_expiration_time(self, access_expiration_time):
        """
        Sets the access_expiration_time of this IamOAuthToken.
        Expiration time for the JWT token to which it can be used for api calls.

        :param access_expiration_time: The access_expiration_time of this IamOAuthToken.
        :type: datetime
        """

        self._access_expiration_time = access_expiration_time

    @property
    def client_id(self):
        """
        Gets the client_id of this IamOAuthToken.
        The identifier of the registered application to which the token belongs.

        :return: The client_id of this IamOAuthToken.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this IamOAuthToken.
        The identifier of the registered application to which the token belongs.

        :param client_id: The client_id of this IamOAuthToken.
        :type: str
        """

        self._client_id = client_id

    @property
    def client_ip_address(self):
        """
        Gets the client_ip_address of this IamOAuthToken.
        The user agent IP address from which the auth token is launched.

        :return: The client_ip_address of this IamOAuthToken.
        :rtype: str
        """
        return self._client_ip_address

    @client_ip_address.setter
    def client_ip_address(self, client_ip_address):
        """
        Sets the client_ip_address of this IamOAuthToken.
        The user agent IP address from which the auth token is launched.

        :param client_ip_address: The client_ip_address of this IamOAuthToken.
        :type: str
        """

        self._client_ip_address = client_ip_address

    @property
    def client_name(self):
        """
        Gets the client_name of this IamOAuthToken.
        The name of the registered application to which the token belongs.

        :return: The client_name of this IamOAuthToken.
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """
        Sets the client_name of this IamOAuthToken.
        The name of the registered application to which the token belongs.

        :param client_name: The client_name of this IamOAuthToken.
        :type: str
        """

        self._client_name = client_name

    @property
    def expiration_time(self):
        """
        Gets the expiration_time of this IamOAuthToken.
        Expiration time for the JWT token to which it can be refreshed.

        :return: The expiration_time of this IamOAuthToken.
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """
        Sets the expiration_time of this IamOAuthToken.
        Expiration time for the JWT token to which it can be refreshed.

        :param expiration_time: The expiration_time of this IamOAuthToken.
        :type: datetime
        """

        self._expiration_time = expiration_time

    @property
    def last_login_client(self):
        """
        Gets the last_login_client of this IamOAuthToken.
        The client address from which last login is initiated.

        :return: The last_login_client of this IamOAuthToken.
        :rtype: str
        """
        return self._last_login_client

    @last_login_client.setter
    def last_login_client(self, last_login_client):
        """
        Sets the last_login_client of this IamOAuthToken.
        The client address from which last login is initiated.

        :param last_login_client: The last_login_client of this IamOAuthToken.
        :type: str
        """

        self._last_login_client = last_login_client

    @property
    def last_login_time(self):
        """
        Gets the last_login_time of this IamOAuthToken.
        The last login time for user.

        :return: The last_login_time of this IamOAuthToken.
        :rtype: datetime
        """
        return self._last_login_time

    @last_login_time.setter
    def last_login_time(self, last_login_time):
        """
        Sets the last_login_time of this IamOAuthToken.
        The last login time for user.

        :param last_login_time: The last_login_time of this IamOAuthToken.
        :type: datetime
        """

        self._last_login_time = last_login_time

    @property
    def token_id(self):
        """
        Gets the token_id of this IamOAuthToken.
        Token identifier. Not the Access Token itself.

        :return: The token_id of this IamOAuthToken.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """
        Sets the token_id of this IamOAuthToken.
        Token identifier. Not the Access Token itself.

        :param token_id: The token_id of this IamOAuthToken.
        :type: str
        """

        self._token_id = token_id

    @property
    def user_meta(self):
        """
        Gets the user_meta of this IamOAuthToken.
        User Device meta information.

        :return: The user_meta of this IamOAuthToken.
        :rtype: IamClientMeta
        """
        return self._user_meta

    @user_meta.setter
    def user_meta(self, user_meta):
        """
        Sets the user_meta of this IamOAuthToken.
        User Device meta information.

        :param user_meta: The user_meta of this IamOAuthToken.
        :type: IamClientMeta
        """

        self._user_meta = user_meta

    @property
    def app_registration(self):
        """
        Gets the app_registration of this IamOAuthToken.
        A collection of references to the [iam.AppRegistration](mo://iam.AppRegistration) Managed Object. When this managed object is deleted, the referenced [iam.AppRegistration](mo://iam.AppRegistration) MO unsets its reference to this deleted MO.

        :return: The app_registration of this IamOAuthToken.
        :rtype: IamAppRegistrationRef
        """
        return self._app_registration

    @app_registration.setter
    def app_registration(self, app_registration):
        """
        Sets the app_registration of this IamOAuthToken.
        A collection of references to the [iam.AppRegistration](mo://iam.AppRegistration) Managed Object. When this managed object is deleted, the referenced [iam.AppRegistration](mo://iam.AppRegistration) MO unsets its reference to this deleted MO.

        :param app_registration: The app_registration of this IamOAuthToken.
        :type: IamAppRegistrationRef
        """

        self._app_registration = app_registration

    @property
    def permission(self):
        """
        Gets the permission of this IamOAuthToken.
        Permissions associated with the OAuth session. Permissions provides a way to assign roles to a user or user group to perform operations on object hierarchy.

        :return: The permission of this IamOAuthToken.
        :rtype: IamPermissionRef
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """
        Sets the permission of this IamOAuthToken.
        Permissions associated with the OAuth session. Permissions provides a way to assign roles to a user or user group to perform operations on object hierarchy.

        :param permission: The permission of this IamOAuthToken.
        :type: IamPermissionRef
        """

        self._permission = permission

    @property
    def user(self):
        """
        Gets the user of this IamOAuthToken.
        A collection of references to the [iam.User](mo://iam.User) Managed Object. When this managed object is deleted, the referenced [iam.User](mo://iam.User) MO unsets its reference to this deleted MO.

        :return: The user of this IamOAuthToken.
        :rtype: IamUserRef
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this IamOAuthToken.
        A collection of references to the [iam.User](mo://iam.User) Managed Object. When this managed object is deleted, the referenced [iam.User](mo://iam.User) MO unsets its reference to this deleted MO.

        :param user: The user of this IamOAuthToken.
        :type: IamUserRef
        """

        self._user = user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IamOAuthToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
