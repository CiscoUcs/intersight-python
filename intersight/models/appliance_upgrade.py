# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1415
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApplianceUpgrade(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoOptionalTag]',
        'version_context': 'MoOptionalVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'active': 'bool',
        'auto_created': 'bool',
        'completed_phases': 'list[OnpremOptionalUpgradePhase]',
        'current_phase': 'OnpremOptionalUpgradePhase',
        'description': 'str',
        'elapsed_time': 'int',
        'end_time': 'datetime',
        'fingerprint': 'str',
        'messages': 'list[str]',
        'services': 'list[str]',
        'start_time': 'datetime',
        'status': 'str',
        'total_phases': 'int',
        'ui_packages': 'list[str]',
        'version': 'str',
        'account': 'IamAccountRef',
        'image_bundle': 'ApplianceImageBundleRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'active': 'Active',
        'auto_created': 'AutoCreated',
        'completed_phases': 'CompletedPhases',
        'current_phase': 'CurrentPhase',
        'description': 'Description',
        'elapsed_time': 'ElapsedTime',
        'end_time': 'EndTime',
        'fingerprint': 'Fingerprint',
        'messages': 'Messages',
        'services': 'Services',
        'start_time': 'StartTime',
        'status': 'Status',
        'total_phases': 'TotalPhases',
        'ui_packages': 'UiPackages',
        'version': 'Version',
        'account': 'Account',
        'image_bundle': 'ImageBundle'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, active=None, auto_created=None, completed_phases=None, current_phase=None, description=None, elapsed_time=None, end_time=None, fingerprint=None, messages=None, services=None, start_time=None, status=None, total_phases=None, ui_packages=None, version=None, account=None, image_bundle=None):
        """
        ApplianceUpgrade - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._active = None
        self._auto_created = None
        self._completed_phases = None
        self._current_phase = None
        self._description = None
        self._elapsed_time = None
        self._end_time = None
        self._fingerprint = None
        self._messages = None
        self._services = None
        self._start_time = None
        self._status = None
        self._total_phases = None
        self._ui_packages = None
        self._version = None
        self._account = None
        self._image_bundle = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if active is not None:
          self.active = active
        if auto_created is not None:
          self.auto_created = auto_created
        if completed_phases is not None:
          self.completed_phases = completed_phases
        if current_phase is not None:
          self.current_phase = current_phase
        if description is not None:
          self.description = description
        if elapsed_time is not None:
          self.elapsed_time = elapsed_time
        if end_time is not None:
          self.end_time = end_time
        if fingerprint is not None:
          self.fingerprint = fingerprint
        if messages is not None:
          self.messages = messages
        if services is not None:
          self.services = services
        if start_time is not None:
          self.start_time = start_time
        if status is not None:
          self.status = status
        if total_phases is not None:
          self.total_phases = total_phases
        if ui_packages is not None:
          self.ui_packages = ui_packages
        if version is not None:
          self.version = version
        if account is not None:
          self.account = account
        if image_bundle is not None:
          self.image_bundle = image_bundle

    @property
    def account_moid(self):
        """
        Gets the account_moid of this ApplianceUpgrade.
        The Account ID for this managed object.  

        :return: The account_moid of this ApplianceUpgrade.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this ApplianceUpgrade.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this ApplianceUpgrade.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this ApplianceUpgrade.
        The time when this managed object was created.  

        :return: The create_time of this ApplianceUpgrade.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this ApplianceUpgrade.
        The time when this managed object was created.  

        :param create_time: The create_time of this ApplianceUpgrade.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this ApplianceUpgrade.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this ApplianceUpgrade.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this ApplianceUpgrade.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this ApplianceUpgrade.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this ApplianceUpgrade.
        The time when this managed object was last modified.  

        :return: The mod_time of this ApplianceUpgrade.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this ApplianceUpgrade.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this ApplianceUpgrade.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this ApplianceUpgrade.
        The unique identifier of this Managed Object instance.   

        :return: The moid of this ApplianceUpgrade.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this ApplianceUpgrade.
        The unique identifier of this Managed Object instance.   

        :param moid: The moid of this ApplianceUpgrade.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this ApplianceUpgrade.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :return: The object_type of this ApplianceUpgrade.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this ApplianceUpgrade.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :param object_type: The object_type of this ApplianceUpgrade.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this ApplianceUpgrade.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this ApplianceUpgrade.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this ApplianceUpgrade.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this ApplianceUpgrade.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this ApplianceUpgrade.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this ApplianceUpgrade.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this ApplianceUpgrade.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this ApplianceUpgrade.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this ApplianceUpgrade.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this ApplianceUpgrade.
        :rtype: list[MoOptionalTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this ApplianceUpgrade.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this ApplianceUpgrade.
        :type: list[MoOptionalTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this ApplianceUpgrade.
        The versioning info for this managed object.   

        :return: The version_context of this ApplianceUpgrade.
        :rtype: MoOptionalVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this ApplianceUpgrade.
        The versioning info for this managed object.   

        :param version_context: The version_context of this ApplianceUpgrade.
        :type: MoOptionalVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this ApplianceUpgrade.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this ApplianceUpgrade.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this ApplianceUpgrade.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this ApplianceUpgrade.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this ApplianceUpgrade.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this ApplianceUpgrade.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this ApplianceUpgrade.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this ApplianceUpgrade.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this ApplianceUpgrade.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :return: The permission_resources of this ApplianceUpgrade.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this ApplianceUpgrade.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :param permission_resources: The permission_resources of this ApplianceUpgrade.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def active(self):
        """
        Gets the active of this ApplianceUpgrade.
        Indicates if the software upgrade is active or not.  

        :return: The active of this ApplianceUpgrade.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this ApplianceUpgrade.
        Indicates if the software upgrade is active or not.  

        :param active: The active of this ApplianceUpgrade.
        :type: bool
        """

        self._active = active

    @property
    def auto_created(self):
        """
        Gets the auto_created of this ApplianceUpgrade.
        Indicates that the request was automatically created by the system.  

        :return: The auto_created of this ApplianceUpgrade.
        :rtype: bool
        """
        return self._auto_created

    @auto_created.setter
    def auto_created(self, auto_created):
        """
        Sets the auto_created of this ApplianceUpgrade.
        Indicates that the request was automatically created by the system.  

        :param auto_created: The auto_created of this ApplianceUpgrade.
        :type: bool
        """

        self._auto_created = auto_created

    @property
    def completed_phases(self):
        """
        Gets the completed_phases of this ApplianceUpgrade.
        Collection of the completed software upgrade phases.  

        :return: The completed_phases of this ApplianceUpgrade.
        :rtype: list[OnpremOptionalUpgradePhase]
        """
        return self._completed_phases

    @completed_phases.setter
    def completed_phases(self, completed_phases):
        """
        Sets the completed_phases of this ApplianceUpgrade.
        Collection of the completed software upgrade phases.  

        :param completed_phases: The completed_phases of this ApplianceUpgrade.
        :type: list[OnpremOptionalUpgradePhase]
        """

        self._completed_phases = completed_phases

    @property
    def current_phase(self):
        """
        Gets the current_phase of this ApplianceUpgrade.
        Current phase of the Intersight Appliance's software upgrade.  

        :return: The current_phase of this ApplianceUpgrade.
        :rtype: OnpremOptionalUpgradePhase
        """
        return self._current_phase

    @current_phase.setter
    def current_phase(self, current_phase):
        """
        Sets the current_phase of this ApplianceUpgrade.
        Current phase of the Intersight Appliance's software upgrade.  

        :param current_phase: The current_phase of this ApplianceUpgrade.
        :type: OnpremOptionalUpgradePhase
        """

        self._current_phase = current_phase

    @property
    def description(self):
        """
        Gets the description of this ApplianceUpgrade.
        Description of the software upgrade.  

        :return: The description of this ApplianceUpgrade.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ApplianceUpgrade.
        Description of the software upgrade.  

        :param description: The description of this ApplianceUpgrade.
        :type: str
        """

        self._description = description

    @property
    def elapsed_time(self):
        """
        Gets the elapsed_time of this ApplianceUpgrade.
        Elapsed time in seconds during the software upgrade.  

        :return: The elapsed_time of this ApplianceUpgrade.
        :rtype: int
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time):
        """
        Sets the elapsed_time of this ApplianceUpgrade.
        Elapsed time in seconds during the software upgrade.  

        :param elapsed_time: The elapsed_time of this ApplianceUpgrade.
        :type: int
        """

        self._elapsed_time = elapsed_time

    @property
    def end_time(self):
        """
        Gets the end_time of this ApplianceUpgrade.
        End date of the software upgrade.  

        :return: The end_time of this ApplianceUpgrade.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this ApplianceUpgrade.
        End date of the software upgrade.  

        :param end_time: The end_time of this ApplianceUpgrade.
        :type: datetime
        """

        self._end_time = end_time

    @property
    def fingerprint(self):
        """
        Gets the fingerprint of this ApplianceUpgrade.
        Software upgrade manifest's fingerprint.  

        :return: The fingerprint of this ApplianceUpgrade.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """
        Sets the fingerprint of this ApplianceUpgrade.
        Software upgrade manifest's fingerprint.  

        :param fingerprint: The fingerprint of this ApplianceUpgrade.
        :type: str
        """

        self._fingerprint = fingerprint

    @property
    def messages(self):
        """
        Gets the messages of this ApplianceUpgrade.
        Messages generated during the software upgrade process.  

        :return: The messages of this ApplianceUpgrade.
        :rtype: list[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """
        Sets the messages of this ApplianceUpgrade.
        Messages generated during the software upgrade process.  

        :param messages: The messages of this ApplianceUpgrade.
        :type: list[str]
        """

        self._messages = messages

    @property
    def services(self):
        """
        Gets the services of this ApplianceUpgrade.
        Services that are upgraded during the software upgrade process. For example, if the software upgrade has updates for five Intersight micro-services, then this field will have the names of those five micro-services.  

        :return: The services of this ApplianceUpgrade.
        :rtype: list[str]
        """
        return self._services

    @services.setter
    def services(self, services):
        """
        Sets the services of this ApplianceUpgrade.
        Services that are upgraded during the software upgrade process. For example, if the software upgrade has updates for five Intersight micro-services, then this field will have the names of those five micro-services.  

        :param services: The services of this ApplianceUpgrade.
        :type: list[str]
        """

        self._services = services

    @property
    def start_time(self):
        """
        Gets the start_time of this ApplianceUpgrade.
        Start date of the software upgrade. UI can modify startTime to re-schedule an upgrade.  

        :return: The start_time of this ApplianceUpgrade.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this ApplianceUpgrade.
        Start date of the software upgrade. UI can modify startTime to re-schedule an upgrade.  

        :param start_time: The start_time of this ApplianceUpgrade.
        :type: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """
        Gets the status of this ApplianceUpgrade.
        Status of the Intersight Appliance's software upgrade.  

        :return: The status of this ApplianceUpgrade.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ApplianceUpgrade.
        Status of the Intersight Appliance's software upgrade.  

        :param status: The status of this ApplianceUpgrade.
        :type: str
        """

        self._status = status

    @property
    def total_phases(self):
        """
        Gets the total_phases of this ApplianceUpgrade.
        TotalPhase represents the total number of the upgradePhases for one upgrade.  

        :return: The total_phases of this ApplianceUpgrade.
        :rtype: int
        """
        return self._total_phases

    @total_phases.setter
    def total_phases(self, total_phases):
        """
        Sets the total_phases of this ApplianceUpgrade.
        TotalPhase represents the total number of the upgradePhases for one upgrade.  

        :param total_phases: The total_phases of this ApplianceUpgrade.
        :type: int
        """

        self._total_phases = total_phases

    @property
    def ui_packages(self):
        """
        Gets the ui_packages of this ApplianceUpgrade.
        Name of the UI packages that are upgraded. For example, if the software upgrade has updates for five Intersight micro-service UI packages, then this field will have the names of those five micro-services.  

        :return: The ui_packages of this ApplianceUpgrade.
        :rtype: list[str]
        """
        return self._ui_packages

    @ui_packages.setter
    def ui_packages(self, ui_packages):
        """
        Sets the ui_packages of this ApplianceUpgrade.
        Name of the UI packages that are upgraded. For example, if the software upgrade has updates for five Intersight micro-service UI packages, then this field will have the names of those five micro-services.  

        :param ui_packages: The ui_packages of this ApplianceUpgrade.
        :type: list[str]
        """

        self._ui_packages = ui_packages

    @property
    def version(self):
        """
        Gets the version of this ApplianceUpgrade.
        Software upgrade manifest's version.   

        :return: The version of this ApplianceUpgrade.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this ApplianceUpgrade.
        Software upgrade manifest's version.   

        :param version: The version of this ApplianceUpgrade.
        :type: str
        """

        self._version = version

    @property
    def account(self):
        """
        Gets the account of this ApplianceUpgrade.
        Upgrade managed object to Account relationship. 

        :return: The account of this ApplianceUpgrade.
        :rtype: IamAccountRef
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this ApplianceUpgrade.
        Upgrade managed object to Account relationship. 

        :param account: The account of this ApplianceUpgrade.
        :type: IamAccountRef
        """

        self._account = account

    @property
    def image_bundle(self):
        """
        Gets the image_bundle of this ApplianceUpgrade.
        Upgrade managed object to ImageBundle relationship. 

        :return: The image_bundle of this ApplianceUpgrade.
        :rtype: ApplianceImageBundleRef
        """
        return self._image_bundle

    @image_bundle.setter
    def image_bundle(self, image_bundle):
        """
        Sets the image_bundle of this ApplianceUpgrade.
        Upgrade managed object to ImageBundle relationship. 

        :param image_bundle: The image_bundle of this ApplianceUpgrade.
        :type: ApplianceImageBundleRef
        """

        self._image_bundle = image_bundle

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApplianceUpgrade):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
