# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ApplianceUpgrade(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active': 'bool',
        'auto_created': 'bool',
        'completed_phases': 'list[OnpremUpgradePhase]',
        'current_phase': 'OnpremUpgradePhase',
        'description': 'str',
        'elapsed_time': 'int',
        'end_time': 'datetime',
        'fingerprint': 'str',
        'messages': 'list[str]',
        'services': 'list[str]',
        'start_time': 'datetime',
        'status': 'str',
        'ui_packages': 'list[str]',
        'version': 'str',
        'account': 'IamAccount',
        'image_bundle': 'ApplianceImageBundle'
    }

    attribute_map = {
        'active': 'Active',
        'auto_created': 'AutoCreated',
        'completed_phases': 'CompletedPhases',
        'current_phase': 'CurrentPhase',
        'description': 'Description',
        'elapsed_time': 'ElapsedTime',
        'end_time': 'EndTime',
        'fingerprint': 'Fingerprint',
        'messages': 'Messages',
        'services': 'Services',
        'start_time': 'StartTime',
        'status': 'Status',
        'ui_packages': 'UiPackages',
        'version': 'Version',
        'account': 'Account',
        'image_bundle': 'ImageBundle'
    }

    def __init__(self,
                 active=None,
                 auto_created=None,
                 completed_phases=None,
                 current_phase=None,
                 description=None,
                 elapsed_time=None,
                 end_time=None,
                 fingerprint=None,
                 messages=None,
                 services=None,
                 start_time=None,
                 status=None,
                 ui_packages=None,
                 version=None,
                 account=None,
                 image_bundle=None,
                 local_vars_configuration=None):  # noqa: E501
        """ApplianceUpgrade - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._active = None
        self._auto_created = None
        self._completed_phases = None
        self._current_phase = None
        self._description = None
        self._elapsed_time = None
        self._end_time = None
        self._fingerprint = None
        self._messages = None
        self._services = None
        self._start_time = None
        self._status = None
        self._ui_packages = None
        self._version = None
        self._account = None
        self._image_bundle = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if auto_created is not None:
            self.auto_created = auto_created
        if completed_phases is not None:
            self.completed_phases = completed_phases
        if current_phase is not None:
            self.current_phase = current_phase
        if description is not None:
            self.description = description
        if elapsed_time is not None:
            self.elapsed_time = elapsed_time
        if end_time is not None:
            self.end_time = end_time
        if fingerprint is not None:
            self.fingerprint = fingerprint
        if messages is not None:
            self.messages = messages
        if services is not None:
            self.services = services
        if start_time is not None:
            self.start_time = start_time
        if status is not None:
            self.status = status
        if ui_packages is not None:
            self.ui_packages = ui_packages
        if version is not None:
            self.version = version
        if account is not None:
            self.account = account
        if image_bundle is not None:
            self.image_bundle = image_bundle

    @property
    def active(self):
        """Gets the active of this ApplianceUpgrade.  # noqa: E501

        Indicates if the software upgrade is active or not.    # noqa: E501

        :return: The active of this ApplianceUpgrade.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ApplianceUpgrade.

        Indicates if the software upgrade is active or not.    # noqa: E501

        :param active: The active of this ApplianceUpgrade.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def auto_created(self):
        """Gets the auto_created of this ApplianceUpgrade.  # noqa: E501

        Indicates that the request was automatically created by the system.    # noqa: E501

        :return: The auto_created of this ApplianceUpgrade.  # noqa: E501
        :rtype: bool
        """
        return self._auto_created

    @auto_created.setter
    def auto_created(self, auto_created):
        """Sets the auto_created of this ApplianceUpgrade.

        Indicates that the request was automatically created by the system.    # noqa: E501

        :param auto_created: The auto_created of this ApplianceUpgrade.  # noqa: E501
        :type: bool
        """

        self._auto_created = auto_created

    @property
    def completed_phases(self):
        """Gets the completed_phases of this ApplianceUpgrade.  # noqa: E501


        :return: The completed_phases of this ApplianceUpgrade.  # noqa: E501
        :rtype: list[OnpremUpgradePhase]
        """
        return self._completed_phases

    @completed_phases.setter
    def completed_phases(self, completed_phases):
        """Sets the completed_phases of this ApplianceUpgrade.


        :param completed_phases: The completed_phases of this ApplianceUpgrade.  # noqa: E501
        :type: list[OnpremUpgradePhase]
        """

        self._completed_phases = completed_phases

    @property
    def current_phase(self):
        """Gets the current_phase of this ApplianceUpgrade.  # noqa: E501


        :return: The current_phase of this ApplianceUpgrade.  # noqa: E501
        :rtype: OnpremUpgradePhase
        """
        return self._current_phase

    @current_phase.setter
    def current_phase(self, current_phase):
        """Sets the current_phase of this ApplianceUpgrade.


        :param current_phase: The current_phase of this ApplianceUpgrade.  # noqa: E501
        :type: OnpremUpgradePhase
        """

        self._current_phase = current_phase

    @property
    def description(self):
        """Gets the description of this ApplianceUpgrade.  # noqa: E501

        Description of the software upgrade.    # noqa: E501

        :return: The description of this ApplianceUpgrade.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplianceUpgrade.

        Description of the software upgrade.    # noqa: E501

        :param description: The description of this ApplianceUpgrade.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def elapsed_time(self):
        """Gets the elapsed_time of this ApplianceUpgrade.  # noqa: E501

        Elapsed time in seconds during the software upgrade.    # noqa: E501

        :return: The elapsed_time of this ApplianceUpgrade.  # noqa: E501
        :rtype: int
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time):
        """Sets the elapsed_time of this ApplianceUpgrade.

        Elapsed time in seconds during the software upgrade.    # noqa: E501

        :param elapsed_time: The elapsed_time of this ApplianceUpgrade.  # noqa: E501
        :type: int
        """

        self._elapsed_time = elapsed_time

    @property
    def end_time(self):
        """Gets the end_time of this ApplianceUpgrade.  # noqa: E501

        End date of the software upgrade.    # noqa: E501

        :return: The end_time of this ApplianceUpgrade.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ApplianceUpgrade.

        End date of the software upgrade.    # noqa: E501

        :param end_time: The end_time of this ApplianceUpgrade.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def fingerprint(self):
        """Gets the fingerprint of this ApplianceUpgrade.  # noqa: E501

        Software upgrade manifest's fingerprint.    # noqa: E501

        :return: The fingerprint of this ApplianceUpgrade.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this ApplianceUpgrade.

        Software upgrade manifest's fingerprint.    # noqa: E501

        :param fingerprint: The fingerprint of this ApplianceUpgrade.  # noqa: E501
        :type: str
        """

        self._fingerprint = fingerprint

    @property
    def messages(self):
        """Gets the messages of this ApplianceUpgrade.  # noqa: E501


        :return: The messages of this ApplianceUpgrade.  # noqa: E501
        :rtype: list[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this ApplianceUpgrade.


        :param messages: The messages of this ApplianceUpgrade.  # noqa: E501
        :type: list[str]
        """

        self._messages = messages

    @property
    def services(self):
        """Gets the services of this ApplianceUpgrade.  # noqa: E501


        :return: The services of this ApplianceUpgrade.  # noqa: E501
        :rtype: list[str]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this ApplianceUpgrade.


        :param services: The services of this ApplianceUpgrade.  # noqa: E501
        :type: list[str]
        """

        self._services = services

    @property
    def start_time(self):
        """Gets the start_time of this ApplianceUpgrade.  # noqa: E501

        Start date of the software upgrade. UI can modify startTime to re-schedule an upgrade.    # noqa: E501

        :return: The start_time of this ApplianceUpgrade.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ApplianceUpgrade.

        Start date of the software upgrade. UI can modify startTime to re-schedule an upgrade.    # noqa: E501

        :param start_time: The start_time of this ApplianceUpgrade.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this ApplianceUpgrade.  # noqa: E501

        Status of the Intersight Appliance's software upgrade.    # noqa: E501

        :return: The status of this ApplianceUpgrade.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApplianceUpgrade.

        Status of the Intersight Appliance's software upgrade.    # noqa: E501

        :param status: The status of this ApplianceUpgrade.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def ui_packages(self):
        """Gets the ui_packages of this ApplianceUpgrade.  # noqa: E501


        :return: The ui_packages of this ApplianceUpgrade.  # noqa: E501
        :rtype: list[str]
        """
        return self._ui_packages

    @ui_packages.setter
    def ui_packages(self, ui_packages):
        """Sets the ui_packages of this ApplianceUpgrade.


        :param ui_packages: The ui_packages of this ApplianceUpgrade.  # noqa: E501
        :type: list[str]
        """

        self._ui_packages = ui_packages

    @property
    def version(self):
        """Gets the version of this ApplianceUpgrade.  # noqa: E501

        Software upgrade manifest's version.     # noqa: E501

        :return: The version of this ApplianceUpgrade.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ApplianceUpgrade.

        Software upgrade manifest's version.     # noqa: E501

        :param version: The version of this ApplianceUpgrade.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def account(self):
        """Gets the account of this ApplianceUpgrade.  # noqa: E501


        :return: The account of this ApplianceUpgrade.  # noqa: E501
        :rtype: IamAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ApplianceUpgrade.


        :param account: The account of this ApplianceUpgrade.  # noqa: E501
        :type: IamAccount
        """

        self._account = account

    @property
    def image_bundle(self):
        """Gets the image_bundle of this ApplianceUpgrade.  # noqa: E501


        :return: The image_bundle of this ApplianceUpgrade.  # noqa: E501
        :rtype: ApplianceImageBundle
        """
        return self._image_bundle

    @image_bundle.setter
    def image_bundle(self, image_bundle):
        """Sets the image_bundle of this ApplianceUpgrade.


        :param image_bundle: The image_bundle of this ApplianceUpgrade.  # noqa: E501
        :type: ApplianceImageBundle
        """

        self._image_bundle = image_bundle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplianceUpgrade):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplianceUpgrade):
            return True

        return self.to_dict() != other.to_dict()
