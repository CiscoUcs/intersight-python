# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class AssetContractInformationAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bill_to': 'AssetAddressInformation',
        'bill_to_global_ultimate': 'AssetGlobalUltimate',
        'contract_number': 'str',
        'line_status': 'str'
    }

    attribute_map = {
        'bill_to': 'BillTo',
        'bill_to_global_ultimate': 'BillToGlobalUltimate',
        'contract_number': 'ContractNumber',
        'line_status': 'LineStatus'
    }

    def __init__(self,
                 bill_to=None,
                 bill_to_global_ultimate=None,
                 contract_number=None,
                 line_status=None,
                 local_vars_configuration=None):  # noqa: E501
        """AssetContractInformationAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bill_to = None
        self._bill_to_global_ultimate = None
        self._contract_number = None
        self._line_status = None
        self.discriminator = None

        if bill_to is not None:
            self.bill_to = bill_to
        if bill_to_global_ultimate is not None:
            self.bill_to_global_ultimate = bill_to_global_ultimate
        if contract_number is not None:
            self.contract_number = contract_number
        if line_status is not None:
            self.line_status = line_status

    @property
    def bill_to(self):
        """Gets the bill_to of this AssetContractInformationAllOf.  # noqa: E501


        :return: The bill_to of this AssetContractInformationAllOf.  # noqa: E501
        :rtype: AssetAddressInformation
        """
        return self._bill_to

    @bill_to.setter
    def bill_to(self, bill_to):
        """Sets the bill_to of this AssetContractInformationAllOf.


        :param bill_to: The bill_to of this AssetContractInformationAllOf.  # noqa: E501
        :type: AssetAddressInformation
        """

        self._bill_to = bill_to

    @property
    def bill_to_global_ultimate(self):
        """Gets the bill_to_global_ultimate of this AssetContractInformationAllOf.  # noqa: E501


        :return: The bill_to_global_ultimate of this AssetContractInformationAllOf.  # noqa: E501
        :rtype: AssetGlobalUltimate
        """
        return self._bill_to_global_ultimate

    @bill_to_global_ultimate.setter
    def bill_to_global_ultimate(self, bill_to_global_ultimate):
        """Sets the bill_to_global_ultimate of this AssetContractInformationAllOf.


        :param bill_to_global_ultimate: The bill_to_global_ultimate of this AssetContractInformationAllOf.  # noqa: E501
        :type: AssetGlobalUltimate
        """

        self._bill_to_global_ultimate = bill_to_global_ultimate

    @property
    def contract_number(self):
        """Gets the contract_number of this AssetContractInformationAllOf.  # noqa: E501

        Contract number for the Cisco support contract purchased for the Cisco device.    # noqa: E501

        :return: The contract_number of this AssetContractInformationAllOf.  # noqa: E501
        :rtype: str
        """
        return self._contract_number

    @contract_number.setter
    def contract_number(self, contract_number):
        """Sets the contract_number of this AssetContractInformationAllOf.

        Contract number for the Cisco support contract purchased for the Cisco device.    # noqa: E501

        :param contract_number: The contract_number of this AssetContractInformationAllOf.  # noqa: E501
        :type: str
        """

        self._contract_number = contract_number

    @property
    def line_status(self):
        """Gets the line_status of this AssetContractInformationAllOf.  # noqa: E501

        Contract status as per the Cisco Contract APIx.     # noqa: E501

        :return: The line_status of this AssetContractInformationAllOf.  # noqa: E501
        :rtype: str
        """
        return self._line_status

    @line_status.setter
    def line_status(self, line_status):
        """Sets the line_status of this AssetContractInformationAllOf.

        Contract status as per the Cisco Contract APIx.     # noqa: E501

        :param line_status: The line_status of this AssetContractInformationAllOf.  # noqa: E501
        :type: str
        """

        self._line_status = line_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetContractInformationAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetContractInformationAllOf):
            return True

        return self.to_dict() != other.to_dict()
