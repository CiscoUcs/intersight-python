# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StorageEnclosureAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'chassis_id': 'int',
        'description': 'str',
        'enclosure_id': 'int',
        'num_slots': 'int',
        'presence': 'str',
        'server_id': 'int',
        'type': 'str',
        'compute_blade': 'ComputeBlade',
        'compute_rack_unit': 'ComputeRackUnit',
        'enclosure_disk_slots': 'list[StorageEnclosureDiskSlotEp]',
        'enclosure_disks': 'list[StorageEnclosureDisk]',
        'equipment_chassis': 'EquipmentChassis',
        'physical_disks': 'list[StoragePhysicalDisk]',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'chassis_id': 'ChassisId',
        'description': 'Description',
        'enclosure_id': 'EnclosureId',
        'num_slots': 'NumSlots',
        'presence': 'Presence',
        'server_id': 'ServerId',
        'type': 'Type',
        'compute_blade': 'ComputeBlade',
        'compute_rack_unit': 'ComputeRackUnit',
        'enclosure_disk_slots': 'EnclosureDiskSlots',
        'enclosure_disks': 'EnclosureDisks',
        'equipment_chassis': 'EquipmentChassis',
        'physical_disks': 'PhysicalDisks',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 chassis_id=None,
                 description=None,
                 enclosure_id=None,
                 num_slots=None,
                 presence=None,
                 server_id=None,
                 type=None,
                 compute_blade=None,
                 compute_rack_unit=None,
                 enclosure_disk_slots=None,
                 enclosure_disks=None,
                 equipment_chassis=None,
                 physical_disks=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """StorageEnclosureAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._chassis_id = None
        self._description = None
        self._enclosure_id = None
        self._num_slots = None
        self._presence = None
        self._server_id = None
        self._type = None
        self._compute_blade = None
        self._compute_rack_unit = None
        self._enclosure_disk_slots = None
        self._enclosure_disks = None
        self._equipment_chassis = None
        self._physical_disks = None
        self._registered_device = None
        self.discriminator = None

        if chassis_id is not None:
            self.chassis_id = chassis_id
        if description is not None:
            self.description = description
        if enclosure_id is not None:
            self.enclosure_id = enclosure_id
        if num_slots is not None:
            self.num_slots = num_slots
        if presence is not None:
            self.presence = presence
        if server_id is not None:
            self.server_id = server_id
        if type is not None:
            self.type = type
        if compute_blade is not None:
            self.compute_blade = compute_blade
        if compute_rack_unit is not None:
            self.compute_rack_unit = compute_rack_unit
        if enclosure_disk_slots is not None:
            self.enclosure_disk_slots = enclosure_disk_slots
        if enclosure_disks is not None:
            self.enclosure_disks = enclosure_disks
        if equipment_chassis is not None:
            self.equipment_chassis = equipment_chassis
        if physical_disks is not None:
            self.physical_disks = physical_disks
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def chassis_id(self):
        """Gets the chassis_id of this StorageEnclosureAllOf.  # noqa: E501


        :return: The chassis_id of this StorageEnclosureAllOf.  # noqa: E501
        :rtype: int
        """
        return self._chassis_id

    @chassis_id.setter
    def chassis_id(self, chassis_id):
        """Sets the chassis_id of this StorageEnclosureAllOf.


        :param chassis_id: The chassis_id of this StorageEnclosureAllOf.  # noqa: E501
        :type: int
        """

        self._chassis_id = chassis_id

    @property
    def description(self):
        """Gets the description of this StorageEnclosureAllOf.  # noqa: E501


        :return: The description of this StorageEnclosureAllOf.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StorageEnclosureAllOf.


        :param description: The description of this StorageEnclosureAllOf.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enclosure_id(self):
        """Gets the enclosure_id of this StorageEnclosureAllOf.  # noqa: E501


        :return: The enclosure_id of this StorageEnclosureAllOf.  # noqa: E501
        :rtype: int
        """
        return self._enclosure_id

    @enclosure_id.setter
    def enclosure_id(self, enclosure_id):
        """Sets the enclosure_id of this StorageEnclosureAllOf.


        :param enclosure_id: The enclosure_id of this StorageEnclosureAllOf.  # noqa: E501
        :type: int
        """

        self._enclosure_id = enclosure_id

    @property
    def num_slots(self):
        """Gets the num_slots of this StorageEnclosureAllOf.  # noqa: E501


        :return: The num_slots of this StorageEnclosureAllOf.  # noqa: E501
        :rtype: int
        """
        return self._num_slots

    @num_slots.setter
    def num_slots(self, num_slots):
        """Sets the num_slots of this StorageEnclosureAllOf.


        :param num_slots: The num_slots of this StorageEnclosureAllOf.  # noqa: E501
        :type: int
        """

        self._num_slots = num_slots

    @property
    def presence(self):
        """Gets the presence of this StorageEnclosureAllOf.  # noqa: E501


        :return: The presence of this StorageEnclosureAllOf.  # noqa: E501
        :rtype: str
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """Sets the presence of this StorageEnclosureAllOf.


        :param presence: The presence of this StorageEnclosureAllOf.  # noqa: E501
        :type: str
        """

        self._presence = presence

    @property
    def server_id(self):
        """Gets the server_id of this StorageEnclosureAllOf.  # noqa: E501


        :return: The server_id of this StorageEnclosureAllOf.  # noqa: E501
        :rtype: int
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this StorageEnclosureAllOf.


        :param server_id: The server_id of this StorageEnclosureAllOf.  # noqa: E501
        :type: int
        """

        self._server_id = server_id

    @property
    def type(self):
        """Gets the type of this StorageEnclosureAllOf.  # noqa: E501


        :return: The type of this StorageEnclosureAllOf.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StorageEnclosureAllOf.


        :param type: The type of this StorageEnclosureAllOf.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def compute_blade(self):
        """Gets the compute_blade of this StorageEnclosureAllOf.  # noqa: E501


        :return: The compute_blade of this StorageEnclosureAllOf.  # noqa: E501
        :rtype: ComputeBlade
        """
        return self._compute_blade

    @compute_blade.setter
    def compute_blade(self, compute_blade):
        """Sets the compute_blade of this StorageEnclosureAllOf.


        :param compute_blade: The compute_blade of this StorageEnclosureAllOf.  # noqa: E501
        :type: ComputeBlade
        """

        self._compute_blade = compute_blade

    @property
    def compute_rack_unit(self):
        """Gets the compute_rack_unit of this StorageEnclosureAllOf.  # noqa: E501


        :return: The compute_rack_unit of this StorageEnclosureAllOf.  # noqa: E501
        :rtype: ComputeRackUnit
        """
        return self._compute_rack_unit

    @compute_rack_unit.setter
    def compute_rack_unit(self, compute_rack_unit):
        """Sets the compute_rack_unit of this StorageEnclosureAllOf.


        :param compute_rack_unit: The compute_rack_unit of this StorageEnclosureAllOf.  # noqa: E501
        :type: ComputeRackUnit
        """

        self._compute_rack_unit = compute_rack_unit

    @property
    def enclosure_disk_slots(self):
        """Gets the enclosure_disk_slots of this StorageEnclosureAllOf.  # noqa: E501

        A reference to a storageEnclosureDiskSlotEp resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The enclosure_disk_slots of this StorageEnclosureAllOf.  # noqa: E501
        :rtype: list[StorageEnclosureDiskSlotEp]
        """
        return self._enclosure_disk_slots

    @enclosure_disk_slots.setter
    def enclosure_disk_slots(self, enclosure_disk_slots):
        """Sets the enclosure_disk_slots of this StorageEnclosureAllOf.

        A reference to a storageEnclosureDiskSlotEp resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param enclosure_disk_slots: The enclosure_disk_slots of this StorageEnclosureAllOf.  # noqa: E501
        :type: list[StorageEnclosureDiskSlotEp]
        """

        self._enclosure_disk_slots = enclosure_disk_slots

    @property
    def enclosure_disks(self):
        """Gets the enclosure_disks of this StorageEnclosureAllOf.  # noqa: E501

        A reference to a storageEnclosureDisk resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The enclosure_disks of this StorageEnclosureAllOf.  # noqa: E501
        :rtype: list[StorageEnclosureDisk]
        """
        return self._enclosure_disks

    @enclosure_disks.setter
    def enclosure_disks(self, enclosure_disks):
        """Sets the enclosure_disks of this StorageEnclosureAllOf.

        A reference to a storageEnclosureDisk resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param enclosure_disks: The enclosure_disks of this StorageEnclosureAllOf.  # noqa: E501
        :type: list[StorageEnclosureDisk]
        """

        self._enclosure_disks = enclosure_disks

    @property
    def equipment_chassis(self):
        """Gets the equipment_chassis of this StorageEnclosureAllOf.  # noqa: E501


        :return: The equipment_chassis of this StorageEnclosureAllOf.  # noqa: E501
        :rtype: EquipmentChassis
        """
        return self._equipment_chassis

    @equipment_chassis.setter
    def equipment_chassis(self, equipment_chassis):
        """Sets the equipment_chassis of this StorageEnclosureAllOf.


        :param equipment_chassis: The equipment_chassis of this StorageEnclosureAllOf.  # noqa: E501
        :type: EquipmentChassis
        """

        self._equipment_chassis = equipment_chassis

    @property
    def physical_disks(self):
        """Gets the physical_disks of this StorageEnclosureAllOf.  # noqa: E501

        A reference to a storagePhysicalDisk resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The physical_disks of this StorageEnclosureAllOf.  # noqa: E501
        :rtype: list[StoragePhysicalDisk]
        """
        return self._physical_disks

    @physical_disks.setter
    def physical_disks(self, physical_disks):
        """Sets the physical_disks of this StorageEnclosureAllOf.

        A reference to a storagePhysicalDisk resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param physical_disks: The physical_disks of this StorageEnclosureAllOf.  # noqa: E501
        :type: list[StoragePhysicalDisk]
        """

        self._physical_disks = physical_disks

    @property
    def registered_device(self):
        """Gets the registered_device of this StorageEnclosureAllOf.  # noqa: E501


        :return: The registered_device of this StorageEnclosureAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this StorageEnclosureAllOf.


        :param registered_device: The registered_device of this StorageEnclosureAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageEnclosureAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageEnclosureAllOf):
            return True

        return self.to_dict() != other.to_dict()
