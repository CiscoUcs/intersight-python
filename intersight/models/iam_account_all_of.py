# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class IamAccountAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'status': 'str',
        'app_registrations': 'list[IamAppRegistration]',
        'domain_groups': 'list[IamDomainGroup]',
        'end_point_roles': 'list[IamEndPointRole]',
        'idpreferences': 'list[IamIdpReference]',
        'idps': 'list[IamIdp]',
        'permissions': 'list[IamPermission]',
        'privilege_sets': 'list[IamPrivilegeSet]',
        'privileges': 'list[IamPrivilege]',
        'resource_limits': 'IamResourceLimits',
        'roles': 'list[IamRole]',
        'security_holder': 'IamSecurityHolder',
        'session_limits': 'IamSessionLimits'
    }

    attribute_map = {
        'name': 'Name',
        'status': 'Status',
        'app_registrations': 'AppRegistrations',
        'domain_groups': 'DomainGroups',
        'end_point_roles': 'EndPointRoles',
        'idpreferences': 'Idpreferences',
        'idps': 'Idps',
        'permissions': 'Permissions',
        'privilege_sets': 'PrivilegeSets',
        'privileges': 'Privileges',
        'resource_limits': 'ResourceLimits',
        'roles': 'Roles',
        'security_holder': 'SecurityHolder',
        'session_limits': 'SessionLimits'
    }

    def __init__(self,
                 name=None,
                 status=None,
                 app_registrations=None,
                 domain_groups=None,
                 end_point_roles=None,
                 idpreferences=None,
                 idps=None,
                 permissions=None,
                 privilege_sets=None,
                 privileges=None,
                 resource_limits=None,
                 roles=None,
                 security_holder=None,
                 session_limits=None,
                 local_vars_configuration=None):  # noqa: E501
        """IamAccountAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._status = None
        self._app_registrations = None
        self._domain_groups = None
        self._end_point_roles = None
        self._idpreferences = None
        self._idps = None
        self._permissions = None
        self._privilege_sets = None
        self._privileges = None
        self._resource_limits = None
        self._roles = None
        self._security_holder = None
        self._session_limits = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if app_registrations is not None:
            self.app_registrations = app_registrations
        if domain_groups is not None:
            self.domain_groups = domain_groups
        if end_point_roles is not None:
            self.end_point_roles = end_point_roles
        if idpreferences is not None:
            self.idpreferences = idpreferences
        if idps is not None:
            self.idps = idps
        if permissions is not None:
            self.permissions = permissions
        if privilege_sets is not None:
            self.privilege_sets = privilege_sets
        if privileges is not None:
            self.privileges = privileges
        if resource_limits is not None:
            self.resource_limits = resource_limits
        if roles is not None:
            self.roles = roles
        if security_holder is not None:
            self.security_holder = security_holder
        if session_limits is not None:
            self.session_limits = session_limits

    @property
    def name(self):
        """Gets the name of this IamAccountAllOf.  # noqa: E501

        Name of the Intersight account. By default, name is same as the MoID of the account.    # noqa: E501

        :return: The name of this IamAccountAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IamAccountAllOf.

        Name of the Intersight account. By default, name is same as the MoID of the account.    # noqa: E501

        :param name: The name of this IamAccountAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this IamAccountAllOf.  # noqa: E501

        Status of the account. To activate the Intersight account, claim a device to the account.     # noqa: E501

        :return: The status of this IamAccountAllOf.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IamAccountAllOf.

        Status of the account. To activate the Intersight account, claim a device to the account.     # noqa: E501

        :param status: The status of this IamAccountAllOf.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def app_registrations(self):
        """Gets the app_registrations of this IamAccountAllOf.  # noqa: E501

        A reference to a iamAppRegistration resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of registered OAuth2 applications created from the account.   # noqa: E501

        :return: The app_registrations of this IamAccountAllOf.  # noqa: E501
        :rtype: list[IamAppRegistration]
        """
        return self._app_registrations

    @app_registrations.setter
    def app_registrations(self, app_registrations):
        """Sets the app_registrations of this IamAccountAllOf.

        A reference to a iamAppRegistration resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of registered OAuth2 applications created from the account.   # noqa: E501

        :param app_registrations: The app_registrations of this IamAccountAllOf.  # noqa: E501
        :type: list[IamAppRegistration]
        """

        self._app_registrations = app_registrations

    @property
    def domain_groups(self):
        """Gets the domain_groups of this IamAccountAllOf.  # noqa: E501

        A reference to a iamDomainGroup resource. When the $expand query parameter is specified, the referenced resource is returned inline. The domain Groups are configured in an account for scaling purpose. Currently, only onboarding-device account has multiple domain groups and other accounts have only one domain group per account.   # noqa: E501

        :return: The domain_groups of this IamAccountAllOf.  # noqa: E501
        :rtype: list[IamDomainGroup]
        """
        return self._domain_groups

    @domain_groups.setter
    def domain_groups(self, domain_groups):
        """Sets the domain_groups of this IamAccountAllOf.

        A reference to a iamDomainGroup resource. When the $expand query parameter is specified, the referenced resource is returned inline. The domain Groups are configured in an account for scaling purpose. Currently, only onboarding-device account has multiple domain groups and other accounts have only one domain group per account.   # noqa: E501

        :param domain_groups: The domain_groups of this IamAccountAllOf.  # noqa: E501
        :type: list[IamDomainGroup]
        """

        self._domain_groups = domain_groups

    @property
    def end_point_roles(self):
        """Gets the end_point_roles of this IamAccountAllOf.  # noqa: E501

        A reference to a iamEndPointRole resource. When the $expand query parameter is specified, the referenced resource is returned inline. User defined end point roles. These roles are assigned to Intersight users to perform end point operations such as GUI/CLI cross launch.   # noqa: E501

        :return: The end_point_roles of this IamAccountAllOf.  # noqa: E501
        :rtype: list[IamEndPointRole]
        """
        return self._end_point_roles

    @end_point_roles.setter
    def end_point_roles(self, end_point_roles):
        """Sets the end_point_roles of this IamAccountAllOf.

        A reference to a iamEndPointRole resource. When the $expand query parameter is specified, the referenced resource is returned inline. User defined end point roles. These roles are assigned to Intersight users to perform end point operations such as GUI/CLI cross launch.   # noqa: E501

        :param end_point_roles: The end_point_roles of this IamAccountAllOf.  # noqa: E501
        :type: list[IamEndPointRole]
        """

        self._end_point_roles = end_point_roles

    @property
    def idpreferences(self):
        """Gets the idpreferences of this IamAccountAllOf.  # noqa: E501

        A reference to a iamIdpReference resource. When the $expand query parameter is specified, the referenced resource is returned inline. System created IdPs configured for authentication in an account. By default Cisco IdP is created upon account creation.   # noqa: E501

        :return: The idpreferences of this IamAccountAllOf.  # noqa: E501
        :rtype: list[IamIdpReference]
        """
        return self._idpreferences

    @idpreferences.setter
    def idpreferences(self, idpreferences):
        """Sets the idpreferences of this IamAccountAllOf.

        A reference to a iamIdpReference resource. When the $expand query parameter is specified, the referenced resource is returned inline. System created IdPs configured for authentication in an account. By default Cisco IdP is created upon account creation.   # noqa: E501

        :param idpreferences: The idpreferences of this IamAccountAllOf.  # noqa: E501
        :type: list[IamIdpReference]
        """

        self._idpreferences = idpreferences

    @property
    def idps(self):
        """Gets the idps of this IamAccountAllOf.  # noqa: E501

        A reference to a iamIdp resource. When the $expand query parameter is specified, the referenced resource is returned inline. IdPs configured for authentication in an account. IdP object handles the third-party IdP details.   # noqa: E501

        :return: The idps of this IamAccountAllOf.  # noqa: E501
        :rtype: list[IamIdp]
        """
        return self._idps

    @idps.setter
    def idps(self, idps):
        """Sets the idps of this IamAccountAllOf.

        A reference to a iamIdp resource. When the $expand query parameter is specified, the referenced resource is returned inline. IdPs configured for authentication in an account. IdP object handles the third-party IdP details.   # noqa: E501

        :param idps: The idps of this IamAccountAllOf.  # noqa: E501
        :type: list[IamIdp]
        """

        self._idps = idps

    @property
    def permissions(self):
        """Gets the permissions of this IamAccountAllOf.  # noqa: E501

        A reference to a iamPermission resource. When the $expand query parameter is specified, the referenced resource is returned inline. System defined permissions within an account. Permission provides a way to assign roles to a user or user group to perform operations on object hierarchy.   # noqa: E501

        :return: The permissions of this IamAccountAllOf.  # noqa: E501
        :rtype: list[IamPermission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this IamAccountAllOf.

        A reference to a iamPermission resource. When the $expand query parameter is specified, the referenced resource is returned inline. System defined permissions within an account. Permission provides a way to assign roles to a user or user group to perform operations on object hierarchy.   # noqa: E501

        :param permissions: The permissions of this IamAccountAllOf.  # noqa: E501
        :type: list[IamPermission]
        """

        self._permissions = permissions

    @property
    def privilege_sets(self):
        """Gets the privilege_sets of this IamAccountAllOf.  # noqa: E501

        A reference to a iamPrivilegeSet resource. When the $expand query parameter is specified, the referenced resource is returned inline. User defined privilege sets. Privilege set is a collection of privileges. Privilege sets are assigned to a user using roles.   # noqa: E501

        :return: The privilege_sets of this IamAccountAllOf.  # noqa: E501
        :rtype: list[IamPrivilegeSet]
        """
        return self._privilege_sets

    @privilege_sets.setter
    def privilege_sets(self, privilege_sets):
        """Sets the privilege_sets of this IamAccountAllOf.

        A reference to a iamPrivilegeSet resource. When the $expand query parameter is specified, the referenced resource is returned inline. User defined privilege sets. Privilege set is a collection of privileges. Privilege sets are assigned to a user using roles.   # noqa: E501

        :param privilege_sets: The privilege_sets of this IamAccountAllOf.  # noqa: E501
        :type: list[IamPrivilegeSet]
        """

        self._privilege_sets = privilege_sets

    @property
    def privileges(self):
        """Gets the privileges of this IamAccountAllOf.  # noqa: E501

        A reference to a iamPrivilege resource. When the $expand query parameter is specified, the referenced resource is returned inline. Privileges are assigned to a user using privilege sets and roles. Privileges define user permissions and the actions a user can perform in Intersight.   # noqa: E501

        :return: The privileges of this IamAccountAllOf.  # noqa: E501
        :rtype: list[IamPrivilege]
        """
        return self._privileges

    @privileges.setter
    def privileges(self, privileges):
        """Sets the privileges of this IamAccountAllOf.

        A reference to a iamPrivilege resource. When the $expand query parameter is specified, the referenced resource is returned inline. Privileges are assigned to a user using privilege sets and roles. Privileges define user permissions and the actions a user can perform in Intersight.   # noqa: E501

        :param privileges: The privileges of this IamAccountAllOf.  # noqa: E501
        :type: list[IamPrivilege]
        """

        self._privileges = privileges

    @property
    def resource_limits(self):
        """Gets the resource_limits of this IamAccountAllOf.  # noqa: E501


        :return: The resource_limits of this IamAccountAllOf.  # noqa: E501
        :rtype: IamResourceLimits
        """
        return self._resource_limits

    @resource_limits.setter
    def resource_limits(self, resource_limits):
        """Sets the resource_limits of this IamAccountAllOf.


        :param resource_limits: The resource_limits of this IamAccountAllOf.  # noqa: E501
        :type: IamResourceLimits
        """

        self._resource_limits = resource_limits

    @property
    def roles(self):
        """Gets the roles of this IamAccountAllOf.  # noqa: E501

        A reference to a iamRole resource. When the $expand query parameter is specified, the referenced resource is returned inline. User defined roles created within an account. Role is a collection of privilege sets. Roles are assigned to user using permission object.   # noqa: E501

        :return: The roles of this IamAccountAllOf.  # noqa: E501
        :rtype: list[IamRole]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this IamAccountAllOf.

        A reference to a iamRole resource. When the $expand query parameter is specified, the referenced resource is returned inline. User defined roles created within an account. Role is a collection of privilege sets. Roles are assigned to user using permission object.   # noqa: E501

        :param roles: The roles of this IamAccountAllOf.  # noqa: E501
        :type: list[IamRole]
        """

        self._roles = roles

    @property
    def security_holder(self):
        """Gets the security_holder of this IamAccountAllOf.  # noqa: E501


        :return: The security_holder of this IamAccountAllOf.  # noqa: E501
        :rtype: IamSecurityHolder
        """
        return self._security_holder

    @security_holder.setter
    def security_holder(self, security_holder):
        """Sets the security_holder of this IamAccountAllOf.


        :param security_holder: The security_holder of this IamAccountAllOf.  # noqa: E501
        :type: IamSecurityHolder
        """

        self._security_holder = security_holder

    @property
    def session_limits(self):
        """Gets the session_limits of this IamAccountAllOf.  # noqa: E501


        :return: The session_limits of this IamAccountAllOf.  # noqa: E501
        :rtype: IamSessionLimits
        """
        return self._session_limits

    @session_limits.setter
    def session_limits(self, session_limits):
        """Sets the session_limits of this IamAccountAllOf.


        :param session_limits: The session_limits of this IamAccountAllOf.  # noqa: E501
        :type: IamSessionLimits
        """

        self._session_limits = session_limits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IamAccountAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IamAccountAllOf):
            return True

        return self.to_dict() != other.to_dict()
