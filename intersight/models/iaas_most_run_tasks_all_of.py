# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class IaasMostRunTasksAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'task_category': 'str',
        'task_execution_count': 'int',
        'task_name': 'str',
        'task_type': 'str',
        'guid': 'IaasUcsdInfo'
    }

    attribute_map = {
        'task_category': 'TaskCategory',
        'task_execution_count': 'TaskExecutionCount',
        'task_name': 'TaskName',
        'task_type': 'TaskType',
        'guid': 'Guid'
    }

    def __init__(self,
                 task_category=None,
                 task_execution_count=None,
                 task_name=None,
                 task_type=None,
                 guid=None,
                 local_vars_configuration=None):  # noqa: E501
        """IaasMostRunTasksAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._task_category = None
        self._task_execution_count = None
        self._task_name = None
        self._task_type = None
        self._guid = None
        self.discriminator = None

        if task_category is not None:
            self.task_category = task_category
        if task_execution_count is not None:
            self.task_execution_count = task_execution_count
        if task_name is not None:
            self.task_name = task_name
        if task_type is not None:
            self.task_type = task_type
        if guid is not None:
            self.guid = guid

    @property
    def task_category(self):
        """Gets the task_category of this IaasMostRunTasksAllOf.  # noqa: E501

        A functional area to which a task belongs to.    # noqa: E501

        :return: The task_category of this IaasMostRunTasksAllOf.  # noqa: E501
        :rtype: str
        """
        return self._task_category

    @task_category.setter
    def task_category(self, task_category):
        """Sets the task_category of this IaasMostRunTasksAllOf.

        A functional area to which a task belongs to.    # noqa: E501

        :param task_category: The task_category of this IaasMostRunTasksAllOf.  # noqa: E501
        :type: str
        """

        self._task_category = task_category

    @property
    def task_execution_count(self):
        """Gets the task_execution_count of this IaasMostRunTasksAllOf.  # noqa: E501

        Number of times this task has executed.    # noqa: E501

        :return: The task_execution_count of this IaasMostRunTasksAllOf.  # noqa: E501
        :rtype: int
        """
        return self._task_execution_count

    @task_execution_count.setter
    def task_execution_count(self, task_execution_count):
        """Sets the task_execution_count of this IaasMostRunTasksAllOf.

        Number of times this task has executed.    # noqa: E501

        :param task_execution_count: The task_execution_count of this IaasMostRunTasksAllOf.  # noqa: E501
        :type: int
        """

        self._task_execution_count = task_execution_count

    @property
    def task_name(self):
        """Gets the task_name of this IaasMostRunTasksAllOf.  # noqa: E501

        Name of the task executed in UCSD.    # noqa: E501

        :return: The task_name of this IaasMostRunTasksAllOf.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this IaasMostRunTasksAllOf.

        Name of the task executed in UCSD.    # noqa: E501

        :param task_name: The task_name of this IaasMostRunTasksAllOf.  # noqa: E501
        :type: str
        """

        self._task_name = task_name

    @property
    def task_type(self):
        """Gets the task_type of this IaasMostRunTasksAllOf.  # noqa: E501

        Type of the task whether it is system task or custom task.     # noqa: E501

        :return: The task_type of this IaasMostRunTasksAllOf.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this IaasMostRunTasksAllOf.

        Type of the task whether it is system task or custom task.     # noqa: E501

        :param task_type: The task_type of this IaasMostRunTasksAllOf.  # noqa: E501
        :type: str
        """

        self._task_type = task_type

    @property
    def guid(self):
        """Gets the guid of this IaasMostRunTasksAllOf.  # noqa: E501


        :return: The guid of this IaasMostRunTasksAllOf.  # noqa: E501
        :rtype: IaasUcsdInfo
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this IaasMostRunTasksAllOf.


        :param guid: The guid of this IaasMostRunTasksAllOf.  # noqa: E501
        :type: IaasUcsdInfo
        """

        self._guid = guid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IaasMostRunTasksAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IaasMostRunTasksAllOf):
            return True

        return self.to_dict() != other.to_dict()
