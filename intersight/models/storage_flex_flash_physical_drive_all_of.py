# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StorageFlexFlashPhysicalDriveAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'card_status': 'str',
        'card_type': 'str',
        'oem_id': 'str',
        'pd_status': 'str',
        'registered_device': 'AssetDeviceRegistration',
        'storage_flex_flash_controller': 'StorageFlexFlashController'
    }

    attribute_map = {
        'card_status': 'CardStatus',
        'card_type': 'CardType',
        'oem_id': 'OemId',
        'pd_status': 'PdStatus',
        'registered_device': 'RegisteredDevice',
        'storage_flex_flash_controller': 'StorageFlexFlashController'
    }

    def __init__(self,
                 card_status=None,
                 card_type=None,
                 oem_id=None,
                 pd_status=None,
                 registered_device=None,
                 storage_flex_flash_controller=None,
                 local_vars_configuration=None):  # noqa: E501
        """StorageFlexFlashPhysicalDriveAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._card_status = None
        self._card_type = None
        self._oem_id = None
        self._pd_status = None
        self._registered_device = None
        self._storage_flex_flash_controller = None
        self.discriminator = None

        if card_status is not None:
            self.card_status = card_status
        if card_type is not None:
            self.card_type = card_type
        if oem_id is not None:
            self.oem_id = oem_id
        if pd_status is not None:
            self.pd_status = pd_status
        if registered_device is not None:
            self.registered_device = registered_device
        if storage_flex_flash_controller is not None:
            self.storage_flex_flash_controller = storage_flex_flash_controller

    @property
    def card_status(self):
        """Gets the card_status of this StorageFlexFlashPhysicalDriveAllOf.  # noqa: E501


        :return: The card_status of this StorageFlexFlashPhysicalDriveAllOf.  # noqa: E501
        :rtype: str
        """
        return self._card_status

    @card_status.setter
    def card_status(self, card_status):
        """Sets the card_status of this StorageFlexFlashPhysicalDriveAllOf.


        :param card_status: The card_status of this StorageFlexFlashPhysicalDriveAllOf.  # noqa: E501
        :type: str
        """

        self._card_status = card_status

    @property
    def card_type(self):
        """Gets the card_type of this StorageFlexFlashPhysicalDriveAllOf.  # noqa: E501


        :return: The card_type of this StorageFlexFlashPhysicalDriveAllOf.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this StorageFlexFlashPhysicalDriveAllOf.


        :param card_type: The card_type of this StorageFlexFlashPhysicalDriveAllOf.  # noqa: E501
        :type: str
        """

        self._card_type = card_type

    @property
    def oem_id(self):
        """Gets the oem_id of this StorageFlexFlashPhysicalDriveAllOf.  # noqa: E501


        :return: The oem_id of this StorageFlexFlashPhysicalDriveAllOf.  # noqa: E501
        :rtype: str
        """
        return self._oem_id

    @oem_id.setter
    def oem_id(self, oem_id):
        """Sets the oem_id of this StorageFlexFlashPhysicalDriveAllOf.


        :param oem_id: The oem_id of this StorageFlexFlashPhysicalDriveAllOf.  # noqa: E501
        :type: str
        """

        self._oem_id = oem_id

    @property
    def pd_status(self):
        """Gets the pd_status of this StorageFlexFlashPhysicalDriveAllOf.  # noqa: E501


        :return: The pd_status of this StorageFlexFlashPhysicalDriveAllOf.  # noqa: E501
        :rtype: str
        """
        return self._pd_status

    @pd_status.setter
    def pd_status(self, pd_status):
        """Sets the pd_status of this StorageFlexFlashPhysicalDriveAllOf.


        :param pd_status: The pd_status of this StorageFlexFlashPhysicalDriveAllOf.  # noqa: E501
        :type: str
        """

        self._pd_status = pd_status

    @property
    def registered_device(self):
        """Gets the registered_device of this StorageFlexFlashPhysicalDriveAllOf.  # noqa: E501


        :return: The registered_device of this StorageFlexFlashPhysicalDriveAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this StorageFlexFlashPhysicalDriveAllOf.


        :param registered_device: The registered_device of this StorageFlexFlashPhysicalDriveAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    @property
    def storage_flex_flash_controller(self):
        """Gets the storage_flex_flash_controller of this StorageFlexFlashPhysicalDriveAllOf.  # noqa: E501


        :return: The storage_flex_flash_controller of this StorageFlexFlashPhysicalDriveAllOf.  # noqa: E501
        :rtype: StorageFlexFlashController
        """
        return self._storage_flex_flash_controller

    @storage_flex_flash_controller.setter
    def storage_flex_flash_controller(self, storage_flex_flash_controller):
        """Sets the storage_flex_flash_controller of this StorageFlexFlashPhysicalDriveAllOf.


        :param storage_flex_flash_controller: The storage_flex_flash_controller of this StorageFlexFlashPhysicalDriveAllOf.  # noqa: E501
        :type: StorageFlexFlashController
        """

        self._storage_flex_flash_controller = storage_flex_flash_controller

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageFlexFlashPhysicalDriveAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageFlexFlashPhysicalDriveAllOf):
            return True

        return self.to_dict() != other.to_dict()
