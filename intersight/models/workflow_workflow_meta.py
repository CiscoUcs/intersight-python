# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1461
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorkflowWorkflowMeta(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'description': 'str',
        'input_parameters': 'list[str]',
        'name': 'str',
        'output_parameters': 'object',
        'retryable': 'bool',
        'schema_version': 'int',
        'src': 'str',
        'tasks': 'object',
        'type': 'str',
        'version': 'int',
        'wait_on_duplicate': 'bool',
        'organization': 'OrganizationOrganizationRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'description': 'Description',
        'input_parameters': 'InputParameters',
        'name': 'Name',
        'output_parameters': 'OutputParameters',
        'retryable': 'Retryable',
        'schema_version': 'SchemaVersion',
        'src': 'Src',
        'tasks': 'Tasks',
        'type': 'Type',
        'version': 'Version',
        'wait_on_duplicate': 'WaitOnDuplicate',
        'organization': 'Organization'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, description=None, input_parameters=None, name=None, output_parameters=None, retryable=None, schema_version=None, src=None, tasks=None, type='SystemDefined', version=None, wait_on_duplicate=None, organization=None):
        """
        WorkflowWorkflowMeta - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._description = None
        self._input_parameters = None
        self._name = None
        self._output_parameters = None
        self._retryable = None
        self._schema_version = None
        self._src = None
        self._tasks = None
        self._type = None
        self._version = None
        self._wait_on_duplicate = None
        self._organization = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if description is not None:
          self.description = description
        if input_parameters is not None:
          self.input_parameters = input_parameters
        if name is not None:
          self.name = name
        if output_parameters is not None:
          self.output_parameters = output_parameters
        if retryable is not None:
          self.retryable = retryable
        if schema_version is not None:
          self.schema_version = schema_version
        if src is not None:
          self.src = src
        if tasks is not None:
          self.tasks = tasks
        if type is not None:
          self.type = type
        if version is not None:
          self.version = version
        if wait_on_duplicate is not None:
          self.wait_on_duplicate = wait_on_duplicate
        if organization is not None:
          self.organization = organization

    @property
    def account_moid(self):
        """
        Gets the account_moid of this WorkflowWorkflowMeta.
        The Account ID for this managed object.

        :return: The account_moid of this WorkflowWorkflowMeta.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this WorkflowWorkflowMeta.
        The Account ID for this managed object.

        :param account_moid: The account_moid of this WorkflowWorkflowMeta.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this WorkflowWorkflowMeta.
        The time when this managed object was created.

        :return: The create_time of this WorkflowWorkflowMeta.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this WorkflowWorkflowMeta.
        The time when this managed object was created.

        :param create_time: The create_time of this WorkflowWorkflowMeta.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this WorkflowWorkflowMeta.
        The DomainGroup ID for this managed object.

        :return: The domain_group_moid of this WorkflowWorkflowMeta.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this WorkflowWorkflowMeta.
        The DomainGroup ID for this managed object.

        :param domain_group_moid: The domain_group_moid of this WorkflowWorkflowMeta.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this WorkflowWorkflowMeta.
        The time when this managed object was last modified.

        :return: The mod_time of this WorkflowWorkflowMeta.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this WorkflowWorkflowMeta.
        The time when this managed object was last modified.

        :param mod_time: The mod_time of this WorkflowWorkflowMeta.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this WorkflowWorkflowMeta.
        The unique identifier of this Managed Object instance.

        :return: The moid of this WorkflowWorkflowMeta.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this WorkflowWorkflowMeta.
        The unique identifier of this Managed Object instance.

        :param moid: The moid of this WorkflowWorkflowMeta.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this WorkflowWorkflowMeta.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        :return: The object_type of this WorkflowWorkflowMeta.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this WorkflowWorkflowMeta.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        :param object_type: The object_type of this WorkflowWorkflowMeta.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this WorkflowWorkflowMeta.
        The array of owners which represent effective ownership of this object.

        :return: The owners of this WorkflowWorkflowMeta.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this WorkflowWorkflowMeta.
        The array of owners which represent effective ownership of this object.

        :param owners: The owners of this WorkflowWorkflowMeta.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this WorkflowWorkflowMeta.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.

        :return: The shared_scope of this WorkflowWorkflowMeta.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this WorkflowWorkflowMeta.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.

        :param shared_scope: The shared_scope of this WorkflowWorkflowMeta.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this WorkflowWorkflowMeta.
        The array of tags, which allow to add key, value meta-data to managed objects.

        :return: The tags of this WorkflowWorkflowMeta.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this WorkflowWorkflowMeta.
        The array of tags, which allow to add key, value meta-data to managed objects.

        :param tags: The tags of this WorkflowWorkflowMeta.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this WorkflowWorkflowMeta.
        The versioning info for this managed object.

        :return: The version_context of this WorkflowWorkflowMeta.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this WorkflowWorkflowMeta.
        The versioning info for this managed object.

        :param version_context: The version_context of this WorkflowWorkflowMeta.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this WorkflowWorkflowMeta.
        The array containing the MO references of the ancestors in the object containment hierarchy.

        :return: The ancestors of this WorkflowWorkflowMeta.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this WorkflowWorkflowMeta.
        The array containing the MO references of the ancestors in the object containment hierarchy.

        :param ancestors: The ancestors of this WorkflowWorkflowMeta.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this WorkflowWorkflowMeta.
        The direct ancestor of this managed object in the containment hierarchy.

        :return: The parent of this WorkflowWorkflowMeta.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this WorkflowWorkflowMeta.
        The direct ancestor of this managed object in the containment hierarchy.

        :param parent: The parent of this WorkflowWorkflowMeta.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this WorkflowWorkflowMeta.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.

        :return: The permission_resources of this WorkflowWorkflowMeta.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this WorkflowWorkflowMeta.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.

        :param permission_resources: The permission_resources of this WorkflowWorkflowMeta.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def description(self):
        """
        Gets the description of this WorkflowWorkflowMeta.
        The description for the workflow.

        :return: The description of this WorkflowWorkflowMeta.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this WorkflowWorkflowMeta.
        The description for the workflow.

        :param description: The description of this WorkflowWorkflowMeta.
        :type: str
        """

        self._description = description

    @property
    def input_parameters(self):
        """
        Gets the input_parameters of this WorkflowWorkflowMeta.
        The workflow input parameters.

        :return: The input_parameters of this WorkflowWorkflowMeta.
        :rtype: list[str]
        """
        return self._input_parameters

    @input_parameters.setter
    def input_parameters(self, input_parameters):
        """
        Sets the input_parameters of this WorkflowWorkflowMeta.
        The workflow input parameters.

        :param input_parameters: The input_parameters of this WorkflowWorkflowMeta.
        :type: list[str]
        """

        self._input_parameters = input_parameters

    @property
    def name(self):
        """
        Gets the name of this WorkflowWorkflowMeta.
        The name given to the workflow.

        :return: The name of this WorkflowWorkflowMeta.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WorkflowWorkflowMeta.
        The name given to the workflow.

        :param name: The name of this WorkflowWorkflowMeta.
        :type: str
        """

        self._name = name

    @property
    def output_parameters(self):
        """
        Gets the output_parameters of this WorkflowWorkflowMeta.
        The workflow output parameters.

        :return: The output_parameters of this WorkflowWorkflowMeta.
        :rtype: object
        """
        return self._output_parameters

    @output_parameters.setter
    def output_parameters(self, output_parameters):
        """
        Sets the output_parameters of this WorkflowWorkflowMeta.
        The workflow output parameters.

        :param output_parameters: The output_parameters of this WorkflowWorkflowMeta.
        :type: object
        """

        self._output_parameters = output_parameters

    @property
    def retryable(self):
        """
        Gets the retryable of this WorkflowWorkflowMeta.
        When true, this workflow can be retried for 2 weeks since the last modification of the workflow.

        :return: The retryable of this WorkflowWorkflowMeta.
        :rtype: bool
        """
        return self._retryable

    @retryable.setter
    def retryable(self, retryable):
        """
        Sets the retryable of this WorkflowWorkflowMeta.
        When true, this workflow can be retried for 2 weeks since the last modification of the workflow.

        :param retryable: The retryable of this WorkflowWorkflowMeta.
        :type: bool
        """

        self._retryable = retryable

    @property
    def schema_version(self):
        """
        Gets the schema_version of this WorkflowWorkflowMeta.
        The Conductor schema version that decides what attribute can be supported.

        :return: The schema_version of this WorkflowWorkflowMeta.
        :rtype: int
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """
        Sets the schema_version of this WorkflowWorkflowMeta.
        The Conductor schema version that decides what attribute can be supported.

        :param schema_version: The schema_version of this WorkflowWorkflowMeta.
        :type: int
        """

        self._schema_version = schema_version

    @property
    def src(self):
        """
        Gets the src of this WorkflowWorkflowMeta.
        The src is workflow owner service.

        :return: The src of this WorkflowWorkflowMeta.
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """
        Sets the src of this WorkflowWorkflowMeta.
        The src is workflow owner service.

        :param src: The src of this WorkflowWorkflowMeta.
        :type: str
        """

        self._src = src

    @property
    def tasks(self):
        """
        Gets the tasks of this WorkflowWorkflowMeta.
        The tasks contained inside of the workflow.

        :return: The tasks of this WorkflowWorkflowMeta.
        :rtype: object
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """
        Sets the tasks of this WorkflowWorkflowMeta.
        The tasks contained inside of the workflow.

        :param tasks: The tasks of this WorkflowWorkflowMeta.
        :type: object
        """

        self._tasks = tasks

    @property
    def type(self):
        """
        Gets the type of this WorkflowWorkflowMeta.
        The type of workflow definition.

        :return: The type of this WorkflowWorkflowMeta.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this WorkflowWorkflowMeta.
        The type of workflow definition.

        :param type: The type of this WorkflowWorkflowMeta.
        :type: str
        """
        allowed_values = ["SystemDefined", "UserDefined", "Dynamic"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def version(self):
        """
        Gets the version of this WorkflowWorkflowMeta.
        The version for the workflow so we can support multiple versions for the same workflow name.

        :return: The version of this WorkflowWorkflowMeta.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this WorkflowWorkflowMeta.
        The version for the workflow so we can support multiple versions for the same workflow name.

        :param version: The version of this WorkflowWorkflowMeta.
        :type: int
        """

        self._version = version

    @property
    def wait_on_duplicate(self):
        """
        Gets the wait_on_duplicate of this WorkflowWorkflowMeta.
        Parameter decides if workflows will wait for a duplicate to finish before starting a new one.

        :return: The wait_on_duplicate of this WorkflowWorkflowMeta.
        :rtype: bool
        """
        return self._wait_on_duplicate

    @wait_on_duplicate.setter
    def wait_on_duplicate(self, wait_on_duplicate):
        """
        Sets the wait_on_duplicate of this WorkflowWorkflowMeta.
        Parameter decides if workflows will wait for a duplicate to finish before starting a new one.

        :param wait_on_duplicate: The wait_on_duplicate of this WorkflowWorkflowMeta.
        :type: bool
        """

        self._wait_on_duplicate = wait_on_duplicate

    @property
    def organization(self):
        """
        Gets the organization of this WorkflowWorkflowMeta.
        Relationship to the Organization that owns the Managed Object.

        :return: The organization of this WorkflowWorkflowMeta.
        :rtype: OrganizationOrganizationRef
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this WorkflowWorkflowMeta.
        Relationship to the Organization that owns the Managed Object.

        :param organization: The organization of this WorkflowWorkflowMeta.
        :type: OrganizationOrganizationRef
        """

        self._organization = organization

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkflowWorkflowMeta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
