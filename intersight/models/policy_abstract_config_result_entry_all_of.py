# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class PolicyAbstractConfigResultEntryAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'completed_time': 'str',
        'context': 'PolicyConfigResultContext',
        'message': 'str',
        'owner_id': 'str',
        'state': 'str',
        'type': 'str'
    }

    attribute_map = {
        'completed_time': 'CompletedTime',
        'context': 'Context',
        'message': 'Message',
        'owner_id': 'OwnerId',
        'state': 'State',
        'type': 'Type'
    }

    def __init__(self,
                 completed_time=None,
                 context=None,
                 message=None,
                 owner_id=None,
                 state=None,
                 type=None,
                 local_vars_configuration=None):  # noqa: E501
        """PolicyAbstractConfigResultEntryAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._completed_time = None
        self._context = None
        self._message = None
        self._owner_id = None
        self._state = None
        self._type = None
        self.discriminator = None

        if completed_time is not None:
            self.completed_time = completed_time
        if context is not None:
            self.context = context
        if message is not None:
            self.message = message
        if owner_id is not None:
            self.owner_id = owner_id
        if state is not None:
            self.state = state
        if type is not None:
            self.type = type

    @property
    def completed_time(self):
        """Gets the completed_time of this PolicyAbstractConfigResultEntryAllOf.  # noqa: E501

        The completed time of the task in installer.    # noqa: E501

        :return: The completed_time of this PolicyAbstractConfigResultEntryAllOf.  # noqa: E501
        :rtype: str
        """
        return self._completed_time

    @completed_time.setter
    def completed_time(self, completed_time):
        """Sets the completed_time of this PolicyAbstractConfigResultEntryAllOf.

        The completed time of the task in installer.    # noqa: E501

        :param completed_time: The completed_time of this PolicyAbstractConfigResultEntryAllOf.  # noqa: E501
        :type: str
        """

        self._completed_time = completed_time

    @property
    def context(self):
        """Gets the context of this PolicyAbstractConfigResultEntryAllOf.  # noqa: E501


        :return: The context of this PolicyAbstractConfigResultEntryAllOf.  # noqa: E501
        :rtype: PolicyConfigResultContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this PolicyAbstractConfigResultEntryAllOf.


        :param context: The context of this PolicyAbstractConfigResultEntryAllOf.  # noqa: E501
        :type: PolicyConfigResultContext
        """

        self._context = context

    @property
    def message(self):
        """Gets the message of this PolicyAbstractConfigResultEntryAllOf.  # noqa: E501

        Localized message based on the locale setting of the user's context.    # noqa: E501

        :return: The message of this PolicyAbstractConfigResultEntryAllOf.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PolicyAbstractConfigResultEntryAllOf.

        Localized message based on the locale setting of the user's context.    # noqa: E501

        :param message: The message of this PolicyAbstractConfigResultEntryAllOf.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def owner_id(self):
        """Gets the owner_id of this PolicyAbstractConfigResultEntryAllOf.  # noqa: E501


        :return: The owner_id of this PolicyAbstractConfigResultEntryAllOf.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this PolicyAbstractConfigResultEntryAllOf.


        :param owner_id: The owner_id of this PolicyAbstractConfigResultEntryAllOf.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def state(self):
        """Gets the state of this PolicyAbstractConfigResultEntryAllOf.  # noqa: E501

        Values  -- ok, ok-with-warning, errored.    # noqa: E501

        :return: The state of this PolicyAbstractConfigResultEntryAllOf.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PolicyAbstractConfigResultEntryAllOf.

        Values  -- ok, ok-with-warning, errored.    # noqa: E501

        :param state: The state of this PolicyAbstractConfigResultEntryAllOf.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def type(self):
        """Gets the type of this PolicyAbstractConfigResultEntryAllOf.  # noqa: E501

        Indicates if the result is reported during the logical model validation/resource allocation phase. or the configuration applying phase. Values -- validation, config.     # noqa: E501

        :return: The type of this PolicyAbstractConfigResultEntryAllOf.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PolicyAbstractConfigResultEntryAllOf.

        Indicates if the result is reported during the logical model validation/resource allocation phase. or the configuration applying phase. Values -- validation, config.     # noqa: E501

        :param type: The type of this PolicyAbstractConfigResultEntryAllOf.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyAbstractConfigResultEntryAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PolicyAbstractConfigResultEntryAllOf):
            return True

        return self.to_dict() != other.to_dict()
