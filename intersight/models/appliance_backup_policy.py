# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ApplianceBackupPolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'backup_time': 'datetime',
        'is_password_set': 'bool',
        'manual_backup': 'bool',
        'password': 'str',
        'schedule': 'OnpremSchedule',
        'account': 'IamAccount'
    }

    attribute_map = {
        'backup_time': 'BackupTime',
        'is_password_set': 'IsPasswordSet',
        'manual_backup': 'ManualBackup',
        'password': 'Password',
        'schedule': 'Schedule',
        'account': 'Account'
    }

    def __init__(self,
                 backup_time=None,
                 is_password_set=None,
                 manual_backup=None,
                 password=None,
                 schedule=None,
                 account=None,
                 local_vars_configuration=None):  # noqa: E501
        """ApplianceBackupPolicy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._backup_time = None
        self._is_password_set = None
        self._manual_backup = None
        self._password = None
        self._schedule = None
        self._account = None
        self.discriminator = None

        if backup_time is not None:
            self.backup_time = backup_time
        if is_password_set is not None:
            self.is_password_set = is_password_set
        if manual_backup is not None:
            self.manual_backup = manual_backup
        if password is not None:
            self.password = password
        if schedule is not None:
            self.schedule = schedule
        if account is not None:
            self.account = account

    @property
    def backup_time(self):
        """Gets the backup_time of this ApplianceBackupPolicy.  # noqa: E501

        The next backup time set by the backup scheduler. Backup scheduler calculates the next backup time with the user-defined schedule set in the Schedule field.    # noqa: E501

        :return: The backup_time of this ApplianceBackupPolicy.  # noqa: E501
        :rtype: datetime
        """
        return self._backup_time

    @backup_time.setter
    def backup_time(self, backup_time):
        """Sets the backup_time of this ApplianceBackupPolicy.

        The next backup time set by the backup scheduler. Backup scheduler calculates the next backup time with the user-defined schedule set in the Schedule field.    # noqa: E501

        :param backup_time: The backup_time of this ApplianceBackupPolicy.  # noqa: E501
        :type: datetime
        """

        self._backup_time = backup_time

    @property
    def is_password_set(self):
        """Gets the is_password_set of this ApplianceBackupPolicy.  # noqa: E501


        :return: The is_password_set of this ApplianceBackupPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._is_password_set

    @is_password_set.setter
    def is_password_set(self, is_password_set):
        """Sets the is_password_set of this ApplianceBackupPolicy.


        :param is_password_set: The is_password_set of this ApplianceBackupPolicy.  # noqa: E501
        :type: bool
        """

        self._is_password_set = is_password_set

    @property
    def manual_backup(self):
        """Gets the manual_backup of this ApplianceBackupPolicy.  # noqa: E501

        Backup mode of the appliance. Automatic backups of the appliance are not initiated if this property is set to 'true' and the backup schedule field is ignored.    # noqa: E501

        :return: The manual_backup of this ApplianceBackupPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._manual_backup

    @manual_backup.setter
    def manual_backup(self, manual_backup):
        """Sets the manual_backup of this ApplianceBackupPolicy.

        Backup mode of the appliance. Automatic backups of the appliance are not initiated if this property is set to 'true' and the backup schedule field is ignored.    # noqa: E501

        :param manual_backup: The manual_backup of this ApplianceBackupPolicy.  # noqa: E501
        :type: bool
        """

        self._manual_backup = manual_backup

    @property
    def password(self):
        """Gets the password of this ApplianceBackupPolicy.  # noqa: E501

        Password to authenticate the file server.    # noqa: E501

        :return: The password of this ApplianceBackupPolicy.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ApplianceBackupPolicy.

        Password to authenticate the file server.    # noqa: E501

        :param password: The password of this ApplianceBackupPolicy.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def schedule(self):
        """Gets the schedule of this ApplianceBackupPolicy.  # noqa: E501


        :return: The schedule of this ApplianceBackupPolicy.  # noqa: E501
        :rtype: OnpremSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this ApplianceBackupPolicy.


        :param schedule: The schedule of this ApplianceBackupPolicy.  # noqa: E501
        :type: OnpremSchedule
        """

        self._schedule = schedule

    @property
    def account(self):
        """Gets the account of this ApplianceBackupPolicy.  # noqa: E501


        :return: The account of this ApplianceBackupPolicy.  # noqa: E501
        :rtype: IamAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ApplianceBackupPolicy.


        :param account: The account of this ApplianceBackupPolicy.  # noqa: E501
        :type: IamAccount
        """

        self._account = account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplianceBackupPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplianceBackupPolicy):
            return True

        return self.to_dict() != other.to_dict()
