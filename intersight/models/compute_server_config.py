# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ComputeServerConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {'asset_tag': 'str', 'user_label': 'str'}

    attribute_map = {'asset_tag': 'AssetTag', 'user_label': 'UserLabel'}

    def __init__(self,
                 asset_tag=None,
                 user_label=None,
                 local_vars_configuration=None):  # noqa: E501
        """ComputeServerConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._asset_tag = None
        self._user_label = None
        self.discriminator = None

        if asset_tag is not None:
            self.asset_tag = asset_tag
        if user_label is not None:
            self.user_label = user_label

    @property
    def asset_tag(self):
        """Gets the asset_tag of this ComputeServerConfig.  # noqa: E501

        User defined asset tag of the server.    # noqa: E501

        :return: The asset_tag of this ComputeServerConfig.  # noqa: E501
        :rtype: str
        """
        return self._asset_tag

    @asset_tag.setter
    def asset_tag(self, asset_tag):
        """Sets the asset_tag of this ComputeServerConfig.

        User defined asset tag of the server.    # noqa: E501

        :param asset_tag: The asset_tag of this ComputeServerConfig.  # noqa: E501
        :type: str
        """

        self._asset_tag = asset_tag

    @property
    def user_label(self):
        """Gets the user_label of this ComputeServerConfig.  # noqa: E501

        User defined description of the server.     # noqa: E501

        :return: The user_label of this ComputeServerConfig.  # noqa: E501
        :rtype: str
        """
        return self._user_label

    @user_label.setter
    def user_label(self, user_label):
        """Sets the user_label of this ComputeServerConfig.

        User defined description of the server.     # noqa: E501

        :param user_label: The user_label of this ComputeServerConfig.  # noqa: E501
        :type: str
        """

        self._user_label = user_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputeServerConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputeServerConfig):
            return True

        return self.to_dict() != other.to_dict()
