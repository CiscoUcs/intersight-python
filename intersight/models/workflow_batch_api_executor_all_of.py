# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class WorkflowBatchApiExecutorAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'batch': 'list[WorkflowApi]',
        'constraints': 'str',
        'description': 'str',
        'name': 'str',
        'outcomes': 'object',
        'output': 'object',
        'skip_on_condition': 'str',
        'task_definition': 'WorkflowTaskDefinition'
    }

    attribute_map = {
        'batch': 'Batch',
        'constraints': 'Constraints',
        'description': 'Description',
        'name': 'Name',
        'outcomes': 'Outcomes',
        'output': 'Output',
        'skip_on_condition': 'SkipOnCondition',
        'task_definition': 'TaskDefinition'
    }

    def __init__(self,
                 batch=None,
                 constraints=None,
                 description=None,
                 name=None,
                 outcomes=None,
                 output=None,
                 skip_on_condition=None,
                 task_definition=None,
                 local_vars_configuration=None):  # noqa: E501
        """WorkflowBatchApiExecutorAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._batch = None
        self._constraints = None
        self._description = None
        self._name = None
        self._outcomes = None
        self._output = None
        self._skip_on_condition = None
        self._task_definition = None
        self.discriminator = None

        if batch is not None:
            self.batch = batch
        if constraints is not None:
            self.constraints = constraints
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if outcomes is not None:
            self.outcomes = outcomes
        if output is not None:
            self.output = output
        if skip_on_condition is not None:
            self.skip_on_condition = skip_on_condition
        if task_definition is not None:
            self.task_definition = task_definition

    @property
    def batch(self):
        """Gets the batch of this WorkflowBatchApiExecutorAllOf.  # noqa: E501


        :return: The batch of this WorkflowBatchApiExecutorAllOf.  # noqa: E501
        :rtype: list[WorkflowApi]
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this WorkflowBatchApiExecutorAllOf.


        :param batch: The batch of this WorkflowBatchApiExecutorAllOf.  # noqa: E501
        :type: list[WorkflowApi]
        """

        self._batch = batch

    @property
    def constraints(self):
        """Gets the constraints of this WorkflowBatchApiExecutorAllOf.  # noqa: E501

        Enter the constraints on when this task should match against the task definition.     # noqa: E501

        :return: The constraints of this WorkflowBatchApiExecutorAllOf.  # noqa: E501
        :rtype: str
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this WorkflowBatchApiExecutorAllOf.

        Enter the constraints on when this task should match against the task definition.     # noqa: E501

        :param constraints: The constraints of this WorkflowBatchApiExecutorAllOf.  # noqa: E501
        :type: str
        """

        self._constraints = constraints

    @property
    def description(self):
        """Gets the description of this WorkflowBatchApiExecutorAllOf.  # noqa: E501

        A detailed description about the batch APIs.     # noqa: E501

        :return: The description of this WorkflowBatchApiExecutorAllOf.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkflowBatchApiExecutorAllOf.

        A detailed description about the batch APIs.     # noqa: E501

        :param description: The description of this WorkflowBatchApiExecutorAllOf.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this WorkflowBatchApiExecutorAllOf.  # noqa: E501

        Name for the batch API task.     # noqa: E501

        :return: The name of this WorkflowBatchApiExecutorAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowBatchApiExecutorAllOf.

        Name for the batch API task.     # noqa: E501

        :param name: The name of this WorkflowBatchApiExecutorAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def outcomes(self):
        """Gets the outcomes of this WorkflowBatchApiExecutorAllOf.  # noqa: E501

        All the possible outcomes of this task are captured here. Outcomes property is a collection property of type workflow.Outcome objects.  The outcomes can be mapped to the message to be shown. The outcomes are evaluated in the order they are given. At the end of the outcomes list, an catchall success/fail outcome can be added with condition as 'true'.  This is an optional property and if not specified the task will be marked as success.     # noqa: E501

        :return: The outcomes of this WorkflowBatchApiExecutorAllOf.  # noqa: E501
        :rtype: object
        """
        return self._outcomes

    @outcomes.setter
    def outcomes(self, outcomes):
        """Sets the outcomes of this WorkflowBatchApiExecutorAllOf.

        All the possible outcomes of this task are captured here. Outcomes property is a collection property of type workflow.Outcome objects.  The outcomes can be mapped to the message to be shown. The outcomes are evaluated in the order they are given. At the end of the outcomes list, an catchall success/fail outcome can be added with condition as 'true'.  This is an optional property and if not specified the task will be marked as success.     # noqa: E501

        :param outcomes: The outcomes of this WorkflowBatchApiExecutorAllOf.  # noqa: E501
        :type: object
        """

        self._outcomes = outcomes

    @property
    def output(self):
        """Gets the output of this WorkflowBatchApiExecutorAllOf.  # noqa: E501

        Intersight Orchestrator allows the extraction of required values from API responses using the API response grammar. These extracted values can be mapped to task output parameters defined in task definition.  The mapping of API output parameters to the task output parameters is provided as JSON in this property.     # noqa: E501

        :return: The output of this WorkflowBatchApiExecutorAllOf.  # noqa: E501
        :rtype: object
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this WorkflowBatchApiExecutorAllOf.

        Intersight Orchestrator allows the extraction of required values from API responses using the API response grammar. These extracted values can be mapped to task output parameters defined in task definition.  The mapping of API output parameters to the task output parameters is provided as JSON in this property.     # noqa: E501

        :param output: The output of this WorkflowBatchApiExecutorAllOf.  # noqa: E501
        :type: object
        """

        self._output = output

    @property
    def skip_on_condition(self):
        """Gets the skip_on_condition of this WorkflowBatchApiExecutorAllOf.  # noqa: E501

        The skip expression, if provided, allows the batch API executor to skip the task execution when the given expression evaluates to true.  The expression is given as such a golang template that has to be evaluated to a final content true/false. The expression is an optional and in case not provided, the API will always be executed.      # noqa: E501

        :return: The skip_on_condition of this WorkflowBatchApiExecutorAllOf.  # noqa: E501
        :rtype: str
        """
        return self._skip_on_condition

    @skip_on_condition.setter
    def skip_on_condition(self, skip_on_condition):
        """Sets the skip_on_condition of this WorkflowBatchApiExecutorAllOf.

        The skip expression, if provided, allows the batch API executor to skip the task execution when the given expression evaluates to true.  The expression is given as such a golang template that has to be evaluated to a final content true/false. The expression is an optional and in case not provided, the API will always be executed.      # noqa: E501

        :param skip_on_condition: The skip_on_condition of this WorkflowBatchApiExecutorAllOf.  # noqa: E501
        :type: str
        """

        self._skip_on_condition = skip_on_condition

    @property
    def task_definition(self):
        """Gets the task_definition of this WorkflowBatchApiExecutorAllOf.  # noqa: E501


        :return: The task_definition of this WorkflowBatchApiExecutorAllOf.  # noqa: E501
        :rtype: WorkflowTaskDefinition
        """
        return self._task_definition

    @task_definition.setter
    def task_definition(self, task_definition):
        """Sets the task_definition of this WorkflowBatchApiExecutorAllOf.


        :param task_definition: The task_definition of this WorkflowBatchApiExecutorAllOf.  # noqa: E501
        :type: WorkflowTaskDefinition
        """

        self._task_definition = task_definition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowBatchApiExecutorAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowBatchApiExecutorAllOf):
            return True

        return self.to_dict() != other.to_dict()
