# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class WorkflowWorkflowInfoAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action': 'str',
        'cleanup_time': 'datetime',
        'end_time': 'datetime',
        'failed_workflow_cleanup_duration': 'int',
        'input': 'object',
        'inst_id': 'str',
        'internal': 'bool',
        'message': 'list[WorkflowMessage]',
        'meta_version': 'int',
        'name': 'str',
        'output': 'object',
        'progress': 'float',
        'src': 'str',
        'start_time': 'datetime',
        'status': 'str',
        'success_workflow_cleanup_duration': 'int',
        'trace_id': 'str',
        'type': 'str',
        'user_id': 'str',
        'wait_reason': 'str',
        'workflow_ctx': 'object',
        'workflow_meta_type': 'str',
        'workflow_task_count': 'int',
        '_0_cluster_profile': 'HyperflexClusterProfile',
        '_1_profile': 'ServerProfile',
        'account': 'IamAccount',
        'organization': 'OrganizationOrganization',
        'parent_task_info': 'WorkflowTaskInfo',
        'pending_dynamic_workflow_info': 'WorkflowPendingDynamicWorkflowInfo',
        'permission': 'IamPermission',
        'task_infos': 'list[WorkflowTaskInfo]',
        'workflow_definition': 'WorkflowWorkflowDefinition'
    }

    attribute_map = {
        'action': 'Action',
        'cleanup_time': 'CleanupTime',
        'end_time': 'EndTime',
        'failed_workflow_cleanup_duration': 'FailedWorkflowCleanupDuration',
        'input': 'Input',
        'inst_id': 'InstId',
        'internal': 'Internal',
        'message': 'Message',
        'meta_version': 'MetaVersion',
        'name': 'Name',
        'output': 'Output',
        'progress': 'Progress',
        'src': 'Src',
        'start_time': 'StartTime',
        'status': 'Status',
        'success_workflow_cleanup_duration': 'SuccessWorkflowCleanupDuration',
        'trace_id': 'TraceId',
        'type': 'Type',
        'user_id': 'UserId',
        'wait_reason': 'WaitReason',
        'workflow_ctx': 'WorkflowCtx',
        'workflow_meta_type': 'WorkflowMetaType',
        'workflow_task_count': 'WorkflowTaskCount',
        '_0_cluster_profile': '_0_ClusterProfile',
        '_1_profile': '_1_Profile',
        'account': 'Account',
        'organization': 'Organization',
        'parent_task_info': 'ParentTaskInfo',
        'pending_dynamic_workflow_info': 'PendingDynamicWorkflowInfo',
        'permission': 'Permission',
        'task_infos': 'TaskInfos',
        'workflow_definition': 'WorkflowDefinition'
    }

    def __init__(self,
                 action='Start',
                 cleanup_time=None,
                 end_time=None,
                 failed_workflow_cleanup_duration=None,
                 input=None,
                 inst_id=None,
                 internal=None,
                 message=None,
                 meta_version=None,
                 name=None,
                 output=None,
                 progress=None,
                 src=None,
                 start_time=None,
                 status=None,
                 success_workflow_cleanup_duration=None,
                 trace_id=None,
                 type=None,
                 user_id=None,
                 wait_reason='None',
                 workflow_ctx=None,
                 workflow_meta_type='SystemDefined',
                 workflow_task_count=None,
                 _0_cluster_profile=None,
                 _1_profile=None,
                 account=None,
                 organization=None,
                 parent_task_info=None,
                 pending_dynamic_workflow_info=None,
                 permission=None,
                 task_infos=None,
                 workflow_definition=None,
                 local_vars_configuration=None):  # noqa: E501
        """WorkflowWorkflowInfoAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._action = None
        self._cleanup_time = None
        self._end_time = None
        self._failed_workflow_cleanup_duration = None
        self._input = None
        self._inst_id = None
        self._internal = None
        self._message = None
        self._meta_version = None
        self._name = None
        self._output = None
        self._progress = None
        self._src = None
        self._start_time = None
        self._status = None
        self._success_workflow_cleanup_duration = None
        self._trace_id = None
        self._type = None
        self._user_id = None
        self._wait_reason = None
        self._workflow_ctx = None
        self._workflow_meta_type = None
        self._workflow_task_count = None
        self.__0_cluster_profile = None
        self.__1_profile = None
        self._account = None
        self._organization = None
        self._parent_task_info = None
        self._pending_dynamic_workflow_info = None
        self._permission = None
        self._task_infos = None
        self._workflow_definition = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if cleanup_time is not None:
            self.cleanup_time = cleanup_time
        if end_time is not None:
            self.end_time = end_time
        if failed_workflow_cleanup_duration is not None:
            self.failed_workflow_cleanup_duration = failed_workflow_cleanup_duration
        if input is not None:
            self.input = input
        if inst_id is not None:
            self.inst_id = inst_id
        if internal is not None:
            self.internal = internal
        if message is not None:
            self.message = message
        if meta_version is not None:
            self.meta_version = meta_version
        if name is not None:
            self.name = name
        if output is not None:
            self.output = output
        if progress is not None:
            self.progress = progress
        if src is not None:
            self.src = src
        if start_time is not None:
            self.start_time = start_time
        if status is not None:
            self.status = status
        if success_workflow_cleanup_duration is not None:
            self.success_workflow_cleanup_duration = success_workflow_cleanup_duration
        if trace_id is not None:
            self.trace_id = trace_id
        if type is not None:
            self.type = type
        if user_id is not None:
            self.user_id = user_id
        if wait_reason is not None:
            self.wait_reason = wait_reason
        if workflow_ctx is not None:
            self.workflow_ctx = workflow_ctx
        if workflow_meta_type is not None:
            self.workflow_meta_type = workflow_meta_type
        if workflow_task_count is not None:
            self.workflow_task_count = workflow_task_count
        if _0_cluster_profile is not None:
            self._0_cluster_profile = _0_cluster_profile
        if _1_profile is not None:
            self._1_profile = _1_profile
        if account is not None:
            self.account = account
        if organization is not None:
            self.organization = organization
        if parent_task_info is not None:
            self.parent_task_info = parent_task_info
        if pending_dynamic_workflow_info is not None:
            self.pending_dynamic_workflow_info = pending_dynamic_workflow_info
        if permission is not None:
            self.permission = permission
        if task_infos is not None:
            self.task_infos = task_infos
        if workflow_definition is not None:
            self.workflow_definition = workflow_definition

    @property
    def action(self):
        """Gets the action of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        The action of the workflow such as start, cancel, retry, pause.    # noqa: E501

        :return: The action of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this WorkflowWorkflowInfoAllOf.

        The action of the workflow such as start, cancel, retry, pause.    # noqa: E501

        :param action: The action of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["Start", "Pause", "Resume", "Retry",
                          "Cancel"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and action not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values))

        self._action = action

    @property
    def cleanup_time(self):
        """Gets the cleanup_time of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        The time when the workflow info will be removed from database.    # noqa: E501

        :return: The cleanup_time of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._cleanup_time

    @cleanup_time.setter
    def cleanup_time(self, cleanup_time):
        """Sets the cleanup_time of this WorkflowWorkflowInfoAllOf.

        The time when the workflow info will be removed from database.    # noqa: E501

        :param cleanup_time: The cleanup_time of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: datetime
        """

        self._cleanup_time = cleanup_time

    @property
    def end_time(self):
        """Gets the end_time of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        The time when the workflow reached a final state.    # noqa: E501

        :return: The end_time of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this WorkflowWorkflowInfoAllOf.

        The time when the workflow reached a final state.    # noqa: E501

        :param end_time: The end_time of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def failed_workflow_cleanup_duration(self):
        """Gets the failed_workflow_cleanup_duration of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        The duration in hours after which the workflow info for failed, terminated or timed out workflow will be removed from database.    # noqa: E501

        :return: The failed_workflow_cleanup_duration of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: int
        """
        return self._failed_workflow_cleanup_duration

    @failed_workflow_cleanup_duration.setter
    def failed_workflow_cleanup_duration(self,
                                         failed_workflow_cleanup_duration):
        """Sets the failed_workflow_cleanup_duration of this WorkflowWorkflowInfoAllOf.

        The duration in hours after which the workflow info for failed, terminated or timed out workflow will be removed from database.    # noqa: E501

        :param failed_workflow_cleanup_duration: The failed_workflow_cleanup_duration of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: int
        """

        self._failed_workflow_cleanup_duration = failed_workflow_cleanup_duration

    @property
    def input(self):
        """Gets the input of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        All the given inputs for the workflow.    # noqa: E501

        :return: The input of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: object
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this WorkflowWorkflowInfoAllOf.

        All the given inputs for the workflow.    # noqa: E501

        :param input: The input of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: object
        """

        self._input = input

    @property
    def inst_id(self):
        """Gets the inst_id of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        A workflow instance Id which is the unique identified for the workflow execution.    # noqa: E501

        :return: The inst_id of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._inst_id

    @inst_id.setter
    def inst_id(self, inst_id):
        """Sets the inst_id of this WorkflowWorkflowInfoAllOf.

        A workflow instance Id which is the unique identified for the workflow execution.    # noqa: E501

        :param inst_id: The inst_id of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: str
        """

        self._inst_id = inst_id

    @property
    def internal(self):
        """Gets the internal of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        Denotes if this workflow is internal and should be hidden from user view of running workflows.    # noqa: E501

        :return: The internal of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this WorkflowWorkflowInfoAllOf.

        Denotes if this workflow is internal and should be hidden from user view of running workflows.    # noqa: E501

        :param internal: The internal of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: bool
        """

        self._internal = internal

    @property
    def message(self):
        """Gets the message of this WorkflowWorkflowInfoAllOf.  # noqa: E501


        :return: The message of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: list[WorkflowMessage]
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this WorkflowWorkflowInfoAllOf.


        :param message: The message of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: list[WorkflowMessage]
        """

        self._message = message

    @property
    def meta_version(self):
        """Gets the meta_version of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        Version of the workflow metadata for which this workflow execution was started.    # noqa: E501

        :return: The meta_version of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: int
        """
        return self._meta_version

    @meta_version.setter
    def meta_version(self, meta_version):
        """Sets the meta_version of this WorkflowWorkflowInfoAllOf.

        Version of the workflow metadata for which this workflow execution was started.    # noqa: E501

        :param meta_version: The meta_version of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: int
        """

        self._meta_version = meta_version

    @property
    def name(self):
        """Gets the name of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        A name of the workflow execution instance.    # noqa: E501

        :return: The name of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowWorkflowInfoAllOf.

        A name of the workflow execution instance.    # noqa: E501

        :param name: The name of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def output(self):
        """Gets the output of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        All the generated outputs for the workflow.    # noqa: E501

        :return: The output of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: object
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this WorkflowWorkflowInfoAllOf.

        All the generated outputs for the workflow.    # noqa: E501

        :param output: The output of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: object
        """

        self._output = output

    @property
    def progress(self):
        """Gets the progress of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        This field indicates percentage of workflow task execution.     # noqa: E501

        :return: The progress of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this WorkflowWorkflowInfoAllOf.

        This field indicates percentage of workflow task execution.     # noqa: E501

        :param progress: The progress of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: float
        """

        self._progress = progress

    @property
    def src(self):
        """Gets the src of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        The source microservice name which is the owner for this workflow.    # noqa: E501

        :return: The src of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this WorkflowWorkflowInfoAllOf.

        The source microservice name which is the owner for this workflow.    # noqa: E501

        :param src: The src of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: str
        """

        self._src = src

    @property
    def start_time(self):
        """Gets the start_time of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        The time when the workflow was started for execution.    # noqa: E501

        :return: The start_time of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this WorkflowWorkflowInfoAllOf.

        The time when the workflow was started for execution.    # noqa: E501

        :param start_time: The start_time of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        A status of the workflow (RUNNING, WAITING, COMPLETED, TIME_OUT, FAILED).    # noqa: E501

        :return: The status of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkflowWorkflowInfoAllOf.

        A status of the workflow (RUNNING, WAITING, COMPLETED, TIME_OUT, FAILED).    # noqa: E501

        :param status: The status of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def success_workflow_cleanup_duration(self):
        """Gets the success_workflow_cleanup_duration of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        The duration in hours after which the workflow info for successful workflow will be removed from database.    # noqa: E501

        :return: The success_workflow_cleanup_duration of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: int
        """
        return self._success_workflow_cleanup_duration

    @success_workflow_cleanup_duration.setter
    def success_workflow_cleanup_duration(self,
                                          success_workflow_cleanup_duration):
        """Sets the success_workflow_cleanup_duration of this WorkflowWorkflowInfoAllOf.

        The duration in hours after which the workflow info for successful workflow will be removed from database.    # noqa: E501

        :param success_workflow_cleanup_duration: The success_workflow_cleanup_duration of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: int
        """

        self._success_workflow_cleanup_duration = success_workflow_cleanup_duration

    @property
    def trace_id(self):
        """Gets the trace_id of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        The trace id to keep track of workflow execution.    # noqa: E501

        :return: The trace_id of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._trace_id

    @trace_id.setter
    def trace_id(self, trace_id):
        """Sets the trace_id of this WorkflowWorkflowInfoAllOf.

        The trace id to keep track of workflow execution.    # noqa: E501

        :param trace_id: The trace_id of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: str
        """

        self._trace_id = trace_id

    @property
    def type(self):
        """Gets the type of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        A type of the workflow (serverconfig, ansible_monitoring).    # noqa: E501

        :return: The type of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WorkflowWorkflowInfoAllOf.

        A type of the workflow (serverconfig, ansible_monitoring).    # noqa: E501

        :param type: The type of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def user_id(self):
        """Gets the user_id of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        The user identifier which indicates the user that started this workflow.    # noqa: E501

        :return: The user_id of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this WorkflowWorkflowInfoAllOf.

        The user identifier which indicates the user that started this workflow.    # noqa: E501

        :param user_id: The user_id of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def wait_reason(self):
        """Gets the wait_reason of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        Denotes the reason workflow is in waiting status.    # noqa: E501

        :return: The wait_reason of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._wait_reason

    @wait_reason.setter
    def wait_reason(self, wait_reason):
        """Sets the wait_reason of this WorkflowWorkflowInfoAllOf.

        Denotes the reason workflow is in waiting status.    # noqa: E501

        :param wait_reason: The wait_reason of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "None", "GatherTasks", "Duplicate", "RateLimit", "WaitTask"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and wait_reason not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `wait_reason` ({0}), must be one of {1}"  # noqa: E501
                .format(wait_reason, allowed_values))

        self._wait_reason = wait_reason

    @property
    def workflow_ctx(self):
        """Gets the workflow_ctx of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        The workflow context which contains initiator and target information.     # noqa: E501

        :return: The workflow_ctx of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: object
        """
        return self._workflow_ctx

    @workflow_ctx.setter
    def workflow_ctx(self, workflow_ctx):
        """Sets the workflow_ctx of this WorkflowWorkflowInfoAllOf.

        The workflow context which contains initiator and target information.     # noqa: E501

        :param workflow_ctx: The workflow_ctx of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: object
        """

        self._workflow_ctx = workflow_ctx

    @property
    def workflow_meta_type(self):
        """Gets the workflow_meta_type of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        The type of workflow meta. Derived from the workflow meta that is used to launch this workflow instance.    # noqa: E501

        :return: The workflow_meta_type of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._workflow_meta_type

    @workflow_meta_type.setter
    def workflow_meta_type(self, workflow_meta_type):
        """Sets the workflow_meta_type of this WorkflowWorkflowInfoAllOf.

        The type of workflow meta. Derived from the workflow meta that is used to launch this workflow instance.    # noqa: E501

        :param workflow_meta_type: The workflow_meta_type of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["SystemDefined", "UserDefined",
                          "Dynamic"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and workflow_meta_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `workflow_meta_type` ({0}), must be one of {1}"  # noqa: E501
                .format(workflow_meta_type, allowed_values))

        self._workflow_meta_type = workflow_meta_type

    @property
    def workflow_task_count(self):
        """Gets the workflow_task_count of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        Total number of workflow tasks in this workflow.     # noqa: E501

        :return: The workflow_task_count of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: int
        """
        return self._workflow_task_count

    @workflow_task_count.setter
    def workflow_task_count(self, workflow_task_count):
        """Sets the workflow_task_count of this WorkflowWorkflowInfoAllOf.

        Total number of workflow tasks in this workflow.     # noqa: E501

        :param workflow_task_count: The workflow_task_count of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: int
        """

        self._workflow_task_count = workflow_task_count

    @property
    def _0_cluster_profile(self):
        """Gets the _0_cluster_profile of this WorkflowWorkflowInfoAllOf.  # noqa: E501


        :return: The _0_cluster_profile of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: HyperflexClusterProfile
        """
        return self.__0_cluster_profile

    @_0_cluster_profile.setter
    def _0_cluster_profile(self, _0_cluster_profile):
        """Sets the _0_cluster_profile of this WorkflowWorkflowInfoAllOf.


        :param _0_cluster_profile: The _0_cluster_profile of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: HyperflexClusterProfile
        """

        self.__0_cluster_profile = _0_cluster_profile

    @property
    def _1_profile(self):
        """Gets the _1_profile of this WorkflowWorkflowInfoAllOf.  # noqa: E501


        :return: The _1_profile of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: ServerProfile
        """
        return self.__1_profile

    @_1_profile.setter
    def _1_profile(self, _1_profile):
        """Sets the _1_profile of this WorkflowWorkflowInfoAllOf.


        :param _1_profile: The _1_profile of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: ServerProfile
        """

        self.__1_profile = _1_profile

    @property
    def account(self):
        """Gets the account of this WorkflowWorkflowInfoAllOf.  # noqa: E501


        :return: The account of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: IamAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this WorkflowWorkflowInfoAllOf.


        :param account: The account of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: IamAccount
        """

        self._account = account

    @property
    def organization(self):
        """Gets the organization of this WorkflowWorkflowInfoAllOf.  # noqa: E501


        :return: The organization of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: OrganizationOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this WorkflowWorkflowInfoAllOf.


        :param organization: The organization of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: OrganizationOrganization
        """

        self._organization = organization

    @property
    def parent_task_info(self):
        """Gets the parent_task_info of this WorkflowWorkflowInfoAllOf.  # noqa: E501


        :return: The parent_task_info of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: WorkflowTaskInfo
        """
        return self._parent_task_info

    @parent_task_info.setter
    def parent_task_info(self, parent_task_info):
        """Sets the parent_task_info of this WorkflowWorkflowInfoAllOf.


        :param parent_task_info: The parent_task_info of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: WorkflowTaskInfo
        """

        self._parent_task_info = parent_task_info

    @property
    def pending_dynamic_workflow_info(self):
        """Gets the pending_dynamic_workflow_info of this WorkflowWorkflowInfoAllOf.  # noqa: E501


        :return: The pending_dynamic_workflow_info of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: WorkflowPendingDynamicWorkflowInfo
        """
        return self._pending_dynamic_workflow_info

    @pending_dynamic_workflow_info.setter
    def pending_dynamic_workflow_info(self, pending_dynamic_workflow_info):
        """Sets the pending_dynamic_workflow_info of this WorkflowWorkflowInfoAllOf.


        :param pending_dynamic_workflow_info: The pending_dynamic_workflow_info of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: WorkflowPendingDynamicWorkflowInfo
        """

        self._pending_dynamic_workflow_info = pending_dynamic_workflow_info

    @property
    def permission(self):
        """Gets the permission of this WorkflowWorkflowInfoAllOf.  # noqa: E501


        :return: The permission of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: IamPermission
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this WorkflowWorkflowInfoAllOf.


        :param permission: The permission of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: IamPermission
        """

        self._permission = permission

    @property
    def task_infos(self):
        """Gets the task_infos of this WorkflowWorkflowInfoAllOf.  # noqa: E501

        A reference to a workflowTaskInfo resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of task instances that ran as part of this workflow execution.   # noqa: E501

        :return: The task_infos of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: list[WorkflowTaskInfo]
        """
        return self._task_infos

    @task_infos.setter
    def task_infos(self, task_infos):
        """Sets the task_infos of this WorkflowWorkflowInfoAllOf.

        A reference to a workflowTaskInfo resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of task instances that ran as part of this workflow execution.   # noqa: E501

        :param task_infos: The task_infos of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: list[WorkflowTaskInfo]
        """

        self._task_infos = task_infos

    @property
    def workflow_definition(self):
        """Gets the workflow_definition of this WorkflowWorkflowInfoAllOf.  # noqa: E501


        :return: The workflow_definition of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :rtype: WorkflowWorkflowDefinition
        """
        return self._workflow_definition

    @workflow_definition.setter
    def workflow_definition(self, workflow_definition):
        """Sets the workflow_definition of this WorkflowWorkflowInfoAllOf.


        :param workflow_definition: The workflow_definition of this WorkflowWorkflowInfoAllOf.  # noqa: E501
        :type: WorkflowWorkflowDefinition
        """

        self._workflow_definition = workflow_definition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowWorkflowInfoAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowWorkflowInfoAllOf):
            return True

        return self.to_dict() != other.to_dict()
