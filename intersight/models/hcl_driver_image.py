# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class HclDriverImage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'driver_iso_url': 'str',
        'management_type': 'str',
        'server_pid': 'str'
    }

    attribute_map = {
        'driver_iso_url': 'DriverIsoUrl',
        'management_type': 'ManagementType',
        'server_pid': 'ServerPid'
    }

    def __init__(self,
                 driver_iso_url=None,
                 management_type='UCSM',
                 server_pid=None,
                 local_vars_configuration=None):  # noqa: E501
        """HclDriverImage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._driver_iso_url = None
        self._management_type = None
        self._server_pid = None
        self.discriminator = None

        if driver_iso_url is not None:
            self.driver_iso_url = driver_iso_url
        if management_type is not None:
            self.management_type = management_type
        if server_pid is not None:
            self.server_pid = server_pid

    @property
    def driver_iso_url(self):
        """Gets the driver_iso_url of this HclDriverImage.  # noqa: E501

        URL of the driver ISO images.    # noqa: E501

        :return: The driver_iso_url of this HclDriverImage.  # noqa: E501
        :rtype: str
        """
        return self._driver_iso_url

    @driver_iso_url.setter
    def driver_iso_url(self, driver_iso_url):
        """Sets the driver_iso_url of this HclDriverImage.

        URL of the driver ISO images.    # noqa: E501

        :param driver_iso_url: The driver_iso_url of this HclDriverImage.  # noqa: E501
        :type: str
        """

        self._driver_iso_url = driver_iso_url

    @property
    def management_type(self):
        """Gets the management_type of this HclDriverImage.  # noqa: E501

        Type of the UCS version indicating whether it is a UCSM release vesion or a IMC release.    # noqa: E501

        :return: The management_type of this HclDriverImage.  # noqa: E501
        :rtype: str
        """
        return self._management_type

    @management_type.setter
    def management_type(self, management_type):
        """Sets the management_type of this HclDriverImage.

        Type of the UCS version indicating whether it is a UCSM release vesion or a IMC release.    # noqa: E501

        :param management_type: The management_type of this HclDriverImage.  # noqa: E501
        :type: str
        """
        allowed_values = ["UCSM", "IMC"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and management_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `management_type` ({0}), must be one of {1}"  # noqa: E501
                .format(management_type, allowed_values))

        self._management_type = management_type

    @property
    def server_pid(self):
        """Gets the server_pid of this HclDriverImage.  # noqa: E501

        Three part ID representing the server model as returned by UCSM/CIMC XML APIs.     # noqa: E501

        :return: The server_pid of this HclDriverImage.  # noqa: E501
        :rtype: str
        """
        return self._server_pid

    @server_pid.setter
    def server_pid(self, server_pid):
        """Sets the server_pid of this HclDriverImage.

        Three part ID representing the server model as returned by UCSM/CIMC XML APIs.     # noqa: E501

        :param server_pid: The server_pid of this HclDriverImage.  # noqa: E501
        :type: str
        """

        self._server_pid = server_pid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HclDriverImage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HclDriverImage):
            return True

        return self.to_dict() != other.to_dict()
