# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class IamSystemAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'end_point_privileges': 'list[IamEndPointPrivilege]',
        'end_point_roles': 'list[IamEndPointRole]',
        'idp': 'IamIdp',
        'privilege_sets': 'list[IamPrivilegeSet]',
        'privileges': 'list[IamPrivilege]',
        'roles': 'list[IamRole]',
        'service_provider': 'IamServiceProvider'
    }

    attribute_map = {
        'end_point_privileges': 'EndPointPrivileges',
        'end_point_roles': 'EndPointRoles',
        'idp': 'Idp',
        'privilege_sets': 'PrivilegeSets',
        'privileges': 'Privileges',
        'roles': 'Roles',
        'service_provider': 'ServiceProvider'
    }

    def __init__(self,
                 end_point_privileges=None,
                 end_point_roles=None,
                 idp=None,
                 privilege_sets=None,
                 privileges=None,
                 roles=None,
                 service_provider=None,
                 local_vars_configuration=None):  # noqa: E501
        """IamSystemAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._end_point_privileges = None
        self._end_point_roles = None
        self._idp = None
        self._privilege_sets = None
        self._privileges = None
        self._roles = None
        self._service_provider = None
        self.discriminator = None

        if end_point_privileges is not None:
            self.end_point_privileges = end_point_privileges
        if end_point_roles is not None:
            self.end_point_roles = end_point_roles
        if idp is not None:
            self.idp = idp
        if privilege_sets is not None:
            self.privilege_sets = privilege_sets
        if privileges is not None:
            self.privileges = privileges
        if roles is not None:
            self.roles = roles
        if service_provider is not None:
            self.service_provider = service_provider

    @property
    def end_point_privileges(self):
        """Gets the end_point_privileges of this IamSystemAllOf.  # noqa: E501

        A reference to a iamEndPointPrivilege resource. When the $expand query parameter is specified, the referenced resource is returned inline. Privileges defined in end point devices such as UCS Fabric Interconnect, IMC, and HyperFlex managed by Intersight. These privileges are assigned to Intersight users using end point roles to perform operations such as GUI/CLI cross launch.   # noqa: E501

        :return: The end_point_privileges of this IamSystemAllOf.  # noqa: E501
        :rtype: list[IamEndPointPrivilege]
        """
        return self._end_point_privileges

    @end_point_privileges.setter
    def end_point_privileges(self, end_point_privileges):
        """Sets the end_point_privileges of this IamSystemAllOf.

        A reference to a iamEndPointPrivilege resource. When the $expand query parameter is specified, the referenced resource is returned inline. Privileges defined in end point devices such as UCS Fabric Interconnect, IMC, and HyperFlex managed by Intersight. These privileges are assigned to Intersight users using end point roles to perform operations such as GUI/CLI cross launch.   # noqa: E501

        :param end_point_privileges: The end_point_privileges of this IamSystemAllOf.  # noqa: E501
        :type: list[IamEndPointPrivilege]
        """

        self._end_point_privileges = end_point_privileges

    @property
    def end_point_roles(self):
        """Gets the end_point_roles of this IamSystemAllOf.  # noqa: E501

        A reference to a iamEndPointRole resource. When the $expand query parameter is specified, the referenced resource is returned inline. Roles defined in end point devices such as UCS Fabric Interconnect, IMC, HyperFlex managed by Intersight. These roles are assigned to Intersight users to perform end point operations such as GUI/CLI cross launch.   # noqa: E501

        :return: The end_point_roles of this IamSystemAllOf.  # noqa: E501
        :rtype: list[IamEndPointRole]
        """
        return self._end_point_roles

    @end_point_roles.setter
    def end_point_roles(self, end_point_roles):
        """Sets the end_point_roles of this IamSystemAllOf.

        A reference to a iamEndPointRole resource. When the $expand query parameter is specified, the referenced resource is returned inline. Roles defined in end point devices such as UCS Fabric Interconnect, IMC, HyperFlex managed by Intersight. These roles are assigned to Intersight users to perform end point operations such as GUI/CLI cross launch.   # noqa: E501

        :param end_point_roles: The end_point_roles of this IamSystemAllOf.  # noqa: E501
        :type: list[IamEndPointRole]
        """

        self._end_point_roles = end_point_roles

    @property
    def idp(self):
        """Gets the idp of this IamSystemAllOf.  # noqa: E501


        :return: The idp of this IamSystemAllOf.  # noqa: E501
        :rtype: IamIdp
        """
        return self._idp

    @idp.setter
    def idp(self, idp):
        """Sets the idp of this IamSystemAllOf.


        :param idp: The idp of this IamSystemAllOf.  # noqa: E501
        :type: IamIdp
        """

        self._idp = idp

    @property
    def privilege_sets(self):
        """Gets the privilege_sets of this IamSystemAllOf.  # noqa: E501

        A reference to a iamPrivilegeSet resource. When the $expand query parameter is specified, the referenced resource is returned inline. Privilege set is a collection of privileges. Privilege sets are assigned to a user using roles.   # noqa: E501

        :return: The privilege_sets of this IamSystemAllOf.  # noqa: E501
        :rtype: list[IamPrivilegeSet]
        """
        return self._privilege_sets

    @privilege_sets.setter
    def privilege_sets(self, privilege_sets):
        """Sets the privilege_sets of this IamSystemAllOf.

        A reference to a iamPrivilegeSet resource. When the $expand query parameter is specified, the referenced resource is returned inline. Privilege set is a collection of privileges. Privilege sets are assigned to a user using roles.   # noqa: E501

        :param privilege_sets: The privilege_sets of this IamSystemAllOf.  # noqa: E501
        :type: list[IamPrivilegeSet]
        """

        self._privilege_sets = privilege_sets

    @property
    def privileges(self):
        """Gets the privileges of this IamSystemAllOf.  # noqa: E501

        A reference to a iamPrivilege resource. When the $expand query parameter is specified, the referenced resource is returned inline. Privileges are assigned to a user using privilege sets and roles. Privileges define user permissions and the actions a user can perform in Intersight.   # noqa: E501

        :return: The privileges of this IamSystemAllOf.  # noqa: E501
        :rtype: list[IamPrivilege]
        """
        return self._privileges

    @privileges.setter
    def privileges(self, privileges):
        """Sets the privileges of this IamSystemAllOf.

        A reference to a iamPrivilege resource. When the $expand query parameter is specified, the referenced resource is returned inline. Privileges are assigned to a user using privilege sets and roles. Privileges define user permissions and the actions a user can perform in Intersight.   # noqa: E501

        :param privileges: The privileges of this IamSystemAllOf.  # noqa: E501
        :type: list[IamPrivilege]
        """

        self._privileges = privileges

    @property
    def roles(self):
        """Gets the roles of this IamSystemAllOf.  # noqa: E501

        A reference to a iamRole resource. When the $expand query parameter is specified, the referenced resource is returned inline. A role is a collection of privilege sets that are assigned to a user using a permission object.   # noqa: E501

        :return: The roles of this IamSystemAllOf.  # noqa: E501
        :rtype: list[IamRole]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this IamSystemAllOf.

        A reference to a iamRole resource. When the $expand query parameter is specified, the referenced resource is returned inline. A role is a collection of privilege sets that are assigned to a user using a permission object.   # noqa: E501

        :param roles: The roles of this IamSystemAllOf.  # noqa: E501
        :type: list[IamRole]
        """

        self._roles = roles

    @property
    def service_provider(self):
        """Gets the service_provider of this IamSystemAllOf.  # noqa: E501


        :return: The service_provider of this IamSystemAllOf.  # noqa: E501
        :rtype: IamServiceProvider
        """
        return self._service_provider

    @service_provider.setter
    def service_provider(self, service_provider):
        """Sets the service_provider of this IamSystemAllOf.


        :param service_provider: The service_provider of this IamSystemAllOf.  # noqa: E501
        :type: IamServiceProvider
        """

        self._service_provider = service_provider

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IamSystemAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IamSystemAllOf):
            return True

        return self.to_dict() != other.to_dict()
