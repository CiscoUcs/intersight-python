# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class WorkflowPropertiesAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'input_definition': 'list[WorkflowBaseDataType]',
        'output_definition': 'list[WorkflowBaseDataType]',
        'retry_count': 'int',
        'retry_delay': 'int',
        'retry_policy': 'str',
        'timeout': 'int',
        'timeout_policy': 'str'
    }

    attribute_map = {
        'input_definition': 'InputDefinition',
        'output_definition': 'OutputDefinition',
        'retry_count': 'RetryCount',
        'retry_delay': 'RetryDelay',
        'retry_policy': 'RetryPolicy',
        'timeout': 'Timeout',
        'timeout_policy': 'TimeoutPolicy'
    }

    def __init__(self,
                 input_definition=None,
                 output_definition=None,
                 retry_count=None,
                 retry_delay=None,
                 retry_policy='Fixed',
                 timeout=None,
                 timeout_policy='Timeout',
                 local_vars_configuration=None):  # noqa: E501
        """WorkflowPropertiesAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._input_definition = None
        self._output_definition = None
        self._retry_count = None
        self._retry_delay = None
        self._retry_policy = None
        self._timeout = None
        self._timeout_policy = None
        self.discriminator = None

        if input_definition is not None:
            self.input_definition = input_definition
        if output_definition is not None:
            self.output_definition = output_definition
        if retry_count is not None:
            self.retry_count = retry_count
        if retry_delay is not None:
            self.retry_delay = retry_delay
        if retry_policy is not None:
            self.retry_policy = retry_policy
        if timeout is not None:
            self.timeout = timeout
        if timeout_policy is not None:
            self.timeout_policy = timeout_policy

    @property
    def input_definition(self):
        """Gets the input_definition of this WorkflowPropertiesAllOf.  # noqa: E501


        :return: The input_definition of this WorkflowPropertiesAllOf.  # noqa: E501
        :rtype: list[WorkflowBaseDataType]
        """
        return self._input_definition

    @input_definition.setter
    def input_definition(self, input_definition):
        """Sets the input_definition of this WorkflowPropertiesAllOf.


        :param input_definition: The input_definition of this WorkflowPropertiesAllOf.  # noqa: E501
        :type: list[WorkflowBaseDataType]
        """

        self._input_definition = input_definition

    @property
    def output_definition(self):
        """Gets the output_definition of this WorkflowPropertiesAllOf.  # noqa: E501


        :return: The output_definition of this WorkflowPropertiesAllOf.  # noqa: E501
        :rtype: list[WorkflowBaseDataType]
        """
        return self._output_definition

    @output_definition.setter
    def output_definition(self, output_definition):
        """Sets the output_definition of this WorkflowPropertiesAllOf.


        :param output_definition: The output_definition of this WorkflowPropertiesAllOf.  # noqa: E501
        :type: list[WorkflowBaseDataType]
        """

        self._output_definition = output_definition

    @property
    def retry_count(self):
        """Gets the retry_count of this WorkflowPropertiesAllOf.  # noqa: E501

        The number of times a task should be tried before marking as failed.    # noqa: E501

        :return: The retry_count of this WorkflowPropertiesAllOf.  # noqa: E501
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this WorkflowPropertiesAllOf.

        The number of times a task should be tried before marking as failed.    # noqa: E501

        :param retry_count: The retry_count of this WorkflowPropertiesAllOf.  # noqa: E501
        :type: int
        """

        self._retry_count = retry_count

    @property
    def retry_delay(self):
        """Gets the retry_delay of this WorkflowPropertiesAllOf.  # noqa: E501

        The delay in seconds after which the the task is re-tried.    # noqa: E501

        :return: The retry_delay of this WorkflowPropertiesAllOf.  # noqa: E501
        :rtype: int
        """
        return self._retry_delay

    @retry_delay.setter
    def retry_delay(self, retry_delay):
        """Sets the retry_delay of this WorkflowPropertiesAllOf.

        The delay in seconds after which the the task is re-tried.    # noqa: E501

        :param retry_delay: The retry_delay of this WorkflowPropertiesAllOf.  # noqa: E501
        :type: int
        """

        self._retry_delay = retry_delay

    @property
    def retry_policy(self):
        """Gets the retry_policy of this WorkflowPropertiesAllOf.  # noqa: E501

        The retry policy for the task.    # noqa: E501

        :return: The retry_policy of this WorkflowPropertiesAllOf.  # noqa: E501
        :rtype: str
        """
        return self._retry_policy

    @retry_policy.setter
    def retry_policy(self, retry_policy):
        """Sets the retry_policy of this WorkflowPropertiesAllOf.

        The retry policy for the task.    # noqa: E501

        :param retry_policy: The retry_policy of this WorkflowPropertiesAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["Fixed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and retry_policy not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `retry_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(retry_policy, allowed_values))

        self._retry_policy = retry_policy

    @property
    def timeout(self):
        """Gets the timeout of this WorkflowPropertiesAllOf.  # noqa: E501

        The timeout value in seconds after which task will be marked as timed out. Max allowed value is 7 days.    # noqa: E501

        :return: The timeout of this WorkflowPropertiesAllOf.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this WorkflowPropertiesAllOf.

        The timeout value in seconds after which task will be marked as timed out. Max allowed value is 7 days.    # noqa: E501

        :param timeout: The timeout of this WorkflowPropertiesAllOf.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def timeout_policy(self):
        """Gets the timeout_policy of this WorkflowPropertiesAllOf.  # noqa: E501

        The timeout policy for the task.     # noqa: E501

        :return: The timeout_policy of this WorkflowPropertiesAllOf.  # noqa: E501
        :rtype: str
        """
        return self._timeout_policy

    @timeout_policy.setter
    def timeout_policy(self, timeout_policy):
        """Sets the timeout_policy of this WorkflowPropertiesAllOf.

        The timeout policy for the task.     # noqa: E501

        :param timeout_policy: The timeout_policy of this WorkflowPropertiesAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["Timeout", "Retry"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and timeout_policy not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `timeout_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(timeout_policy, allowed_values))

        self._timeout_policy = timeout_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowPropertiesAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowPropertiesAllOf):
            return True

        return self.to_dict() != other.to_dict()
