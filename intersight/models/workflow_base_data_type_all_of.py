# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class WorkflowBaseDataTypeAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'default': 'WorkflowDefaultValue',
        'description': 'str',
        'label': 'str',
        'name': 'str',
        'required': 'bool'
    }

    attribute_map = {
        'default': 'Default',
        'description': 'Description',
        'label': 'Label',
        'name': 'Name',
        'required': 'Required'
    }

    def __init__(self,
                 default=None,
                 description=None,
                 label=None,
                 name=None,
                 required=None,
                 local_vars_configuration=None):  # noqa: E501
        """WorkflowBaseDataTypeAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._default = None
        self._description = None
        self._label = None
        self._name = None
        self._required = None
        self.discriminator = None

        if default is not None:
            self.default = default
        if description is not None:
            self.description = description
        if label is not None:
            self.label = label
        if name is not None:
            self.name = name
        if required is not None:
            self.required = required

    @property
    def default(self):
        """Gets the default of this WorkflowBaseDataTypeAllOf.  # noqa: E501


        :return: The default of this WorkflowBaseDataTypeAllOf.  # noqa: E501
        :rtype: WorkflowDefaultValue
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this WorkflowBaseDataTypeAllOf.


        :param default: The default of this WorkflowBaseDataTypeAllOf.  # noqa: E501
        :type: WorkflowDefaultValue
        """

        self._default = default

    @property
    def description(self):
        """Gets the description of this WorkflowBaseDataTypeAllOf.  # noqa: E501

        Provide a detailed description of the data type.    # noqa: E501

        :return: The description of this WorkflowBaseDataTypeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkflowBaseDataTypeAllOf.

        Provide a detailed description of the data type.    # noqa: E501

        :param description: The description of this WorkflowBaseDataTypeAllOf.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def label(self):
        """Gets the label of this WorkflowBaseDataTypeAllOf.  # noqa: E501

        Descriptive name for the data type.    # noqa: E501

        :return: The label of this WorkflowBaseDataTypeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this WorkflowBaseDataTypeAllOf.

        Descriptive name for the data type.    # noqa: E501

        :param label: The label of this WorkflowBaseDataTypeAllOf.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def name(self):
        """Gets the name of this WorkflowBaseDataTypeAllOf.  # noqa: E501

        Pick a descriptive name for the data type.    # noqa: E501

        :return: The name of this WorkflowBaseDataTypeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowBaseDataTypeAllOf.

        Pick a descriptive name for the data type.    # noqa: E501

        :param name: The name of this WorkflowBaseDataTypeAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def required(self):
        """Gets the required of this WorkflowBaseDataTypeAllOf.  # noqa: E501

        Specifies whether this parameter is required. The field is applicable for task and workflow.      # noqa: E501

        :return: The required of this WorkflowBaseDataTypeAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this WorkflowBaseDataTypeAllOf.

        Specifies whether this parameter is required. The field is applicable for task and workflow.      # noqa: E501

        :param required: The required of this WorkflowBaseDataTypeAllOf.  # noqa: E501
        :type: bool
        """

        self._required = required

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowBaseDataTypeAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowBaseDataTypeAllOf):
            return True

        return self.to_dict() != other.to_dict()
