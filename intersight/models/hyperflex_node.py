# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1295
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class HyperflexNode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'build_number': 'str',
        'display_version': 'str',
        'host_name': 'str',
        'hypervisor': 'str',
        'identity': 'HyperflexHxUuIdDt',
        'ip': 'HyperflexHxNetworkAddressDt',
        'lockdown': 'bool',
        'model_number': 'str',
        'role': 'str',
        'serial_number': 'str',
        'status': 'str',
        'version': 'str',
        'cluster': 'HyperflexClusterRef',
        'cluster_member': 'AssetClusterMemberRef',
        'physical_server': 'ComputePhysicalRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'build_number': 'BuildNumber',
        'display_version': 'DisplayVersion',
        'host_name': 'HostName',
        'hypervisor': 'Hypervisor',
        'identity': 'Identity',
        'ip': 'Ip',
        'lockdown': 'Lockdown',
        'model_number': 'ModelNumber',
        'role': 'Role',
        'serial_number': 'SerialNumber',
        'status': 'Status',
        'version': 'Version',
        'cluster': 'Cluster',
        'cluster_member': 'ClusterMember',
        'physical_server': 'PhysicalServer'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, build_number=None, display_version=None, host_name=None, hypervisor=None, identity=None, ip=None, lockdown=None, model_number=None, role='UNKNOWN', serial_number=None, status='UNKNOWN', version=None, cluster=None, cluster_member=None, physical_server=None):
        """
        HyperflexNode - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._build_number = None
        self._display_version = None
        self._host_name = None
        self._hypervisor = None
        self._identity = None
        self._ip = None
        self._lockdown = None
        self._model_number = None
        self._role = None
        self._serial_number = None
        self._status = None
        self._version = None
        self._cluster = None
        self._cluster_member = None
        self._physical_server = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if build_number is not None:
          self.build_number = build_number
        if display_version is not None:
          self.display_version = display_version
        if host_name is not None:
          self.host_name = host_name
        if hypervisor is not None:
          self.hypervisor = hypervisor
        if identity is not None:
          self.identity = identity
        if ip is not None:
          self.ip = ip
        if lockdown is not None:
          self.lockdown = lockdown
        if model_number is not None:
          self.model_number = model_number
        if role is not None:
          self.role = role
        if serial_number is not None:
          self.serial_number = serial_number
        if status is not None:
          self.status = status
        if version is not None:
          self.version = version
        if cluster is not None:
          self.cluster = cluster
        if cluster_member is not None:
          self.cluster_member = cluster_member
        if physical_server is not None:
          self.physical_server = physical_server

    @property
    def account_moid(self):
        """
        Gets the account_moid of this HyperflexNode.
        The Account ID for this managed object.  

        :return: The account_moid of this HyperflexNode.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this HyperflexNode.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this HyperflexNode.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this HyperflexNode.
        The time when this managed object was created.  

        :return: The create_time of this HyperflexNode.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this HyperflexNode.
        The time when this managed object was created.  

        :param create_time: The create_time of this HyperflexNode.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this HyperflexNode.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this HyperflexNode.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this HyperflexNode.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this HyperflexNode.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this HyperflexNode.
        The time when this managed object was last modified.  

        :return: The mod_time of this HyperflexNode.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this HyperflexNode.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this HyperflexNode.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this HyperflexNode.
        The unique identifier of this Managed Object instance.   

        :return: The moid of this HyperflexNode.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this HyperflexNode.
        The unique identifier of this Managed Object instance.   

        :param moid: The moid of this HyperflexNode.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this HyperflexNode.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :return: The object_type of this HyperflexNode.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this HyperflexNode.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :param object_type: The object_type of this HyperflexNode.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this HyperflexNode.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this HyperflexNode.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this HyperflexNode.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this HyperflexNode.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this HyperflexNode.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this HyperflexNode.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this HyperflexNode.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this HyperflexNode.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this HyperflexNode.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this HyperflexNode.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this HyperflexNode.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this HyperflexNode.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this HyperflexNode.
        The versioning info for this managed object.   

        :return: The version_context of this HyperflexNode.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this HyperflexNode.
        The versioning info for this managed object.   

        :param version_context: The version_context of this HyperflexNode.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this HyperflexNode.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this HyperflexNode.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this HyperflexNode.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this HyperflexNode.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this HyperflexNode.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this HyperflexNode.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this HyperflexNode.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this HyperflexNode.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this HyperflexNode.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :return: The permission_resources of this HyperflexNode.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this HyperflexNode.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :param permission_resources: The permission_resources of this HyperflexNode.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def build_number(self):
        """
        Gets the build_number of this HyperflexNode.

        :return: The build_number of this HyperflexNode.
        :rtype: str
        """
        return self._build_number

    @build_number.setter
    def build_number(self, build_number):
        """
        Sets the build_number of this HyperflexNode.

        :param build_number: The build_number of this HyperflexNode.
        :type: str
        """

        self._build_number = build_number

    @property
    def display_version(self):
        """
        Gets the display_version of this HyperflexNode.

        :return: The display_version of this HyperflexNode.
        :rtype: str
        """
        return self._display_version

    @display_version.setter
    def display_version(self, display_version):
        """
        Sets the display_version of this HyperflexNode.

        :param display_version: The display_version of this HyperflexNode.
        :type: str
        """

        self._display_version = display_version

    @property
    def host_name(self):
        """
        Gets the host_name of this HyperflexNode.

        :return: The host_name of this HyperflexNode.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """
        Sets the host_name of this HyperflexNode.

        :param host_name: The host_name of this HyperflexNode.
        :type: str
        """

        self._host_name = host_name

    @property
    def hypervisor(self):
        """
        Gets the hypervisor of this HyperflexNode.

        :return: The hypervisor of this HyperflexNode.
        :rtype: str
        """
        return self._hypervisor

    @hypervisor.setter
    def hypervisor(self, hypervisor):
        """
        Sets the hypervisor of this HyperflexNode.

        :param hypervisor: The hypervisor of this HyperflexNode.
        :type: str
        """

        self._hypervisor = hypervisor

    @property
    def identity(self):
        """
        Gets the identity of this HyperflexNode.

        :return: The identity of this HyperflexNode.
        :rtype: HyperflexHxUuIdDt
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """
        Sets the identity of this HyperflexNode.

        :param identity: The identity of this HyperflexNode.
        :type: HyperflexHxUuIdDt
        """

        self._identity = identity

    @property
    def ip(self):
        """
        Gets the ip of this HyperflexNode.

        :return: The ip of this HyperflexNode.
        :rtype: HyperflexHxNetworkAddressDt
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """
        Sets the ip of this HyperflexNode.

        :param ip: The ip of this HyperflexNode.
        :type: HyperflexHxNetworkAddressDt
        """

        self._ip = ip

    @property
    def lockdown(self):
        """
        Gets the lockdown of this HyperflexNode.

        :return: The lockdown of this HyperflexNode.
        :rtype: bool
        """
        return self._lockdown

    @lockdown.setter
    def lockdown(self, lockdown):
        """
        Sets the lockdown of this HyperflexNode.

        :param lockdown: The lockdown of this HyperflexNode.
        :type: bool
        """

        self._lockdown = lockdown

    @property
    def model_number(self):
        """
        Gets the model_number of this HyperflexNode.

        :return: The model_number of this HyperflexNode.
        :rtype: str
        """
        return self._model_number

    @model_number.setter
    def model_number(self, model_number):
        """
        Sets the model_number of this HyperflexNode.

        :param model_number: The model_number of this HyperflexNode.
        :type: str
        """

        self._model_number = model_number

    @property
    def role(self):
        """
        Gets the role of this HyperflexNode.

        :return: The role of this HyperflexNode.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this HyperflexNode.

        :param role: The role of this HyperflexNode.
        :type: str
        """
        allowed_values = ["UNKNOWN", "STORAGE", "COMPUTE"]
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def serial_number(self):
        """
        Gets the serial_number of this HyperflexNode.

        :return: The serial_number of this HyperflexNode.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """
        Sets the serial_number of this HyperflexNode.

        :param serial_number: The serial_number of this HyperflexNode.
        :type: str
        """

        self._serial_number = serial_number

    @property
    def status(self):
        """
        Gets the status of this HyperflexNode.

        :return: The status of this HyperflexNode.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this HyperflexNode.

        :param status: The status of this HyperflexNode.
        :type: str
        """
        allowed_values = ["UNKNOWN", "ONLINE", "OFFLINE", "INMAINTENANCE", "DEGRADED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def version(self):
        """
        Gets the version of this HyperflexNode.

        :return: The version of this HyperflexNode.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this HyperflexNode.

        :param version: The version of this HyperflexNode.
        :type: str
        """

        self._version = version

    @property
    def cluster(self):
        """
        Gets the cluster of this HyperflexNode.
        A collection of references to the [hyperflex.Cluster](mo://hyperflex.Cluster) Managed Object.  When this managed object is deleted, the referenced [hyperflex.Cluster](mo://hyperflex.Cluster) MO unsets its reference to this deleted MO. 

        :return: The cluster of this HyperflexNode.
        :rtype: HyperflexClusterRef
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """
        Sets the cluster of this HyperflexNode.
        A collection of references to the [hyperflex.Cluster](mo://hyperflex.Cluster) Managed Object.  When this managed object is deleted, the referenced [hyperflex.Cluster](mo://hyperflex.Cluster) MO unsets its reference to this deleted MO. 

        :param cluster: The cluster of this HyperflexNode.
        :type: HyperflexClusterRef
        """

        self._cluster = cluster

    @property
    def cluster_member(self):
        """
        Gets the cluster_member of this HyperflexNode.
        A relationship to the ClusterMember that represents this node's registration to Intersight. 

        :return: The cluster_member of this HyperflexNode.
        :rtype: AssetClusterMemberRef
        """
        return self._cluster_member

    @cluster_member.setter
    def cluster_member(self, cluster_member):
        """
        Sets the cluster_member of this HyperflexNode.
        A relationship to the ClusterMember that represents this node's registration to Intersight. 

        :param cluster_member: The cluster_member of this HyperflexNode.
        :type: AssetClusterMemberRef
        """

        self._cluster_member = cluster_member

    @property
    def physical_server(self):
        """
        Gets the physical_server of this HyperflexNode.
        A relationship to the UCS server associated with this node. 

        :return: The physical_server of this HyperflexNode.
        :rtype: ComputePhysicalRef
        """
        return self._physical_server

    @physical_server.setter
    def physical_server(self, physical_server):
        """
        Sets the physical_server of this HyperflexNode.
        A relationship to the UCS server associated with this node. 

        :param physical_server: The physical_server of this HyperflexNode.
        :type: ComputePhysicalRef
        """

        self._physical_server = physical_server

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HyperflexNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
