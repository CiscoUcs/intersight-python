# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class WorkflowAbstractWorkerTaskAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'input_parameters': 'object',
        'on_failure': 'str',
        'on_success': 'str'
    }

    attribute_map = {
        'input_parameters': 'InputParameters',
        'on_failure': 'OnFailure',
        'on_success': 'OnSuccess'
    }

    def __init__(self,
                 input_parameters=None,
                 on_failure=None,
                 on_success=None,
                 local_vars_configuration=None):  # noqa: E501
        """WorkflowAbstractWorkerTaskAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._input_parameters = None
        self._on_failure = None
        self._on_success = None
        self.discriminator = None

        if input_parameters is not None:
            self.input_parameters = input_parameters
        if on_failure is not None:
            self.on_failure = on_failure
        if on_success is not None:
            self.on_success = on_success

    @property
    def input_parameters(self):
        """Gets the input_parameters of this WorkflowAbstractWorkerTaskAllOf.  # noqa: E501

        JSON formatted map that defines the input given to the task. JSONPath is used for chaining output from previous tasks as inputs into the current task. The format to specify the mapping is '${Source.input/output.JsonPath}'. 'Source' can be either workflow or the name of the task within the workflow. You can map the task input to either a workflow input or a task output. Following this is JSON path expression to extract JSON fragment from source's input/output.    # noqa: E501

        :return: The input_parameters of this WorkflowAbstractWorkerTaskAllOf.  # noqa: E501
        :rtype: object
        """
        return self._input_parameters

    @input_parameters.setter
    def input_parameters(self, input_parameters):
        """Sets the input_parameters of this WorkflowAbstractWorkerTaskAllOf.

        JSON formatted map that defines the input given to the task. JSONPath is used for chaining output from previous tasks as inputs into the current task. The format to specify the mapping is '${Source.input/output.JsonPath}'. 'Source' can be either workflow or the name of the task within the workflow. You can map the task input to either a workflow input or a task output. Following this is JSON path expression to extract JSON fragment from source's input/output.    # noqa: E501

        :param input_parameters: The input_parameters of this WorkflowAbstractWorkerTaskAllOf.  # noqa: E501
        :type: object
        """

        self._input_parameters = input_parameters

    @property
    def on_failure(self):
        """Gets the on_failure of this WorkflowAbstractWorkerTaskAllOf.  # noqa: E501

        This specifies the name of the next task to run if Task fails.  This is the unique name given to the task instance within the workflow. In a graph model, denotes an edge to another Task Node.    # noqa: E501

        :return: The on_failure of this WorkflowAbstractWorkerTaskAllOf.  # noqa: E501
        :rtype: str
        """
        return self._on_failure

    @on_failure.setter
    def on_failure(self, on_failure):
        """Sets the on_failure of this WorkflowAbstractWorkerTaskAllOf.

        This specifies the name of the next task to run if Task fails.  This is the unique name given to the task instance within the workflow. In a graph model, denotes an edge to another Task Node.    # noqa: E501

        :param on_failure: The on_failure of this WorkflowAbstractWorkerTaskAllOf.  # noqa: E501
        :type: str
        """

        self._on_failure = on_failure

    @property
    def on_success(self):
        """Gets the on_success of this WorkflowAbstractWorkerTaskAllOf.  # noqa: E501

        This specifies the name of the next task to run if Task succeeds.  This is the unique name given to the task instance within the workflow. In a graph model, denotes an edge to another Task Node.     # noqa: E501

        :return: The on_success of this WorkflowAbstractWorkerTaskAllOf.  # noqa: E501
        :rtype: str
        """
        return self._on_success

    @on_success.setter
    def on_success(self, on_success):
        """Sets the on_success of this WorkflowAbstractWorkerTaskAllOf.

        This specifies the name of the next task to run if Task succeeds.  This is the unique name given to the task instance within the workflow. In a graph model, denotes an edge to another Task Node.     # noqa: E501

        :param on_success: The on_success of this WorkflowAbstractWorkerTaskAllOf.  # noqa: E501
        :type: str
        """

        self._on_success = on_success

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowAbstractWorkerTaskAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowAbstractWorkerTaskAllOf):
            return True

        return self.to_dict() != other.to_dict()
