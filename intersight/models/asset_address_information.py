# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1461
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AssetAddressInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'address1': 'str',
        'address2': 'str',
        'city': 'str',
        'country': 'str',
        'location': 'str',
        'name': 'str',
        'postal_code': 'str',
        'state': 'str'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'address1': 'Address1',
        'address2': 'Address2',
        'city': 'City',
        'country': 'Country',
        'location': 'Location',
        'name': 'Name',
        'postal_code': 'PostalCode',
        'state': 'State'
    }

    def __init__(self, object_type=None, address1=None, address2=None, city=None, country=None, location=None, name=None, postal_code=None, state=None):
        """
        AssetAddressInformation - a model defined in Swagger
        """

        self._object_type = None
        self._address1 = None
        self._address2 = None
        self._city = None
        self._country = None
        self._location = None
        self._name = None
        self._postal_code = None
        self._state = None

        if object_type is not None:
          self.object_type = object_type
        if address1 is not None:
          self.address1 = address1
        if address2 is not None:
          self.address2 = address2
        if city is not None:
          self.city = city
        if country is not None:
          self.country = country
        if location is not None:
          self.location = location
        if name is not None:
          self.name = name
        if postal_code is not None:
          self.postal_code = postal_code
        if state is not None:
          self.state = state

    @property
    def object_type(self):
        """
        Gets the object_type of this AssetAddressInformation.
        The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.

        :return: The object_type of this AssetAddressInformation.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this AssetAddressInformation.
        The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.

        :param object_type: The object_type of this AssetAddressInformation.
        :type: str
        """

        self._object_type = object_type

    @property
    def address1(self):
        """
        Gets the address1 of this AssetAddressInformation.
        Address Line one of the address information. example \"PO BOX 641570\".

        :return: The address1 of this AssetAddressInformation.
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """
        Sets the address1 of this AssetAddressInformation.
        Address Line one of the address information. example \"PO BOX 641570\".

        :param address1: The address1 of this AssetAddressInformation.
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """
        Gets the address2 of this AssetAddressInformation.
        Address Line two of the address information. example \"Cisco Systems\".

        :return: The address2 of this AssetAddressInformation.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """
        Sets the address2 of this AssetAddressInformation.
        Address Line two of the address information. example \"Cisco Systems\".

        :param address2: The address2 of this AssetAddressInformation.
        :type: str
        """

        self._address2 = address2

    @property
    def city(self):
        """
        Gets the city of this AssetAddressInformation.
        City in which the address resides. example \"San Jose\".

        :return: The city of this AssetAddressInformation.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this AssetAddressInformation.
        City in which the address resides. example \"San Jose\".

        :param city: The city of this AssetAddressInformation.
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """
        Gets the country of this AssetAddressInformation.
        Country in which the address resides. example \"US\".

        :return: The country of this AssetAddressInformation.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this AssetAddressInformation.
        Country in which the address resides. example \"US\".

        :param country: The country of this AssetAddressInformation.
        :type: str
        """

        self._country = country

    @property
    def location(self):
        """
        Gets the location of this AssetAddressInformation.
        Location in which the address resides. example \"14852\".

        :return: The location of this AssetAddressInformation.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this AssetAddressInformation.
        Location in which the address resides. example \"14852\".

        :param location: The location of this AssetAddressInformation.
        :type: str
        """

        self._location = location

    @property
    def name(self):
        """
        Gets the name of this AssetAddressInformation.
        Name of the user whose address is being populated.

        :return: The name of this AssetAddressInformation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AssetAddressInformation.
        Name of the user whose address is being populated.

        :param name: The name of this AssetAddressInformation.
        :type: str
        """

        self._name = name

    @property
    def postal_code(self):
        """
        Gets the postal_code of this AssetAddressInformation.
        Postal Code in which the address resides. example \"95164-1570\".

        :return: The postal_code of this AssetAddressInformation.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this AssetAddressInformation.
        Postal Code in which the address resides. example \"95164-1570\".

        :param postal_code: The postal_code of this AssetAddressInformation.
        :type: str
        """

        self._postal_code = postal_code

    @property
    def state(self):
        """
        Gets the state of this AssetAddressInformation.
        State in which the address resides. example \"CA\".

        :return: The state of this AssetAddressInformation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this AssetAddressInformation.
        State in which the address resides. example \"CA\".

        :param state: The state of this AssetAddressInformation.
        :type: str
        """

        self._state = state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AssetAddressInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
