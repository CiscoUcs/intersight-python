# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class SoftwarerepositoryLocalMachine(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'download_url': 'str',
        'part_size': 'int',
        'upload_id': 'str',
        'upload_url': 'str',
        'upload_urls': 'list[str]'
    }

    attribute_map = {
        'download_url': 'DownloadUrl',
        'part_size': 'PartSize',
        'upload_id': 'UploadId',
        'upload_url': 'UploadUrl',
        'upload_urls': 'UploadUrls'
    }

    def __init__(self,
                 download_url=None,
                 part_size=None,
                 upload_id=None,
                 upload_url=None,
                 upload_urls=None,
                 local_vars_configuration=None):  # noqa: E501
        """SoftwarerepositoryLocalMachine - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._download_url = None
        self._part_size = None
        self._upload_id = None
        self._upload_url = None
        self._upload_urls = None
        self.discriminator = None

        if download_url is not None:
            self.download_url = download_url
        if part_size is not None:
            self.part_size = part_size
        if upload_id is not None:
            self.upload_id = upload_id
        if upload_url is not None:
            self.upload_url = upload_url
        if upload_urls is not None:
            self.upload_urls = upload_urls

    @property
    def download_url(self):
        """Gets the download_url of this SoftwarerepositoryLocalMachine.  # noqa: E501

        When import action in file MO is updated with 'GeneratePreSignedDownloadUrl', Intersight shall return a presigned URL in this property as part of the PATCH response. The user is expected to subsequently download the file using this URL.    # noqa: E501

        :return: The download_url of this SoftwarerepositoryLocalMachine.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this SoftwarerepositoryLocalMachine.

        When import action in file MO is updated with 'GeneratePreSignedDownloadUrl', Intersight shall return a presigned URL in this property as part of the PATCH response. The user is expected to subsequently download the file using this URL.    # noqa: E501

        :param download_url: The download_url of this SoftwarerepositoryLocalMachine.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def part_size(self):
        """Gets the part_size of this SoftwarerepositoryLocalMachine.  # noqa: E501

        Chunk size (in bytes) of the each part of file to be uploaded.    # noqa: E501

        :return: The part_size of this SoftwarerepositoryLocalMachine.  # noqa: E501
        :rtype: int
        """
        return self._part_size

    @part_size.setter
    def part_size(self, part_size):
        """Sets the part_size of this SoftwarerepositoryLocalMachine.

        Chunk size (in bytes) of the each part of file to be uploaded.    # noqa: E501

        :param part_size: The part_size of this SoftwarerepositoryLocalMachine.  # noqa: E501
        :type: int
        """

        self._part_size = part_size

    @property
    def upload_id(self):
        """Gets the upload_id of this SoftwarerepositoryLocalMachine.  # noqa: E501

        When the import action in file MO is updated with 'GeneratePreSignedUploadUrl', Intersight shall return a upload Id in this property as part of the PATCH response.    # noqa: E501

        :return: The upload_id of this SoftwarerepositoryLocalMachine.  # noqa: E501
        :rtype: str
        """
        return self._upload_id

    @upload_id.setter
    def upload_id(self, upload_id):
        """Sets the upload_id of this SoftwarerepositoryLocalMachine.

        When the import action in file MO is updated with 'GeneratePreSignedUploadUrl', Intersight shall return a upload Id in this property as part of the PATCH response.    # noqa: E501

        :param upload_id: The upload_id of this SoftwarerepositoryLocalMachine.  # noqa: E501
        :type: str
        """

        self._upload_id = upload_id

    @property
    def upload_url(self):
        """Gets the upload_url of this SoftwarerepositoryLocalMachine.  # noqa: E501

        When a file MO is created with 'LocalMachine' as the source, Intersight shall return a presigned URL in this property as part of the POST response. The user is expected to subsequently upload the file content using this URL. Once this upload has been completed, the user is expected to PATCH the Uploader object's transfer state to success.    # noqa: E501

        :return: The upload_url of this SoftwarerepositoryLocalMachine.  # noqa: E501
        :rtype: str
        """
        return self._upload_url

    @upload_url.setter
    def upload_url(self, upload_url):
        """Sets the upload_url of this SoftwarerepositoryLocalMachine.

        When a file MO is created with 'LocalMachine' as the source, Intersight shall return a presigned URL in this property as part of the POST response. The user is expected to subsequently upload the file content using this URL. Once this upload has been completed, the user is expected to PATCH the Uploader object's transfer state to success.    # noqa: E501

        :param upload_url: The upload_url of this SoftwarerepositoryLocalMachine.  # noqa: E501
        :type: str
        """

        self._upload_url = upload_url

    @property
    def upload_urls(self):
        """Gets the upload_urls of this SoftwarerepositoryLocalMachine.  # noqa: E501


        :return: The upload_urls of this SoftwarerepositoryLocalMachine.  # noqa: E501
        :rtype: list[str]
        """
        return self._upload_urls

    @upload_urls.setter
    def upload_urls(self, upload_urls):
        """Sets the upload_urls of this SoftwarerepositoryLocalMachine.


        :param upload_urls: The upload_urls of this SoftwarerepositoryLocalMachine.  # noqa: E501
        :type: list[str]
        """

        self._upload_urls = upload_urls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SoftwarerepositoryLocalMachine):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SoftwarerepositoryLocalMachine):
            return True

        return self.to_dict() != other.to_dict()
