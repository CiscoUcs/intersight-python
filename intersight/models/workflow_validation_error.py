# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class WorkflowValidationError(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'error_log': 'str',
        'field': 'str',
        'task_name': 'str',
        'transition_name': 'str'
    }

    attribute_map = {
        'error_log': 'ErrorLog',
        'field': 'Field',
        'task_name': 'TaskName',
        'transition_name': 'TransitionName'
    }

    def __init__(self,
                 error_log=None,
                 field=None,
                 task_name=None,
                 transition_name=None,
                 local_vars_configuration=None):  # noqa: E501
        """WorkflowValidationError - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._error_log = None
        self._field = None
        self._task_name = None
        self._transition_name = None
        self.discriminator = None

        self.error_log = error_log
        if field is not None:
            self.field = field
        if task_name is not None:
            self.task_name = task_name
        if transition_name is not None:
            self.transition_name = transition_name

    @property
    def error_log(self):
        """Gets the error_log of this WorkflowValidationError.  # noqa: E501

        Description of the error.    # noqa: E501

        :return: The error_log of this WorkflowValidationError.  # noqa: E501
        :rtype: str
        """
        return self._error_log

    @error_log.setter
    def error_log(self, error_log):
        """Sets the error_log of this WorkflowValidationError.

        Description of the error.    # noqa: E501

        :param error_log: The error_log of this WorkflowValidationError.  # noqa: E501
        :type: str
        """

        self._error_log = error_log

    @property
    def field(self):
        """Gets the field of this WorkflowValidationError.  # noqa: E501

        When populated this refers to the input or output field within the workflow or task.    # noqa: E501

        :return: The field of this WorkflowValidationError.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this WorkflowValidationError.

        When populated this refers to the input or output field within the workflow or task.    # noqa: E501

        :param field: The field of this WorkflowValidationError.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def task_name(self):
        """Gets the task_name of this WorkflowValidationError.  # noqa: E501

        The task name on which the error is found, when empty the error applies to the top level workflow.    # noqa: E501

        :return: The task_name of this WorkflowValidationError.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this WorkflowValidationError.

        The task name on which the error is found, when empty the error applies to the top level workflow.    # noqa: E501

        :param task_name: The task_name of this WorkflowValidationError.  # noqa: E501
        :type: str
        """

        self._task_name = task_name

    @property
    def transition_name(self):
        """Gets the transition_name of this WorkflowValidationError.  # noqa: E501

        When populated this refers to the transition connection that has a problem. When this field has value OnSuccess it means the transition connection OnSuccess for the task has an issue.     # noqa: E501

        :return: The transition_name of this WorkflowValidationError.  # noqa: E501
        :rtype: str
        """
        return self._transition_name

    @transition_name.setter
    def transition_name(self, transition_name):
        """Sets the transition_name of this WorkflowValidationError.

        When populated this refers to the transition connection that has a problem. When this field has value OnSuccess it means the transition connection OnSuccess for the task has an issue.     # noqa: E501

        :param transition_name: The transition_name of this WorkflowValidationError.  # noqa: E501
        :type: str
        """

        self._transition_name = transition_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowValidationError):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowValidationError):
            return True

        return self.to_dict() != other.to_dict()
