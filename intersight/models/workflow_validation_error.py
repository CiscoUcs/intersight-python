# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1295
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorkflowValidationError(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'error_log': 'str',
        'field': 'str',
        'task_name': 'str',
        'transition_name': 'str'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'error_log': 'ErrorLog',
        'field': 'Field',
        'task_name': 'TaskName',
        'transition_name': 'TransitionName'
    }

    def __init__(self, object_type=None, error_log=None, field=None, task_name=None, transition_name=None):
        """
        WorkflowValidationError - a model defined in Swagger
        """

        self._object_type = None
        self._error_log = None
        self._field = None
        self._task_name = None
        self._transition_name = None

        if object_type is not None:
          self.object_type = object_type
        if error_log is not None:
          self.error_log = error_log
        if field is not None:
          self.field = field
        if task_name is not None:
          self.task_name = task_name
        if transition_name is not None:
          self.transition_name = transition_name

    @property
    def object_type(self):
        """
        Gets the object_type of this WorkflowValidationError.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :return: The object_type of this WorkflowValidationError.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this WorkflowValidationError.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :param object_type: The object_type of this WorkflowValidationError.
        :type: str
        """

        self._object_type = object_type

    @property
    def error_log(self):
        """
        Gets the error_log of this WorkflowValidationError.
        Description of the error.  

        :return: The error_log of this WorkflowValidationError.
        :rtype: str
        """
        return self._error_log

    @error_log.setter
    def error_log(self, error_log):
        """
        Sets the error_log of this WorkflowValidationError.
        Description of the error.  

        :param error_log: The error_log of this WorkflowValidationError.
        :type: str
        """

        self._error_log = error_log

    @property
    def field(self):
        """
        Gets the field of this WorkflowValidationError.
        When populated this refers to the input or output field within the workflow or task.  

        :return: The field of this WorkflowValidationError.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """
        Sets the field of this WorkflowValidationError.
        When populated this refers to the input or output field within the workflow or task.  

        :param field: The field of this WorkflowValidationError.
        :type: str
        """

        self._field = field

    @property
    def task_name(self):
        """
        Gets the task_name of this WorkflowValidationError.
        The task name on which the error is found, when empty the error applies to the top level workflow.  

        :return: The task_name of this WorkflowValidationError.
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """
        Sets the task_name of this WorkflowValidationError.
        The task name on which the error is found, when empty the error applies to the top level workflow.  

        :param task_name: The task_name of this WorkflowValidationError.
        :type: str
        """

        self._task_name = task_name

    @property
    def transition_name(self):
        """
        Gets the transition_name of this WorkflowValidationError.
        When populated this refers to the transition connection that has a problem. When this field has value OnSuccess it means the transition connection OnSuccess for the task has an issue.   

        :return: The transition_name of this WorkflowValidationError.
        :rtype: str
        """
        return self._transition_name

    @transition_name.setter
    def transition_name(self, transition_name):
        """
        Sets the transition_name of this WorkflowValidationError.
        When populated this refers to the transition connection that has a problem. When this field has value OnSuccess it means the transition connection OnSuccess for the task has an issue.   

        :param transition_name: The transition_name of this WorkflowValidationError.
        :type: str
        """

        self._transition_name = transition_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkflowValidationError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
