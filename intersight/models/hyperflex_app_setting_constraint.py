# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1295
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class HyperflexAppSettingConstraint(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'hxdp_version': 'str',
        'hypervisor_type': 'str',
        'mgmt_platform': 'str',
        'server_model': 'str'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'hxdp_version': 'HxdpVersion',
        'hypervisor_type': 'HypervisorType',
        'mgmt_platform': 'MgmtPlatform',
        'server_model': 'ServerModel'
    }

    def __init__(self, object_type=None, hxdp_version=None, hypervisor_type='Unknown', mgmt_platform='FI', server_model=None):
        """
        HyperflexAppSettingConstraint - a model defined in Swagger
        """

        self._object_type = None
        self._hxdp_version = None
        self._hypervisor_type = None
        self._mgmt_platform = None
        self._server_model = None

        if object_type is not None:
          self.object_type = object_type
        if hxdp_version is not None:
          self.hxdp_version = hxdp_version
        if hypervisor_type is not None:
          self.hypervisor_type = hypervisor_type
        if mgmt_platform is not None:
          self.mgmt_platform = mgmt_platform
        if server_model is not None:
          self.server_model = server_model

    @property
    def object_type(self):
        """
        Gets the object_type of this HyperflexAppSettingConstraint.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :return: The object_type of this HyperflexAppSettingConstraint.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this HyperflexAppSettingConstraint.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :param object_type: The object_type of this HyperflexAppSettingConstraint.
        :type: str
        """

        self._object_type = object_type

    @property
    def hxdp_version(self):
        """
        Gets the hxdp_version of this HyperflexAppSettingConstraint.
        The supported HyperFlex Data Platform version in regex format.  

        :return: The hxdp_version of this HyperflexAppSettingConstraint.
        :rtype: str
        """
        return self._hxdp_version

    @hxdp_version.setter
    def hxdp_version(self, hxdp_version):
        """
        Sets the hxdp_version of this HyperflexAppSettingConstraint.
        The supported HyperFlex Data Platform version in regex format.  

        :param hxdp_version: The hxdp_version of this HyperflexAppSettingConstraint.
        :type: str
        """

        self._hxdp_version = hxdp_version

    @property
    def hypervisor_type(self):
        """
        Gets the hypervisor_type of this HyperflexAppSettingConstraint.
        The hypervisor type for the HyperFlex cluster.  

        :return: The hypervisor_type of this HyperflexAppSettingConstraint.
        :rtype: str
        """
        return self._hypervisor_type

    @hypervisor_type.setter
    def hypervisor_type(self, hypervisor_type):
        """
        Sets the hypervisor_type of this HyperflexAppSettingConstraint.
        The hypervisor type for the HyperFlex cluster.  

        :param hypervisor_type: The hypervisor_type of this HyperflexAppSettingConstraint.
        :type: str
        """
        allowed_values = ["Unknown", "Hyper-V", "ESXi"]
        if hypervisor_type not in allowed_values:
            raise ValueError(
                "Invalid value for `hypervisor_type` ({0}), must be one of {1}"
                .format(hypervisor_type, allowed_values)
            )

        self._hypervisor_type = hypervisor_type

    @property
    def mgmt_platform(self):
        """
        Gets the mgmt_platform of this HyperflexAppSettingConstraint.
        The supported management platform for the HyperFlex Cluster.  

        :return: The mgmt_platform of this HyperflexAppSettingConstraint.
        :rtype: str
        """
        return self._mgmt_platform

    @mgmt_platform.setter
    def mgmt_platform(self, mgmt_platform):
        """
        Sets the mgmt_platform of this HyperflexAppSettingConstraint.
        The supported management platform for the HyperFlex Cluster.  

        :param mgmt_platform: The mgmt_platform of this HyperflexAppSettingConstraint.
        :type: str
        """
        allowed_values = ["FI", "EDGE"]
        if mgmt_platform not in allowed_values:
            raise ValueError(
                "Invalid value for `mgmt_platform` ({0}), must be one of {1}"
                .format(mgmt_platform, allowed_values)
            )

        self._mgmt_platform = mgmt_platform

    @property
    def server_model(self):
        """
        Gets the server_model of this HyperflexAppSettingConstraint.
        The supported server models in regex format.   

        :return: The server_model of this HyperflexAppSettingConstraint.
        :rtype: str
        """
        return self._server_model

    @server_model.setter
    def server_model(self, server_model):
        """
        Sets the server_model of this HyperflexAppSettingConstraint.
        The supported server models in regex format.   

        :param server_model: The server_model of this HyperflexAppSettingConstraint.
        :type: str
        """

        self._server_model = server_model

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HyperflexAppSettingConstraint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
