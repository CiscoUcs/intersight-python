# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class HyperflexAppSettingConstraint(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'hxdp_version': 'str',
        'hypervisor_type': 'str',
        'mgmt_platform': 'str',
        'server_model': 'str'
    }

    attribute_map = {
        'hxdp_version': 'HxdpVersion',
        'hypervisor_type': 'HypervisorType',
        'mgmt_platform': 'MgmtPlatform',
        'server_model': 'ServerModel'
    }

    def __init__(self,
                 hxdp_version=None,
                 hypervisor_type='Unknown',
                 mgmt_platform='FI',
                 server_model=None,
                 local_vars_configuration=None):  # noqa: E501
        """HyperflexAppSettingConstraint - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._hxdp_version = None
        self._hypervisor_type = None
        self._mgmt_platform = None
        self._server_model = None
        self.discriminator = None

        if hxdp_version is not None:
            self.hxdp_version = hxdp_version
        if hypervisor_type is not None:
            self.hypervisor_type = hypervisor_type
        if mgmt_platform is not None:
            self.mgmt_platform = mgmt_platform
        if server_model is not None:
            self.server_model = server_model

    @property
    def hxdp_version(self):
        """Gets the hxdp_version of this HyperflexAppSettingConstraint.  # noqa: E501

        The supported HyperFlex Data Platform version in regex format.    # noqa: E501

        :return: The hxdp_version of this HyperflexAppSettingConstraint.  # noqa: E501
        :rtype: str
        """
        return self._hxdp_version

    @hxdp_version.setter
    def hxdp_version(self, hxdp_version):
        """Sets the hxdp_version of this HyperflexAppSettingConstraint.

        The supported HyperFlex Data Platform version in regex format.    # noqa: E501

        :param hxdp_version: The hxdp_version of this HyperflexAppSettingConstraint.  # noqa: E501
        :type: str
        """

        self._hxdp_version = hxdp_version

    @property
    def hypervisor_type(self):
        """Gets the hypervisor_type of this HyperflexAppSettingConstraint.  # noqa: E501

        The hypervisor type for the HyperFlex cluster.    # noqa: E501

        :return: The hypervisor_type of this HyperflexAppSettingConstraint.  # noqa: E501
        :rtype: str
        """
        return self._hypervisor_type

    @hypervisor_type.setter
    def hypervisor_type(self, hypervisor_type):
        """Sets the hypervisor_type of this HyperflexAppSettingConstraint.

        The hypervisor type for the HyperFlex cluster.    # noqa: E501

        :param hypervisor_type: The hypervisor_type of this HyperflexAppSettingConstraint.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Hyper-V", "ESXi"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and hypervisor_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `hypervisor_type` ({0}), must be one of {1}"  # noqa: E501
                .format(hypervisor_type, allowed_values))

        self._hypervisor_type = hypervisor_type

    @property
    def mgmt_platform(self):
        """Gets the mgmt_platform of this HyperflexAppSettingConstraint.  # noqa: E501

        The supported management platform for the HyperFlex Cluster.    # noqa: E501

        :return: The mgmt_platform of this HyperflexAppSettingConstraint.  # noqa: E501
        :rtype: str
        """
        return self._mgmt_platform

    @mgmt_platform.setter
    def mgmt_platform(self, mgmt_platform):
        """Sets the mgmt_platform of this HyperflexAppSettingConstraint.

        The supported management platform for the HyperFlex Cluster.    # noqa: E501

        :param mgmt_platform: The mgmt_platform of this HyperflexAppSettingConstraint.  # noqa: E501
        :type: str
        """
        allowed_values = ["FI", "EDGE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and mgmt_platform not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `mgmt_platform` ({0}), must be one of {1}"  # noqa: E501
                .format(mgmt_platform, allowed_values))

        self._mgmt_platform = mgmt_platform

    @property
    def server_model(self):
        """Gets the server_model of this HyperflexAppSettingConstraint.  # noqa: E501

        The supported server models in regex format.     # noqa: E501

        :return: The server_model of this HyperflexAppSettingConstraint.  # noqa: E501
        :rtype: str
        """
        return self._server_model

    @server_model.setter
    def server_model(self, server_model):
        """Sets the server_model of this HyperflexAppSettingConstraint.

        The supported server models in regex format.     # noqa: E501

        :param server_model: The server_model of this HyperflexAppSettingConstraint.  # noqa: E501
        :type: str
        """

        self._server_model = server_model

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HyperflexAppSettingConstraint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HyperflexAppSettingConstraint):
            return True

        return self.to_dict() != other.to_dict()
