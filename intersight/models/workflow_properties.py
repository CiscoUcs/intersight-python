# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-961
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorkflowProperties(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'input_definition': 'list[WorkflowBaseDataType]',
        'output_definition': 'list[WorkflowBaseDataType]',
        'retry_count': 'int',
        'retry_delay': 'int',
        'retry_policy': 'str',
        'timeout': 'int',
        'timeout_policy': 'str'
    }

    attribute_map = {
        'input_definition': 'InputDefinition',
        'output_definition': 'OutputDefinition',
        'retry_count': 'RetryCount',
        'retry_delay': 'RetryDelay',
        'retry_policy': 'RetryPolicy',
        'timeout': 'Timeout',
        'timeout_policy': 'TimeoutPolicy'
    }

    def __init__(self, input_definition=None, output_definition=None, retry_count=None, retry_delay=None, retry_policy='Fixed', timeout=None, timeout_policy='Timeout'):
        """
        WorkflowProperties - a model defined in Swagger
        """

        self._input_definition = None
        self._output_definition = None
        self._retry_count = None
        self._retry_delay = None
        self._retry_policy = None
        self._timeout = None
        self._timeout_policy = None

        if input_definition is not None:
          self.input_definition = input_definition
        if output_definition is not None:
          self.output_definition = output_definition
        if retry_count is not None:
          self.retry_count = retry_count
        if retry_delay is not None:
          self.retry_delay = retry_delay
        if retry_policy is not None:
          self.retry_policy = retry_policy
        if timeout is not None:
          self.timeout = timeout
        if timeout_policy is not None:
          self.timeout_policy = timeout_policy

    @property
    def input_definition(self):
        """
        Gets the input_definition of this WorkflowProperties.
        The schema expected for input parameters for this task.  

        :return: The input_definition of this WorkflowProperties.
        :rtype: list[WorkflowBaseDataType]
        """
        return self._input_definition

    @input_definition.setter
    def input_definition(self, input_definition):
        """
        Sets the input_definition of this WorkflowProperties.
        The schema expected for input parameters for this task.  

        :param input_definition: The input_definition of this WorkflowProperties.
        :type: list[WorkflowBaseDataType]
        """

        self._input_definition = input_definition

    @property
    def output_definition(self):
        """
        Gets the output_definition of this WorkflowProperties.
        The schema expected for output parameters for this task.  

        :return: The output_definition of this WorkflowProperties.
        :rtype: list[WorkflowBaseDataType]
        """
        return self._output_definition

    @output_definition.setter
    def output_definition(self, output_definition):
        """
        Sets the output_definition of this WorkflowProperties.
        The schema expected for output parameters for this task.  

        :param output_definition: The output_definition of this WorkflowProperties.
        :type: list[WorkflowBaseDataType]
        """

        self._output_definition = output_definition

    @property
    def retry_count(self):
        """
        Gets the retry_count of this WorkflowProperties.
        The number of times a task should be tried before marking as failed.  

        :return: The retry_count of this WorkflowProperties.
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """
        Sets the retry_count of this WorkflowProperties.
        The number of times a task should be tried before marking as failed.  

        :param retry_count: The retry_count of this WorkflowProperties.
        :type: int
        """

        self._retry_count = retry_count

    @property
    def retry_delay(self):
        """
        Gets the retry_delay of this WorkflowProperties.
        The delay in seconds after which the the task is re-tried.  

        :return: The retry_delay of this WorkflowProperties.
        :rtype: int
        """
        return self._retry_delay

    @retry_delay.setter
    def retry_delay(self, retry_delay):
        """
        Sets the retry_delay of this WorkflowProperties.
        The delay in seconds after which the the task is re-tried.  

        :param retry_delay: The retry_delay of this WorkflowProperties.
        :type: int
        """

        self._retry_delay = retry_delay

    @property
    def retry_policy(self):
        """
        Gets the retry_policy of this WorkflowProperties.
        The retry policy for the task.  

        :return: The retry_policy of this WorkflowProperties.
        :rtype: str
        """
        return self._retry_policy

    @retry_policy.setter
    def retry_policy(self, retry_policy):
        """
        Sets the retry_policy of this WorkflowProperties.
        The retry policy for the task.  

        :param retry_policy: The retry_policy of this WorkflowProperties.
        :type: str
        """
        allowed_values = ["Fixed"]
        if retry_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `retry_policy` ({0}), must be one of {1}"
                .format(retry_policy, allowed_values)
            )

        self._retry_policy = retry_policy

    @property
    def timeout(self):
        """
        Gets the timeout of this WorkflowProperties.
        The timeout value in seconds after which task will be marked as timed out. Max allowed value is 7 days.  

        :return: The timeout of this WorkflowProperties.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """
        Sets the timeout of this WorkflowProperties.
        The timeout value in seconds after which task will be marked as timed out. Max allowed value is 7 days.  

        :param timeout: The timeout of this WorkflowProperties.
        :type: int
        """

        self._timeout = timeout

    @property
    def timeout_policy(self):
        """
        Gets the timeout_policy of this WorkflowProperties.
        The timeout policy for the task.   

        :return: The timeout_policy of this WorkflowProperties.
        :rtype: str
        """
        return self._timeout_policy

    @timeout_policy.setter
    def timeout_policy(self, timeout_policy):
        """
        Sets the timeout_policy of this WorkflowProperties.
        The timeout policy for the task.   

        :param timeout_policy: The timeout_policy of this WorkflowProperties.
        :type: str
        """
        allowed_values = ["Timeout", "Retry"]
        if timeout_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `timeout_policy` ({0}), must be one of {1}"
                .format(timeout_policy, allowed_values)
            )

        self._timeout_policy = timeout_policy

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkflowProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
