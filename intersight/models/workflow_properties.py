# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1415
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorkflowProperties(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'external_meta': 'bool',
        'input_definition': 'list[WorkflowOptionalBaseDataType]',
        'output_definition': 'list[WorkflowOptionalBaseDataType]',
        'retry_count': 'int',
        'retry_delay': 'int',
        'retry_policy': 'str',
        'support_status': 'str',
        'timeout': 'int',
        'timeout_policy': 'str'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'external_meta': 'ExternalMeta',
        'input_definition': 'InputDefinition',
        'output_definition': 'OutputDefinition',
        'retry_count': 'RetryCount',
        'retry_delay': 'RetryDelay',
        'retry_policy': 'RetryPolicy',
        'support_status': 'SupportStatus',
        'timeout': 'Timeout',
        'timeout_policy': 'TimeoutPolicy'
    }

    def __init__(self, object_type=None, external_meta=None, input_definition=None, output_definition=None, retry_count=None, retry_delay=None, retry_policy='Fixed', support_status='Supported', timeout=None, timeout_policy='Timeout'):
        """
        WorkflowProperties - a model defined in Swagger
        """

        self._object_type = None
        self._external_meta = None
        self._input_definition = None
        self._output_definition = None
        self._retry_count = None
        self._retry_delay = None
        self._retry_policy = None
        self._support_status = None
        self._timeout = None
        self._timeout_policy = None

        if object_type is not None:
          self.object_type = object_type
        if external_meta is not None:
          self.external_meta = external_meta
        if input_definition is not None:
          self.input_definition = input_definition
        if output_definition is not None:
          self.output_definition = output_definition
        if retry_count is not None:
          self.retry_count = retry_count
        if retry_delay is not None:
          self.retry_delay = retry_delay
        if retry_policy is not None:
          self.retry_policy = retry_policy
        if support_status is not None:
          self.support_status = support_status
        if timeout is not None:
          self.timeout = timeout
        if timeout_policy is not None:
          self.timeout_policy = timeout_policy

    @property
    def object_type(self):
        """
        Gets the object_type of this WorkflowProperties.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :return: The object_type of this WorkflowProperties.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this WorkflowProperties.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :param object_type: The object_type of this WorkflowProperties.
        :type: str
        """

        self._object_type = object_type

    @property
    def external_meta(self):
        """
        Gets the external_meta of this WorkflowProperties.
        When set to false the task definition can only be used by internal system workflows. When set to true then the task can be included in user defined workflows.  

        :return: The external_meta of this WorkflowProperties.
        :rtype: bool
        """
        return self._external_meta

    @external_meta.setter
    def external_meta(self, external_meta):
        """
        Sets the external_meta of this WorkflowProperties.
        When set to false the task definition can only be used by internal system workflows. When set to true then the task can be included in user defined workflows.  

        :param external_meta: The external_meta of this WorkflowProperties.
        :type: bool
        """

        self._external_meta = external_meta

    @property
    def input_definition(self):
        """
        Gets the input_definition of this WorkflowProperties.
        The schema expected for input parameters for this task.  

        :return: The input_definition of this WorkflowProperties.
        :rtype: list[WorkflowOptionalBaseDataType]
        """
        return self._input_definition

    @input_definition.setter
    def input_definition(self, input_definition):
        """
        Sets the input_definition of this WorkflowProperties.
        The schema expected for input parameters for this task.  

        :param input_definition: The input_definition of this WorkflowProperties.
        :type: list[WorkflowOptionalBaseDataType]
        """

        self._input_definition = input_definition

    @property
    def output_definition(self):
        """
        Gets the output_definition of this WorkflowProperties.
        The schema expected for output parameters for this task.  

        :return: The output_definition of this WorkflowProperties.
        :rtype: list[WorkflowOptionalBaseDataType]
        """
        return self._output_definition

    @output_definition.setter
    def output_definition(self, output_definition):
        """
        Sets the output_definition of this WorkflowProperties.
        The schema expected for output parameters for this task.  

        :param output_definition: The output_definition of this WorkflowProperties.
        :type: list[WorkflowOptionalBaseDataType]
        """

        self._output_definition = output_definition

    @property
    def retry_count(self):
        """
        Gets the retry_count of this WorkflowProperties.
        The number of times a task should be tried before marking as failed.  

        :return: The retry_count of this WorkflowProperties.
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """
        Sets the retry_count of this WorkflowProperties.
        The number of times a task should be tried before marking as failed.  

        :param retry_count: The retry_count of this WorkflowProperties.
        :type: int
        """

        self._retry_count = retry_count

    @property
    def retry_delay(self):
        """
        Gets the retry_delay of this WorkflowProperties.
        The delay in seconds after which the the task is re-tried.  

        :return: The retry_delay of this WorkflowProperties.
        :rtype: int
        """
        return self._retry_delay

    @retry_delay.setter
    def retry_delay(self, retry_delay):
        """
        Sets the retry_delay of this WorkflowProperties.
        The delay in seconds after which the the task is re-tried.  

        :param retry_delay: The retry_delay of this WorkflowProperties.
        :type: int
        """

        self._retry_delay = retry_delay

    @property
    def retry_policy(self):
        """
        Gets the retry_policy of this WorkflowProperties.
        The retry policy for the task.  

        :return: The retry_policy of this WorkflowProperties.
        :rtype: str
        """
        return self._retry_policy

    @retry_policy.setter
    def retry_policy(self, retry_policy):
        """
        Sets the retry_policy of this WorkflowProperties.
        The retry policy for the task.  

        :param retry_policy: The retry_policy of this WorkflowProperties.
        :type: str
        """
        allowed_values = ["Fixed"]
        if retry_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `retry_policy` ({0}), must be one of {1}"
                .format(retry_policy, allowed_values)
            )

        self._retry_policy = retry_policy

    @property
    def support_status(self):
        """
        Gets the support_status of this WorkflowProperties.
        Supported status of the definition.  

        :return: The support_status of this WorkflowProperties.
        :rtype: str
        """
        return self._support_status

    @support_status.setter
    def support_status(self, support_status):
        """
        Sets the support_status of this WorkflowProperties.
        Supported status of the definition.  

        :param support_status: The support_status of this WorkflowProperties.
        :type: str
        """
        allowed_values = ["Supported", "Beta", "Deprecated"]
        if support_status not in allowed_values:
            raise ValueError(
                "Invalid value for `support_status` ({0}), must be one of {1}"
                .format(support_status, allowed_values)
            )

        self._support_status = support_status

    @property
    def timeout(self):
        """
        Gets the timeout of this WorkflowProperties.
        The timeout value in seconds after which task will be marked as timed out. Max allowed value is 7 days.  

        :return: The timeout of this WorkflowProperties.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """
        Sets the timeout of this WorkflowProperties.
        The timeout value in seconds after which task will be marked as timed out. Max allowed value is 7 days.  

        :param timeout: The timeout of this WorkflowProperties.
        :type: int
        """

        self._timeout = timeout

    @property
    def timeout_policy(self):
        """
        Gets the timeout_policy of this WorkflowProperties.
        The timeout policy for the task.   

        :return: The timeout_policy of this WorkflowProperties.
        :rtype: str
        """
        return self._timeout_policy

    @timeout_policy.setter
    def timeout_policy(self, timeout_policy):
        """
        Sets the timeout_policy of this WorkflowProperties.
        The timeout policy for the task.   

        :param timeout_policy: The timeout_policy of this WorkflowProperties.
        :type: str
        """
        allowed_values = ["Timeout", "Retry"]
        if timeout_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `timeout_policy` ({0}), must be one of {1}"
                .format(timeout_policy, allowed_values)
            )

        self._timeout_policy = timeout_policy

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkflowProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
