# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ResourcePerTypeCombinedSelector(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'combined_selector': 'str',
        'empty_filter': 'bool',
        'selector_object_type': 'str'
    }

    attribute_map = {
        'combined_selector': 'CombinedSelector',
        'empty_filter': 'EmptyFilter',
        'selector_object_type': 'SelectorObjectType'
    }

    def __init__(self,
                 combined_selector=None,
                 empty_filter=None,
                 selector_object_type=None,
                 local_vars_configuration=None):  # noqa: E501
        """ResourcePerTypeCombinedSelector - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._combined_selector = None
        self._empty_filter = None
        self._selector_object_type = None
        self.discriminator = None

        if combined_selector is not None:
            self.combined_selector = combined_selector
        if empty_filter is not None:
            self.empty_filter = empty_filter
        if selector_object_type is not None:
            self.selector_object_type = selector_object_type

    @property
    def combined_selector(self):
        """Gets the combined_selector of this ResourcePerTypeCombinedSelector.  # noqa: E501

        A single filter expression created by OR'ing the $filter criteria of the 'selectors'. Used to efficiently maintain the membership of the Group.     # noqa: E501

        :return: The combined_selector of this ResourcePerTypeCombinedSelector.  # noqa: E501
        :rtype: str
        """
        return self._combined_selector

    @combined_selector.setter
    def combined_selector(self, combined_selector):
        """Sets the combined_selector of this ResourcePerTypeCombinedSelector.

        A single filter expression created by OR'ing the $filter criteria of the 'selectors'. Used to efficiently maintain the membership of the Group.     # noqa: E501

        :param combined_selector: The combined_selector of this ResourcePerTypeCombinedSelector.  # noqa: E501
        :type: str
        """

        self._combined_selector = combined_selector

    @property
    def empty_filter(self):
        """Gets the empty_filter of this ResourcePerTypeCombinedSelector.  # noqa: E501

        If true, then resources are added using just object type without filter.     # noqa: E501

        :return: The empty_filter of this ResourcePerTypeCombinedSelector.  # noqa: E501
        :rtype: bool
        """
        return self._empty_filter

    @empty_filter.setter
    def empty_filter(self, empty_filter):
        """Sets the empty_filter of this ResourcePerTypeCombinedSelector.

        If true, then resources are added using just object type without filter.     # noqa: E501

        :param empty_filter: The empty_filter of this ResourcePerTypeCombinedSelector.  # noqa: E501
        :type: bool
        """

        self._empty_filter = empty_filter

    @property
    def selector_object_type(self):
        """Gets the selector_object_type of this ResourcePerTypeCombinedSelector.  # noqa: E501

        The ObjectType on which the selectors are defined. Used to efficiently query resource groups for a given ObjectType.      # noqa: E501

        :return: The selector_object_type of this ResourcePerTypeCombinedSelector.  # noqa: E501
        :rtype: str
        """
        return self._selector_object_type

    @selector_object_type.setter
    def selector_object_type(self, selector_object_type):
        """Sets the selector_object_type of this ResourcePerTypeCombinedSelector.

        The ObjectType on which the selectors are defined. Used to efficiently query resource groups for a given ObjectType.      # noqa: E501

        :param selector_object_type: The selector_object_type of this ResourcePerTypeCombinedSelector.  # noqa: E501
        :type: str
        """

        self._selector_object_type = selector_object_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourcePerTypeCombinedSelector):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourcePerTypeCombinedSelector):
            return True

        return self.to_dict() != other.to_dict()
