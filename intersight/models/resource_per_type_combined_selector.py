# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1295
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ResourcePerTypeCombinedSelector(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'combined_selector': 'str',
        'empty_filter': 'bool',
        'selector_object_type': 'str'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'combined_selector': 'CombinedSelector',
        'empty_filter': 'EmptyFilter',
        'selector_object_type': 'SelectorObjectType'
    }

    def __init__(self, object_type=None, combined_selector=None, empty_filter=None, selector_object_type=None):
        """
        ResourcePerTypeCombinedSelector - a model defined in Swagger
        """

        self._object_type = None
        self._combined_selector = None
        self._empty_filter = None
        self._selector_object_type = None

        if object_type is not None:
          self.object_type = object_type
        if combined_selector is not None:
          self.combined_selector = combined_selector
        if empty_filter is not None:
          self.empty_filter = empty_filter
        if selector_object_type is not None:
          self.selector_object_type = selector_object_type

    @property
    def object_type(self):
        """
        Gets the object_type of this ResourcePerTypeCombinedSelector.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :return: The object_type of this ResourcePerTypeCombinedSelector.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this ResourcePerTypeCombinedSelector.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :param object_type: The object_type of this ResourcePerTypeCombinedSelector.
        :type: str
        """

        self._object_type = object_type

    @property
    def combined_selector(self):
        """
        Gets the combined_selector of this ResourcePerTypeCombinedSelector.
        A single filter expression created by OR'ing the $filter criteria of the 'selectors'. Used to efficiently maintain the membership of the Group.   

        :return: The combined_selector of this ResourcePerTypeCombinedSelector.
        :rtype: str
        """
        return self._combined_selector

    @combined_selector.setter
    def combined_selector(self, combined_selector):
        """
        Sets the combined_selector of this ResourcePerTypeCombinedSelector.
        A single filter expression created by OR'ing the $filter criteria of the 'selectors'. Used to efficiently maintain the membership of the Group.   

        :param combined_selector: The combined_selector of this ResourcePerTypeCombinedSelector.
        :type: str
        """

        self._combined_selector = combined_selector

    @property
    def empty_filter(self):
        """
        Gets the empty_filter of this ResourcePerTypeCombinedSelector.
        If true, then resources are added using just object type without filter.   

        :return: The empty_filter of this ResourcePerTypeCombinedSelector.
        :rtype: bool
        """
        return self._empty_filter

    @empty_filter.setter
    def empty_filter(self, empty_filter):
        """
        Sets the empty_filter of this ResourcePerTypeCombinedSelector.
        If true, then resources are added using just object type without filter.   

        :param empty_filter: The empty_filter of this ResourcePerTypeCombinedSelector.
        :type: bool
        """

        self._empty_filter = empty_filter

    @property
    def selector_object_type(self):
        """
        Gets the selector_object_type of this ResourcePerTypeCombinedSelector.
        The ObjectType on which the selectors are defined. Used to efficiently query resource groups for a given ObjectType.    

        :return: The selector_object_type of this ResourcePerTypeCombinedSelector.
        :rtype: str
        """
        return self._selector_object_type

    @selector_object_type.setter
    def selector_object_type(self, selector_object_type):
        """
        Sets the selector_object_type of this ResourcePerTypeCombinedSelector.
        The ObjectType on which the selectors are defined. Used to efficiently query resource groups for a given ObjectType.    

        :param selector_object_type: The selector_object_type of this ResourcePerTypeCombinedSelector.
        :type: str
        """

        self._selector_object_type = selector_object_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ResourcePerTypeCombinedSelector):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
