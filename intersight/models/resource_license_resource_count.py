# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ResourceLicenseResourceCount(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'license_type': 'str',
        'resource_count': 'int',
        'account': 'IamAccount',
        'license_groups': 'list[ResourceGroup]'
    }

    attribute_map = {
        'license_type': 'LicenseType',
        'resource_count': 'ResourceCount',
        'account': 'Account',
        'license_groups': 'LicenseGroups'
    }

    def __init__(self,
                 license_type='Base',
                 resource_count=None,
                 account=None,
                 license_groups=None,
                 local_vars_configuration=None):  # noqa: E501
        """ResourceLicenseResourceCount - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._license_type = None
        self._resource_count = None
        self._account = None
        self._license_groups = None
        self.discriminator = None

        if license_type is not None:
            self.license_type = license_type
        if resource_count is not None:
            self.resource_count = resource_count
        if account is not None:
            self.account = account
        if license_groups is not None:
            self.license_groups = license_groups

    @property
    def license_type(self):
        """Gets the license_type of this ResourceLicenseResourceCount.  # noqa: E501

        Type of licensing defined for this resource group. Used for licensing group.    # noqa: E501

        :return: The license_type of this ResourceLicenseResourceCount.  # noqa: E501
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this ResourceLicenseResourceCount.

        Type of licensing defined for this resource group. Used for licensing group.    # noqa: E501

        :param license_type: The license_type of this ResourceLicenseResourceCount.  # noqa: E501
        :type: str
        """
        allowed_values = ["Base", "Essential", "Standard",
                          "Advantage"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and license_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `license_type` ({0}), must be one of {1}"  # noqa: E501
                .format(license_type, allowed_values))

        self._license_type = license_type

    @property
    def resource_count(self):
        """Gets the resource_count of this ResourceLicenseResourceCount.  # noqa: E501

        The number of resource belongs to this licensing tier.     # noqa: E501

        :return: The resource_count of this ResourceLicenseResourceCount.  # noqa: E501
        :rtype: int
        """
        return self._resource_count

    @resource_count.setter
    def resource_count(self, resource_count):
        """Sets the resource_count of this ResourceLicenseResourceCount.

        The number of resource belongs to this licensing tier.     # noqa: E501

        :param resource_count: The resource_count of this ResourceLicenseResourceCount.  # noqa: E501
        :type: int
        """

        self._resource_count = resource_count

    @property
    def account(self):
        """Gets the account of this ResourceLicenseResourceCount.  # noqa: E501


        :return: The account of this ResourceLicenseResourceCount.  # noqa: E501
        :rtype: IamAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ResourceLicenseResourceCount.


        :param account: The account of this ResourceLicenseResourceCount.  # noqa: E501
        :type: IamAccount
        """

        self._account = account

    @property
    def license_groups(self):
        """Gets the license_groups of this ResourceLicenseResourceCount.  # noqa: E501

        A reference to a resourceGroup resource. When the $expand query parameter is specified, the referenced resource is returned inline. The list of all license groups bind with this server count object.   # noqa: E501

        :return: The license_groups of this ResourceLicenseResourceCount.  # noqa: E501
        :rtype: list[ResourceGroup]
        """
        return self._license_groups

    @license_groups.setter
    def license_groups(self, license_groups):
        """Sets the license_groups of this ResourceLicenseResourceCount.

        A reference to a resourceGroup resource. When the $expand query parameter is specified, the referenced resource is returned inline. The list of all license groups bind with this server count object.   # noqa: E501

        :param license_groups: The license_groups of this ResourceLicenseResourceCount.  # noqa: E501
        :type: list[ResourceGroup]
        """

        self._license_groups = license_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceLicenseResourceCount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourceLicenseResourceCount):
            return True

        return self.to_dict() != other.to_dict()
