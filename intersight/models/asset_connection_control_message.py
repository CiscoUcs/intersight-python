# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-961
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AssetConnectionControlMessage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'str',
        'connector_version': 'str',
        'device_id': 'str',
        'domain_group': 'str',
        'evict': 'bool',
        'leadership': 'str',
        'new_identity': 'str',
        'partition': 'int'
    }

    attribute_map = {
        'account': 'Account',
        'connector_version': 'ConnectorVersion',
        'device_id': 'DeviceId',
        'domain_group': 'DomainGroup',
        'evict': 'Evict',
        'leadership': 'Leadership',
        'new_identity': 'NewIdentity',
        'partition': 'Partition'
    }

    def __init__(self, account=None, connector_version=None, device_id=None, domain_group=None, evict=None, leadership='Unknown', new_identity=None, partition=None):
        """
        AssetConnectionControlMessage - a model defined in Swagger
        """

        self._account = None
        self._connector_version = None
        self._device_id = None
        self._domain_group = None
        self._evict = None
        self._leadership = None
        self._new_identity = None
        self._partition = None

        if account is not None:
          self.account = account
        if connector_version is not None:
          self.connector_version = connector_version
        if device_id is not None:
          self.device_id = device_id
        if domain_group is not None:
          self.domain_group = domain_group
        if evict is not None:
          self.evict = evict
        if leadership is not None:
          self.leadership = leadership
        if new_identity is not None:
          self.new_identity = new_identity
        if partition is not None:
          self.partition = partition

    @property
    def account(self):
        """
        Gets the account of this AssetConnectionControlMessage.
        The account id to which the device belongs.  

        :return: The account of this AssetConnectionControlMessage.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this AssetConnectionControlMessage.
        The account id to which the device belongs.  

        :param account: The account of this AssetConnectionControlMessage.
        :type: str
        """

        self._account = account

    @property
    def connector_version(self):
        """
        Gets the connector_version of this AssetConnectionControlMessage.
        The version of the device connector currently running on the platform. Deprecated by newer connectors that will report this directly to the device connector gateway in a websocket header, but included to continue to support older versions which report any version change after connect.  

        :return: The connector_version of this AssetConnectionControlMessage.
        :rtype: str
        """
        return self._connector_version

    @connector_version.setter
    def connector_version(self, connector_version):
        """
        Sets the connector_version of this AssetConnectionControlMessage.
        The version of the device connector currently running on the platform. Deprecated by newer connectors that will report this directly to the device connector gateway in a websocket header, but included to continue to support older versions which report any version change after connect.  

        :param connector_version: The connector_version of this AssetConnectionControlMessage.
        :type: str
        """

        self._connector_version = connector_version

    @property
    def device_id(self):
        """
        Gets the device_id of this AssetConnectionControlMessage.
        The Moid of the device under change. Used to route the message to a devices connection.  

        :return: The device_id of this AssetConnectionControlMessage.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """
        Sets the device_id of this AssetConnectionControlMessage.
        The Moid of the device under change. Used to route the message to a devices connection.  

        :param device_id: The device_id of this AssetConnectionControlMessage.
        :type: str
        """

        self._device_id = device_id

    @property
    def domain_group(self):
        """
        Gets the domain_group of this AssetConnectionControlMessage.
        The domain group id to which the device belongs.  

        :return: The domain_group of this AssetConnectionControlMessage.
        :rtype: str
        """
        return self._domain_group

    @domain_group.setter
    def domain_group(self, domain_group):
        """
        Sets the domain_group of this AssetConnectionControlMessage.
        The domain group id to which the device belongs.  

        :param domain_group: The domain_group of this AssetConnectionControlMessage.
        :type: str
        """

        self._domain_group = domain_group

    @property
    def evict(self):
        """
        Gets the evict of this AssetConnectionControlMessage.
        Flag to force any open connections to be evicted. Used in case device has been deleted or blacklisted.  

        :return: The evict of this AssetConnectionControlMessage.
        :rtype: bool
        """
        return self._evict

    @evict.setter
    def evict(self, evict):
        """
        Sets the evict of this AssetConnectionControlMessage.
        Flag to force any open connections to be evicted. Used in case device has been deleted or blacklisted.  

        :param evict: The evict of this AssetConnectionControlMessage.
        :type: bool
        """

        self._evict = evict

    @property
    def leadership(self):
        """
        Gets the leadership of this AssetConnectionControlMessage.
        The current leadership of a device cluster member.  

        :return: The leadership of this AssetConnectionControlMessage.
        :rtype: str
        """
        return self._leadership

    @leadership.setter
    def leadership(self, leadership):
        """
        Sets the leadership of this AssetConnectionControlMessage.
        The current leadership of a device cluster member.  

        :param leadership: The leadership of this AssetConnectionControlMessage.
        :type: str
        """
        allowed_values = ["Unknown", "Primary", "Secondary"]
        if leadership not in allowed_values:
            raise ValueError(
                "Invalid value for `leadership` ({0}), must be one of {1}"
                .format(leadership, allowed_values)
            )

        self._leadership = leadership

    @property
    def new_identity(self):
        """
        Gets the new_identity of this AssetConnectionControlMessage.
        The new identity assigned to a device on ownership change (claim/unclaim).  

        :return: The new_identity of this AssetConnectionControlMessage.
        :rtype: str
        """
        return self._new_identity

    @new_identity.setter
    def new_identity(self, new_identity):
        """
        Sets the new_identity of this AssetConnectionControlMessage.
        The new identity assigned to a device on ownership change (claim/unclaim).  

        :param new_identity: The new_identity of this AssetConnectionControlMessage.
        :type: str
        """

        self._new_identity = new_identity

    @property
    def partition(self):
        """
        Gets the partition of this AssetConnectionControlMessage.
        The partition the device was last connected to, used to address the control message to the device connector gateway instance holding the devices connection.   

        :return: The partition of this AssetConnectionControlMessage.
        :rtype: int
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """
        Sets the partition of this AssetConnectionControlMessage.
        The partition the device was last connected to, used to address the control message to the device connector gateway instance holding the devices connection.   

        :param partition: The partition of this AssetConnectionControlMessage.
        :type: int
        """

        self._partition = partition

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AssetConnectionControlMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
