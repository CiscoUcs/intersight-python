# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class HyperflexNodeProfile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'hxdp_data_ip': 'str',
        'hxdp_mgmt_ip': 'str',
        'hypervisor_data_ip': 'str',
        'hypervisor_mgmt_ip': 'str',
        'assigned_server': 'ComputeRackUnit',
        'cluster_profile': 'HyperflexClusterProfile'
    }

    attribute_map = {
        'hxdp_data_ip': 'HxdpDataIp',
        'hxdp_mgmt_ip': 'HxdpMgmtIp',
        'hypervisor_data_ip': 'HypervisorDataIp',
        'hypervisor_mgmt_ip': 'HypervisorMgmtIp',
        'assigned_server': 'AssignedServer',
        'cluster_profile': 'ClusterProfile'
    }

    def __init__(self,
                 hxdp_data_ip=None,
                 hxdp_mgmt_ip=None,
                 hypervisor_data_ip=None,
                 hypervisor_mgmt_ip=None,
                 assigned_server=None,
                 cluster_profile=None,
                 local_vars_configuration=None):  # noqa: E501
        """HyperflexNodeProfile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._hxdp_data_ip = None
        self._hxdp_mgmt_ip = None
        self._hypervisor_data_ip = None
        self._hypervisor_mgmt_ip = None
        self._assigned_server = None
        self._cluster_profile = None
        self.discriminator = None

        if hxdp_data_ip is not None:
            self.hxdp_data_ip = hxdp_data_ip
        if hxdp_mgmt_ip is not None:
            self.hxdp_mgmt_ip = hxdp_mgmt_ip
        if hypervisor_data_ip is not None:
            self.hypervisor_data_ip = hypervisor_data_ip
        if hypervisor_mgmt_ip is not None:
            self.hypervisor_mgmt_ip = hypervisor_mgmt_ip
        if assigned_server is not None:
            self.assigned_server = assigned_server
        if cluster_profile is not None:
            self.cluster_profile = cluster_profile

    @property
    def hxdp_data_ip(self):
        """Gets the hxdp_data_ip of this HyperflexNodeProfile.  # noqa: E501

        IP address for storage data network (Controller VM interface).    # noqa: E501

        :return: The hxdp_data_ip of this HyperflexNodeProfile.  # noqa: E501
        :rtype: str
        """
        return self._hxdp_data_ip

    @hxdp_data_ip.setter
    def hxdp_data_ip(self, hxdp_data_ip):
        """Sets the hxdp_data_ip of this HyperflexNodeProfile.

        IP address for storage data network (Controller VM interface).    # noqa: E501

        :param hxdp_data_ip: The hxdp_data_ip of this HyperflexNodeProfile.  # noqa: E501
        :type: str
        """

        self._hxdp_data_ip = hxdp_data_ip

    @property
    def hxdp_mgmt_ip(self):
        """Gets the hxdp_mgmt_ip of this HyperflexNodeProfile.  # noqa: E501

        IP address for HyperFlex management network.    # noqa: E501

        :return: The hxdp_mgmt_ip of this HyperflexNodeProfile.  # noqa: E501
        :rtype: str
        """
        return self._hxdp_mgmt_ip

    @hxdp_mgmt_ip.setter
    def hxdp_mgmt_ip(self, hxdp_mgmt_ip):
        """Sets the hxdp_mgmt_ip of this HyperflexNodeProfile.

        IP address for HyperFlex management network.    # noqa: E501

        :param hxdp_mgmt_ip: The hxdp_mgmt_ip of this HyperflexNodeProfile.  # noqa: E501
        :type: str
        """

        self._hxdp_mgmt_ip = hxdp_mgmt_ip

    @property
    def hypervisor_data_ip(self):
        """Gets the hypervisor_data_ip of this HyperflexNodeProfile.  # noqa: E501

        IP address for storage data network (Hypervisor interface).    # noqa: E501

        :return: The hypervisor_data_ip of this HyperflexNodeProfile.  # noqa: E501
        :rtype: str
        """
        return self._hypervisor_data_ip

    @hypervisor_data_ip.setter
    def hypervisor_data_ip(self, hypervisor_data_ip):
        """Sets the hypervisor_data_ip of this HyperflexNodeProfile.

        IP address for storage data network (Hypervisor interface).    # noqa: E501

        :param hypervisor_data_ip: The hypervisor_data_ip of this HyperflexNodeProfile.  # noqa: E501
        :type: str
        """

        self._hypervisor_data_ip = hypervisor_data_ip

    @property
    def hypervisor_mgmt_ip(self):
        """Gets the hypervisor_mgmt_ip of this HyperflexNodeProfile.  # noqa: E501

        IP address for Hypervisor management network.     # noqa: E501

        :return: The hypervisor_mgmt_ip of this HyperflexNodeProfile.  # noqa: E501
        :rtype: str
        """
        return self._hypervisor_mgmt_ip

    @hypervisor_mgmt_ip.setter
    def hypervisor_mgmt_ip(self, hypervisor_mgmt_ip):
        """Sets the hypervisor_mgmt_ip of this HyperflexNodeProfile.

        IP address for Hypervisor management network.     # noqa: E501

        :param hypervisor_mgmt_ip: The hypervisor_mgmt_ip of this HyperflexNodeProfile.  # noqa: E501
        :type: str
        """

        self._hypervisor_mgmt_ip = hypervisor_mgmt_ip

    @property
    def assigned_server(self):
        """Gets the assigned_server of this HyperflexNodeProfile.  # noqa: E501


        :return: The assigned_server of this HyperflexNodeProfile.  # noqa: E501
        :rtype: ComputeRackUnit
        """
        return self._assigned_server

    @assigned_server.setter
    def assigned_server(self, assigned_server):
        """Sets the assigned_server of this HyperflexNodeProfile.


        :param assigned_server: The assigned_server of this HyperflexNodeProfile.  # noqa: E501
        :type: ComputeRackUnit
        """

        self._assigned_server = assigned_server

    @property
    def cluster_profile(self):
        """Gets the cluster_profile of this HyperflexNodeProfile.  # noqa: E501


        :return: The cluster_profile of this HyperflexNodeProfile.  # noqa: E501
        :rtype: HyperflexClusterProfile
        """
        return self._cluster_profile

    @cluster_profile.setter
    def cluster_profile(self, cluster_profile):
        """Sets the cluster_profile of this HyperflexNodeProfile.


        :param cluster_profile: The cluster_profile of this HyperflexNodeProfile.  # noqa: E501
        :type: HyperflexClusterProfile
        """

        self._cluster_profile = cluster_profile

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HyperflexNodeProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HyperflexNodeProfile):
            return True

        return self.to_dict() != other.to_dict()
