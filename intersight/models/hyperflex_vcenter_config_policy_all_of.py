# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class HyperflexVcenterConfigPolicyAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data_center': 'str',
        'hostname': 'str',
        'is_password_set': 'bool',
        'password': 'str',
        'sso_url': 'str',
        'username': 'str',
        'cluster_profiles': 'list[HyperflexClusterProfile]',
        'organization': 'OrganizationOrganization'
    }

    attribute_map = {
        'data_center': 'DataCenter',
        'hostname': 'Hostname',
        'is_password_set': 'IsPasswordSet',
        'password': 'Password',
        'sso_url': 'SsoUrl',
        'username': 'Username',
        'cluster_profiles': 'ClusterProfiles',
        'organization': 'Organization'
    }

    def __init__(self,
                 data_center=None,
                 hostname=None,
                 is_password_set=None,
                 password=None,
                 sso_url=None,
                 username=None,
                 cluster_profiles=None,
                 organization=None,
                 local_vars_configuration=None):  # noqa: E501
        """HyperflexVcenterConfigPolicyAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._data_center = None
        self._hostname = None
        self._is_password_set = None
        self._password = None
        self._sso_url = None
        self._username = None
        self._cluster_profiles = None
        self._organization = None
        self.discriminator = None

        if data_center is not None:
            self.data_center = data_center
        if hostname is not None:
            self.hostname = hostname
        if is_password_set is not None:
            self.is_password_set = is_password_set
        if password is not None:
            self.password = password
        if sso_url is not None:
            self.sso_url = sso_url
        if username is not None:
            self.username = username
        if cluster_profiles is not None:
            self.cluster_profiles = cluster_profiles
        if organization is not None:
            self.organization = organization

    @property
    def data_center(self):
        """Gets the data_center of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501

        The vCenter datacenter name.    # noqa: E501

        :return: The data_center of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._data_center

    @data_center.setter
    def data_center(self, data_center):
        """Sets the data_center of this HyperflexVcenterConfigPolicyAllOf.

        The vCenter datacenter name.    # noqa: E501

        :param data_center: The data_center of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501
        :type: str
        """

        self._data_center = data_center

    @property
    def hostname(self):
        """Gets the hostname of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501

        The vCenter server FQDN or IP.    # noqa: E501

        :return: The hostname of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this HyperflexVcenterConfigPolicyAllOf.

        The vCenter server FQDN or IP.    # noqa: E501

        :param hostname: The hostname of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def is_password_set(self):
        """Gets the is_password_set of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501


        :return: The is_password_set of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_password_set

    @is_password_set.setter
    def is_password_set(self, is_password_set):
        """Sets the is_password_set of this HyperflexVcenterConfigPolicyAllOf.


        :param is_password_set: The is_password_set of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501
        :type: bool
        """

        self._is_password_set = is_password_set

    @property
    def password(self):
        """Gets the password of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501

        The password for authenticating with vCenter. Follow the corresponding password policy governed by vCenter.    # noqa: E501

        :return: The password of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this HyperflexVcenterConfigPolicyAllOf.

        The password for authenticating with vCenter. Follow the corresponding password policy governed by vCenter.    # noqa: E501

        :param password: The password of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def sso_url(self):
        """Gets the sso_url of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501

        Overrides the default vCenter Single Sign-On URL. Do not specify unless instructed by Cisco TAC.    # noqa: E501

        :return: The sso_url of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._sso_url

    @sso_url.setter
    def sso_url(self, sso_url):
        """Sets the sso_url of this HyperflexVcenterConfigPolicyAllOf.

        Overrides the default vCenter Single Sign-On URL. Do not specify unless instructed by Cisco TAC.    # noqa: E501

        :param sso_url: The sso_url of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501
        :type: str
        """

        self._sso_url = sso_url

    @property
    def username(self):
        """Gets the username of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501

        The vCenter username (e.g. administrator@vsphere.local).     # noqa: E501

        :return: The username of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this HyperflexVcenterConfigPolicyAllOf.

        The vCenter username (e.g. administrator@vsphere.local).     # noqa: E501

        :param username: The username of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def cluster_profiles(self):
        """Gets the cluster_profiles of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501

        A reference to a hyperflexClusterProfile resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of cluster profiles using this policy.   # noqa: E501

        :return: The cluster_profiles of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501
        :rtype: list[HyperflexClusterProfile]
        """
        return self._cluster_profiles

    @cluster_profiles.setter
    def cluster_profiles(self, cluster_profiles):
        """Sets the cluster_profiles of this HyperflexVcenterConfigPolicyAllOf.

        A reference to a hyperflexClusterProfile resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of cluster profiles using this policy.   # noqa: E501

        :param cluster_profiles: The cluster_profiles of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501
        :type: list[HyperflexClusterProfile]
        """

        self._cluster_profiles = cluster_profiles

    @property
    def organization(self):
        """Gets the organization of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501


        :return: The organization of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501
        :rtype: OrganizationOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this HyperflexVcenterConfigPolicyAllOf.


        :param organization: The organization of this HyperflexVcenterConfigPolicyAllOf.  # noqa: E501
        :type: OrganizationOrganization
        """

        self._organization = organization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HyperflexVcenterConfigPolicyAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HyperflexVcenterConfigPolicyAllOf):
            return True

        return self.to_dict() != other.to_dict()
