# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StoragePhysicalDiskExtensionAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bootable': 'str',
        'disk_dn': 'str',
        'disk_id': 'int',
        'disk_state': 'str',
        'health': 'str',
        'physical_disk': 'StoragePhysicalDisk',
        'registered_device': 'AssetDeviceRegistration',
        'storage_controller': 'StorageController'
    }

    attribute_map = {
        'bootable': 'Bootable',
        'disk_dn': 'DiskDn',
        'disk_id': 'DiskId',
        'disk_state': 'DiskState',
        'health': 'Health',
        'physical_disk': 'PhysicalDisk',
        'registered_device': 'RegisteredDevice',
        'storage_controller': 'StorageController'
    }

    def __init__(self,
                 bootable=None,
                 disk_dn=None,
                 disk_id=None,
                 disk_state=None,
                 health=None,
                 physical_disk=None,
                 registered_device=None,
                 storage_controller=None,
                 local_vars_configuration=None):  # noqa: E501
        """StoragePhysicalDiskExtensionAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bootable = None
        self._disk_dn = None
        self._disk_id = None
        self._disk_state = None
        self._health = None
        self._physical_disk = None
        self._registered_device = None
        self._storage_controller = None
        self.discriminator = None

        if bootable is not None:
            self.bootable = bootable
        if disk_dn is not None:
            self.disk_dn = disk_dn
        if disk_id is not None:
            self.disk_id = disk_id
        if disk_state is not None:
            self.disk_state = disk_state
        if health is not None:
            self.health = health
        if physical_disk is not None:
            self.physical_disk = physical_disk
        if registered_device is not None:
            self.registered_device = registered_device
        if storage_controller is not None:
            self.storage_controller = storage_controller

    @property
    def bootable(self):
        """Gets the bootable of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501

        It shows whether disk is bootable or not.    # noqa: E501

        :return: The bootable of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._bootable

    @bootable.setter
    def bootable(self, bootable):
        """Sets the bootable of this StoragePhysicalDiskExtensionAllOf.

        It shows whether disk is bootable or not.    # noqa: E501

        :param bootable: The bootable of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501
        :type: str
        """

        self._bootable = bootable

    @property
    def disk_dn(self):
        """Gets the disk_dn of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501

        It shows the Physical drive Dn.    # noqa: E501

        :return: The disk_dn of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._disk_dn

    @disk_dn.setter
    def disk_dn(self, disk_dn):
        """Sets the disk_dn of this StoragePhysicalDiskExtensionAllOf.

        It shows the Physical drive Dn.    # noqa: E501

        :param disk_dn: The disk_dn of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501
        :type: str
        """

        self._disk_dn = disk_dn

    @property
    def disk_id(self):
        """Gets the disk_id of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501

        It shows storage Enclosure slotId.    # noqa: E501

        :return: The disk_id of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501
        :rtype: int
        """
        return self._disk_id

    @disk_id.setter
    def disk_id(self, disk_id):
        """Sets the disk_id of this StoragePhysicalDiskExtensionAllOf.

        It shows storage Enclosure slotId.    # noqa: E501

        :param disk_id: The disk_id of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501
        :type: int
        """

        self._disk_id = disk_id

    @property
    def disk_state(self):
        """Gets the disk_state of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501

        It shows the current drive state of disk.    # noqa: E501

        :return: The disk_state of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._disk_state

    @disk_state.setter
    def disk_state(self, disk_state):
        """Sets the disk_state of this StoragePhysicalDiskExtensionAllOf.

        It shows the current drive state of disk.    # noqa: E501

        :param disk_state: The disk_state of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501
        :type: str
        """

        self._disk_state = disk_state

    @property
    def health(self):
        """Gets the health of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501

        It shows the current drive state of disk.     # noqa: E501

        :return: The health of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this StoragePhysicalDiskExtensionAllOf.

        It shows the current drive state of disk.     # noqa: E501

        :param health: The health of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501
        :type: str
        """

        self._health = health

    @property
    def physical_disk(self):
        """Gets the physical_disk of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501


        :return: The physical_disk of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501
        :rtype: StoragePhysicalDisk
        """
        return self._physical_disk

    @physical_disk.setter
    def physical_disk(self, physical_disk):
        """Sets the physical_disk of this StoragePhysicalDiskExtensionAllOf.


        :param physical_disk: The physical_disk of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501
        :type: StoragePhysicalDisk
        """

        self._physical_disk = physical_disk

    @property
    def registered_device(self):
        """Gets the registered_device of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501


        :return: The registered_device of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this StoragePhysicalDiskExtensionAllOf.


        :param registered_device: The registered_device of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    @property
    def storage_controller(self):
        """Gets the storage_controller of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501


        :return: The storage_controller of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501
        :rtype: StorageController
        """
        return self._storage_controller

    @storage_controller.setter
    def storage_controller(self, storage_controller):
        """Sets the storage_controller of this StoragePhysicalDiskExtensionAllOf.


        :param storage_controller: The storage_controller of this StoragePhysicalDiskExtensionAllOf.  # noqa: E501
        :type: StorageController
        """

        self._storage_controller = storage_controller

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoragePhysicalDiskExtensionAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StoragePhysicalDiskExtensionAllOf):
            return True

        return self.to_dict() != other.to_dict()
