# coding: utf-8

"""
    UCS Starship API

    This is the UCS Starship REST API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PolicyConfigResultEntry(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'PolicyConfigResultContext',
        'message': 'str',
        'message_params': 'object',
        'owner_id': 'str',
        'state': 'str',
        'type': 'str'
    }

    attribute_map = {
        'context': 'Context',
        'message': 'Message',
        'message_params': 'MessageParams',
        'owner_id': 'OwnerId',
        'state': 'State',
        'type': 'Type'
    }

    def __init__(self, context=None, message=None, message_params=None, owner_id=None, state=None, type=None):
        """
        PolicyConfigResultEntry - a model defined in Swagger
        """

        self._context = None
        self._message = None
        self._message_params = None
        self._owner_id = None
        self._state = None
        self._type = None

        if context is not None:
          self.context = context
        if message is not None:
          self.message = message
        if message_params is not None:
          self.message_params = message_params
        if owner_id is not None:
          self.owner_id = owner_id
        if state is not None:
          self.state = state
        if type is not None:
          self.type = type

    @property
    def context(self):
        """
        Gets the context of this PolicyConfigResultEntry.

        :return: The context of this PolicyConfigResultEntry.
        :rtype: PolicyConfigResultContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """
        Sets the context of this PolicyConfigResultEntry.

        :param context: The context of this PolicyConfigResultEntry.
        :type: PolicyConfigResultContext
        """

        self._context = context

    @property
    def message(self):
        """
        Gets the message of this PolicyConfigResultEntry.

        :return: The message of this PolicyConfigResultEntry.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this PolicyConfigResultEntry.

        :param message: The message of this PolicyConfigResultEntry.
        :type: str
        """

        self._message = message

    @property
    def message_params(self):
        """
        Gets the message_params of this PolicyConfigResultEntry.
        Values for parameterized message. Need to be in json format to cover different parameter order for localized message.  

        :return: The message_params of this PolicyConfigResultEntry.
        :rtype: object
        """
        return self._message_params

    @message_params.setter
    def message_params(self, message_params):
        """
        Sets the message_params of this PolicyConfigResultEntry.
        Values for parameterized message. Need to be in json format to cover different parameter order for localized message.  

        :param message_params: The message_params of this PolicyConfigResultEntry.
        :type: object
        """

        self._message_params = message_params

    @property
    def owner_id(self):
        """
        Gets the owner_id of this PolicyConfigResultEntry.

        :return: The owner_id of this PolicyConfigResultEntry.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """
        Sets the owner_id of this PolicyConfigResultEntry.

        :param owner_id: The owner_id of this PolicyConfigResultEntry.
        :type: str
        """

        self._owner_id = owner_id

    @property
    def state(self):
        """
        Gets the state of this PolicyConfigResultEntry.
        Values  -- ok, ok-with-warning, errored  

        :return: The state of this PolicyConfigResultEntry.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this PolicyConfigResultEntry.
        Values  -- ok, ok-with-warning, errored  

        :param state: The state of this PolicyConfigResultEntry.
        :type: str
        """

        self._state = state

    @property
    def type(self):
        """
        Gets the type of this PolicyConfigResultEntry.
        Indicates if the result is reported during the logical model validation/resource allocation phase or the configuration applying phase. Values -- validation, config   

        :return: The type of this PolicyConfigResultEntry.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this PolicyConfigResultEntry.
        Indicates if the result is reported during the logical model validation/resource allocation phase or the configuration applying phase. Values -- validation, config   

        :param type: The type of this PolicyConfigResultEntry.
        :type: str
        """

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PolicyConfigResultEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
