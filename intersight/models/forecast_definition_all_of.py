# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ForecastDefinitionAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alert_threshold_in_percentage': 'int',
        'data_source': 'str',
        'metric_name': 'str',
        'min_num_of_days_of_data': 'int',
        'num_of_days_of_historical_data': 'int',
        'platform_type': 'str',
        'catalog': 'ForecastCatalog'
    }

    attribute_map = {
        'alert_threshold_in_percentage': 'AlertThresholdInPercentage',
        'data_source': 'DataSource',
        'metric_name': 'MetricName',
        'min_num_of_days_of_data': 'MinNumOfDaysOfData',
        'num_of_days_of_historical_data': 'NumOfDaysOfHistoricalData',
        'platform_type': 'PlatformType',
        'catalog': 'Catalog'
    }

    def __init__(self,
                 alert_threshold_in_percentage=None,
                 data_source=None,
                 metric_name=None,
                 min_num_of_days_of_data=None,
                 num_of_days_of_historical_data=None,
                 platform_type=None,
                 catalog=None,
                 local_vars_configuration=None):  # noqa: E501
        """ForecastDefinitionAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._alert_threshold_in_percentage = None
        self._data_source = None
        self._metric_name = None
        self._min_num_of_days_of_data = None
        self._num_of_days_of_historical_data = None
        self._platform_type = None
        self._catalog = None
        self.discriminator = None

        if alert_threshold_in_percentage is not None:
            self.alert_threshold_in_percentage = alert_threshold_in_percentage
        if data_source is not None:
            self.data_source = data_source
        if metric_name is not None:
            self.metric_name = metric_name
        if min_num_of_days_of_data is not None:
            self.min_num_of_days_of_data = min_num_of_days_of_data
        if num_of_days_of_historical_data is not None:
            self.num_of_days_of_historical_data = num_of_days_of_historical_data
        if platform_type is not None:
            self.platform_type = platform_type
        if catalog is not None:
            self.catalog = catalog

    @property
    def alert_threshold_in_percentage(self):
        """Gets the alert_threshold_in_percentage of this ForecastDefinitionAllOf.  # noqa: E501

        Threshold above which user needs to be indicated through alarm/alert.    # noqa: E501

        :return: The alert_threshold_in_percentage of this ForecastDefinitionAllOf.  # noqa: E501
        :rtype: int
        """
        return self._alert_threshold_in_percentage

    @alert_threshold_in_percentage.setter
    def alert_threshold_in_percentage(self, alert_threshold_in_percentage):
        """Sets the alert_threshold_in_percentage of this ForecastDefinitionAllOf.

        Threshold above which user needs to be indicated through alarm/alert.    # noqa: E501

        :param alert_threshold_in_percentage: The alert_threshold_in_percentage of this ForecastDefinitionAllOf.  # noqa: E501
        :type: int
        """

        self._alert_threshold_in_percentage = alert_threshold_in_percentage

    @property
    def data_source(self):
        """Gets the data_source of this ForecastDefinitionAllOf.  # noqa: E501

        Data source from where we get the data for the metrics to compute regression model. For example Druid.    # noqa: E501

        :return: The data_source of this ForecastDefinitionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this ForecastDefinitionAllOf.

        Data source from where we get the data for the metrics to compute regression model. For example Druid.    # noqa: E501

        :param data_source: The data_source of this ForecastDefinitionAllOf.  # noqa: E501
        :type: str
        """

        self._data_source = data_source

    @property
    def metric_name(self):
        """Gets the metric_name of this ForecastDefinitionAllOf.  # noqa: E501

        Metric for which forecast prediction is done. Metrics are defined in the catalog file. Currently its only HyperFlex cluster storage capacity usage.    # noqa: E501

        :return: The metric_name of this ForecastDefinitionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this ForecastDefinitionAllOf.

        Metric for which forecast prediction is done. Metrics are defined in the catalog file. Currently its only HyperFlex cluster storage capacity usage.    # noqa: E501

        :param metric_name: The metric_name of this ForecastDefinitionAllOf.  # noqa: E501
        :type: str
        """

        self._metric_name = metric_name

    @property
    def min_num_of_days_of_data(self):
        """Gets the min_num_of_days_of_data of this ForecastDefinitionAllOf.  # noqa: E501

        Minimum number of days of data required for computing forecast model.    # noqa: E501

        :return: The min_num_of_days_of_data of this ForecastDefinitionAllOf.  # noqa: E501
        :rtype: int
        """
        return self._min_num_of_days_of_data

    @min_num_of_days_of_data.setter
    def min_num_of_days_of_data(self, min_num_of_days_of_data):
        """Sets the min_num_of_days_of_data of this ForecastDefinitionAllOf.

        Minimum number of days of data required for computing forecast model.    # noqa: E501

        :param min_num_of_days_of_data: The min_num_of_days_of_data of this ForecastDefinitionAllOf.  # noqa: E501
        :type: int
        """

        self._min_num_of_days_of_data = min_num_of_days_of_data

    @property
    def num_of_days_of_historical_data(self):
        """Gets the num_of_days_of_historical_data of this ForecastDefinitionAllOf.  # noqa: E501

        Number of days of data queried from the data source (example Druid ) which is used as input data for computing forecast model.    # noqa: E501

        :return: The num_of_days_of_historical_data of this ForecastDefinitionAllOf.  # noqa: E501
        :rtype: int
        """
        return self._num_of_days_of_historical_data

    @num_of_days_of_historical_data.setter
    def num_of_days_of_historical_data(self, num_of_days_of_historical_data):
        """Sets the num_of_days_of_historical_data of this ForecastDefinitionAllOf.

        Number of days of data queried from the data source (example Druid ) which is used as input data for computing forecast model.    # noqa: E501

        :param num_of_days_of_historical_data: The num_of_days_of_historical_data of this ForecastDefinitionAllOf.  # noqa: E501
        :type: int
        """

        self._num_of_days_of_historical_data = num_of_days_of_historical_data

    @property
    def platform_type(self):
        """Gets the platform_type of this ForecastDefinitionAllOf.  # noqa: E501

        The platform type for which we want to compute forecast. For example HyperFlex, NetworkElement.     # noqa: E501

        :return: The platform_type of this ForecastDefinitionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._platform_type

    @platform_type.setter
    def platform_type(self, platform_type):
        """Sets the platform_type of this ForecastDefinitionAllOf.

        The platform type for which we want to compute forecast. For example HyperFlex, NetworkElement.     # noqa: E501

        :param platform_type: The platform_type of this ForecastDefinitionAllOf.  # noqa: E501
        :type: str
        """

        self._platform_type = platform_type

    @property
    def catalog(self):
        """Gets the catalog of this ForecastDefinitionAllOf.  # noqa: E501


        :return: The catalog of this ForecastDefinitionAllOf.  # noqa: E501
        :rtype: ForecastCatalog
        """
        return self._catalog

    @catalog.setter
    def catalog(self, catalog):
        """Sets the catalog of this ForecastDefinitionAllOf.


        :param catalog: The catalog of this ForecastDefinitionAllOf.  # noqa: E501
        :type: ForecastCatalog
        """

        self._catalog = catalog

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForecastDefinitionAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ForecastDefinitionAllOf):
            return True

        return self.to_dict() != other.to_dict()
