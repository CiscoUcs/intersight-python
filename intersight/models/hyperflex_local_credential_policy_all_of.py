# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class HyperflexLocalCredentialPolicyAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'factory_hypervisor_password': 'bool',
        'is_hxdp_root_pwd_set': 'bool',
        'hxdp_root_pwd': 'str',
        'hypervisor_admin': 'str',
        'is_hypervisor_admin_pwd_set': 'bool',
        'hypervisor_admin_pwd': 'str',
        'cluster_profiles': 'list[HyperflexClusterProfile]',
        'organization': 'OrganizationOrganization'
    }

    attribute_map = {
        'factory_hypervisor_password': 'FactoryHypervisorPassword',
        'is_hxdp_root_pwd_set': 'IsHxdpRootPwdSet',
        'hxdp_root_pwd': 'HxdpRootPwd',
        'hypervisor_admin': 'HypervisorAdmin',
        'is_hypervisor_admin_pwd_set': 'IsHypervisorAdminPwdSet',
        'hypervisor_admin_pwd': 'HypervisorAdminPwd',
        'cluster_profiles': 'ClusterProfiles',
        'organization': 'Organization'
    }

    def __init__(self,
                 factory_hypervisor_password=None,
                 is_hxdp_root_pwd_set=None,
                 hxdp_root_pwd=None,
                 hypervisor_admin=None,
                 is_hypervisor_admin_pwd_set=None,
                 hypervisor_admin_pwd=None,
                 cluster_profiles=None,
                 organization=None,
                 local_vars_configuration=None):  # noqa: E501
        """HyperflexLocalCredentialPolicyAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._factory_hypervisor_password = None
        self._is_hxdp_root_pwd_set = None
        self._hxdp_root_pwd = None
        self._hypervisor_admin = None
        self._is_hypervisor_admin_pwd_set = None
        self._hypervisor_admin_pwd = None
        self._cluster_profiles = None
        self._organization = None
        self.discriminator = None

        if factory_hypervisor_password is not None:
            self.factory_hypervisor_password = factory_hypervisor_password
        if is_hxdp_root_pwd_set is not None:
            self.is_hxdp_root_pwd_set = is_hxdp_root_pwd_set
        if hxdp_root_pwd is not None:
            self.hxdp_root_pwd = hxdp_root_pwd
        if hypervisor_admin is not None:
            self.hypervisor_admin = hypervisor_admin
        if is_hypervisor_admin_pwd_set is not None:
            self.is_hypervisor_admin_pwd_set = is_hypervisor_admin_pwd_set
        if hypervisor_admin_pwd is not None:
            self.hypervisor_admin_pwd = hypervisor_admin_pwd
        if cluster_profiles is not None:
            self.cluster_profiles = cluster_profiles
        if organization is not None:
            self.organization = organization

    @property
    def factory_hypervisor_password(self):
        """Gets the factory_hypervisor_password of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501

        Indicates if Hypervisor password is the factory set default password. For HyperFlex Data Platform versions 3.0 or higher, enable this if the default password was not changed on the Hypervisor. It is required to supply a new custom Hypervisor password that will be applied to the Hypervisor during deployment. For HyperFlex Data Platform versions prior to 3.0 release, this setting has no effect and the default password will be used for initial install. The Hypervisor password should be changed after deployment.    # noqa: E501

        :return: The factory_hypervisor_password of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._factory_hypervisor_password

    @factory_hypervisor_password.setter
    def factory_hypervisor_password(self, factory_hypervisor_password):
        """Sets the factory_hypervisor_password of this HyperflexLocalCredentialPolicyAllOf.

        Indicates if Hypervisor password is the factory set default password. For HyperFlex Data Platform versions 3.0 or higher, enable this if the default password was not changed on the Hypervisor. It is required to supply a new custom Hypervisor password that will be applied to the Hypervisor during deployment. For HyperFlex Data Platform versions prior to 3.0 release, this setting has no effect and the default password will be used for initial install. The Hypervisor password should be changed after deployment.    # noqa: E501

        :param factory_hypervisor_password: The factory_hypervisor_password of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501
        :type: bool
        """

        self._factory_hypervisor_password = factory_hypervisor_password

    @property
    def is_hxdp_root_pwd_set(self):
        """Gets the is_hxdp_root_pwd_set of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501

        Indicates whether the value of the 'hxdpRootPwd' property has been set.    # noqa: E501

        :return: The is_hxdp_root_pwd_set of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_hxdp_root_pwd_set

    @is_hxdp_root_pwd_set.setter
    def is_hxdp_root_pwd_set(self, is_hxdp_root_pwd_set):
        """Sets the is_hxdp_root_pwd_set of this HyperflexLocalCredentialPolicyAllOf.

        Indicates whether the value of the 'hxdpRootPwd' property has been set.    # noqa: E501

        :param is_hxdp_root_pwd_set: The is_hxdp_root_pwd_set of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501
        :type: bool
        """

        self._is_hxdp_root_pwd_set = is_hxdp_root_pwd_set

    @property
    def hxdp_root_pwd(self):
        """Gets the hxdp_root_pwd of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501

        HyperFlex storage controller VM password must contain a minimum of 10 characters, with at least 1 lowercase, 1 uppercase, 1 numeric, and 1 of these -_@#$%^&*! special characters.    # noqa: E501

        :return: The hxdp_root_pwd of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._hxdp_root_pwd

    @hxdp_root_pwd.setter
    def hxdp_root_pwd(self, hxdp_root_pwd):
        """Sets the hxdp_root_pwd of this HyperflexLocalCredentialPolicyAllOf.

        HyperFlex storage controller VM password must contain a minimum of 10 characters, with at least 1 lowercase, 1 uppercase, 1 numeric, and 1 of these -_@#$%^&*! special characters.    # noqa: E501

        :param hxdp_root_pwd: The hxdp_root_pwd of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501
        :type: str
        """

        self._hxdp_root_pwd = hxdp_root_pwd

    @property
    def hypervisor_admin(self):
        """Gets the hypervisor_admin of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501

        Hypervisor administrator username must contain only alphanumeric characters. Use the root account for ESXi deployments.    # noqa: E501

        :return: The hypervisor_admin of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._hypervisor_admin

    @hypervisor_admin.setter
    def hypervisor_admin(self, hypervisor_admin):
        """Sets the hypervisor_admin of this HyperflexLocalCredentialPolicyAllOf.

        Hypervisor administrator username must contain only alphanumeric characters. Use the root account for ESXi deployments.    # noqa: E501

        :param hypervisor_admin: The hypervisor_admin of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501
        :type: str
        """

        self._hypervisor_admin = hypervisor_admin

    @property
    def is_hypervisor_admin_pwd_set(self):
        """Gets the is_hypervisor_admin_pwd_set of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501

        Indicates whether the value of the 'hypervisorAdminPwd' property has been set.     # noqa: E501

        :return: The is_hypervisor_admin_pwd_set of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_hypervisor_admin_pwd_set

    @is_hypervisor_admin_pwd_set.setter
    def is_hypervisor_admin_pwd_set(self, is_hypervisor_admin_pwd_set):
        """Sets the is_hypervisor_admin_pwd_set of this HyperflexLocalCredentialPolicyAllOf.

        Indicates whether the value of the 'hypervisorAdminPwd' property has been set.     # noqa: E501

        :param is_hypervisor_admin_pwd_set: The is_hypervisor_admin_pwd_set of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501
        :type: bool
        """

        self._is_hypervisor_admin_pwd_set = is_hypervisor_admin_pwd_set

    @property
    def hypervisor_admin_pwd(self):
        """Gets the hypervisor_admin_pwd of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501

        The ESXi root password. For HyperFlex Data Platform 3.0 or later, if the factory default password was not manually changed, you must set a new custom password. If the password was manually changed, you must not enable the factory default password property and provide the current hypervisor password. Note - All HyperFlex nodes require the same hypervisor password for installation. For HyperFlex Data Platform prior to 3.0, use the default password \"Cisco123\" for newly manufactured HyperFlex servers. A custom password should only be entered if hypervisor credentials were manually changed prior to deployment.    # noqa: E501

        :return: The hypervisor_admin_pwd of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._hypervisor_admin_pwd

    @hypervisor_admin_pwd.setter
    def hypervisor_admin_pwd(self, hypervisor_admin_pwd):
        """Sets the hypervisor_admin_pwd of this HyperflexLocalCredentialPolicyAllOf.

        The ESXi root password. For HyperFlex Data Platform 3.0 or later, if the factory default password was not manually changed, you must set a new custom password. If the password was manually changed, you must not enable the factory default password property and provide the current hypervisor password. Note - All HyperFlex nodes require the same hypervisor password for installation. For HyperFlex Data Platform prior to 3.0, use the default password \"Cisco123\" for newly manufactured HyperFlex servers. A custom password should only be entered if hypervisor credentials were manually changed prior to deployment.    # noqa: E501

        :param hypervisor_admin_pwd: The hypervisor_admin_pwd of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501
        :type: str
        """

        self._hypervisor_admin_pwd = hypervisor_admin_pwd

    @property
    def cluster_profiles(self):
        """Gets the cluster_profiles of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501

        A reference to a hyperflexClusterProfile resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of cluster profiles using this policy.   # noqa: E501

        :return: The cluster_profiles of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501
        :rtype: list[HyperflexClusterProfile]
        """
        return self._cluster_profiles

    @cluster_profiles.setter
    def cluster_profiles(self, cluster_profiles):
        """Sets the cluster_profiles of this HyperflexLocalCredentialPolicyAllOf.

        A reference to a hyperflexClusterProfile resource. When the $expand query parameter is specified, the referenced resource is returned inline. List of cluster profiles using this policy.   # noqa: E501

        :param cluster_profiles: The cluster_profiles of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501
        :type: list[HyperflexClusterProfile]
        """

        self._cluster_profiles = cluster_profiles

    @property
    def organization(self):
        """Gets the organization of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501


        :return: The organization of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501
        :rtype: OrganizationOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this HyperflexLocalCredentialPolicyAllOf.


        :param organization: The organization of this HyperflexLocalCredentialPolicyAllOf.  # noqa: E501
        :type: OrganizationOrganization
        """

        self._organization = organization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HyperflexLocalCredentialPolicyAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HyperflexLocalCredentialPolicyAllOf):
            return True

        return self.to_dict() != other.to_dict()
