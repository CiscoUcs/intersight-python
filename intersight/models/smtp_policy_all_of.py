# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class SmtpPolicyAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enabled': 'bool',
        'min_severity': 'str',
        'sender_email': 'str',
        'smtp_port': 'int',
        'smtp_recipients': 'list[str]',
        'smtp_server': 'str',
        'organization': 'OrganizationOrganization',
        'profiles': 'list[PolicyAbstractConfigProfile]'
    }

    attribute_map = {
        'enabled': 'Enabled',
        'min_severity': 'MinSeverity',
        'sender_email': 'SenderEmail',
        'smtp_port': 'SmtpPort',
        'smtp_recipients': 'SmtpRecipients',
        'smtp_server': 'SmtpServer',
        'organization': 'Organization',
        'profiles': 'Profiles'
    }

    def __init__(self,
                 enabled=None,
                 min_severity='critical',
                 sender_email=None,
                 smtp_port=None,
                 smtp_recipients=None,
                 smtp_server=None,
                 organization=None,
                 profiles=None,
                 local_vars_configuration=None):  # noqa: E501
        """SmtpPolicyAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._enabled = None
        self._min_severity = None
        self._sender_email = None
        self._smtp_port = None
        self._smtp_recipients = None
        self._smtp_server = None
        self._organization = None
        self._profiles = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if min_severity is not None:
            self.min_severity = min_severity
        if sender_email is not None:
            self.sender_email = sender_email
        if smtp_port is not None:
            self.smtp_port = smtp_port
        if smtp_recipients is not None:
            self.smtp_recipients = smtp_recipients
        if smtp_server is not None:
            self.smtp_server = smtp_server
        if organization is not None:
            self.organization = organization
        if profiles is not None:
            self.profiles = profiles

    @property
    def enabled(self):
        """Gets the enabled of this SmtpPolicyAllOf.  # noqa: E501

        If enabled, controls the state of the SMTP client service on the managed device.    # noqa: E501

        :return: The enabled of this SmtpPolicyAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SmtpPolicyAllOf.

        If enabled, controls the state of the SMTP client service on the managed device.    # noqa: E501

        :param enabled: The enabled of this SmtpPolicyAllOf.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def min_severity(self):
        """Gets the min_severity of this SmtpPolicyAllOf.  # noqa: E501

        Minimum fault severity level to receive email notifications. Email notifications are sent for all faults whose severity is equal to or greater than the chosen level.    # noqa: E501

        :return: The min_severity of this SmtpPolicyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._min_severity

    @min_severity.setter
    def min_severity(self, min_severity):
        """Sets the min_severity of this SmtpPolicyAllOf.

        Minimum fault severity level to receive email notifications. Email notifications are sent for all faults whose severity is equal to or greater than the chosen level.    # noqa: E501

        :param min_severity: The min_severity of this SmtpPolicyAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "critical", "condition", "warning", "minor", "major"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and min_severity not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `min_severity` ({0}), must be one of {1}"  # noqa: E501
                .format(min_severity, allowed_values))

        self._min_severity = min_severity

    @property
    def sender_email(self):
        """Gets the sender_email of this SmtpPolicyAllOf.  # noqa: E501

        The email address entered here will be displayed as the from address (mail received from address) of all the SMTP mail alerts that are received. If not configured, the hostname of the server is used in the from address field.    # noqa: E501

        :return: The sender_email of this SmtpPolicyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._sender_email

    @sender_email.setter
    def sender_email(self, sender_email):
        """Sets the sender_email of this SmtpPolicyAllOf.

        The email address entered here will be displayed as the from address (mail received from address) of all the SMTP mail alerts that are received. If not configured, the hostname of the server is used in the from address field.    # noqa: E501

        :param sender_email: The sender_email of this SmtpPolicyAllOf.  # noqa: E501
        :type: str
        """

        self._sender_email = sender_email

    @property
    def smtp_port(self):
        """Gets the smtp_port of this SmtpPolicyAllOf.  # noqa: E501

        Port number used by the SMTP server for outgoing SMTP communication.    # noqa: E501

        :return: The smtp_port of this SmtpPolicyAllOf.  # noqa: E501
        :rtype: int
        """
        return self._smtp_port

    @smtp_port.setter
    def smtp_port(self, smtp_port):
        """Sets the smtp_port of this SmtpPolicyAllOf.

        Port number used by the SMTP server for outgoing SMTP communication.    # noqa: E501

        :param smtp_port: The smtp_port of this SmtpPolicyAllOf.  # noqa: E501
        :type: int
        """

        self._smtp_port = smtp_port

    @property
    def smtp_recipients(self):
        """Gets the smtp_recipients of this SmtpPolicyAllOf.  # noqa: E501


        :return: The smtp_recipients of this SmtpPolicyAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._smtp_recipients

    @smtp_recipients.setter
    def smtp_recipients(self, smtp_recipients):
        """Sets the smtp_recipients of this SmtpPolicyAllOf.


        :param smtp_recipients: The smtp_recipients of this SmtpPolicyAllOf.  # noqa: E501
        :type: list[str]
        """

        self._smtp_recipients = smtp_recipients

    @property
    def smtp_server(self):
        """Gets the smtp_server of this SmtpPolicyAllOf.  # noqa: E501

        IP address or hostname of the SMTP server. The SMTP server is used by the managed device to send email notifications.     # noqa: E501

        :return: The smtp_server of this SmtpPolicyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._smtp_server

    @smtp_server.setter
    def smtp_server(self, smtp_server):
        """Sets the smtp_server of this SmtpPolicyAllOf.

        IP address or hostname of the SMTP server. The SMTP server is used by the managed device to send email notifications.     # noqa: E501

        :param smtp_server: The smtp_server of this SmtpPolicyAllOf.  # noqa: E501
        :type: str
        """

        self._smtp_server = smtp_server

    @property
    def organization(self):
        """Gets the organization of this SmtpPolicyAllOf.  # noqa: E501


        :return: The organization of this SmtpPolicyAllOf.  # noqa: E501
        :rtype: OrganizationOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this SmtpPolicyAllOf.


        :param organization: The organization of this SmtpPolicyAllOf.  # noqa: E501
        :type: OrganizationOrganization
        """

        self._organization = organization

    @property
    def profiles(self):
        """Gets the profiles of this SmtpPolicyAllOf.  # noqa: E501

        A reference to a policyAbstractConfigProfile resource. When the $expand query parameter is specified, the referenced resource is returned inline. Relationship to the profile object.   # noqa: E501

        :return: The profiles of this SmtpPolicyAllOf.  # noqa: E501
        :rtype: list[PolicyAbstractConfigProfile]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this SmtpPolicyAllOf.

        A reference to a policyAbstractConfigProfile resource. When the $expand query parameter is specified, the referenced resource is returned inline. Relationship to the profile object.   # noqa: E501

        :param profiles: The profiles of this SmtpPolicyAllOf.  # noqa: E501
        :type: list[PolicyAbstractConfigProfile]
        """

        self._profiles = profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmtpPolicyAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SmtpPolicyAllOf):
            return True

        return self.to_dict() != other.to_dict()
