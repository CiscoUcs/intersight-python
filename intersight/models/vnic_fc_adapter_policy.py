# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class VnicFcAdapterPolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'error_detection_timeout': 'int',
        'error_recovery_settings': 'VnicFcErrorRecoverySettings',
        'flogi_settings': 'VnicFlogiSettings',
        'interrupt_settings': 'VnicFcInterruptSettings',
        'io_throttle_count': 'int',
        'lun_count': 'int',
        'lun_queue_depth': 'int',
        'plogi_settings': 'VnicPlogiSettings',
        'resource_allocation_timeout': 'int',
        'rx_queue_settings': 'VnicFcQueueSettings',
        'scsi_queue_settings': 'VnicScsiQueueSettings',
        'tx_queue_settings': 'VnicFcQueueSettings',
        'organization': 'OrganizationOrganization'
    }

    attribute_map = {
        'error_detection_timeout': 'ErrorDetectionTimeout',
        'error_recovery_settings': 'ErrorRecoverySettings',
        'flogi_settings': 'FlogiSettings',
        'interrupt_settings': 'InterruptSettings',
        'io_throttle_count': 'IoThrottleCount',
        'lun_count': 'LunCount',
        'lun_queue_depth': 'LunQueueDepth',
        'plogi_settings': 'PlogiSettings',
        'resource_allocation_timeout': 'ResourceAllocationTimeout',
        'rx_queue_settings': 'RxQueueSettings',
        'scsi_queue_settings': 'ScsiQueueSettings',
        'tx_queue_settings': 'TxQueueSettings',
        'organization': 'Organization'
    }

    def __init__(self,
                 error_detection_timeout=None,
                 error_recovery_settings=None,
                 flogi_settings=None,
                 interrupt_settings=None,
                 io_throttle_count=None,
                 lun_count=None,
                 lun_queue_depth=None,
                 plogi_settings=None,
                 resource_allocation_timeout=None,
                 rx_queue_settings=None,
                 scsi_queue_settings=None,
                 tx_queue_settings=None,
                 organization=None,
                 local_vars_configuration=None):  # noqa: E501
        """VnicFcAdapterPolicy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._error_detection_timeout = None
        self._error_recovery_settings = None
        self._flogi_settings = None
        self._interrupt_settings = None
        self._io_throttle_count = None
        self._lun_count = None
        self._lun_queue_depth = None
        self._plogi_settings = None
        self._resource_allocation_timeout = None
        self._rx_queue_settings = None
        self._scsi_queue_settings = None
        self._tx_queue_settings = None
        self._organization = None
        self.discriminator = None

        if error_detection_timeout is not None:
            self.error_detection_timeout = error_detection_timeout
        if error_recovery_settings is not None:
            self.error_recovery_settings = error_recovery_settings
        if flogi_settings is not None:
            self.flogi_settings = flogi_settings
        if interrupt_settings is not None:
            self.interrupt_settings = interrupt_settings
        if io_throttle_count is not None:
            self.io_throttle_count = io_throttle_count
        if lun_count is not None:
            self.lun_count = lun_count
        if lun_queue_depth is not None:
            self.lun_queue_depth = lun_queue_depth
        if plogi_settings is not None:
            self.plogi_settings = plogi_settings
        if resource_allocation_timeout is not None:
            self.resource_allocation_timeout = resource_allocation_timeout
        if rx_queue_settings is not None:
            self.rx_queue_settings = rx_queue_settings
        if scsi_queue_settings is not None:
            self.scsi_queue_settings = scsi_queue_settings
        if tx_queue_settings is not None:
            self.tx_queue_settings = tx_queue_settings
        if organization is not None:
            self.organization = organization

    @property
    def error_detection_timeout(self):
        """Gets the error_detection_timeout of this VnicFcAdapterPolicy.  # noqa: E501

        Error Detection Timeout, also referred to as EDTOV, is the number of milliseconds to wait before the system assumes that an error has occurred.    # noqa: E501

        :return: The error_detection_timeout of this VnicFcAdapterPolicy.  # noqa: E501
        :rtype: int
        """
        return self._error_detection_timeout

    @error_detection_timeout.setter
    def error_detection_timeout(self, error_detection_timeout):
        """Sets the error_detection_timeout of this VnicFcAdapterPolicy.

        Error Detection Timeout, also referred to as EDTOV, is the number of milliseconds to wait before the system assumes that an error has occurred.    # noqa: E501

        :param error_detection_timeout: The error_detection_timeout of this VnicFcAdapterPolicy.  # noqa: E501
        :type: int
        """

        self._error_detection_timeout = error_detection_timeout

    @property
    def error_recovery_settings(self):
        """Gets the error_recovery_settings of this VnicFcAdapterPolicy.  # noqa: E501


        :return: The error_recovery_settings of this VnicFcAdapterPolicy.  # noqa: E501
        :rtype: VnicFcErrorRecoverySettings
        """
        return self._error_recovery_settings

    @error_recovery_settings.setter
    def error_recovery_settings(self, error_recovery_settings):
        """Sets the error_recovery_settings of this VnicFcAdapterPolicy.


        :param error_recovery_settings: The error_recovery_settings of this VnicFcAdapterPolicy.  # noqa: E501
        :type: VnicFcErrorRecoverySettings
        """

        self._error_recovery_settings = error_recovery_settings

    @property
    def flogi_settings(self):
        """Gets the flogi_settings of this VnicFcAdapterPolicy.  # noqa: E501


        :return: The flogi_settings of this VnicFcAdapterPolicy.  # noqa: E501
        :rtype: VnicFlogiSettings
        """
        return self._flogi_settings

    @flogi_settings.setter
    def flogi_settings(self, flogi_settings):
        """Sets the flogi_settings of this VnicFcAdapterPolicy.


        :param flogi_settings: The flogi_settings of this VnicFcAdapterPolicy.  # noqa: E501
        :type: VnicFlogiSettings
        """

        self._flogi_settings = flogi_settings

    @property
    def interrupt_settings(self):
        """Gets the interrupt_settings of this VnicFcAdapterPolicy.  # noqa: E501


        :return: The interrupt_settings of this VnicFcAdapterPolicy.  # noqa: E501
        :rtype: VnicFcInterruptSettings
        """
        return self._interrupt_settings

    @interrupt_settings.setter
    def interrupt_settings(self, interrupt_settings):
        """Sets the interrupt_settings of this VnicFcAdapterPolicy.


        :param interrupt_settings: The interrupt_settings of this VnicFcAdapterPolicy.  # noqa: E501
        :type: VnicFcInterruptSettings
        """

        self._interrupt_settings = interrupt_settings

    @property
    def io_throttle_count(self):
        """Gets the io_throttle_count of this VnicFcAdapterPolicy.  # noqa: E501

        The maximum number of data or control I/O operations that can be pending for the virtual interface at one time. If this value is exceeded, the additional I/O operations wait in the queue until the number of pending I/O operations decreases and the additional operations can be processed.    # noqa: E501

        :return: The io_throttle_count of this VnicFcAdapterPolicy.  # noqa: E501
        :rtype: int
        """
        return self._io_throttle_count

    @io_throttle_count.setter
    def io_throttle_count(self, io_throttle_count):
        """Sets the io_throttle_count of this VnicFcAdapterPolicy.

        The maximum number of data or control I/O operations that can be pending for the virtual interface at one time. If this value is exceeded, the additional I/O operations wait in the queue until the number of pending I/O operations decreases and the additional operations can be processed.    # noqa: E501

        :param io_throttle_count: The io_throttle_count of this VnicFcAdapterPolicy.  # noqa: E501
        :type: int
        """

        self._io_throttle_count = io_throttle_count

    @property
    def lun_count(self):
        """Gets the lun_count of this VnicFcAdapterPolicy.  # noqa: E501

        The maximum number of LUNs that the Fibre Channel driver will export or show. The maximum number of LUNs is usually controlled by the operating system running on the server.    # noqa: E501

        :return: The lun_count of this VnicFcAdapterPolicy.  # noqa: E501
        :rtype: int
        """
        return self._lun_count

    @lun_count.setter
    def lun_count(self, lun_count):
        """Sets the lun_count of this VnicFcAdapterPolicy.

        The maximum number of LUNs that the Fibre Channel driver will export or show. The maximum number of LUNs is usually controlled by the operating system running on the server.    # noqa: E501

        :param lun_count: The lun_count of this VnicFcAdapterPolicy.  # noqa: E501
        :type: int
        """

        self._lun_count = lun_count

    @property
    def lun_queue_depth(self):
        """Gets the lun_queue_depth of this VnicFcAdapterPolicy.  # noqa: E501

        The number of commands that the HBA can send and receive in a single transmission per LUN.    # noqa: E501

        :return: The lun_queue_depth of this VnicFcAdapterPolicy.  # noqa: E501
        :rtype: int
        """
        return self._lun_queue_depth

    @lun_queue_depth.setter
    def lun_queue_depth(self, lun_queue_depth):
        """Sets the lun_queue_depth of this VnicFcAdapterPolicy.

        The number of commands that the HBA can send and receive in a single transmission per LUN.    # noqa: E501

        :param lun_queue_depth: The lun_queue_depth of this VnicFcAdapterPolicy.  # noqa: E501
        :type: int
        """

        self._lun_queue_depth = lun_queue_depth

    @property
    def plogi_settings(self):
        """Gets the plogi_settings of this VnicFcAdapterPolicy.  # noqa: E501


        :return: The plogi_settings of this VnicFcAdapterPolicy.  # noqa: E501
        :rtype: VnicPlogiSettings
        """
        return self._plogi_settings

    @plogi_settings.setter
    def plogi_settings(self, plogi_settings):
        """Sets the plogi_settings of this VnicFcAdapterPolicy.


        :param plogi_settings: The plogi_settings of this VnicFcAdapterPolicy.  # noqa: E501
        :type: VnicPlogiSettings
        """

        self._plogi_settings = plogi_settings

    @property
    def resource_allocation_timeout(self):
        """Gets the resource_allocation_timeout of this VnicFcAdapterPolicy.  # noqa: E501

        Resource Allocation Timeout, also referred to as RATOV, is the number of milliseconds to wait before the system assumes that a resource cannot be properly allocated.    # noqa: E501

        :return: The resource_allocation_timeout of this VnicFcAdapterPolicy.  # noqa: E501
        :rtype: int
        """
        return self._resource_allocation_timeout

    @resource_allocation_timeout.setter
    def resource_allocation_timeout(self, resource_allocation_timeout):
        """Sets the resource_allocation_timeout of this VnicFcAdapterPolicy.

        Resource Allocation Timeout, also referred to as RATOV, is the number of milliseconds to wait before the system assumes that a resource cannot be properly allocated.    # noqa: E501

        :param resource_allocation_timeout: The resource_allocation_timeout of this VnicFcAdapterPolicy.  # noqa: E501
        :type: int
        """

        self._resource_allocation_timeout = resource_allocation_timeout

    @property
    def rx_queue_settings(self):
        """Gets the rx_queue_settings of this VnicFcAdapterPolicy.  # noqa: E501


        :return: The rx_queue_settings of this VnicFcAdapterPolicy.  # noqa: E501
        :rtype: VnicFcQueueSettings
        """
        return self._rx_queue_settings

    @rx_queue_settings.setter
    def rx_queue_settings(self, rx_queue_settings):
        """Sets the rx_queue_settings of this VnicFcAdapterPolicy.


        :param rx_queue_settings: The rx_queue_settings of this VnicFcAdapterPolicy.  # noqa: E501
        :type: VnicFcQueueSettings
        """

        self._rx_queue_settings = rx_queue_settings

    @property
    def scsi_queue_settings(self):
        """Gets the scsi_queue_settings of this VnicFcAdapterPolicy.  # noqa: E501


        :return: The scsi_queue_settings of this VnicFcAdapterPolicy.  # noqa: E501
        :rtype: VnicScsiQueueSettings
        """
        return self._scsi_queue_settings

    @scsi_queue_settings.setter
    def scsi_queue_settings(self, scsi_queue_settings):
        """Sets the scsi_queue_settings of this VnicFcAdapterPolicy.


        :param scsi_queue_settings: The scsi_queue_settings of this VnicFcAdapterPolicy.  # noqa: E501
        :type: VnicScsiQueueSettings
        """

        self._scsi_queue_settings = scsi_queue_settings

    @property
    def tx_queue_settings(self):
        """Gets the tx_queue_settings of this VnicFcAdapterPolicy.  # noqa: E501


        :return: The tx_queue_settings of this VnicFcAdapterPolicy.  # noqa: E501
        :rtype: VnicFcQueueSettings
        """
        return self._tx_queue_settings

    @tx_queue_settings.setter
    def tx_queue_settings(self, tx_queue_settings):
        """Sets the tx_queue_settings of this VnicFcAdapterPolicy.


        :param tx_queue_settings: The tx_queue_settings of this VnicFcAdapterPolicy.  # noqa: E501
        :type: VnicFcQueueSettings
        """

        self._tx_queue_settings = tx_queue_settings

    @property
    def organization(self):
        """Gets the organization of this VnicFcAdapterPolicy.  # noqa: E501


        :return: The organization of this VnicFcAdapterPolicy.  # noqa: E501
        :rtype: OrganizationOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this VnicFcAdapterPolicy.


        :param organization: The organization of this VnicFcAdapterPolicy.  # noqa: E501
        :type: OrganizationOrganization
        """

        self._organization = organization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VnicFcAdapterPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VnicFcAdapterPolicy):
            return True

        return self.to_dict() != other.to_dict()
