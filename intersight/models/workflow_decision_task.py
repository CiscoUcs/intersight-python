# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1295
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorkflowDecisionTask(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'description': 'str',
        'label': 'str',
        'name': 'str',
        'condition': 'str',
        'decision_cases': 'list[WorkflowDecisionCase]',
        'default_task': 'str',
        'input_parameters': 'object'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'description': 'Description',
        'label': 'Label',
        'name': 'Name',
        'condition': 'Condition',
        'decision_cases': 'DecisionCases',
        'default_task': 'DefaultTask',
        'input_parameters': 'InputParameters'
    }

    def __init__(self, object_type=None, description=None, label=None, name=None, condition=None, decision_cases=None, default_task=None, input_parameters=None):
        """
        WorkflowDecisionTask - a model defined in Swagger
        """

        self._object_type = None
        self._description = None
        self._label = None
        self._name = None
        self._condition = None
        self._decision_cases = None
        self._default_task = None
        self._input_parameters = None

        if object_type is not None:
          self.object_type = object_type
        if description is not None:
          self.description = description
        if label is not None:
          self.label = label
        if name is not None:
          self.name = name
        if condition is not None:
          self.condition = condition
        if decision_cases is not None:
          self.decision_cases = decision_cases
        if default_task is not None:
          self.default_task = default_task
        if input_parameters is not None:
          self.input_parameters = input_parameters

    @property
    def object_type(self):
        """
        Gets the object_type of this WorkflowDecisionTask.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :return: The object_type of this WorkflowDecisionTask.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this WorkflowDecisionTask.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :param object_type: The object_type of this WorkflowDecisionTask.
        :type: str
        """

        self._object_type = object_type

    @property
    def description(self):
        """
        Gets the description of this WorkflowDecisionTask.
        The description of this task instance in the workflow.  

        :return: The description of this WorkflowDecisionTask.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this WorkflowDecisionTask.
        The description of this task instance in the workflow.  

        :param description: The description of this WorkflowDecisionTask.
        :type: str
        """

        self._description = description

    @property
    def label(self):
        """
        Gets the label of this WorkflowDecisionTask.
        A user defined label identifier of the workflow task used for UI display.  

        :return: The label of this WorkflowDecisionTask.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this WorkflowDecisionTask.
        A user defined label identifier of the workflow task used for UI display.  

        :param label: The label of this WorkflowDecisionTask.
        :type: str
        """

        self._label = label

    @property
    def name(self):
        """
        Gets the name of this WorkflowDecisionTask.
        The name of the task within the workflow and it must be unique among all WorkflowTasks within a workflow definition. This name serves as the internal unique identifier for the task and is used to pick input and output parameters to feed into other tasks.   

        :return: The name of this WorkflowDecisionTask.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WorkflowDecisionTask.
        The name of the task within the workflow and it must be unique among all WorkflowTasks within a workflow definition. This name serves as the internal unique identifier for the task and is used to pick input and output parameters to feed into other tasks.   

        :param name: The name of this WorkflowDecisionTask.
        :type: str
        """

        self._name = name

    @property
    def condition(self):
        """
        Gets the condition of this WorkflowDecisionTask.
        The condition to evaluate for this decision task. The condition can be a workflow or task variable or an expression based on the input parameters. Example value for condition if its Workflow/task variable is -  \"${task1.output.var1} or ${workflow.input.var2}\" which evaluates to a value matching any of the decision case values. Example value for condition if its an expression is - \"if ( $.element ! = null && $.element > 0 ) 'true'; else 'false'; \" which evaluates to 'true' or 'false' and will match one of the decision case values. Here \"element\" is a variable in decisiontask's inputParameters JSON formatted map. You can also use javascript like functions indexOf, toUpperCase in the expression which will be evaluated by the expression evaluator.  

        :return: The condition of this WorkflowDecisionTask.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """
        Sets the condition of this WorkflowDecisionTask.
        The condition to evaluate for this decision task. The condition can be a workflow or task variable or an expression based on the input parameters. Example value for condition if its Workflow/task variable is -  \"${task1.output.var1} or ${workflow.input.var2}\" which evaluates to a value matching any of the decision case values. Example value for condition if its an expression is - \"if ( $.element ! = null && $.element > 0 ) 'true'; else 'false'; \" which evaluates to 'true' or 'false' and will match one of the decision case values. Here \"element\" is a variable in decisiontask's inputParameters JSON formatted map. You can also use javascript like functions indexOf, toUpperCase in the expression which will be evaluated by the expression evaluator.  

        :param condition: The condition of this WorkflowDecisionTask.
        :type: str
        """

        self._condition = condition

    @property
    def decision_cases(self):
        """
        Gets the decision_cases of this WorkflowDecisionTask.
        A list of potential decision task flows based off a condition.  

        :return: The decision_cases of this WorkflowDecisionTask.
        :rtype: list[WorkflowDecisionCase]
        """
        return self._decision_cases

    @decision_cases.setter
    def decision_cases(self, decision_cases):
        """
        Sets the decision_cases of this WorkflowDecisionTask.
        A list of potential decision task flows based off a condition.  

        :param decision_cases: The decision_cases of this WorkflowDecisionTask.
        :type: list[WorkflowDecisionCase]
        """

        self._decision_cases = decision_cases

    @property
    def default_task(self):
        """
        Gets the default_task of this WorkflowDecisionTask.
        The default next Task to execute if the decision cannot be evaluated to any of the DecisionCases.  

        :return: The default_task of this WorkflowDecisionTask.
        :rtype: str
        """
        return self._default_task

    @default_task.setter
    def default_task(self, default_task):
        """
        Sets the default_task of this WorkflowDecisionTask.
        The default next Task to execute if the decision cannot be evaluated to any of the DecisionCases.  

        :param default_task: The default_task of this WorkflowDecisionTask.
        :type: str
        """

        self._default_task = default_task

    @property
    def input_parameters(self):
        """
        Gets the input_parameters of this WorkflowDecisionTask.
        JSON formatted map that defines the input given to the decision task. The inputs are used as variables in the condition property of decision task. The input variables can be static values like \"hello\" , \"24\", \"true\" OR previous task outputs/workflow inputs like \"${task2.output.var1}}\". The input variables are referrenced as $.inputVariableName in the condition property.   

        :return: The input_parameters of this WorkflowDecisionTask.
        :rtype: object
        """
        return self._input_parameters

    @input_parameters.setter
    def input_parameters(self, input_parameters):
        """
        Sets the input_parameters of this WorkflowDecisionTask.
        JSON formatted map that defines the input given to the decision task. The inputs are used as variables in the condition property of decision task. The input variables can be static values like \"hello\" , \"24\", \"true\" OR previous task outputs/workflow inputs like \"${task2.output.var1}}\". The input variables are referrenced as $.inputVariableName in the condition property.   

        :param input_parameters: The input_parameters of this WorkflowDecisionTask.
        :type: object
        """

        self._input_parameters = input_parameters

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkflowDecisionTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
