# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class AssetConnectionControlMessageAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account': 'str',
        'connector_version': 'str',
        'device_id': 'str',
        'domain_group': 'str',
        'evict': 'bool',
        'leadership': 'str',
        'new_identity': 'str',
        'partition': 'int'
    }

    attribute_map = {
        'account': 'Account',
        'connector_version': 'ConnectorVersion',
        'device_id': 'DeviceId',
        'domain_group': 'DomainGroup',
        'evict': 'Evict',
        'leadership': 'Leadership',
        'new_identity': 'NewIdentity',
        'partition': 'Partition'
    }

    def __init__(self,
                 account=None,
                 connector_version=None,
                 device_id=None,
                 domain_group=None,
                 evict=None,
                 leadership='Unknown',
                 new_identity=None,
                 partition=None,
                 local_vars_configuration=None):  # noqa: E501
        """AssetConnectionControlMessageAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account = None
        self._connector_version = None
        self._device_id = None
        self._domain_group = None
        self._evict = None
        self._leadership = None
        self._new_identity = None
        self._partition = None
        self.discriminator = None

        if account is not None:
            self.account = account
        if connector_version is not None:
            self.connector_version = connector_version
        if device_id is not None:
            self.device_id = device_id
        if domain_group is not None:
            self.domain_group = domain_group
        if evict is not None:
            self.evict = evict
        if leadership is not None:
            self.leadership = leadership
        if new_identity is not None:
            self.new_identity = new_identity
        if partition is not None:
            self.partition = partition

    @property
    def account(self):
        """Gets the account of this AssetConnectionControlMessageAllOf.  # noqa: E501

        The account id to which the device belongs.    # noqa: E501

        :return: The account of this AssetConnectionControlMessageAllOf.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AssetConnectionControlMessageAllOf.

        The account id to which the device belongs.    # noqa: E501

        :param account: The account of this AssetConnectionControlMessageAllOf.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def connector_version(self):
        """Gets the connector_version of this AssetConnectionControlMessageAllOf.  # noqa: E501

        The version of the device connector currently running on the platform. Deprecated by newer connectors that will report this directly to the device connector gateway in a websocket header, but included to continue to support older versions which report any version change after connect.    # noqa: E501

        :return: The connector_version of this AssetConnectionControlMessageAllOf.  # noqa: E501
        :rtype: str
        """
        return self._connector_version

    @connector_version.setter
    def connector_version(self, connector_version):
        """Sets the connector_version of this AssetConnectionControlMessageAllOf.

        The version of the device connector currently running on the platform. Deprecated by newer connectors that will report this directly to the device connector gateway in a websocket header, but included to continue to support older versions which report any version change after connect.    # noqa: E501

        :param connector_version: The connector_version of this AssetConnectionControlMessageAllOf.  # noqa: E501
        :type: str
        """

        self._connector_version = connector_version

    @property
    def device_id(self):
        """Gets the device_id of this AssetConnectionControlMessageAllOf.  # noqa: E501

        The Moid of the device under change. Used to route the message to a devices connection.    # noqa: E501

        :return: The device_id of this AssetConnectionControlMessageAllOf.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this AssetConnectionControlMessageAllOf.

        The Moid of the device under change. Used to route the message to a devices connection.    # noqa: E501

        :param device_id: The device_id of this AssetConnectionControlMessageAllOf.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def domain_group(self):
        """Gets the domain_group of this AssetConnectionControlMessageAllOf.  # noqa: E501

        The domain group id to which the device belongs.    # noqa: E501

        :return: The domain_group of this AssetConnectionControlMessageAllOf.  # noqa: E501
        :rtype: str
        """
        return self._domain_group

    @domain_group.setter
    def domain_group(self, domain_group):
        """Sets the domain_group of this AssetConnectionControlMessageAllOf.

        The domain group id to which the device belongs.    # noqa: E501

        :param domain_group: The domain_group of this AssetConnectionControlMessageAllOf.  # noqa: E501
        :type: str
        """

        self._domain_group = domain_group

    @property
    def evict(self):
        """Gets the evict of this AssetConnectionControlMessageAllOf.  # noqa: E501

        Flag to force any open connections to be evicted. Used in case device has been deleted or blacklisted.    # noqa: E501

        :return: The evict of this AssetConnectionControlMessageAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._evict

    @evict.setter
    def evict(self, evict):
        """Sets the evict of this AssetConnectionControlMessageAllOf.

        Flag to force any open connections to be evicted. Used in case device has been deleted or blacklisted.    # noqa: E501

        :param evict: The evict of this AssetConnectionControlMessageAllOf.  # noqa: E501
        :type: bool
        """

        self._evict = evict

    @property
    def leadership(self):
        """Gets the leadership of this AssetConnectionControlMessageAllOf.  # noqa: E501

        The current leadership of a device cluster member.    # noqa: E501

        :return: The leadership of this AssetConnectionControlMessageAllOf.  # noqa: E501
        :rtype: str
        """
        return self._leadership

    @leadership.setter
    def leadership(self, leadership):
        """Sets the leadership of this AssetConnectionControlMessageAllOf.

        The current leadership of a device cluster member.    # noqa: E501

        :param leadership: The leadership of this AssetConnectionControlMessageAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Primary", "Secondary"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and leadership not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `leadership` ({0}), must be one of {1}"  # noqa: E501
                .format(leadership, allowed_values))

        self._leadership = leadership

    @property
    def new_identity(self):
        """Gets the new_identity of this AssetConnectionControlMessageAllOf.  # noqa: E501

        The new identity assigned to a device on ownership change (claim/unclaim).    # noqa: E501

        :return: The new_identity of this AssetConnectionControlMessageAllOf.  # noqa: E501
        :rtype: str
        """
        return self._new_identity

    @new_identity.setter
    def new_identity(self, new_identity):
        """Sets the new_identity of this AssetConnectionControlMessageAllOf.

        The new identity assigned to a device on ownership change (claim/unclaim).    # noqa: E501

        :param new_identity: The new_identity of this AssetConnectionControlMessageAllOf.  # noqa: E501
        :type: str
        """

        self._new_identity = new_identity

    @property
    def partition(self):
        """Gets the partition of this AssetConnectionControlMessageAllOf.  # noqa: E501

        The partition the device was last connected to, used to address the control message to the device connector gateway instance holding the devices connection.     # noqa: E501

        :return: The partition of this AssetConnectionControlMessageAllOf.  # noqa: E501
        :rtype: int
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this AssetConnectionControlMessageAllOf.

        The partition the device was last connected to, used to address the control message to the device connector gateway instance holding the devices connection.     # noqa: E501

        :param partition: The partition of this AssetConnectionControlMessageAllOf.  # noqa: E501
        :type: int
        """

        self._partition = partition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetConnectionControlMessageAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetConnectionControlMessageAllOf):
            return True

        return self.to_dict() != other.to_dict()
