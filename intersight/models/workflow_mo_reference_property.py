# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-961
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorkflowMoReferenceProperty(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_attributes': 'list[str]',
        'selector': 'str'
    }

    attribute_map = {
        'display_attributes': 'DisplayAttributes',
        'selector': 'Selector'
    }

    def __init__(self, display_attributes=None, selector=None):
        """
        WorkflowMoReferenceProperty - a model defined in Swagger
        """

        self._display_attributes = None
        self._selector = None

        if display_attributes is not None:
          self.display_attributes = display_attributes
        if selector is not None:
          self.selector = selector

    @property
    def display_attributes(self):
        """
        Gets the display_attributes of this WorkflowMoReferenceProperty.
        List of properties from the Intersight object which can help to identify the object. Typically the set of identity constraints on the object can be listed here to help the user identity the managed object.  

        :return: The display_attributes of this WorkflowMoReferenceProperty.
        :rtype: list[str]
        """
        return self._display_attributes

    @display_attributes.setter
    def display_attributes(self, display_attributes):
        """
        Sets the display_attributes of this WorkflowMoReferenceProperty.
        List of properties from the Intersight object which can help to identify the object. Typically the set of identity constraints on the object can be listed here to help the user identity the managed object.  

        :param display_attributes: The display_attributes of this WorkflowMoReferenceProperty.
        :type: list[str]
        """

        self._display_attributes = display_attributes

    @property
    def selector(self):
        """
        Gets the selector of this WorkflowMoReferenceProperty.
        Field to hold an Intersight API along with an optional filter to narrow down the search options.   

        :return: The selector of this WorkflowMoReferenceProperty.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """
        Sets the selector of this WorkflowMoReferenceProperty.
        Field to hold an Intersight API along with an optional filter to narrow down the search options.   

        :param selector: The selector of this WorkflowMoReferenceProperty.
        :type: str
        """

        self._selector = selector

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkflowMoReferenceProperty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
