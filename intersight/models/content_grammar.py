# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-961
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ContentGrammar(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_parameters': 'list[ContentParameter]',
        'parameters': 'list[ContentParameter]',
        'types': 'list[ContentComplexType]'
    }

    attribute_map = {
        'error_parameters': 'ErrorParameters',
        'parameters': 'Parameters',
        'types': 'Types'
    }

    def __init__(self, error_parameters=None, parameters=None, types=None):
        """
        ContentGrammar - a model defined in Swagger
        """

        self._error_parameters = None
        self._parameters = None
        self._types = None

        if error_parameters is not None:
          self.error_parameters = error_parameters
        if parameters is not None:
          self.parameters = parameters
        if types is not None:
          self.types = types

    @property
    def error_parameters(self):
        """
        Gets the error_parameters of this ContentGrammar.
        The list of parameter definitions, if found in a given API/device response, makes the content handlers to treat the response as error response.  This is optional parameter.   

        :return: The error_parameters of this ContentGrammar.
        :rtype: list[ContentParameter]
        """
        return self._error_parameters

    @error_parameters.setter
    def error_parameters(self, error_parameters):
        """
        Sets the error_parameters of this ContentGrammar.
        The list of parameter definitions, if found in a given API/device response, makes the content handlers to treat the response as error response.  This is optional parameter.   

        :param error_parameters: The error_parameters of this ContentGrammar.
        :type: list[ContentParameter]
        """

        self._error_parameters = error_parameters

    @property
    def parameters(self):
        """
        Gets the parameters of this ContentGrammar.
        The list of parameter definitions that mark the parameters to be extracted using this grammar specification.   

        :return: The parameters of this ContentGrammar.
        :rtype: list[ContentParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this ContentGrammar.
        The list of parameter definitions that mark the parameters to be extracted using this grammar specification.   

        :param parameters: The parameters of this ContentGrammar.
        :type: list[ContentParameter]
        """

        self._parameters = parameters

    @property
    def types(self):
        """
        Gets the types of this ContentGrammar.
        The collection of complex types definitions used in this grammar specification.  This is required only if any of the parameters provided in this grammar is of complex type.    

        :return: The types of this ContentGrammar.
        :rtype: list[ContentComplexType]
        """
        return self._types

    @types.setter
    def types(self, types):
        """
        Sets the types of this ContentGrammar.
        The collection of complex types definitions used in this grammar specification.  This is required only if any of the parameters provided in this grammar is of complex type.    

        :param types: The types of this ContentGrammar.
        :type: list[ContentComplexType]
        """

        self._types = types

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ContentGrammar):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
