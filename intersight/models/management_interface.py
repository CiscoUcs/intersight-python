# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ManagementInterface(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'gateway': 'str',
        'host_name': 'str',
        'ip_address': 'str',
        'mac_address': 'str',
        'mask': 'str',
        'switch_id': 'str',
        'uem_conn_status': 'str',
        'virtual_host_name': 'str',
        'management_controller': 'ManagementController',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'gateway': 'Gateway',
        'host_name': 'HostName',
        'ip_address': 'IpAddress',
        'mac_address': 'MacAddress',
        'mask': 'Mask',
        'switch_id': 'SwitchId',
        'uem_conn_status': 'UemConnStatus',
        'virtual_host_name': 'VirtualHostName',
        'management_controller': 'ManagementController',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 gateway=None,
                 host_name=None,
                 ip_address=None,
                 mac_address=None,
                 mask=None,
                 switch_id=None,
                 uem_conn_status=None,
                 virtual_host_name=None,
                 management_controller=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """ManagementInterface - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._gateway = None
        self._host_name = None
        self._ip_address = None
        self._mac_address = None
        self._mask = None
        self._switch_id = None
        self._uem_conn_status = None
        self._virtual_host_name = None
        self._management_controller = None
        self._registered_device = None
        self.discriminator = None

        if gateway is not None:
            self.gateway = gateway
        if host_name is not None:
            self.host_name = host_name
        if ip_address is not None:
            self.ip_address = ip_address
        if mac_address is not None:
            self.mac_address = mac_address
        if mask is not None:
            self.mask = mask
        if switch_id is not None:
            self.switch_id = switch_id
        if uem_conn_status is not None:
            self.uem_conn_status = uem_conn_status
        if virtual_host_name is not None:
            self.virtual_host_name = virtual_host_name
        if management_controller is not None:
            self.management_controller = management_controller
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def gateway(self):
        """Gets the gateway of this ManagementInterface.  # noqa: E501

        Default gateway for the interface.    # noqa: E501

        :return: The gateway of this ManagementInterface.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this ManagementInterface.

        Default gateway for the interface.    # noqa: E501

        :param gateway: The gateway of this ManagementInterface.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def host_name(self):
        """Gets the host_name of this ManagementInterface.  # noqa: E501

        Hostname configured for the interface.    # noqa: E501

        :return: The host_name of this ManagementInterface.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this ManagementInterface.

        Hostname configured for the interface.    # noqa: E501

        :param host_name: The host_name of this ManagementInterface.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def ip_address(self):
        """Gets the ip_address of this ManagementInterface.  # noqa: E501

        IP address of the interface.    # noqa: E501

        :return: The ip_address of this ManagementInterface.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this ManagementInterface.

        IP address of the interface.    # noqa: E501

        :param ip_address: The ip_address of this ManagementInterface.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def mac_address(self):
        """Gets the mac_address of this ManagementInterface.  # noqa: E501

        MAC address configured for the interface.    # noqa: E501

        :return: The mac_address of this ManagementInterface.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this ManagementInterface.

        MAC address configured for the interface.    # noqa: E501

        :param mac_address: The mac_address of this ManagementInterface.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def mask(self):
        """Gets the mask of this ManagementInterface.  # noqa: E501

        Netmask for the interface.    # noqa: E501

        :return: The mask of this ManagementInterface.  # noqa: E501
        :rtype: str
        """
        return self._mask

    @mask.setter
    def mask(self, mask):
        """Sets the mask of this ManagementInterface.

        Netmask for the interface.    # noqa: E501

        :param mask: The mask of this ManagementInterface.  # noqa: E501
        :type: str
        """

        self._mask = mask

    @property
    def switch_id(self):
        """Gets the switch_id of this ManagementInterface.  # noqa: E501

        Switch Id of the interface.    # noqa: E501

        :return: The switch_id of this ManagementInterface.  # noqa: E501
        :rtype: str
        """
        return self._switch_id

    @switch_id.setter
    def switch_id(self, switch_id):
        """Sets the switch_id of this ManagementInterface.

        Switch Id of the interface.    # noqa: E501

        :param switch_id: The switch_id of this ManagementInterface.  # noqa: E501
        :type: str
        """

        self._switch_id = switch_id

    @property
    def uem_conn_status(self):
        """Gets the uem_conn_status of this ManagementInterface.  # noqa: E501

        Status of UEM connection.    # noqa: E501

        :return: The uem_conn_status of this ManagementInterface.  # noqa: E501
        :rtype: str
        """
        return self._uem_conn_status

    @uem_conn_status.setter
    def uem_conn_status(self, uem_conn_status):
        """Sets the uem_conn_status of this ManagementInterface.

        Status of UEM connection.    # noqa: E501

        :param uem_conn_status: The uem_conn_status of this ManagementInterface.  # noqa: E501
        :type: str
        """

        self._uem_conn_status = uem_conn_status

    @property
    def virtual_host_name(self):
        """Gets the virtual_host_name of this ManagementInterface.  # noqa: E501

        Virtual hostname configured for the interface in case of clustered environment.     # noqa: E501

        :return: The virtual_host_name of this ManagementInterface.  # noqa: E501
        :rtype: str
        """
        return self._virtual_host_name

    @virtual_host_name.setter
    def virtual_host_name(self, virtual_host_name):
        """Sets the virtual_host_name of this ManagementInterface.

        Virtual hostname configured for the interface in case of clustered environment.     # noqa: E501

        :param virtual_host_name: The virtual_host_name of this ManagementInterface.  # noqa: E501
        :type: str
        """

        self._virtual_host_name = virtual_host_name

    @property
    def management_controller(self):
        """Gets the management_controller of this ManagementInterface.  # noqa: E501


        :return: The management_controller of this ManagementInterface.  # noqa: E501
        :rtype: ManagementController
        """
        return self._management_controller

    @management_controller.setter
    def management_controller(self, management_controller):
        """Sets the management_controller of this ManagementInterface.


        :param management_controller: The management_controller of this ManagementInterface.  # noqa: E501
        :type: ManagementController
        """

        self._management_controller = management_controller

    @property
    def registered_device(self):
        """Gets the registered_device of this ManagementInterface.  # noqa: E501


        :return: The registered_device of this ManagementInterface.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this ManagementInterface.


        :param registered_device: The registered_device of this ManagementInterface.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManagementInterface):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ManagementInterface):
            return True

        return self.to_dict() != other.to_dict()
