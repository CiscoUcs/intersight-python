# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class NetworkconfigPolicyAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alternate_ipv4dns_server': 'str',
        'alternate_ipv6dns_server': 'str',
        'dynamic_dns_domain': 'str',
        'enable_dynamic_dns': 'bool',
        'enable_ipv4dns_from_dhcp': 'bool',
        'enable_ipv6': 'bool',
        'enable_ipv6dns_from_dhcp': 'bool',
        'preferred_ipv4dns_server': 'str',
        'preferred_ipv6dns_server': 'str',
        'appliance_account': 'IamAccount',
        'organization': 'OrganizationOrganization',
        'profiles': 'list[PolicyAbstractConfigProfile]'
    }

    attribute_map = {
        'alternate_ipv4dns_server': 'AlternateIpv4dnsServer',
        'alternate_ipv6dns_server': 'AlternateIpv6dnsServer',
        'dynamic_dns_domain': 'DynamicDnsDomain',
        'enable_dynamic_dns': 'EnableDynamicDns',
        'enable_ipv4dns_from_dhcp': 'EnableIpv4dnsFromDhcp',
        'enable_ipv6': 'EnableIpv6',
        'enable_ipv6dns_from_dhcp': 'EnableIpv6dnsFromDhcp',
        'preferred_ipv4dns_server': 'PreferredIpv4dnsServer',
        'preferred_ipv6dns_server': 'PreferredIpv6dnsServer',
        'appliance_account': 'ApplianceAccount',
        'organization': 'Organization',
        'profiles': 'Profiles'
    }

    def __init__(self,
                 alternate_ipv4dns_server=None,
                 alternate_ipv6dns_server=None,
                 dynamic_dns_domain=None,
                 enable_dynamic_dns=None,
                 enable_ipv4dns_from_dhcp=None,
                 enable_ipv6=None,
                 enable_ipv6dns_from_dhcp=None,
                 preferred_ipv4dns_server=None,
                 preferred_ipv6dns_server=None,
                 appliance_account=None,
                 organization=None,
                 profiles=None,
                 local_vars_configuration=None):  # noqa: E501
        """NetworkconfigPolicyAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._alternate_ipv4dns_server = None
        self._alternate_ipv6dns_server = None
        self._dynamic_dns_domain = None
        self._enable_dynamic_dns = None
        self._enable_ipv4dns_from_dhcp = None
        self._enable_ipv6 = None
        self._enable_ipv6dns_from_dhcp = None
        self._preferred_ipv4dns_server = None
        self._preferred_ipv6dns_server = None
        self._appliance_account = None
        self._organization = None
        self._profiles = None
        self.discriminator = None

        if alternate_ipv4dns_server is not None:
            self.alternate_ipv4dns_server = alternate_ipv4dns_server
        if alternate_ipv6dns_server is not None:
            self.alternate_ipv6dns_server = alternate_ipv6dns_server
        if dynamic_dns_domain is not None:
            self.dynamic_dns_domain = dynamic_dns_domain
        if enable_dynamic_dns is not None:
            self.enable_dynamic_dns = enable_dynamic_dns
        if enable_ipv4dns_from_dhcp is not None:
            self.enable_ipv4dns_from_dhcp = enable_ipv4dns_from_dhcp
        if enable_ipv6 is not None:
            self.enable_ipv6 = enable_ipv6
        if enable_ipv6dns_from_dhcp is not None:
            self.enable_ipv6dns_from_dhcp = enable_ipv6dns_from_dhcp
        if preferred_ipv4dns_server is not None:
            self.preferred_ipv4dns_server = preferred_ipv4dns_server
        if preferred_ipv6dns_server is not None:
            self.preferred_ipv6dns_server = preferred_ipv6dns_server
        if appliance_account is not None:
            self.appliance_account = appliance_account
        if organization is not None:
            self.organization = organization
        if profiles is not None:
            self.profiles = profiles

    @property
    def alternate_ipv4dns_server(self):
        """Gets the alternate_ipv4dns_server of this NetworkconfigPolicyAllOf.  # noqa: E501

        IP address of the secondary DNS server.    # noqa: E501

        :return: The alternate_ipv4dns_server of this NetworkconfigPolicyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._alternate_ipv4dns_server

    @alternate_ipv4dns_server.setter
    def alternate_ipv4dns_server(self, alternate_ipv4dns_server):
        """Sets the alternate_ipv4dns_server of this NetworkconfigPolicyAllOf.

        IP address of the secondary DNS server.    # noqa: E501

        :param alternate_ipv4dns_server: The alternate_ipv4dns_server of this NetworkconfigPolicyAllOf.  # noqa: E501
        :type: str
        """

        self._alternate_ipv4dns_server = alternate_ipv4dns_server

    @property
    def alternate_ipv6dns_server(self):
        """Gets the alternate_ipv6dns_server of this NetworkconfigPolicyAllOf.  # noqa: E501

        IP address of the secondary DNS server.    # noqa: E501

        :return: The alternate_ipv6dns_server of this NetworkconfigPolicyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._alternate_ipv6dns_server

    @alternate_ipv6dns_server.setter
    def alternate_ipv6dns_server(self, alternate_ipv6dns_server):
        """Sets the alternate_ipv6dns_server of this NetworkconfigPolicyAllOf.

        IP address of the secondary DNS server.    # noqa: E501

        :param alternate_ipv6dns_server: The alternate_ipv6dns_server of this NetworkconfigPolicyAllOf.  # noqa: E501
        :type: str
        """

        self._alternate_ipv6dns_server = alternate_ipv6dns_server

    @property
    def dynamic_dns_domain(self):
        """Gets the dynamic_dns_domain of this NetworkconfigPolicyAllOf.  # noqa: E501

        The domain name appended to a hostname for a Dynamic DNS (DDNS) update. If left blank, only a hostname is sent to the DDNS update request.    # noqa: E501

        :return: The dynamic_dns_domain of this NetworkconfigPolicyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_dns_domain

    @dynamic_dns_domain.setter
    def dynamic_dns_domain(self, dynamic_dns_domain):
        """Sets the dynamic_dns_domain of this NetworkconfigPolicyAllOf.

        The domain name appended to a hostname for a Dynamic DNS (DDNS) update. If left blank, only a hostname is sent to the DDNS update request.    # noqa: E501

        :param dynamic_dns_domain: The dynamic_dns_domain of this NetworkconfigPolicyAllOf.  # noqa: E501
        :type: str
        """

        self._dynamic_dns_domain = dynamic_dns_domain

    @property
    def enable_dynamic_dns(self):
        """Gets the enable_dynamic_dns of this NetworkconfigPolicyAllOf.  # noqa: E501

        If enabled, updates the resource records to the DNS from Cisco IMC.    # noqa: E501

        :return: The enable_dynamic_dns of this NetworkconfigPolicyAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._enable_dynamic_dns

    @enable_dynamic_dns.setter
    def enable_dynamic_dns(self, enable_dynamic_dns):
        """Sets the enable_dynamic_dns of this NetworkconfigPolicyAllOf.

        If enabled, updates the resource records to the DNS from Cisco IMC.    # noqa: E501

        :param enable_dynamic_dns: The enable_dynamic_dns of this NetworkconfigPolicyAllOf.  # noqa: E501
        :type: bool
        """

        self._enable_dynamic_dns = enable_dynamic_dns

    @property
    def enable_ipv4dns_from_dhcp(self):
        """Gets the enable_ipv4dns_from_dhcp of this NetworkconfigPolicyAllOf.  # noqa: E501

        If enabled, Cisco IMC retrieves the DNS server addresses from DHCP. Use DHCP field must be enabled for IPv4 in Cisco IMC to enable it.    # noqa: E501

        :return: The enable_ipv4dns_from_dhcp of this NetworkconfigPolicyAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._enable_ipv4dns_from_dhcp

    @enable_ipv4dns_from_dhcp.setter
    def enable_ipv4dns_from_dhcp(self, enable_ipv4dns_from_dhcp):
        """Sets the enable_ipv4dns_from_dhcp of this NetworkconfigPolicyAllOf.

        If enabled, Cisco IMC retrieves the DNS server addresses from DHCP. Use DHCP field must be enabled for IPv4 in Cisco IMC to enable it.    # noqa: E501

        :param enable_ipv4dns_from_dhcp: The enable_ipv4dns_from_dhcp of this NetworkconfigPolicyAllOf.  # noqa: E501
        :type: bool
        """

        self._enable_ipv4dns_from_dhcp = enable_ipv4dns_from_dhcp

    @property
    def enable_ipv6(self):
        """Gets the enable_ipv6 of this NetworkconfigPolicyAllOf.  # noqa: E501

        If enabled, allows to configure IPv6 properties.    # noqa: E501

        :return: The enable_ipv6 of this NetworkconfigPolicyAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._enable_ipv6

    @enable_ipv6.setter
    def enable_ipv6(self, enable_ipv6):
        """Sets the enable_ipv6 of this NetworkconfigPolicyAllOf.

        If enabled, allows to configure IPv6 properties.    # noqa: E501

        :param enable_ipv6: The enable_ipv6 of this NetworkconfigPolicyAllOf.  # noqa: E501
        :type: bool
        """

        self._enable_ipv6 = enable_ipv6

    @property
    def enable_ipv6dns_from_dhcp(self):
        """Gets the enable_ipv6dns_from_dhcp of this NetworkconfigPolicyAllOf.  # noqa: E501

        If enabled, Cisco IMC retrieves the DNS server addresses from DHCP. Use DHCP field must be enabled for IPv6 in Cisco IMC to enable it.    # noqa: E501

        :return: The enable_ipv6dns_from_dhcp of this NetworkconfigPolicyAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._enable_ipv6dns_from_dhcp

    @enable_ipv6dns_from_dhcp.setter
    def enable_ipv6dns_from_dhcp(self, enable_ipv6dns_from_dhcp):
        """Sets the enable_ipv6dns_from_dhcp of this NetworkconfigPolicyAllOf.

        If enabled, Cisco IMC retrieves the DNS server addresses from DHCP. Use DHCP field must be enabled for IPv6 in Cisco IMC to enable it.    # noqa: E501

        :param enable_ipv6dns_from_dhcp: The enable_ipv6dns_from_dhcp of this NetworkconfigPolicyAllOf.  # noqa: E501
        :type: bool
        """

        self._enable_ipv6dns_from_dhcp = enable_ipv6dns_from_dhcp

    @property
    def preferred_ipv4dns_server(self):
        """Gets the preferred_ipv4dns_server of this NetworkconfigPolicyAllOf.  # noqa: E501

        IP address of the primary DNS server.    # noqa: E501

        :return: The preferred_ipv4dns_server of this NetworkconfigPolicyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._preferred_ipv4dns_server

    @preferred_ipv4dns_server.setter
    def preferred_ipv4dns_server(self, preferred_ipv4dns_server):
        """Sets the preferred_ipv4dns_server of this NetworkconfigPolicyAllOf.

        IP address of the primary DNS server.    # noqa: E501

        :param preferred_ipv4dns_server: The preferred_ipv4dns_server of this NetworkconfigPolicyAllOf.  # noqa: E501
        :type: str
        """

        self._preferred_ipv4dns_server = preferred_ipv4dns_server

    @property
    def preferred_ipv6dns_server(self):
        """Gets the preferred_ipv6dns_server of this NetworkconfigPolicyAllOf.  # noqa: E501

        IP address of the primary DNS server.     # noqa: E501

        :return: The preferred_ipv6dns_server of this NetworkconfigPolicyAllOf.  # noqa: E501
        :rtype: str
        """
        return self._preferred_ipv6dns_server

    @preferred_ipv6dns_server.setter
    def preferred_ipv6dns_server(self, preferred_ipv6dns_server):
        """Sets the preferred_ipv6dns_server of this NetworkconfigPolicyAllOf.

        IP address of the primary DNS server.     # noqa: E501

        :param preferred_ipv6dns_server: The preferred_ipv6dns_server of this NetworkconfigPolicyAllOf.  # noqa: E501
        :type: str
        """

        self._preferred_ipv6dns_server = preferred_ipv6dns_server

    @property
    def appliance_account(self):
        """Gets the appliance_account of this NetworkconfigPolicyAllOf.  # noqa: E501


        :return: The appliance_account of this NetworkconfigPolicyAllOf.  # noqa: E501
        :rtype: IamAccount
        """
        return self._appliance_account

    @appliance_account.setter
    def appliance_account(self, appliance_account):
        """Sets the appliance_account of this NetworkconfigPolicyAllOf.


        :param appliance_account: The appliance_account of this NetworkconfigPolicyAllOf.  # noqa: E501
        :type: IamAccount
        """

        self._appliance_account = appliance_account

    @property
    def organization(self):
        """Gets the organization of this NetworkconfigPolicyAllOf.  # noqa: E501


        :return: The organization of this NetworkconfigPolicyAllOf.  # noqa: E501
        :rtype: OrganizationOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this NetworkconfigPolicyAllOf.


        :param organization: The organization of this NetworkconfigPolicyAllOf.  # noqa: E501
        :type: OrganizationOrganization
        """

        self._organization = organization

    @property
    def profiles(self):
        """Gets the profiles of this NetworkconfigPolicyAllOf.  # noqa: E501

        A reference to a policyAbstractConfigProfile resource. When the $expand query parameter is specified, the referenced resource is returned inline. Relationship to the profile object.   # noqa: E501

        :return: The profiles of this NetworkconfigPolicyAllOf.  # noqa: E501
        :rtype: list[PolicyAbstractConfigProfile]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this NetworkconfigPolicyAllOf.

        A reference to a policyAbstractConfigProfile resource. When the $expand query parameter is specified, the referenced resource is returned inline. Relationship to the profile object.   # noqa: E501

        :param profiles: The profiles of this NetworkconfigPolicyAllOf.  # noqa: E501
        :type: list[PolicyAbstractConfigProfile]
        """

        self._profiles = profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkconfigPolicyAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkconfigPolicyAllOf):
            return True

        return self.to_dict() != other.to_dict()
