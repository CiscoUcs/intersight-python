# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ForecastModelAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'accuracy': 'float',
        'model_data': 'list[float]',
        'model_type': 'str'
    }

    attribute_map = {
        'accuracy': 'Accuracy',
        'model_data': 'ModelData',
        'model_type': 'ModelType'
    }

    def __init__(self,
                 accuracy=None,
                 model_data=None,
                 model_type='Linear',
                 local_vars_configuration=None):  # noqa: E501
        """ForecastModelAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._accuracy = None
        self._model_data = None
        self._model_type = None
        self.discriminator = None

        if accuracy is not None:
            self.accuracy = accuracy
        if model_data is not None:
            self.model_data = model_data
        if model_type is not None:
            self.model_type = model_type

    @property
    def accuracy(self):
        """Gets the accuracy of this ForecastModelAllOf.  # noqa: E501

        The standard error of the estimate is a measure of the accuracy of predictions from predective modeling.    # noqa: E501

        :return: The accuracy of this ForecastModelAllOf.  # noqa: E501
        :rtype: float
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this ForecastModelAllOf.

        The standard error of the estimate is a measure of the accuracy of predictions from predective modeling.    # noqa: E501

        :param accuracy: The accuracy of this ForecastModelAllOf.  # noqa: E501
        :type: float
        """

        self._accuracy = accuracy

    @property
    def model_data(self):
        """Gets the model_data of this ForecastModelAllOf.  # noqa: E501


        :return: The model_data of this ForecastModelAllOf.  # noqa: E501
        :rtype: list[float]
        """
        return self._model_data

    @model_data.setter
    def model_data(self, model_data):
        """Sets the model_data of this ForecastModelAllOf.


        :param model_data: The model_data of this ForecastModelAllOf.  # noqa: E501
        :type: list[float]
        """

        self._model_data = model_data

    @property
    def model_type(self):
        """Gets the model_type of this ForecastModelAllOf.  # noqa: E501

        Model type indicating type of predictive model used for computing forecast.     # noqa: E501

        :return: The model_type of this ForecastModelAllOf.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this ForecastModelAllOf.

        Model type indicating type of predictive model used for computing forecast.     # noqa: E501

        :param model_type: The model_type of this ForecastModelAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["Linear"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and model_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values))

        self._model_type = model_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForecastModelAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ForecastModelAllOf):
            return True

        return self.to_dict() != other.to_dict()
