# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class SnmpPolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_community_string': 'str',
        'community_access': 'str',
        'enabled': 'bool',
        'engine_id': 'str',
        'snmp_port': 'int',
        'snmp_traps': 'list[SnmpTrap]',
        'snmp_users': 'list[SnmpUser]',
        'sys_contact': 'str',
        'sys_location': 'str',
        'trap_community': 'str',
        'organization': 'OrganizationOrganization',
        'profiles': 'list[PolicyAbstractConfigProfile]'
    }

    attribute_map = {
        'access_community_string': 'AccessCommunityString',
        'community_access': 'CommunityAccess',
        'enabled': 'Enabled',
        'engine_id': 'EngineId',
        'snmp_port': 'SnmpPort',
        'snmp_traps': 'SnmpTraps',
        'snmp_users': 'SnmpUsers',
        'sys_contact': 'SysContact',
        'sys_location': 'SysLocation',
        'trap_community': 'TrapCommunity',
        'organization': 'Organization',
        'profiles': 'Profiles'
    }

    def __init__(self,
                 access_community_string=None,
                 community_access='Disabled',
                 enabled=None,
                 engine_id=None,
                 snmp_port=None,
                 snmp_traps=None,
                 snmp_users=None,
                 sys_contact=None,
                 sys_location=None,
                 trap_community=None,
                 organization=None,
                 profiles=None,
                 local_vars_configuration=None):  # noqa: E501
        """SnmpPolicy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_community_string = None
        self._community_access = None
        self._enabled = None
        self._engine_id = None
        self._snmp_port = None
        self._snmp_traps = None
        self._snmp_users = None
        self._sys_contact = None
        self._sys_location = None
        self._trap_community = None
        self._organization = None
        self._profiles = None
        self.discriminator = None

        if access_community_string is not None:
            self.access_community_string = access_community_string
        if community_access is not None:
            self.community_access = community_access
        if enabled is not None:
            self.enabled = enabled
        if engine_id is not None:
            self.engine_id = engine_id
        if snmp_port is not None:
            self.snmp_port = snmp_port
        if snmp_traps is not None:
            self.snmp_traps = snmp_traps
        if snmp_users is not None:
            self.snmp_users = snmp_users
        if sys_contact is not None:
            self.sys_contact = sys_contact
        if sys_location is not None:
            self.sys_location = sys_location
        if trap_community is not None:
            self.trap_community = trap_community
        if organization is not None:
            self.organization = organization
        if profiles is not None:
            self.profiles = profiles

    @property
    def access_community_string(self):
        """Gets the access_community_string of this SnmpPolicy.  # noqa: E501

        The default SNMPv1, SNMPv2c community name or SNMPv3 username to include on any trap messages sent to the SNMP host. The name can be 18 characters long.    # noqa: E501

        :return: The access_community_string of this SnmpPolicy.  # noqa: E501
        :rtype: str
        """
        return self._access_community_string

    @access_community_string.setter
    def access_community_string(self, access_community_string):
        """Sets the access_community_string of this SnmpPolicy.

        The default SNMPv1, SNMPv2c community name or SNMPv3 username to include on any trap messages sent to the SNMP host. The name can be 18 characters long.    # noqa: E501

        :param access_community_string: The access_community_string of this SnmpPolicy.  # noqa: E501
        :type: str
        """

        self._access_community_string = access_community_string

    @property
    def community_access(self):
        """Gets the community_access of this SnmpPolicy.  # noqa: E501

        Controls access to the information in the inventory tables. Applicable only for SNMPv1 and SNMPv2c users.    # noqa: E501

        :return: The community_access of this SnmpPolicy.  # noqa: E501
        :rtype: str
        """
        return self._community_access

    @community_access.setter
    def community_access(self, community_access):
        """Sets the community_access of this SnmpPolicy.

        Controls access to the information in the inventory tables. Applicable only for SNMPv1 and SNMPv2c users.    # noqa: E501

        :param community_access: The community_access of this SnmpPolicy.  # noqa: E501
        :type: str
        """
        allowed_values = ["Disabled", "Limited", "Full"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and community_access not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `community_access` ({0}), must be one of {1}"  # noqa: E501
                .format(community_access, allowed_values))

        self._community_access = community_access

    @property
    def enabled(self):
        """Gets the enabled of this SnmpPolicy.  # noqa: E501

        State of the SNMP Policy on the endpoint. If enabled, the endpoint sends SNMP traps to the designated host.    # noqa: E501

        :return: The enabled of this SnmpPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SnmpPolicy.

        State of the SNMP Policy on the endpoint. If enabled, the endpoint sends SNMP traps to the designated host.    # noqa: E501

        :param enabled: The enabled of this SnmpPolicy.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def engine_id(self):
        """Gets the engine_id of this SnmpPolicy.  # noqa: E501

        User-defined unique identification of the static engine.    # noqa: E501

        :return: The engine_id of this SnmpPolicy.  # noqa: E501
        :rtype: str
        """
        return self._engine_id

    @engine_id.setter
    def engine_id(self, engine_id):
        """Sets the engine_id of this SnmpPolicy.

        User-defined unique identification of the static engine.    # noqa: E501

        :param engine_id: The engine_id of this SnmpPolicy.  # noqa: E501
        :type: str
        """

        self._engine_id = engine_id

    @property
    def snmp_port(self):
        """Gets the snmp_port of this SnmpPolicy.  # noqa: E501

        Port on which Cisco IMC SNMP agent runs.    # noqa: E501

        :return: The snmp_port of this SnmpPolicy.  # noqa: E501
        :rtype: int
        """
        return self._snmp_port

    @snmp_port.setter
    def snmp_port(self, snmp_port):
        """Sets the snmp_port of this SnmpPolicy.

        Port on which Cisco IMC SNMP agent runs.    # noqa: E501

        :param snmp_port: The snmp_port of this SnmpPolicy.  # noqa: E501
        :type: int
        """

        self._snmp_port = snmp_port

    @property
    def snmp_traps(self):
        """Gets the snmp_traps of this SnmpPolicy.  # noqa: E501


        :return: The snmp_traps of this SnmpPolicy.  # noqa: E501
        :rtype: list[SnmpTrap]
        """
        return self._snmp_traps

    @snmp_traps.setter
    def snmp_traps(self, snmp_traps):
        """Sets the snmp_traps of this SnmpPolicy.


        :param snmp_traps: The snmp_traps of this SnmpPolicy.  # noqa: E501
        :type: list[SnmpTrap]
        """

        self._snmp_traps = snmp_traps

    @property
    def snmp_users(self):
        """Gets the snmp_users of this SnmpPolicy.  # noqa: E501


        :return: The snmp_users of this SnmpPolicy.  # noqa: E501
        :rtype: list[SnmpUser]
        """
        return self._snmp_users

    @snmp_users.setter
    def snmp_users(self, snmp_users):
        """Sets the snmp_users of this SnmpPolicy.


        :param snmp_users: The snmp_users of this SnmpPolicy.  # noqa: E501
        :type: list[SnmpUser]
        """

        self._snmp_users = snmp_users

    @property
    def sys_contact(self):
        """Gets the sys_contact of this SnmpPolicy.  # noqa: E501

        Contact person responsible for the SNMP implementation. Enter a string up to 64 characters, such as an email address or a name and telephone number.    # noqa: E501

        :return: The sys_contact of this SnmpPolicy.  # noqa: E501
        :rtype: str
        """
        return self._sys_contact

    @sys_contact.setter
    def sys_contact(self, sys_contact):
        """Sets the sys_contact of this SnmpPolicy.

        Contact person responsible for the SNMP implementation. Enter a string up to 64 characters, such as an email address or a name and telephone number.    # noqa: E501

        :param sys_contact: The sys_contact of this SnmpPolicy.  # noqa: E501
        :type: str
        """

        self._sys_contact = sys_contact

    @property
    def sys_location(self):
        """Gets the sys_location of this SnmpPolicy.  # noqa: E501

        Location of host on which the SNMP agent (server) runs.    # noqa: E501

        :return: The sys_location of this SnmpPolicy.  # noqa: E501
        :rtype: str
        """
        return self._sys_location

    @sys_location.setter
    def sys_location(self, sys_location):
        """Sets the sys_location of this SnmpPolicy.

        Location of host on which the SNMP agent (server) runs.    # noqa: E501

        :param sys_location: The sys_location of this SnmpPolicy.  # noqa: E501
        :type: str
        """

        self._sys_location = sys_location

    @property
    def trap_community(self):
        """Gets the trap_community of this SnmpPolicy.  # noqa: E501

        SNMP community group used for sending SNMP trap to other devices. Valid only for SNMPv2c users.     # noqa: E501

        :return: The trap_community of this SnmpPolicy.  # noqa: E501
        :rtype: str
        """
        return self._trap_community

    @trap_community.setter
    def trap_community(self, trap_community):
        """Sets the trap_community of this SnmpPolicy.

        SNMP community group used for sending SNMP trap to other devices. Valid only for SNMPv2c users.     # noqa: E501

        :param trap_community: The trap_community of this SnmpPolicy.  # noqa: E501
        :type: str
        """

        self._trap_community = trap_community

    @property
    def organization(self):
        """Gets the organization of this SnmpPolicy.  # noqa: E501


        :return: The organization of this SnmpPolicy.  # noqa: E501
        :rtype: OrganizationOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this SnmpPolicy.


        :param organization: The organization of this SnmpPolicy.  # noqa: E501
        :type: OrganizationOrganization
        """

        self._organization = organization

    @property
    def profiles(self):
        """Gets the profiles of this SnmpPolicy.  # noqa: E501

        A reference to a policyAbstractConfigProfile resource. When the $expand query parameter is specified, the referenced resource is returned inline. Relationship to the profile object.   # noqa: E501

        :return: The profiles of this SnmpPolicy.  # noqa: E501
        :rtype: list[PolicyAbstractConfigProfile]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this SnmpPolicy.

        A reference to a policyAbstractConfigProfile resource. When the $expand query parameter is specified, the referenced resource is returned inline. Relationship to the profile object.   # noqa: E501

        :param profiles: The profiles of this SnmpPolicy.  # noqa: E501
        :type: list[PolicyAbstractConfigProfile]
        """

        self._profiles = profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnmpPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SnmpPolicy):
            return True

        return self.to_dict() != other.to_dict()
