# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class MemoryPersistentMemoryUnitAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_direct_capacity': 'str',
        'count_status': 'str',
        'firmware_version': 'str',
        'frozen_status': 'str',
        'health_state': 'str',
        'lock_status': 'str',
        'memory_capacity': 'str',
        'memory_id': 'int',
        'persistent_memory_capacity': 'str',
        'reserved_capacity': 'str',
        'security_status': 'str',
        'socket_id': 'str',
        'socket_memory_id': 'str',
        'total_capacity': 'str',
        'uid': 'str',
        'memory_array': 'MemoryArray',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'app_direct_capacity': 'AppDirectCapacity',
        'count_status': 'CountStatus',
        'firmware_version': 'FirmwareVersion',
        'frozen_status': 'FrozenStatus',
        'health_state': 'HealthState',
        'lock_status': 'LockStatus',
        'memory_capacity': 'MemoryCapacity',
        'memory_id': 'MemoryId',
        'persistent_memory_capacity': 'PersistentMemoryCapacity',
        'reserved_capacity': 'ReservedCapacity',
        'security_status': 'SecurityStatus',
        'socket_id': 'SocketId',
        'socket_memory_id': 'SocketMemoryId',
        'total_capacity': 'TotalCapacity',
        'uid': 'Uid',
        'memory_array': 'MemoryArray',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 app_direct_capacity=None,
                 count_status=None,
                 firmware_version=None,
                 frozen_status=None,
                 health_state=None,
                 lock_status=None,
                 memory_capacity=None,
                 memory_id=None,
                 persistent_memory_capacity=None,
                 reserved_capacity=None,
                 security_status=None,
                 socket_id=None,
                 socket_memory_id=None,
                 total_capacity=None,
                 uid=None,
                 memory_array=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """MemoryPersistentMemoryUnitAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._app_direct_capacity = None
        self._count_status = None
        self._firmware_version = None
        self._frozen_status = None
        self._health_state = None
        self._lock_status = None
        self._memory_capacity = None
        self._memory_id = None
        self._persistent_memory_capacity = None
        self._reserved_capacity = None
        self._security_status = None
        self._socket_id = None
        self._socket_memory_id = None
        self._total_capacity = None
        self._uid = None
        self._memory_array = None
        self._registered_device = None
        self.discriminator = None

        if app_direct_capacity is not None:
            self.app_direct_capacity = app_direct_capacity
        if count_status is not None:
            self.count_status = count_status
        if firmware_version is not None:
            self.firmware_version = firmware_version
        if frozen_status is not None:
            self.frozen_status = frozen_status
        if health_state is not None:
            self.health_state = health_state
        if lock_status is not None:
            self.lock_status = lock_status
        if memory_capacity is not None:
            self.memory_capacity = memory_capacity
        if memory_id is not None:
            self.memory_id = memory_id
        if persistent_memory_capacity is not None:
            self.persistent_memory_capacity = persistent_memory_capacity
        if reserved_capacity is not None:
            self.reserved_capacity = reserved_capacity
        if security_status is not None:
            self.security_status = security_status
        if socket_id is not None:
            self.socket_id = socket_id
        if socket_memory_id is not None:
            self.socket_memory_id = socket_memory_id
        if total_capacity is not None:
            self.total_capacity = total_capacity
        if uid is not None:
            self.uid = uid
        if memory_array is not None:
            self.memory_array = memory_array
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def app_direct_capacity(self):
        """Gets the app_direct_capacity of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501

        This represents the appdirect capacity in GB of a persistent memory module on a server.    # noqa: E501

        :return: The app_direct_capacity of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :rtype: str
        """
        return self._app_direct_capacity

    @app_direct_capacity.setter
    def app_direct_capacity(self, app_direct_capacity):
        """Sets the app_direct_capacity of this MemoryPersistentMemoryUnitAllOf.

        This represents the appdirect capacity in GB of a persistent memory module on a server.    # noqa: E501

        :param app_direct_capacity: The app_direct_capacity of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :type: str
        """

        self._app_direct_capacity = app_direct_capacity

    @property
    def count_status(self):
        """Gets the count_status of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501

        This represents the count status of a persistent memory module on a server.    # noqa: E501

        :return: The count_status of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :rtype: str
        """
        return self._count_status

    @count_status.setter
    def count_status(self, count_status):
        """Sets the count_status of this MemoryPersistentMemoryUnitAllOf.

        This represents the count status of a persistent memory module on a server.    # noqa: E501

        :param count_status: The count_status of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :type: str
        """

        self._count_status = count_status

    @property
    def firmware_version(self):
        """Gets the firmware_version of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501

        This represents the firmware version of the firware running on a persistent memory module on a server.    # noqa: E501

        :return: The firmware_version of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this MemoryPersistentMemoryUnitAllOf.

        This represents the firmware version of the firware running on a persistent memory module on a server.    # noqa: E501

        :param firmware_version: The firmware_version of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :type: str
        """

        self._firmware_version = firmware_version

    @property
    def frozen_status(self):
        """Gets the frozen_status of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501

        This represents the frozen status of a persistent memory module on a server.    # noqa: E501

        :return: The frozen_status of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :rtype: str
        """
        return self._frozen_status

    @frozen_status.setter
    def frozen_status(self, frozen_status):
        """Sets the frozen_status of this MemoryPersistentMemoryUnitAllOf.

        This represents the frozen status of a persistent memory module on a server.    # noqa: E501

        :param frozen_status: The frozen_status of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :type: str
        """

        self._frozen_status = frozen_status

    @property
    def health_state(self):
        """Gets the health_state of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501

        This represents the health state of a persistent memory module on a server.    # noqa: E501

        :return: The health_state of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :rtype: str
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this MemoryPersistentMemoryUnitAllOf.

        This represents the health state of a persistent memory module on a server.    # noqa: E501

        :param health_state: The health_state of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :type: str
        """

        self._health_state = health_state

    @property
    def lock_status(self):
        """Gets the lock_status of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501

        This represents the lock status of a persistent memory module on a server.    # noqa: E501

        :return: The lock_status of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :rtype: str
        """
        return self._lock_status

    @lock_status.setter
    def lock_status(self, lock_status):
        """Sets the lock_status of this MemoryPersistentMemoryUnitAllOf.

        This represents the lock status of a persistent memory module on a server.    # noqa: E501

        :param lock_status: The lock_status of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :type: str
        """

        self._lock_status = lock_status

    @property
    def memory_capacity(self):
        """Gets the memory_capacity of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501

        This represents the memory capacity in GB of a persistent memory module on a server.    # noqa: E501

        :return: The memory_capacity of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :rtype: str
        """
        return self._memory_capacity

    @memory_capacity.setter
    def memory_capacity(self, memory_capacity):
        """Sets the memory_capacity of this MemoryPersistentMemoryUnitAllOf.

        This represents the memory capacity in GB of a persistent memory module on a server.    # noqa: E501

        :param memory_capacity: The memory_capacity of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :type: str
        """

        self._memory_capacity = memory_capacity

    @property
    def memory_id(self):
        """Gets the memory_id of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501

        This represents the ID of a persistent memory module on a server.    # noqa: E501

        :return: The memory_id of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :rtype: int
        """
        return self._memory_id

    @memory_id.setter
    def memory_id(self, memory_id):
        """Sets the memory_id of this MemoryPersistentMemoryUnitAllOf.

        This represents the ID of a persistent memory module on a server.    # noqa: E501

        :param memory_id: The memory_id of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :type: int
        """

        self._memory_id = memory_id

    @property
    def persistent_memory_capacity(self):
        """Gets the persistent_memory_capacity of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501

        This represents the persistent memory capacity in GB of a persistent memory module on a server.    # noqa: E501

        :return: The persistent_memory_capacity of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :rtype: str
        """
        return self._persistent_memory_capacity

    @persistent_memory_capacity.setter
    def persistent_memory_capacity(self, persistent_memory_capacity):
        """Sets the persistent_memory_capacity of this MemoryPersistentMemoryUnitAllOf.

        This represents the persistent memory capacity in GB of a persistent memory module on a server.    # noqa: E501

        :param persistent_memory_capacity: The persistent_memory_capacity of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :type: str
        """

        self._persistent_memory_capacity = persistent_memory_capacity

    @property
    def reserved_capacity(self):
        """Gets the reserved_capacity of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501

        This represents the reserved capacity in GB of a persistent memory module on a server.    # noqa: E501

        :return: The reserved_capacity of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :rtype: str
        """
        return self._reserved_capacity

    @reserved_capacity.setter
    def reserved_capacity(self, reserved_capacity):
        """Sets the reserved_capacity of this MemoryPersistentMemoryUnitAllOf.

        This represents the reserved capacity in GB of a persistent memory module on a server.    # noqa: E501

        :param reserved_capacity: The reserved_capacity of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :type: str
        """

        self._reserved_capacity = reserved_capacity

    @property
    def security_status(self):
        """Gets the security_status of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501

        This represents the security status of a persistent memory module on a server.    # noqa: E501

        :return: The security_status of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :rtype: str
        """
        return self._security_status

    @security_status.setter
    def security_status(self, security_status):
        """Sets the security_status of this MemoryPersistentMemoryUnitAllOf.

        This represents the security status of a persistent memory module on a server.    # noqa: E501

        :param security_status: The security_status of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :type: str
        """

        self._security_status = security_status

    @property
    def socket_id(self):
        """Gets the socket_id of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501

        This represents the Socket ID of a persistent memory module on a server.    # noqa: E501

        :return: The socket_id of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :rtype: str
        """
        return self._socket_id

    @socket_id.setter
    def socket_id(self, socket_id):
        """Sets the socket_id of this MemoryPersistentMemoryUnitAllOf.

        This represents the Socket ID of a persistent memory module on a server.    # noqa: E501

        :param socket_id: The socket_id of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :type: str
        """

        self._socket_id = socket_id

    @property
    def socket_memory_id(self):
        """Gets the socket_memory_id of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501

        This represents the Socket Memory ID of a persistent memory module on a server.    # noqa: E501

        :return: The socket_memory_id of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :rtype: str
        """
        return self._socket_memory_id

    @socket_memory_id.setter
    def socket_memory_id(self, socket_memory_id):
        """Sets the socket_memory_id of this MemoryPersistentMemoryUnitAllOf.

        This represents the Socket Memory ID of a persistent memory module on a server.    # noqa: E501

        :param socket_memory_id: The socket_memory_id of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :type: str
        """

        self._socket_memory_id = socket_memory_id

    @property
    def total_capacity(self):
        """Gets the total_capacity of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501

        This represents the total capacity in GB of a persistent memory module on a server.    # noqa: E501

        :return: The total_capacity of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :rtype: str
        """
        return self._total_capacity

    @total_capacity.setter
    def total_capacity(self, total_capacity):
        """Sets the total_capacity of this MemoryPersistentMemoryUnitAllOf.

        This represents the total capacity in GB of a persistent memory module on a server.    # noqa: E501

        :param total_capacity: The total_capacity of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :type: str
        """

        self._total_capacity = total_capacity

    @property
    def uid(self):
        """Gets the uid of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501

        This represents the uid of a persistent memory module on a server.     # noqa: E501

        :return: The uid of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this MemoryPersistentMemoryUnitAllOf.

        This represents the uid of a persistent memory module on a server.     # noqa: E501

        :param uid: The uid of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def memory_array(self):
        """Gets the memory_array of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501


        :return: The memory_array of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :rtype: MemoryArray
        """
        return self._memory_array

    @memory_array.setter
    def memory_array(self, memory_array):
        """Sets the memory_array of this MemoryPersistentMemoryUnitAllOf.


        :param memory_array: The memory_array of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :type: MemoryArray
        """

        self._memory_array = memory_array

    @property
    def registered_device(self):
        """Gets the registered_device of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501


        :return: The registered_device of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this MemoryPersistentMemoryUnitAllOf.


        :param registered_device: The registered_device of this MemoryPersistentMemoryUnitAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemoryPersistentMemoryUnitAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MemoryPersistentMemoryUnitAllOf):
            return True

        return self.to_dict() != other.to_dict()
