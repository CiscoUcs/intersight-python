# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class AssetDeviceConnectionAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_version': 'int',
        'app_partition_number': 'int',
        'connection_id': 'str',
        'connection_reason': 'str',
        'connection_status': 'str',
        'connection_status_last_change_time': 'datetime',
        'connector_version': 'str',
        'device_external_ip_address': 'str',
        'proxy_app': 'str'
    }

    attribute_map = {
        'api_version': 'ApiVersion',
        'app_partition_number': 'AppPartitionNumber',
        'connection_id': 'ConnectionId',
        'connection_reason': 'ConnectionReason',
        'connection_status': 'ConnectionStatus',
        'connection_status_last_change_time': 'ConnectionStatusLastChangeTime',
        'connector_version': 'ConnectorVersion',
        'device_external_ip_address': 'DeviceExternalIpAddress',
        'proxy_app': 'ProxyApp'
    }

    def __init__(self,
                 api_version=None,
                 app_partition_number=None,
                 connection_id=None,
                 connection_reason=None,
                 connection_status='',
                 connection_status_last_change_time=None,
                 connector_version=None,
                 device_external_ip_address=None,
                 proxy_app=None,
                 local_vars_configuration=None):  # noqa: E501
        """AssetDeviceConnectionAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_version = None
        self._app_partition_number = None
        self._connection_id = None
        self._connection_reason = None
        self._connection_status = None
        self._connection_status_last_change_time = None
        self._connector_version = None
        self._device_external_ip_address = None
        self._proxy_app = None
        self.discriminator = None

        if api_version is not None:
            self.api_version = api_version
        if app_partition_number is not None:
            self.app_partition_number = app_partition_number
        if connection_id is not None:
            self.connection_id = connection_id
        if connection_reason is not None:
            self.connection_reason = connection_reason
        if connection_status is not None:
            self.connection_status = connection_status
        if connection_status_last_change_time is not None:
            self.connection_status_last_change_time = connection_status_last_change_time
        if connector_version is not None:
            self.connector_version = connector_version
        if device_external_ip_address is not None:
            self.device_external_ip_address = device_external_ip_address
        if proxy_app is not None:
            self.proxy_app = proxy_app

    @property
    def api_version(self):
        """Gets the api_version of this AssetDeviceConnectionAllOf.  # noqa: E501

        The version of the connector API, describes the capability of the connector's framework. If the version is lower than the current minimum supported version defined in the service managing the connection, the device connector will be connected with limited capabilities until the device connector is upgraded to a fully supported version. For example if a device connector that was released without delta inventory capabilities registers and connects to Intersight, inventory collection may be disabled until it has been upgraded.     # noqa: E501

        :return: The api_version of this AssetDeviceConnectionAllOf.  # noqa: E501
        :rtype: int
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this AssetDeviceConnectionAllOf.

        The version of the connector API, describes the capability of the connector's framework. If the version is lower than the current minimum supported version defined in the service managing the connection, the device connector will be connected with limited capabilities until the device connector is upgraded to a fully supported version. For example if a device connector that was released without delta inventory capabilities registers and connects to Intersight, inventory collection may be disabled until it has been upgraded.     # noqa: E501

        :param api_version: The api_version of this AssetDeviceConnectionAllOf.  # noqa: E501
        :type: int
        """

        self._api_version = api_version

    @property
    def app_partition_number(self):
        """Gets the app_partition_number of this AssetDeviceConnectionAllOf.  # noqa: E501

        The partition number corresponding to the instance of the Proxy App which is managing the web-socket to the device connector.    # noqa: E501

        :return: The app_partition_number of this AssetDeviceConnectionAllOf.  # noqa: E501
        :rtype: int
        """
        return self._app_partition_number

    @app_partition_number.setter
    def app_partition_number(self, app_partition_number):
        """Sets the app_partition_number of this AssetDeviceConnectionAllOf.

        The partition number corresponding to the instance of the Proxy App which is managing the web-socket to the device connector.    # noqa: E501

        :param app_partition_number: The app_partition_number of this AssetDeviceConnectionAllOf.  # noqa: E501
        :type: int
        """

        self._app_partition_number = app_partition_number

    @property
    def connection_id(self):
        """Gets the connection_id of this AssetDeviceConnectionAllOf.  # noqa: E501

        The unique identifier for the current connection. The identifier persists across network connectivity loss and is reset on device connector process restart or platform administrator toggle of the Intersight connectivity. The connectionId can be used by services that need to interact with stateful plugins running in the device connector process. For example if a service schedules an inventory in a devices job scheduler plugin at registration it is not necessary to reschedule the job if the device loses network connectivity due to an Intersight service upgrade or intermittent network issues in the devices datacenter.    # noqa: E501

        :return: The connection_id of this AssetDeviceConnectionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this AssetDeviceConnectionAllOf.

        The unique identifier for the current connection. The identifier persists across network connectivity loss and is reset on device connector process restart or platform administrator toggle of the Intersight connectivity. The connectionId can be used by services that need to interact with stateful plugins running in the device connector process. For example if a service schedules an inventory in a devices job scheduler plugin at registration it is not necessary to reschedule the job if the device loses network connectivity due to an Intersight service upgrade or intermittent network issues in the devices datacenter.    # noqa: E501

        :param connection_id: The connection_id of this AssetDeviceConnectionAllOf.  # noqa: E501
        :type: str
        """

        self._connection_id = connection_id

    @property
    def connection_reason(self):
        """Gets the connection_reason of this AssetDeviceConnectionAllOf.  # noqa: E501

        If 'connectionStatus' is not equal to Connected, connectionReason provides further details about why the device is not connected with the cloud.    # noqa: E501

        :return: The connection_reason of this AssetDeviceConnectionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._connection_reason

    @connection_reason.setter
    def connection_reason(self, connection_reason):
        """Sets the connection_reason of this AssetDeviceConnectionAllOf.

        If 'connectionStatus' is not equal to Connected, connectionReason provides further details about why the device is not connected with the cloud.    # noqa: E501

        :param connection_reason: The connection_reason of this AssetDeviceConnectionAllOf.  # noqa: E501
        :type: str
        """

        self._connection_reason = connection_reason

    @property
    def connection_status(self):
        """Gets the connection_status of this AssetDeviceConnectionAllOf.  # noqa: E501

        The status of the persistent connection between the device connector and Intersight.    # noqa: E501

        :return: The connection_status of this AssetDeviceConnectionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this AssetDeviceConnectionAllOf.

        The status of the persistent connection between the device connector and Intersight.    # noqa: E501

        :param connection_status: The connection_status of this AssetDeviceConnectionAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["", "Connected", "NotConnected",
                          "Unclaimed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and connection_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `connection_status` ({0}), must be one of {1}"  # noqa: E501
                .format(connection_status, allowed_values))

        self._connection_status = connection_status

    @property
    def connection_status_last_change_time(self):
        """Gets the connection_status_last_change_time of this AssetDeviceConnectionAllOf.  # noqa: E501

        The last time at which the 'connectionStatus' property value changed. If connectionStatus is Connected, this time can be interpreted as the starting time since which a persistent connection has been maintained between the cloud and device connector. If connectionStatus is NotConnected, this time can be interpreted as the last time the device connector was connected with the cloud.    # noqa: E501

        :return: The connection_status_last_change_time of this AssetDeviceConnectionAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._connection_status_last_change_time

    @connection_status_last_change_time.setter
    def connection_status_last_change_time(self,
                                           connection_status_last_change_time):
        """Sets the connection_status_last_change_time of this AssetDeviceConnectionAllOf.

        The last time at which the 'connectionStatus' property value changed. If connectionStatus is Connected, this time can be interpreted as the starting time since which a persistent connection has been maintained between the cloud and device connector. If connectionStatus is NotConnected, this time can be interpreted as the last time the device connector was connected with the cloud.    # noqa: E501

        :param connection_status_last_change_time: The connection_status_last_change_time of this AssetDeviceConnectionAllOf.  # noqa: E501
        :type: datetime
        """

        self._connection_status_last_change_time = connection_status_last_change_time

    @property
    def connector_version(self):
        """Gets the connector_version of this AssetDeviceConnectionAllOf.  # noqa: E501

        The version of the device connector running on the managed device.    # noqa: E501

        :return: The connector_version of this AssetDeviceConnectionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._connector_version

    @connector_version.setter
    def connector_version(self, connector_version):
        """Sets the connector_version of this AssetDeviceConnectionAllOf.

        The version of the device connector running on the managed device.    # noqa: E501

        :param connector_version: The connector_version of this AssetDeviceConnectionAllOf.  # noqa: E501
        :type: str
        """

        self._connector_version = connector_version

    @property
    def device_external_ip_address(self):
        """Gets the device_external_ip_address of this AssetDeviceConnectionAllOf.  # noqa: E501

        The IP Address of the managed device as seen from the cloud at the time of registration. This could be the IP address of the managed device's interface which has a route to the internet or a NAT IP addresss when the managed device is deployed in a private network.    # noqa: E501

        :return: The device_external_ip_address of this AssetDeviceConnectionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._device_external_ip_address

    @device_external_ip_address.setter
    def device_external_ip_address(self, device_external_ip_address):
        """Sets the device_external_ip_address of this AssetDeviceConnectionAllOf.

        The IP Address of the managed device as seen from the cloud at the time of registration. This could be the IP address of the managed device's interface which has a route to the internet or a NAT IP addresss when the managed device is deployed in a private network.    # noqa: E501

        :param device_external_ip_address: The device_external_ip_address of this AssetDeviceConnectionAllOf.  # noqa: E501
        :type: str
        """

        self._device_external_ip_address = device_external_ip_address

    @property
    def proxy_app(self):
        """Gets the proxy_app of this AssetDeviceConnectionAllOf.  # noqa: E501

        The name of the app which will proxy the messages to the device connector.     # noqa: E501

        :return: The proxy_app of this AssetDeviceConnectionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._proxy_app

    @proxy_app.setter
    def proxy_app(self, proxy_app):
        """Sets the proxy_app of this AssetDeviceConnectionAllOf.

        The name of the app which will proxy the messages to the device connector.     # noqa: E501

        :param proxy_app: The proxy_app of this AssetDeviceConnectionAllOf.  # noqa: E501
        :type: str
        """

        self._proxy_app = proxy_app

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetDeviceConnectionAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetDeviceConnectionAllOf):
            return True

        return self.to_dict() != other.to_dict()
