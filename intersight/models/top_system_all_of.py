# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class TopSystemAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ipv4_address': 'str',
        'ipv6_address': 'str',
        'mode': 'str',
        'name': 'str',
        'time_zone': 'str',
        'compute_blades': 'list[ComputeBlade]',
        'compute_rack_units': 'list[ComputeRackUnit]',
        'management_controller': 'ManagementController',
        'network_elements': 'list[NetworkElement]',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'ipv4_address': 'Ipv4Address',
        'ipv6_address': 'Ipv6Address',
        'mode': 'Mode',
        'name': 'Name',
        'time_zone': 'TimeZone',
        'compute_blades': 'ComputeBlades',
        'compute_rack_units': 'ComputeRackUnits',
        'management_controller': 'ManagementController',
        'network_elements': 'NetworkElements',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 ipv4_address=None,
                 ipv6_address=None,
                 mode=None,
                 name=None,
                 time_zone=None,
                 compute_blades=None,
                 compute_rack_units=None,
                 management_controller=None,
                 network_elements=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """TopSystemAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ipv4_address = None
        self._ipv6_address = None
        self._mode = None
        self._name = None
        self._time_zone = None
        self._compute_blades = None
        self._compute_rack_units = None
        self._management_controller = None
        self._network_elements = None
        self._registered_device = None
        self.discriminator = None

        if ipv4_address is not None:
            self.ipv4_address = ipv4_address
        if ipv6_address is not None:
            self.ipv6_address = ipv6_address
        if mode is not None:
            self.mode = mode
        if name is not None:
            self.name = name
        if time_zone is not None:
            self.time_zone = time_zone
        if compute_blades is not None:
            self.compute_blades = compute_blades
        if compute_rack_units is not None:
            self.compute_rack_units = compute_rack_units
        if management_controller is not None:
            self.management_controller = management_controller
        if network_elements is not None:
            self.network_elements = network_elements
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def ipv4_address(self):
        """Gets the ipv4_address of this TopSystemAllOf.  # noqa: E501

        The IPv4 address of system.    # noqa: E501

        :return: The ipv4_address of this TopSystemAllOf.  # noqa: E501
        :rtype: str
        """
        return self._ipv4_address

    @ipv4_address.setter
    def ipv4_address(self, ipv4_address):
        """Sets the ipv4_address of this TopSystemAllOf.

        The IPv4 address of system.    # noqa: E501

        :param ipv4_address: The ipv4_address of this TopSystemAllOf.  # noqa: E501
        :type: str
        """

        self._ipv4_address = ipv4_address

    @property
    def ipv6_address(self):
        """Gets the ipv6_address of this TopSystemAllOf.  # noqa: E501

        The IPv6 address of system.    # noqa: E501

        :return: The ipv6_address of this TopSystemAllOf.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_address

    @ipv6_address.setter
    def ipv6_address(self, ipv6_address):
        """Sets the ipv6_address of this TopSystemAllOf.

        The IPv6 address of system.    # noqa: E501

        :param ipv6_address: The ipv6_address of this TopSystemAllOf.  # noqa: E501
        :type: str
        """

        self._ipv6_address = ipv6_address

    @property
    def mode(self):
        """Gets the mode of this TopSystemAllOf.  # noqa: E501


        :return: The mode of this TopSystemAllOf.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this TopSystemAllOf.


        :param mode: The mode of this TopSystemAllOf.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this TopSystemAllOf.  # noqa: E501


        :return: The name of this TopSystemAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TopSystemAllOf.


        :param name: The name of this TopSystemAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def time_zone(self):
        """Gets the time_zone of this TopSystemAllOf.  # noqa: E501

        The operational timezone of the system, empty indicates no timezone has been set specifically.     # noqa: E501

        :return: The time_zone of this TopSystemAllOf.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this TopSystemAllOf.

        The operational timezone of the system, empty indicates no timezone has been set specifically.     # noqa: E501

        :param time_zone: The time_zone of this TopSystemAllOf.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def compute_blades(self):
        """Gets the compute_blades of this TopSystemAllOf.  # noqa: E501

        A reference to a computeBlade resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The compute_blades of this TopSystemAllOf.  # noqa: E501
        :rtype: list[ComputeBlade]
        """
        return self._compute_blades

    @compute_blades.setter
    def compute_blades(self, compute_blades):
        """Sets the compute_blades of this TopSystemAllOf.

        A reference to a computeBlade resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param compute_blades: The compute_blades of this TopSystemAllOf.  # noqa: E501
        :type: list[ComputeBlade]
        """

        self._compute_blades = compute_blades

    @property
    def compute_rack_units(self):
        """Gets the compute_rack_units of this TopSystemAllOf.  # noqa: E501

        A reference to a computeRackUnit resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The compute_rack_units of this TopSystemAllOf.  # noqa: E501
        :rtype: list[ComputeRackUnit]
        """
        return self._compute_rack_units

    @compute_rack_units.setter
    def compute_rack_units(self, compute_rack_units):
        """Sets the compute_rack_units of this TopSystemAllOf.

        A reference to a computeRackUnit resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param compute_rack_units: The compute_rack_units of this TopSystemAllOf.  # noqa: E501
        :type: list[ComputeRackUnit]
        """

        self._compute_rack_units = compute_rack_units

    @property
    def management_controller(self):
        """Gets the management_controller of this TopSystemAllOf.  # noqa: E501


        :return: The management_controller of this TopSystemAllOf.  # noqa: E501
        :rtype: ManagementController
        """
        return self._management_controller

    @management_controller.setter
    def management_controller(self, management_controller):
        """Sets the management_controller of this TopSystemAllOf.


        :param management_controller: The management_controller of this TopSystemAllOf.  # noqa: E501
        :type: ManagementController
        """

        self._management_controller = management_controller

    @property
    def network_elements(self):
        """Gets the network_elements of this TopSystemAllOf.  # noqa: E501

        A reference to a networkElement resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The network_elements of this TopSystemAllOf.  # noqa: E501
        :rtype: list[NetworkElement]
        """
        return self._network_elements

    @network_elements.setter
    def network_elements(self, network_elements):
        """Sets the network_elements of this TopSystemAllOf.

        A reference to a networkElement resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param network_elements: The network_elements of this TopSystemAllOf.  # noqa: E501
        :type: list[NetworkElement]
        """

        self._network_elements = network_elements

    @property
    def registered_device(self):
        """Gets the registered_device of this TopSystemAllOf.  # noqa: E501


        :return: The registered_device of this TopSystemAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this TopSystemAllOf.


        :param registered_device: The registered_device of this TopSystemAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopSystemAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TopSystemAllOf):
            return True

        return self.to_dict() != other.to_dict()
