# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class SolPolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'baud_rate': 'int',
        'com_port': 'str',
        'enabled': 'bool',
        'ssh_port': 'int',
        'organization': 'OrganizationOrganization',
        'profiles': 'list[PolicyAbstractConfigProfile]'
    }

    attribute_map = {
        'baud_rate': 'BaudRate',
        'com_port': 'ComPort',
        'enabled': 'Enabled',
        'ssh_port': 'SshPort',
        'organization': 'Organization',
        'profiles': 'Profiles'
    }

    def __init__(self,
                 baud_rate=9600,
                 com_port='com0',
                 enabled=None,
                 ssh_port=None,
                 organization=None,
                 profiles=None,
                 local_vars_configuration=None):  # noqa: E501
        """SolPolicy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._baud_rate = None
        self._com_port = None
        self._enabled = None
        self._ssh_port = None
        self._organization = None
        self._profiles = None
        self.discriminator = None

        if baud_rate is not None:
            self.baud_rate = baud_rate
        if com_port is not None:
            self.com_port = com_port
        if enabled is not None:
            self.enabled = enabled
        if ssh_port is not None:
            self.ssh_port = ssh_port
        if organization is not None:
            self.organization = organization
        if profiles is not None:
            self.profiles = profiles

    @property
    def baud_rate(self):
        """Gets the baud_rate of this SolPolicy.  # noqa: E501

        Baud Rate used for Serial Over LAN communication.    # noqa: E501

        :return: The baud_rate of this SolPolicy.  # noqa: E501
        :rtype: int
        """
        return self._baud_rate

    @baud_rate.setter
    def baud_rate(self, baud_rate):
        """Sets the baud_rate of this SolPolicy.

        Baud Rate used for Serial Over LAN communication.    # noqa: E501

        :param baud_rate: The baud_rate of this SolPolicy.  # noqa: E501
        :type: int
        """
        allowed_values = [9600, 19200, 38400, 57600, 115200]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and baud_rate not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `baud_rate` ({0}), must be one of {1}"  # noqa: E501
                .format(baud_rate, allowed_values))

        self._baud_rate = baud_rate

    @property
    def com_port(self):
        """Gets the com_port of this SolPolicy.  # noqa: E501

        Serial port through which the system routes Serial Over LAN communication. This field is available only on some Cisco UCS C-Series servers. If it is unavailable, the server uses COM port 0 by default.    # noqa: E501

        :return: The com_port of this SolPolicy.  # noqa: E501
        :rtype: str
        """
        return self._com_port

    @com_port.setter
    def com_port(self, com_port):
        """Sets the com_port of this SolPolicy.

        Serial port through which the system routes Serial Over LAN communication. This field is available only on some Cisco UCS C-Series servers. If it is unavailable, the server uses COM port 0 by default.    # noqa: E501

        :param com_port: The com_port of this SolPolicy.  # noqa: E501
        :type: str
        """
        allowed_values = ["com0", "com1"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and com_port not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `com_port` ({0}), must be one of {1}"  # noqa: E501
                .format(com_port, allowed_values))

        self._com_port = com_port

    @property
    def enabled(self):
        """Gets the enabled of this SolPolicy.  # noqa: E501

        State of Serial Over LAN service on the endpoint.    # noqa: E501

        :return: The enabled of this SolPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SolPolicy.

        State of Serial Over LAN service on the endpoint.    # noqa: E501

        :param enabled: The enabled of this SolPolicy.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def ssh_port(self):
        """Gets the ssh_port of this SolPolicy.  # noqa: E501

        SSH port used to access Serial Over LAN directly. Enables bypassing Cisco IMC shell to provide direct access to Serial Over LAN.     # noqa: E501

        :return: The ssh_port of this SolPolicy.  # noqa: E501
        :rtype: int
        """
        return self._ssh_port

    @ssh_port.setter
    def ssh_port(self, ssh_port):
        """Sets the ssh_port of this SolPolicy.

        SSH port used to access Serial Over LAN directly. Enables bypassing Cisco IMC shell to provide direct access to Serial Over LAN.     # noqa: E501

        :param ssh_port: The ssh_port of this SolPolicy.  # noqa: E501
        :type: int
        """

        self._ssh_port = ssh_port

    @property
    def organization(self):
        """Gets the organization of this SolPolicy.  # noqa: E501


        :return: The organization of this SolPolicy.  # noqa: E501
        :rtype: OrganizationOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this SolPolicy.


        :param organization: The organization of this SolPolicy.  # noqa: E501
        :type: OrganizationOrganization
        """

        self._organization = organization

    @property
    def profiles(self):
        """Gets the profiles of this SolPolicy.  # noqa: E501

        A reference to a policyAbstractConfigProfile resource. When the $expand query parameter is specified, the referenced resource is returned inline. Relationship to the profile object.   # noqa: E501

        :return: The profiles of this SolPolicy.  # noqa: E501
        :rtype: list[PolicyAbstractConfigProfile]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this SolPolicy.

        A reference to a policyAbstractConfigProfile resource. When the $expand query parameter is specified, the referenced resource is returned inline. Relationship to the profile object.   # noqa: E501

        :param profiles: The profiles of this SolPolicy.  # noqa: E501
        :type: list[PolicyAbstractConfigProfile]
        """

        self._profiles = profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SolPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SolPolicy):
            return True

        return self.to_dict() != other.to_dict()
