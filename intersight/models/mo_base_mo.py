# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class MoBaseMo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMo]',
        'parent': 'MoBaseMo',
        'permission_resources': 'list[MoBaseMo]'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources'
    }

    discriminator_value_class_map = {
        'compute.Blade': 'ComputeBlade',
        'os.ConfigurationFile': 'OsConfigurationFile',
        'storage.VirtualDriveExtension': 'StorageVirtualDriveExtension',
        'adapter.ConfigPolicy': 'AdapterConfigPolicy',
        'hyperflex.ExtIscsiStoragePolicy': 'HyperflexExtIscsiStoragePolicy',
        'policy.AbstractConfigProfile': 'PolicyAbstractConfigProfile',
        'hcl.DriverImage': 'HclDriverImage',
        'firmware.DriverDistributable': 'FirmwareDriverDistributable',
        'policyinventory.AbstractDeviceInfo':
        'PolicyinventoryAbstractDeviceInfo',
        'storage.ProtectionGroup': 'StorageProtectionGroup',
        'iam.ResourceRoles': 'IamResourceRoles',
        'storage.PureProtectionGroupSnapshot':
        'StoragePureProtectionGroupSnapshot',
        'telemetry.TimeSeries': 'TelemetryTimeSeries',
        'iam.EndPointUserRole': 'IamEndPointUserRole',
        'forecast.Catalog': 'ForecastCatalog',
        'search.SearchItem': 'SearchSearchItem',
        'equipment.RackEnclosure': 'EquipmentRackEnclosure',
        'hcl.SupportedDriverName': 'HclSupportedDriverName',
        'iaas.UcsdManagedInfra': 'IaasUcsdManagedInfra',
        'asset.DeviceConfiguration': 'AssetDeviceConfiguration',
        'niaapi.VersionRegex': 'NiaapiVersionRegex',
        'workflow.PendingDynamicWorkflowInfo':
        'WorkflowPendingDynamicWorkflowInfo',
        'iaas.MostRunTasks': 'IaasMostRunTasks',
        'workflow.WorkflowInfo': 'WorkflowWorkflowInfo',
        'iam.Account': 'IamAccount',
        'security.Unit': 'SecurityUnit',
        'niaapi.ApicHweol': 'NiaapiApicHweol',
        'memory.PersistentMemoryNamespaceConfigResult':
        'MemoryPersistentMemoryNamespaceConfigResult',
        'iam.Role': 'IamRole',
        'tam.AdvisoryInstance': 'TamAdvisoryInstance',
        'fault.Instance': 'FaultInstance',
        'tam.Advisory': 'TamAdvisory',
        'boot.PrecisionPolicy': 'BootPrecisionPolicy',
        'ether.PhysicalPort': 'EtherPhysicalPort',
        'vnic.EthNetworkPolicy': 'VnicEthNetworkPolicy',
        'iam.Qualifier': 'IamQualifier',
        'storage.StoragePolicy': 'StorageStoragePolicy',
        'firmware.ServerConfigurationUtilityDistributable':
        'FirmwareServerConfigurationUtilityDistributable',
        'storage.DiskGroupPolicy': 'StorageDiskGroupPolicy',
        'bios.BootMode': 'BiosBootMode',
        'storage.FlexFlashVirtualDrive': 'StorageFlexFlashVirtualDrive',
        'policy.AbstractPolicy': 'PolicyAbstractPolicy',
        'hcl.OperatingSystem': 'HclOperatingSystem',
        'asset.ClusterMember': 'AssetClusterMember',
        'memory.PersistentMemoryConfigResult':
        'MemoryPersistentMemoryConfigResult',
        'equipment.FanModule': 'EquipmentFanModule',
        'workflow.WorkflowMeta': 'WorkflowWorkflowMeta',
        'ssh.Policy': 'SshPolicy',
        'top.System': 'TopSystem',
        'storage.PureHost': 'StoragePureHost',
        'tam.SecurityAdvisory': 'TamSecurityAdvisory',
        'hcl.OperatingSystemVendor': 'HclOperatingSystemVendor',
        'cond.Alarm': 'CondAlarm',
        'tam.AdvisoryInfo': 'TamAdvisoryInfo',
        'hyperflex.ServerModel': 'HyperflexServerModel',
        'iam.ResourcePermission': 'IamResourcePermission',
        'memory.AbstractUnit': 'MemoryAbstractUnit',
        'hyperflex.AppCatalog': 'HyperflexAppCatalog',
        'niaapi.DcnmCcoPost': 'NiaapiDcnmCcoPost',
        'equipment.AbstractDevice': 'EquipmentAbstractDevice',
        'memory.PersistentMemoryNamespace': 'MemoryPersistentMemoryNamespace',
        'adapter.HostFcInterface': 'AdapterHostFcInterface',
        'vnic.FcAdapterPolicy': 'VnicFcAdapterPolicy',
        'fc.PhysicalPort': 'FcPhysicalPort',
        'equipment.Fan': 'EquipmentFan',
        'resource.Group': 'ResourceGroup',
        'hyperflex.NodeProfile': 'HyperflexNodeProfile',
        'storage.FlexFlashController': 'StorageFlexFlashController',
        'appliance.CertificateSetting': 'ApplianceCertificateSetting',
        'bios.Policy': 'BiosPolicy',
        'storage.PurePort': 'StoragePurePort',
        'inventory.Base': 'InventoryBase',
        'recovery.ConfigResultEntry': 'RecoveryConfigResultEntry',
        'hyperflex.FeatureLimitInternal': 'HyperflexFeatureLimitInternal',
        'network.Element': 'NetworkElement',
        'hyperflex.Cluster': 'HyperflexCluster',
        'iam.LdapProvider': 'IamLdapProvider',
        'equipment.DeviceSummary': 'EquipmentDeviceSummary',
        'appliance.SetupInfo': 'ApplianceSetupInfo',
        'storage.FlexFlashPhysicalDrive': 'StorageFlexFlashPhysicalDrive',
        'iam.EndPointPrivilege': 'IamEndPointPrivilege',
        'resource.GroupMember': 'ResourceGroupMember',
        'softwarerepository.OperatingSystemFile':
        'SoftwarerepositoryOperatingSystemFile',
        'storage.PhysicalPort': 'StoragePhysicalPort',
        'workflow.Catalog': 'WorkflowCatalog',
        'adapter.HostIscsiInterface': 'AdapterHostIscsiInterface',
        'iam.ResourceLimits': 'IamResourceLimits',
        'inventory.GenericInventory': 'InventoryGenericInventory',
        'hyperflex.NodeConfigPolicy': 'HyperflexNodeConfigPolicy',
        'asset.ManagedDevice': 'AssetManagedDevice',
        'iam.IdpReference': 'IamIdpReference',
        'compute.Board': 'ComputeBoard',
        'iam.ApiKey': 'IamApiKey',
        'memory.Unit': 'MemoryUnit',
        'server.ConfigResult': 'ServerConfigResult',
        'hyperflex.UcsmConfigPolicy': 'HyperflexUcsmConfigPolicy',
        'graphics.Card': 'GraphicsCard',
        'task.PureStorageScopedInventory': 'TaskPureStorageScopedInventory',
        'appliance.UpgradePolicy': 'ApplianceUpgradePolicy',
        'storage.Snapshot': 'StorageSnapshot',
        'iam.TrustPoint': 'IamTrustPoint',
        'appliance.ImageBundle': 'ApplianceImageBundle',
        'resource.LicenseResourceCount': 'ResourceLicenseResourceCount',
        'cond.HclStatusJob': 'CondHclStatusJob',
        'pci.Switch': 'PciSwitch',
        'graphics.Controller': 'GraphicsController',
        'equipment.Fex': 'EquipmentFex',
        'softwarerepository.Catalog': 'SoftwarerepositoryCatalog',
        'memory.Array': 'MemoryArray',
        'memory.PersistentMemoryUnit': 'MemoryPersistentMemoryUnit',
        'vnic.EthQosPolicy': 'VnicEthQosPolicy',
        'storage.PureProtectionGroup': 'StoragePureProtectionGroup',
        'hyperflex.ExtFcStoragePolicy': 'HyperflexExtFcStoragePolicy',
        'os.OsSupport': 'OsOsSupport',
        'externalsite.Authorization': 'ExternalsiteAuthorization',
        'recovery.OnDemandBackup': 'RecoveryOnDemandBackup',
        'workflow.TaskDefinition': 'WorkflowTaskDefinition',
        'pci.CoprocessorCard': 'PciCoprocessorCard',
        'hyperflex.ServerFirmwareVersion': 'HyperflexServerFirmwareVersion',
        'niaapi.ApicLatestMaintainedRelease':
        'NiaapiApicLatestMaintainedRelease',
        'os.BaseInstallConfig': 'OsBaseInstallConfig',
        'iam.DomainGroup': 'IamDomainGroup',
        'storage.VirtualDrive': 'StorageVirtualDrive',
        'hyperflex.Node': 'HyperflexNode',
        'softwarerepository.File': 'SoftwarerepositoryFile',
        'vnic.EthIf': 'VnicEthIf',
        'ucsd.BackupInfo': 'UcsdBackupInfo',
        'storage.PureSnapshotSchedule': 'StoragePureSnapshotSchedule',
        'firmware.Distributable': 'FirmwareDistributable',
        'niaapi.ApicFieldNotice': 'NiaapiApicFieldNotice',
        'hcl.CompatibilityStatus': 'HclCompatibilityStatus',
        'inventory.DnMoBinding': 'InventoryDnMoBinding',
        'iam.EndPointUser': 'IamEndPointUser',
        'iaas.DeviceStatus': 'IaasDeviceStatus',
        'hyperflex.ClusterProfile': 'HyperflexClusterProfile',
        'policy.AbstractConfigResult': 'PolicyAbstractConfigResult',
        'vnic.LanConnectivityPolicy': 'VnicLanConnectivityPolicy',
        'os.Install': 'OsInstall',
        'niaapi.ReleaseRecommend': 'NiaapiReleaseRecommend',
        'niaapi.NiaMetadata': 'NiaapiNiaMetadata',
        'recovery.ScheduleConfigPolicy': 'RecoveryScheduleConfigPolicy',
        'asset.DeviceRegistration': 'AssetDeviceRegistration',
        'hyperflex.ClusterStoragePolicy': 'HyperflexClusterStoragePolicy',
        'license.AccountLicenseData': 'LicenseAccountLicenseData',
        'storage.Enclosure': 'StorageEnclosure',
        'asset.DeviceContractInformation': 'AssetDeviceContractInformation',
        'hyperflex.AutoSupportPolicy': 'HyperflexAutoSupportPolicy',
        'storage.PureController': 'StoragePureController',
        'adapter.HostEthInterface': 'AdapterHostEthInterface',
        'iaas.ConnectorPack': 'IaasConnectorPack',
        'storage.FlexFlashControllerProps': 'StorageFlexFlashControllerProps',
        'storage.EnclosureDisk': 'StorageEnclosureDisk',
        'asset.DeviceConnectorManager': 'AssetDeviceConnectorManager',
        'storage.PureReplicationSchedule': 'StoragePureReplicationSchedule',
        'forecast.Definition': 'ForecastDefinition',
        'kvm.Policy': 'KvmPolicy',
        'bios.Unit': 'BiosUnit',
        'compute.ServerSetting': 'ComputeServerSetting',
        'iam.SessionLimits': 'IamSessionLimits',
        'os.TemplateFile': 'OsTemplateFile',
        'license.CustomerOp': 'LicenseCustomerOp',
        'storage.Volume': 'StorageVolume',
        'firmware.Upgrade': 'FirmwareUpgrade',
        'software.HyperflexDistributable': 'SoftwareHyperflexDistributable',
        'pci.Link': 'PciLink',
        'syslog.Policy': 'SyslogPolicy',
        'iam.UserGroup': 'IamUserGroup',
        'niaapi.MaintainedRelease': 'NiaapiMaintainedRelease',
        'storage.FlexUtilPhysicalDrive': 'StorageFlexUtilPhysicalDrive',
        'search.TagItem': 'SearchTagItem',
        'workflow.BuildTaskMetaOwner': 'WorkflowBuildTaskMetaOwner',
        'ntp.Policy': 'NtpPolicy',
        'ls.ServiceProfile': 'LsServiceProfile',
        'server.Profile': 'ServerProfile',
        'iaas.UcsdInfo': 'IaasUcsdInfo',
        'iam.EndPointUserPolicy': 'IamEndPointUserPolicy',
        'port.Physical': 'PortPhysical',
        'hcl.ExemptedCatalog': 'HclExemptedCatalog',
        'niaapi.DcnmLatestMaintainedRelease':
        'NiaapiDcnmLatestMaintainedRelease',
        'recovery.BackupProfile': 'RecoveryBackupProfile',
        'vmedia.Policy': 'VmediaPolicy',
        'iam.PrivateKeySpec': 'IamPrivateKeySpec',
        'workflow.BuildTaskMeta': 'WorkflowBuildTaskMeta',
        'iam.SecurityHolder': 'IamSecurityHolder',
        'firmware.UpgradeStatus': 'FirmwareUpgradeStatus',
        'storage.FlexUtilController': 'StorageFlexUtilController',
        'niaapi.NewReleasePost': 'NiaapiNewReleasePost',
        'equipment.SystemIoController': 'EquipmentSystemIoController',
        'appliance.BackupPolicy': 'ApplianceBackupPolicy',
        'equipment.IoCard': 'EquipmentIoCard',
        'views.View': 'ViewsView',
        'niaapi.DcnmSweol': 'NiaapiDcnmSweol',
        'memory.PersistentMemoryConfiguration':
        'MemoryPersistentMemoryConfiguration',
        'storage.SasPort': 'StorageSasPort',
        'sdcard.Policy': 'SdcardPolicy',
        'hyperflex.CapabilityInfo': 'HyperflexCapabilityInfo',
        'cond.HclStatus': 'CondHclStatus',
        'iam.ServiceProvider': 'IamServiceProvider',
        'iaas.LicenseInfo': 'IaasLicenseInfo',
        'memory.PersistentMemoryRegion': 'MemoryPersistentMemoryRegion',
        'storage.PhysicalDiskExtension': 'StoragePhysicalDiskExtension',
        'workflow.WorkflowDefinition': 'WorkflowWorkflowDefinition',
        'hyperflex.FeatureLimitExternal': 'HyperflexFeatureLimitExternal',
        'management.Controller': 'ManagementController',
        'hyperflex.VcenterConfigPolicy': 'HyperflexVcenterConfigPolicy',
        'networkconfig.Policy': 'NetworkconfigPolicy',
        'resource.Membership': 'ResourceMembership',
        'vnic.FcNetworkPolicy': 'VnicFcNetworkPolicy',
        'appliance.NodeInfo': 'ApplianceNodeInfo',
        'hyperflex.Alarm': 'HyperflexAlarm',
        'storage.PureDisk': 'StoragePureDisk',
        'asset.DeviceConnection': 'AssetDeviceConnection',
        'boot.DeviceBootMode': 'BootDeviceBootMode',
        'policy.AbstractConfigResultEntry': 'PolicyAbstractConfigResultEntry',
        'equipment.Tpm': 'EquipmentTpm',
        'iam.UserPreference': 'IamUserPreference',
        'license.LicenseInfo': 'LicenseLicenseInfo',
        'smtp.Policy': 'SmtpPolicy',
        'tam.AdvisoryCount': 'TamAdvisoryCount',
        'recovery.AbstractBackupConfig': 'RecoveryAbstractBackupConfig',
        'storage.PhysicalDisk': 'StoragePhysicalDisk',
        'vnic.FcQosPolicy': 'VnicFcQosPolicy',
        'niaapi.FileDownloader': 'NiaapiFileDownloader',
        'firmware.Eula': 'FirmwareEula',
        'storage.ArrayController': 'StorageArrayController',
        'equipment.Psu': 'EquipmentPsu',
        'niaapi.DcnmReleaseRecommend': 'NiaapiDcnmReleaseRecommend',
        'storage.PureVolume': 'StoragePureVolume',
        'iam.Idp': 'IamIdp',
        'storage.PureArray': 'StoragePureArray',
        'niaapi.HardwareEol': 'NiaapiHardwareEol',
        'appliance.BackupBase': 'ApplianceBackupBase',
        'cond.HclStatusDetail': 'CondHclStatusDetail',
        'iam.EndPointRole': 'IamEndPointRole',
        'recovery.ConfigResult': 'RecoveryConfigResult',
        'ipmioverlan.Policy': 'IpmioverlanPolicy',
        'storage.Host': 'StorageHost',
        'hcl.HyperflexSoftwareCompatibilityInfo':
        'HclHyperflexSoftwareCompatibilityInfo',
        'compute.Physical': 'ComputePhysical',
        'resource.MembershipHolder': 'ResourceMembershipHolder',
        'server.ConfigResultEntry': 'ServerConfigResultEntry',
        'iam.Permission': 'IamPermission',
        'storage.SnapshotSchedule': 'StorageSnapshotSchedule',
        'hyperflex.ConfigResult': 'HyperflexConfigResult',
        'iam.LocalUserPassword': 'IamLocalUserPassword',
        'terminal.AuditLog': 'TerminalAuditLog',
        'iam.User': 'IamUser',
        'iam.Privilege': 'IamPrivilege',
        'niatelemetry.NiaInventory': 'NiatelemetryNiaInventory',
        'license.SmartlicenseToken': 'LicenseSmartlicenseToken',
        'port.SubGroup': 'PortSubGroup',
        'vnic.SanConnectivityPolicy': 'VnicSanConnectivityPolicy',
        'appliance.Restore': 'ApplianceRestore',
        'compute.PhysicalSummary': 'ComputePhysicalSummary',
        'niatelemetry.NiaLicenseState': 'NiatelemetryNiaLicenseState',
        'equipment.RackEnclosureSlot': 'EquipmentRackEnclosureSlot',
        'network.ElementSummary': 'NetworkElementSummary',
        'niaapi.FieldNotice': 'NiaapiFieldNotice',
        'appliance.DeviceClaim': 'ApplianceDeviceClaim',
        'meta.Definition': 'MetaDefinition',
        'appliance.Backup': 'ApplianceBackup',
        'aaa.AuditRecord': 'AaaAuditRecord',
        'equipment.IoExpander': 'EquipmentIoExpander',
        'appliance.Upgrade': 'ApplianceUpgrade',
        'equipment.SharedIoModule': 'EquipmentSharedIoModule',
        'niaapi.DcnmFieldNotice': 'NiaapiDcnmFieldNotice',
        'iam.AppRegistration': 'IamAppRegistration',
        'forecast.Instance': 'ForecastInstance',
        'management.Entity': 'ManagementEntity',
        'storage.EnclosureDiskSlotEp': 'StorageEnclosureDiskSlotEp',
        'workflow.TaskInfo': 'WorkflowTaskInfo',
        'storage.HostLun': 'StorageHostLun',
        'management.Interface': 'ManagementInterface',
        'storage.VdMemberEp': 'StorageVdMemberEp',
        'iam.CertificateRequest': 'IamCertificateRequest',
        'appliance.DiagSetting': 'ApplianceDiagSetting',
        'iam.LdapPolicy': 'IamLdapPolicy',
        'firmware.BaseDistributable': 'FirmwareBaseDistributable',
        'asset.DeviceClaim': 'AssetDeviceClaim',
        'niaapi.ApicCcoPost': 'NiaapiApicCcoPost',
        'vnic.EthAdapterPolicy': 'VnicEthAdapterPolicy',
        'recovery.AbstractBackupInfo': 'RecoveryAbstractBackupInfo',
        'hyperflex.ConfigResultEntry': 'HyperflexConfigResultEntry',
        'niaapi.ApicSweol': 'NiaapiApicSweol',
        'storage.FlexUtilVirtualDrive': 'StorageFlexUtilVirtualDrive',
        'hcl.ServiceStatus': 'HclServiceStatus',
        'hyperflex.SoftwareVersionPolicy': 'HyperflexSoftwareVersionPolicy',
        'hyperflex.Health': 'HyperflexHealth',
        'policy.AbstractProfile': 'PolicyAbstractProfile',
        'appliance.SystemInfo': 'ApplianceSystemInfo',
        'hyperflex.SysConfigPolicy': 'HyperflexSysConfigPolicy',
        'inventory.DeviceInfo': 'InventoryDeviceInfo',
        'iam.Session': 'IamSession',
        'niaapi.DcnmHweol': 'NiaapiDcnmHweol',
        'deviceconnector.Policy': 'DeviceconnectorPolicy',
        'storage.ProtectionGroupSnapshot': 'StorageProtectionGroupSnapshot',
        'search.SuggestItem': 'SearchSuggestItem',
        'sol.Policy': 'SolPolicy',
        'iam.OAuthToken': 'IamOAuthToken',
        'hyperflex.LocalCredentialPolicy': 'HyperflexLocalCredentialPolicy',
        'compute.RackUnit': 'ComputeRackUnit',
        'server.ConfigChangeDetail': 'ServerConfigChangeDetail',
        'iam.LdapGroup': 'IamLdapGroup',
        'firmware.RunningFirmware': 'FirmwareRunningFirmware',
        'equipment.LocatorLed': 'EquipmentLocatorLed',
        'policy.AbstractConfigChangeDetail':
        'PolicyAbstractConfigChangeDetail',
        'storage.PhysicalDiskUsage': 'StoragePhysicalDiskUsage',
        'equipment.Base': 'EquipmentBase',
        'hyperflex.ClusterNetworkPolicy': 'HyperflexClusterNetworkPolicy',
        'workflow.BatchApiExecutor': 'WorkflowBatchApiExecutor',
        'iam.Certificate': 'IamCertificate',
        'storage.ReplicationSchedule': 'StorageReplicationSchedule',
        'niaapi.ApicReleaseRecommend': 'NiaapiApicReleaseRecommend',
        'storage.ArrayDisk': 'StorageArrayDisk',
        'storage.SasExpander': 'StorageSasExpander',
        'equipment.SwitchCard': 'EquipmentSwitchCard',
        'storage.PureVolumeSnapshot': 'StoragePureVolumeSnapshot',
        'softwarerepository.Authorization': 'SoftwarerepositoryAuthorization',
        'software.HclMeta': 'SoftwareHclMeta',
        'iam.System': 'IamSystem',
        'vnic.FcIf': 'VnicFcIf',
        'workflow.TaskMeta': 'WorkflowTaskMeta',
        'inventory.Request': 'InventoryRequest',
        'port.Group': 'PortGroup',
        'storage.PureHostLun': 'StoragePureHostLun',
        'feedback.FeedbackPost': 'FeedbackFeedbackPost',
        'iam.PrivilegeSet': 'IamPrivilegeSet',
        'recovery.BackupConfigPolicy': 'RecoveryBackupConfigPolicy',
        'os.Catalog': 'OsCatalog',
        'adapter.ExtEthInterface': 'AdapterExtEthInterface',
        'hyperflex.HxdpVersion': 'HyperflexHxdpVersion',
        'aaa.AbstractAuditRecord': 'AaaAbstractAuditRecord',
        'inventory.GenericInventoryHolder': 'InventoryGenericInventoryHolder',
        'server.ConfigImport': 'ServerConfigImport',
        'pci.Device': 'PciDevice',
        'processor.Unit': 'ProcessorUnit',
        'adapter.Unit': 'AdapterUnit',
        'hyperflex.ProxySettingPolicy': 'HyperflexProxySettingPolicy',
        'storage.GenericArray': 'StorageGenericArray',
        'appliance.DataExportPolicy': 'ApplianceDataExportPolicy',
        'organization.Organization': 'OrganizationOrganization',
        'storage.Controller': 'StorageController',
        'recovery.Restore': 'RecoveryRestore',
        'snmp.Policy': 'SnmpPolicy',
        'workflow.CustomDataTypeDefinition':
        'WorkflowCustomDataTypeDefinition',
        'equipment.Chassis': 'EquipmentChassis',
        'niaapi.SoftwareEol': 'NiaapiSoftwareEol'
    }

    def __init__(self,
                 account_moid=None,
                 create_time=None,
                 domain_group_moid=None,
                 mod_time=None,
                 moid=None,
                 object_type=None,
                 owners=None,
                 shared_scope=None,
                 tags=None,
                 version_context=None,
                 ancestors=None,
                 parent=None,
                 permission_resources=None,
                 local_vars_configuration=None):  # noqa: E501
        """MoBaseMo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self.discriminator = 'object_type'

        if account_moid is not None:
            self.account_moid = account_moid
        if create_time is not None:
            self.create_time = create_time
        if domain_group_moid is not None:
            self.domain_group_moid = domain_group_moid
        if mod_time is not None:
            self.mod_time = mod_time
        if moid is not None:
            self.moid = moid
        self.object_type = object_type
        if owners is not None:
            self.owners = owners
        if shared_scope is not None:
            self.shared_scope = shared_scope
        if tags is not None:
            self.tags = tags
        if version_context is not None:
            self.version_context = version_context
        if ancestors is not None:
            self.ancestors = ancestors
        if parent is not None:
            self.parent = parent
        if permission_resources is not None:
            self.permission_resources = permission_resources

    @property
    def account_moid(self):
        """Gets the account_moid of this MoBaseMo.  # noqa: E501

        The Account ID for this managed object.    # noqa: E501

        :return: The account_moid of this MoBaseMo.  # noqa: E501
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """Sets the account_moid of this MoBaseMo.

        The Account ID for this managed object.    # noqa: E501

        :param account_moid: The account_moid of this MoBaseMo.  # noqa: E501
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """Gets the create_time of this MoBaseMo.  # noqa: E501

        The time when this managed object was created.    # noqa: E501

        :return: The create_time of this MoBaseMo.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this MoBaseMo.

        The time when this managed object was created.    # noqa: E501

        :param create_time: The create_time of this MoBaseMo.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """Gets the domain_group_moid of this MoBaseMo.  # noqa: E501

        The DomainGroup ID for this managed object.    # noqa: E501

        :return: The domain_group_moid of this MoBaseMo.  # noqa: E501
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """Sets the domain_group_moid of this MoBaseMo.

        The DomainGroup ID for this managed object.    # noqa: E501

        :param domain_group_moid: The domain_group_moid of this MoBaseMo.  # noqa: E501
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """Gets the mod_time of this MoBaseMo.  # noqa: E501

        The time when this managed object was last modified.    # noqa: E501

        :return: The mod_time of this MoBaseMo.  # noqa: E501
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """Sets the mod_time of this MoBaseMo.

        The time when this managed object was last modified.    # noqa: E501

        :param mod_time: The mod_time of this MoBaseMo.  # noqa: E501
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """Gets the moid of this MoBaseMo.  # noqa: E501

        The unique identifier of this Managed Object instance.     # noqa: E501

        :return: The moid of this MoBaseMo.  # noqa: E501
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """Sets the moid of this MoBaseMo.

        The unique identifier of this Managed Object instance.     # noqa: E501

        :param moid: The moid of this MoBaseMo.  # noqa: E501
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """Gets the object_type of this MoBaseMo.  # noqa: E501

        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.     # noqa: E501

        :return: The object_type of this MoBaseMo.  # noqa: E501
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this MoBaseMo.

        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.     # noqa: E501

        :param object_type: The object_type of this MoBaseMo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and object_type is None:  # noqa: E501
            raise ValueError(
                "Invalid value for `object_type`, must not be `None`"
            )  # noqa: E501

        self._object_type = object_type

    @property
    def owners(self):
        """Gets the owners of this MoBaseMo.  # noqa: E501


        :return: The owners of this MoBaseMo.  # noqa: E501
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this MoBaseMo.


        :param owners: The owners of this MoBaseMo.  # noqa: E501
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """Gets the shared_scope of this MoBaseMo.  # noqa: E501

        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.    # noqa: E501

        :return: The shared_scope of this MoBaseMo.  # noqa: E501
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """Sets the shared_scope of this MoBaseMo.

        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.    # noqa: E501

        :param shared_scope: The shared_scope of this MoBaseMo.  # noqa: E501
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """Gets the tags of this MoBaseMo.  # noqa: E501


        :return: The tags of this MoBaseMo.  # noqa: E501
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this MoBaseMo.


        :param tags: The tags of this MoBaseMo.  # noqa: E501
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """Gets the version_context of this MoBaseMo.  # noqa: E501


        :return: The version_context of this MoBaseMo.  # noqa: E501
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """Sets the version_context of this MoBaseMo.


        :param version_context: The version_context of this MoBaseMo.  # noqa: E501
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """Gets the ancestors of this MoBaseMo.  # noqa: E501

        A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned inline. The array containing the MO references of the ancestors in the object containment hierarchy.   # noqa: E501

        :return: The ancestors of this MoBaseMo.  # noqa: E501
        :rtype: list[MoBaseMo]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """Sets the ancestors of this MoBaseMo.

        A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned inline. The array containing the MO references of the ancestors in the object containment hierarchy.   # noqa: E501

        :param ancestors: The ancestors of this MoBaseMo.  # noqa: E501
        :type: list[MoBaseMo]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """Gets the parent of this MoBaseMo.  # noqa: E501


        :return: The parent of this MoBaseMo.  # noqa: E501
        :rtype: MoBaseMo
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this MoBaseMo.


        :param parent: The parent of this MoBaseMo.  # noqa: E501
        :type: MoBaseMo
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """Gets the permission_resources of this MoBaseMo.  # noqa: E501

        A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned inline. A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.   # noqa: E501

        :return: The permission_resources of this MoBaseMo.  # noqa: E501
        :rtype: list[MoBaseMo]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """Sets the permission_resources of this MoBaseMo.

        A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned inline. A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.   # noqa: E501

        :param permission_resources: The permission_resources of this MoBaseMo.  # noqa: E501
        :type: list[MoBaseMo]
        """

        self._permission_resources = permission_resources

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MoBaseMo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MoBaseMo):
            return True

        return self.to_dict() != other.to_dict()
