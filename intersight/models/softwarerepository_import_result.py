# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1415
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SoftwarerepositoryImportResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'error_message': 'str',
        'progress': 'int'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'error_message': 'ErrorMessage',
        'progress': 'Progress'
    }

    def __init__(self, object_type=None, error_message=None, progress=None):
        """
        SoftwarerepositoryImportResult - a model defined in Swagger
        """

        self._object_type = None
        self._error_message = None
        self._progress = None

        if object_type is not None:
          self.object_type = object_type
        if error_message is not None:
          self.error_message = error_message
        if progress is not None:
          self.progress = progress

    @property
    def object_type(self):
        """
        Gets the object_type of this SoftwarerepositoryImportResult.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :return: The object_type of this SoftwarerepositoryImportResult.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this SoftwarerepositoryImportResult.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :param object_type: The object_type of this SoftwarerepositoryImportResult.
        :type: str
        """

        self._object_type = object_type

    @property
    def error_message(self):
        """
        Gets the error_message of this SoftwarerepositoryImportResult.
        The reason for the failure of an import operation, if applicable.  

        :return: The error_message of this SoftwarerepositoryImportResult.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this SoftwarerepositoryImportResult.
        The reason for the failure of an import operation, if applicable.  

        :param error_message: The error_message of this SoftwarerepositoryImportResult.
        :type: str
        """

        self._error_message = error_message

    @property
    def progress(self):
        """
        Gets the progress of this SoftwarerepositoryImportResult.
        The progress percentage of the import operation.   

        :return: The progress of this SoftwarerepositoryImportResult.
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """
        Sets the progress of this SoftwarerepositoryImportResult.
        The progress percentage of the import operation.   

        :param progress: The progress of this SoftwarerepositoryImportResult.
        :type: int
        """

        self._progress = progress

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SoftwarerepositoryImportResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
