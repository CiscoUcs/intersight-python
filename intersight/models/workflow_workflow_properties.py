# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1461
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorkflowWorkflowProperties(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'external_meta': 'bool',
        'retryable': 'bool',
        'support_status': 'str'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'external_meta': 'ExternalMeta',
        'retryable': 'Retryable',
        'support_status': 'SupportStatus'
    }

    def __init__(self, object_type=None, external_meta=None, retryable=None, support_status='Supported'):
        """
        WorkflowWorkflowProperties - a model defined in Swagger
        """

        self._object_type = None
        self._external_meta = None
        self._retryable = None
        self._support_status = None

        if object_type is not None:
          self.object_type = object_type
        if external_meta is not None:
          self.external_meta = external_meta
        if retryable is not None:
          self.retryable = retryable
        if support_status is not None:
          self.support_status = support_status

    @property
    def object_type(self):
        """
        Gets the object_type of this WorkflowWorkflowProperties.
        The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.

        :return: The object_type of this WorkflowWorkflowProperties.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this WorkflowWorkflowProperties.
        The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.

        :param object_type: The object_type of this WorkflowWorkflowProperties.
        :type: str
        """

        self._object_type = object_type

    @property
    def external_meta(self):
        """
        Gets the external_meta of this WorkflowWorkflowProperties.
        When set to false the workflow is owned by the system and used for internal services. Such workflows cannot be directly used by external entities.

        :return: The external_meta of this WorkflowWorkflowProperties.
        :rtype: bool
        """
        return self._external_meta

    @external_meta.setter
    def external_meta(self, external_meta):
        """
        Sets the external_meta of this WorkflowWorkflowProperties.
        When set to false the workflow is owned by the system and used for internal services. Such workflows cannot be directly used by external entities.

        :param external_meta: The external_meta of this WorkflowWorkflowProperties.
        :type: bool
        """

        self._external_meta = external_meta

    @property
    def retryable(self):
        """
        Gets the retryable of this WorkflowWorkflowProperties.
        When true, this workflow can be retried if has not been modified for more than a period of 2 weeks.

        :return: The retryable of this WorkflowWorkflowProperties.
        :rtype: bool
        """
        return self._retryable

    @retryable.setter
    def retryable(self, retryable):
        """
        Sets the retryable of this WorkflowWorkflowProperties.
        When true, this workflow can be retried if has not been modified for more than a period of 2 weeks.

        :param retryable: The retryable of this WorkflowWorkflowProperties.
        :type: bool
        """

        self._retryable = retryable

    @property
    def support_status(self):
        """
        Gets the support_status of this WorkflowWorkflowProperties.
        Supported status of the definition.

        :return: The support_status of this WorkflowWorkflowProperties.
        :rtype: str
        """
        return self._support_status

    @support_status.setter
    def support_status(self, support_status):
        """
        Sets the support_status of this WorkflowWorkflowProperties.
        Supported status of the definition.

        :param support_status: The support_status of this WorkflowWorkflowProperties.
        :type: str
        """
        allowed_values = ["Supported", "Beta", "Deprecated"]
        if support_status not in allowed_values:
            raise ValueError(
                "Invalid value for `support_status` ({0}), must be one of {1}"
                .format(support_status, allowed_values)
            )

        self._support_status = support_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkflowWorkflowProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
