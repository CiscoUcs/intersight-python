# coding: utf-8

"""
    UCS Starship API

    This is the UCS Starship REST API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PackagemanagementConnectorDeployPolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'ancestors': 'list[MoMoRef]',
        'create_time': 'datetime',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'parent': 'MoMoRef',
        'tags': 'list[MoTag]',
        'account': 'MoMoRef',
        'concurrency': 'int',
        'deploy_tag_value': 'str',
        'deployed_count': 'int',
        'image': 'MoMoRef',
        'soak_time': 'int',
        'status': 'str'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'ancestors': 'Ancestors',
        'create_time': 'CreateTime',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'parent': 'Parent',
        'tags': 'Tags',
        'account': 'Account',
        'concurrency': 'Concurrency',
        'deploy_tag_value': 'DeployTagValue',
        'deployed_count': 'DeployedCount',
        'image': 'Image',
        'soak_time': 'SoakTime',
        'status': 'Status'
    }

    def __init__(self, account_moid=None, ancestors=None, create_time=None, mod_time=None, moid=None, object_type=None, owners=None, parent=None, tags=None, account=None, concurrency=None, deploy_tag_value=None, deployed_count=None, image=None, soak_time=None, status='Idle'):
        """
        PackagemanagementConnectorDeployPolicy - a model defined in Swagger
        """

        self._account_moid = None
        self._ancestors = None
        self._create_time = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._parent = None
        self._tags = None
        self._account = None
        self._concurrency = None
        self._deploy_tag_value = None
        self._deployed_count = None
        self._image = None
        self._soak_time = None
        self._status = None

        if account_moid is not None:
          self.account_moid = account_moid
        if ancestors is not None:
          self.ancestors = ancestors
        if create_time is not None:
          self.create_time = create_time
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if parent is not None:
          self.parent = parent
        if tags is not None:
          self.tags = tags
        if account is not None:
          self.account = account
        if concurrency is not None:
          self.concurrency = concurrency
        if deploy_tag_value is not None:
          self.deploy_tag_value = deploy_tag_value
        if deployed_count is not None:
          self.deployed_count = deployed_count
        if image is not None:
          self.image = image
        if soak_time is not None:
          self.soak_time = soak_time
        if status is not None:
          self.status = status

    @property
    def account_moid(self):
        """
        Gets the account_moid of this PackagemanagementConnectorDeployPolicy.
        The Account ID for this managed object.  

        :return: The account_moid of this PackagemanagementConnectorDeployPolicy.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this PackagemanagementConnectorDeployPolicy.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this PackagemanagementConnectorDeployPolicy.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def ancestors(self):
        """
        Gets the ancestors of this PackagemanagementConnectorDeployPolicy.
        Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this PackagemanagementConnectorDeployPolicy.
        :rtype: list[MoMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this PackagemanagementConnectorDeployPolicy.
        Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this PackagemanagementConnectorDeployPolicy.
        :type: list[MoMoRef]
        """

        self._ancestors = ancestors

    @property
    def create_time(self):
        """
        Gets the create_time of this PackagemanagementConnectorDeployPolicy.
        The time when this managed object was created.  

        :return: The create_time of this PackagemanagementConnectorDeployPolicy.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this PackagemanagementConnectorDeployPolicy.
        The time when this managed object was created.  

        :param create_time: The create_time of this PackagemanagementConnectorDeployPolicy.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def mod_time(self):
        """
        Gets the mod_time of this PackagemanagementConnectorDeployPolicy.
        The time when this managed object was last modified.  

        :return: The mod_time of this PackagemanagementConnectorDeployPolicy.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this PackagemanagementConnectorDeployPolicy.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this PackagemanagementConnectorDeployPolicy.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this PackagemanagementConnectorDeployPolicy.
        A unique identifier of this Managed Object instance.  

        :return: The moid of this PackagemanagementConnectorDeployPolicy.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this PackagemanagementConnectorDeployPolicy.
        A unique identifier of this Managed Object instance.  

        :param moid: The moid of this PackagemanagementConnectorDeployPolicy.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this PackagemanagementConnectorDeployPolicy.
        The fully-qualified type of this managed object, e.g. the class name.  

        :return: The object_type of this PackagemanagementConnectorDeployPolicy.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this PackagemanagementConnectorDeployPolicy.
        The fully-qualified type of this managed object, e.g. the class name.  

        :param object_type: The object_type of this PackagemanagementConnectorDeployPolicy.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this PackagemanagementConnectorDeployPolicy.
        An array of owners which represent effective ownership of this object.   

        :return: The owners of this PackagemanagementConnectorDeployPolicy.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this PackagemanagementConnectorDeployPolicy.
        An array of owners which represent effective ownership of this object.   

        :param owners: The owners of this PackagemanagementConnectorDeployPolicy.
        :type: list[str]
        """

        self._owners = owners

    @property
    def parent(self):
        """
        Gets the parent of this PackagemanagementConnectorDeployPolicy.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this PackagemanagementConnectorDeployPolicy.
        :rtype: MoMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this PackagemanagementConnectorDeployPolicy.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this PackagemanagementConnectorDeployPolicy.
        :type: MoMoRef
        """

        self._parent = parent

    @property
    def tags(self):
        """
        Gets the tags of this PackagemanagementConnectorDeployPolicy.
        An array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this PackagemanagementConnectorDeployPolicy.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this PackagemanagementConnectorDeployPolicy.
        An array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this PackagemanagementConnectorDeployPolicy.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def account(self):
        """
        Gets the account of this PackagemanagementConnectorDeployPolicy.

        :return: The account of this PackagemanagementConnectorDeployPolicy.
        :rtype: MoMoRef
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this PackagemanagementConnectorDeployPolicy.

        :param account: The account of this PackagemanagementConnectorDeployPolicy.
        :type: MoMoRef
        """

        self._account = account

    @property
    def concurrency(self):
        """
        Gets the concurrency of this PackagemanagementConnectorDeployPolicy.
        Number of concurrent device installs to perform for this policy  

        :return: The concurrency of this PackagemanagementConnectorDeployPolicy.
        :rtype: int
        """
        return self._concurrency

    @concurrency.setter
    def concurrency(self, concurrency):
        """
        Sets the concurrency of this PackagemanagementConnectorDeployPolicy.
        Number of concurrent device installs to perform for this policy  

        :param concurrency: The concurrency of this PackagemanagementConnectorDeployPolicy.
        :type: int
        """

        self._concurrency = concurrency

    @property
    def deploy_tag_value(self):
        """
        Gets the deploy_tag_value of this PackagemanagementConnectorDeployPolicy.
        Value of \"cisco.devops.ConnectorDeployPolicy\" tag key of device registration objects to apply this policy to. Devops scripts will tag devices with this value to apply this policy to a set of devices.  

        :return: The deploy_tag_value of this PackagemanagementConnectorDeployPolicy.
        :rtype: str
        """
        return self._deploy_tag_value

    @deploy_tag_value.setter
    def deploy_tag_value(self, deploy_tag_value):
        """
        Sets the deploy_tag_value of this PackagemanagementConnectorDeployPolicy.
        Value of \"cisco.devops.ConnectorDeployPolicy\" tag key of device registration objects to apply this policy to. Devops scripts will tag devices with this value to apply this policy to a set of devices.  

        :param deploy_tag_value: The deploy_tag_value of this PackagemanagementConnectorDeployPolicy.
        :type: str
        """

        self._deploy_tag_value = deploy_tag_value

    @property
    def deployed_count(self):
        """
        Gets the deployed_count of this PackagemanagementConnectorDeployPolicy.
        Number of installs performed by this policy for a given image. Count is reset on image relation change  

        :return: The deployed_count of this PackagemanagementConnectorDeployPolicy.
        :rtype: int
        """
        return self._deployed_count

    @deployed_count.setter
    def deployed_count(self, deployed_count):
        """
        Sets the deployed_count of this PackagemanagementConnectorDeployPolicy.
        Number of installs performed by this policy for a given image. Count is reset on image relation change  

        :param deployed_count: The deployed_count of this PackagemanagementConnectorDeployPolicy.
        :type: int
        """

        self._deployed_count = deployed_count

    @property
    def image(self):
        """
        Gets the image of this PackagemanagementConnectorDeployPolicy.

        :return: The image of this PackagemanagementConnectorDeployPolicy.
        :rtype: MoMoRef
        """
        return self._image

    @image.setter
    def image(self, image):
        """
        Sets the image of this PackagemanagementConnectorDeployPolicy.

        :param image: The image of this PackagemanagementConnectorDeployPolicy.
        :type: MoMoRef
        """

        self._image = image

    @property
    def soak_time(self):
        """
        Gets the soak_time of this PackagemanagementConnectorDeployPolicy.
        Minutes to soak the device connector image to ensure device returns to a good state after upgrade, with no impact to existing features  

        :return: The soak_time of this PackagemanagementConnectorDeployPolicy.
        :rtype: int
        """
        return self._soak_time

    @soak_time.setter
    def soak_time(self, soak_time):
        """
        Sets the soak_time of this PackagemanagementConnectorDeployPolicy.
        Minutes to soak the device connector image to ensure device returns to a good state after upgrade, with no impact to existing features  

        :param soak_time: The soak_time of this PackagemanagementConnectorDeployPolicy.
        :type: int
        """

        self._soak_time = soak_time

    @property
    def status(self):
        """
        Gets the status of this PackagemanagementConnectorDeployPolicy.
        Overall status of this deploy policy. In case of install failures this property can be updated to retry and continue policy device installs. Devops can also mark status as 'Failed' to stop the deploy, in case it has been determined the image is not healthy and electron has not caught the failure.   

        :return: The status of this PackagemanagementConnectorDeployPolicy.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this PackagemanagementConnectorDeployPolicy.
        Overall status of this deploy policy. In case of install failures this property can be updated to retry and continue policy device installs. Devops can also mark status as 'Failed' to stop the deploy, in case it has been determined the image is not healthy and electron has not caught the failure.   

        :param status: The status of this PackagemanagementConnectorDeployPolicy.
        :type: str
        """
        allowed_values = ["Idle", "Failed", "Retry", "Deploying"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PackagemanagementConnectorDeployPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
