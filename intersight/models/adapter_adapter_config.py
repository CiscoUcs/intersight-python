# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-961
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AdapterAdapterConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'eth_settings': 'AdapterEthSettings',
        'fc_settings': 'AdapterFcSettings',
        'slot_id': 'str'
    }

    attribute_map = {
        'eth_settings': 'EthSettings',
        'fc_settings': 'FcSettings',
        'slot_id': 'SlotId'
    }

    def __init__(self, eth_settings=None, fc_settings=None, slot_id=None):
        """
        AdapterAdapterConfig - a model defined in Swagger
        """

        self._eth_settings = None
        self._fc_settings = None
        self._slot_id = None

        if eth_settings is not None:
          self.eth_settings = eth_settings
        if fc_settings is not None:
          self.fc_settings = fc_settings
        if slot_id is not None:
          self.slot_id = slot_id

    @property
    def eth_settings(self):
        """
        Gets the eth_settings of this AdapterAdapterConfig.
        Global Ethernet settings for this adapter.  

        :return: The eth_settings of this AdapterAdapterConfig.
        :rtype: AdapterEthSettings
        """
        return self._eth_settings

    @eth_settings.setter
    def eth_settings(self, eth_settings):
        """
        Sets the eth_settings of this AdapterAdapterConfig.
        Global Ethernet settings for this adapter.  

        :param eth_settings: The eth_settings of this AdapterAdapterConfig.
        :type: AdapterEthSettings
        """

        self._eth_settings = eth_settings

    @property
    def fc_settings(self):
        """
        Gets the fc_settings of this AdapterAdapterConfig.
        Global Fibre Channel settings for this adapter.  

        :return: The fc_settings of this AdapterAdapterConfig.
        :rtype: AdapterFcSettings
        """
        return self._fc_settings

    @fc_settings.setter
    def fc_settings(self, fc_settings):
        """
        Sets the fc_settings of this AdapterAdapterConfig.
        Global Fibre Channel settings for this adapter.  

        :param fc_settings: The fc_settings of this AdapterAdapterConfig.
        :type: AdapterFcSettings
        """

        self._fc_settings = fc_settings

    @property
    def slot_id(self):
        """
        Gets the slot_id of this AdapterAdapterConfig.
        PCIe slot where the VIC adapter is installed. Supported values are (1-15) and MLOM.   

        :return: The slot_id of this AdapterAdapterConfig.
        :rtype: str
        """
        return self._slot_id

    @slot_id.setter
    def slot_id(self, slot_id):
        """
        Sets the slot_id of this AdapterAdapterConfig.
        PCIe slot where the VIC adapter is installed. Supported values are (1-15) and MLOM.   

        :param slot_id: The slot_id of this AdapterAdapterConfig.
        :type: str
        """

        self._slot_id = slot_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AdapterAdapterConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
