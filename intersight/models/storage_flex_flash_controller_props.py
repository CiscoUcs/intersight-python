# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.7-681
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StorageFlexFlashControllerProps(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'ancestors': 'list[MoBaseMoRef]',
        'create_time': 'datetime',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'parent': 'MoBaseMoRef',
        'tags': 'list[MoTag]',
        'device_mo_id': 'str',
        'dn': 'str',
        'rn': 'str',
        'model': 'str',
        'revision': 'str',
        'serial': 'str',
        'vendor': 'str',
        'cards_manageable': 'str',
        'configured_mode': 'str',
        'controller_name': 'str',
        'controller_status': 'str',
        'fw_version': 'str',
        'internal_state': 'str',
        'operating_mode': 'str',
        'physical_drive_count': 'str',
        'product_name': 'str',
        'registered_device': 'AssetDeviceRegistrationRef',
        'startup_fw_version': 'str',
        'storage_flex_flash_controller': 'StorageFlexFlashControllerRef',
        'virtual_drive_count': 'str'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'ancestors': 'Ancestors',
        'create_time': 'CreateTime',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'parent': 'Parent',
        'tags': 'Tags',
        'device_mo_id': 'DeviceMoId',
        'dn': 'Dn',
        'rn': 'Rn',
        'model': 'Model',
        'revision': 'Revision',
        'serial': 'Serial',
        'vendor': 'Vendor',
        'cards_manageable': 'CardsManageable',
        'configured_mode': 'ConfiguredMode',
        'controller_name': 'ControllerName',
        'controller_status': 'ControllerStatus',
        'fw_version': 'FwVersion',
        'internal_state': 'InternalState',
        'operating_mode': 'OperatingMode',
        'physical_drive_count': 'PhysicalDriveCount',
        'product_name': 'ProductName',
        'registered_device': 'RegisteredDevice',
        'startup_fw_version': 'StartupFwVersion',
        'storage_flex_flash_controller': 'StorageFlexFlashController',
        'virtual_drive_count': 'VirtualDriveCount'
    }

    def __init__(self, account_moid=None, ancestors=None, create_time=None, mod_time=None, moid=None, object_type=None, owners=None, parent=None, tags=None, device_mo_id=None, dn=None, rn=None, model=None, revision=None, serial=None, vendor=None, cards_manageable=None, configured_mode=None, controller_name=None, controller_status=None, fw_version=None, internal_state=None, operating_mode=None, physical_drive_count=None, product_name=None, registered_device=None, startup_fw_version=None, storage_flex_flash_controller=None, virtual_drive_count=None):
        """
        StorageFlexFlashControllerProps - a model defined in Swagger
        """

        self._account_moid = None
        self._ancestors = None
        self._create_time = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._parent = None
        self._tags = None
        self._device_mo_id = None
        self._dn = None
        self._rn = None
        self._model = None
        self._revision = None
        self._serial = None
        self._vendor = None
        self._cards_manageable = None
        self._configured_mode = None
        self._controller_name = None
        self._controller_status = None
        self._fw_version = None
        self._internal_state = None
        self._operating_mode = None
        self._physical_drive_count = None
        self._product_name = None
        self._registered_device = None
        self._startup_fw_version = None
        self._storage_flex_flash_controller = None
        self._virtual_drive_count = None

        if account_moid is not None:
          self.account_moid = account_moid
        if ancestors is not None:
          self.ancestors = ancestors
        if create_time is not None:
          self.create_time = create_time
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if parent is not None:
          self.parent = parent
        if tags is not None:
          self.tags = tags
        if device_mo_id is not None:
          self.device_mo_id = device_mo_id
        if dn is not None:
          self.dn = dn
        if rn is not None:
          self.rn = rn
        if model is not None:
          self.model = model
        if revision is not None:
          self.revision = revision
        if serial is not None:
          self.serial = serial
        if vendor is not None:
          self.vendor = vendor
        if cards_manageable is not None:
          self.cards_manageable = cards_manageable
        if configured_mode is not None:
          self.configured_mode = configured_mode
        if controller_name is not None:
          self.controller_name = controller_name
        if controller_status is not None:
          self.controller_status = controller_status
        if fw_version is not None:
          self.fw_version = fw_version
        if internal_state is not None:
          self.internal_state = internal_state
        if operating_mode is not None:
          self.operating_mode = operating_mode
        if physical_drive_count is not None:
          self.physical_drive_count = physical_drive_count
        if product_name is not None:
          self.product_name = product_name
        if registered_device is not None:
          self.registered_device = registered_device
        if startup_fw_version is not None:
          self.startup_fw_version = startup_fw_version
        if storage_flex_flash_controller is not None:
          self.storage_flex_flash_controller = storage_flex_flash_controller
        if virtual_drive_count is not None:
          self.virtual_drive_count = virtual_drive_count

    @property
    def account_moid(self):
        """
        Gets the account_moid of this StorageFlexFlashControllerProps.
        The Account ID for this managed object.  

        :return: The account_moid of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this StorageFlexFlashControllerProps.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def ancestors(self):
        """
        Gets the ancestors of this StorageFlexFlashControllerProps.
        Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this StorageFlexFlashControllerProps.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this StorageFlexFlashControllerProps.
        Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this StorageFlexFlashControllerProps.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def create_time(self):
        """
        Gets the create_time of this StorageFlexFlashControllerProps.
        The time when this managed object was created.  

        :return: The create_time of this StorageFlexFlashControllerProps.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this StorageFlexFlashControllerProps.
        The time when this managed object was created.  

        :param create_time: The create_time of this StorageFlexFlashControllerProps.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def mod_time(self):
        """
        Gets the mod_time of this StorageFlexFlashControllerProps.
        The time when this managed object was last modified.  

        :return: The mod_time of this StorageFlexFlashControllerProps.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this StorageFlexFlashControllerProps.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this StorageFlexFlashControllerProps.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this StorageFlexFlashControllerProps.
        A unique identifier of this Managed Object instance.  

        :return: The moid of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this StorageFlexFlashControllerProps.
        A unique identifier of this Managed Object instance.  

        :param moid: The moid of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this StorageFlexFlashControllerProps.
        The fully-qualified type of this managed object, e.g. the class name.  

        :return: The object_type of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this StorageFlexFlashControllerProps.
        The fully-qualified type of this managed object, e.g. the class name.  

        :param object_type: The object_type of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this StorageFlexFlashControllerProps.
        An array of owners which represent effective ownership of this object.   

        :return: The owners of this StorageFlexFlashControllerProps.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this StorageFlexFlashControllerProps.
        An array of owners which represent effective ownership of this object.   

        :param owners: The owners of this StorageFlexFlashControllerProps.
        :type: list[str]
        """

        self._owners = owners

    @property
    def parent(self):
        """
        Gets the parent of this StorageFlexFlashControllerProps.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this StorageFlexFlashControllerProps.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this StorageFlexFlashControllerProps.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this StorageFlexFlashControllerProps.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def tags(self):
        """
        Gets the tags of this StorageFlexFlashControllerProps.
        An array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this StorageFlexFlashControllerProps.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this StorageFlexFlashControllerProps.
        An array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this StorageFlexFlashControllerProps.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def device_mo_id(self):
        """
        Gets the device_mo_id of this StorageFlexFlashControllerProps.

        :return: The device_mo_id of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._device_mo_id

    @device_mo_id.setter
    def device_mo_id(self, device_mo_id):
        """
        Sets the device_mo_id of this StorageFlexFlashControllerProps.

        :param device_mo_id: The device_mo_id of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._device_mo_id = device_mo_id

    @property
    def dn(self):
        """
        Gets the dn of this StorageFlexFlashControllerProps.

        :return: The dn of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """
        Sets the dn of this StorageFlexFlashControllerProps.

        :param dn: The dn of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._dn = dn

    @property
    def rn(self):
        """
        Gets the rn of this StorageFlexFlashControllerProps.

        :return: The rn of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """
        Sets the rn of this StorageFlexFlashControllerProps.

        :param rn: The rn of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._rn = rn

    @property
    def model(self):
        """
        Gets the model of this StorageFlexFlashControllerProps.

        :return: The model of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this StorageFlexFlashControllerProps.

        :param model: The model of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._model = model

    @property
    def revision(self):
        """
        Gets the revision of this StorageFlexFlashControllerProps.

        :return: The revision of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this StorageFlexFlashControllerProps.

        :param revision: The revision of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._revision = revision

    @property
    def serial(self):
        """
        Gets the serial of this StorageFlexFlashControllerProps.

        :return: The serial of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """
        Sets the serial of this StorageFlexFlashControllerProps.

        :param serial: The serial of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._serial = serial

    @property
    def vendor(self):
        """
        Gets the vendor of this StorageFlexFlashControllerProps.

        :return: The vendor of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """
        Sets the vendor of this StorageFlexFlashControllerProps.

        :param vendor: The vendor of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._vendor = vendor

    @property
    def cards_manageable(self):
        """
        Gets the cards_manageable of this StorageFlexFlashControllerProps.

        :return: The cards_manageable of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._cards_manageable

    @cards_manageable.setter
    def cards_manageable(self, cards_manageable):
        """
        Sets the cards_manageable of this StorageFlexFlashControllerProps.

        :param cards_manageable: The cards_manageable of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._cards_manageable = cards_manageable

    @property
    def configured_mode(self):
        """
        Gets the configured_mode of this StorageFlexFlashControllerProps.

        :return: The configured_mode of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._configured_mode

    @configured_mode.setter
    def configured_mode(self, configured_mode):
        """
        Sets the configured_mode of this StorageFlexFlashControllerProps.

        :param configured_mode: The configured_mode of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._configured_mode = configured_mode

    @property
    def controller_name(self):
        """
        Gets the controller_name of this StorageFlexFlashControllerProps.

        :return: The controller_name of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._controller_name

    @controller_name.setter
    def controller_name(self, controller_name):
        """
        Sets the controller_name of this StorageFlexFlashControllerProps.

        :param controller_name: The controller_name of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._controller_name = controller_name

    @property
    def controller_status(self):
        """
        Gets the controller_status of this StorageFlexFlashControllerProps.

        :return: The controller_status of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._controller_status

    @controller_status.setter
    def controller_status(self, controller_status):
        """
        Sets the controller_status of this StorageFlexFlashControllerProps.

        :param controller_status: The controller_status of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._controller_status = controller_status

    @property
    def fw_version(self):
        """
        Gets the fw_version of this StorageFlexFlashControllerProps.

        :return: The fw_version of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._fw_version

    @fw_version.setter
    def fw_version(self, fw_version):
        """
        Sets the fw_version of this StorageFlexFlashControllerProps.

        :param fw_version: The fw_version of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._fw_version = fw_version

    @property
    def internal_state(self):
        """
        Gets the internal_state of this StorageFlexFlashControllerProps.

        :return: The internal_state of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._internal_state

    @internal_state.setter
    def internal_state(self, internal_state):
        """
        Sets the internal_state of this StorageFlexFlashControllerProps.

        :param internal_state: The internal_state of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._internal_state = internal_state

    @property
    def operating_mode(self):
        """
        Gets the operating_mode of this StorageFlexFlashControllerProps.

        :return: The operating_mode of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._operating_mode

    @operating_mode.setter
    def operating_mode(self, operating_mode):
        """
        Sets the operating_mode of this StorageFlexFlashControllerProps.

        :param operating_mode: The operating_mode of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._operating_mode = operating_mode

    @property
    def physical_drive_count(self):
        """
        Gets the physical_drive_count of this StorageFlexFlashControllerProps.

        :return: The physical_drive_count of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._physical_drive_count

    @physical_drive_count.setter
    def physical_drive_count(self, physical_drive_count):
        """
        Sets the physical_drive_count of this StorageFlexFlashControllerProps.

        :param physical_drive_count: The physical_drive_count of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._physical_drive_count = physical_drive_count

    @property
    def product_name(self):
        """
        Gets the product_name of this StorageFlexFlashControllerProps.

        :return: The product_name of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """
        Sets the product_name of this StorageFlexFlashControllerProps.

        :param product_name: The product_name of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._product_name = product_name

    @property
    def registered_device(self):
        """
        Gets the registered_device of this StorageFlexFlashControllerProps.

        :return: The registered_device of this StorageFlexFlashControllerProps.
        :rtype: AssetDeviceRegistrationRef
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """
        Sets the registered_device of this StorageFlexFlashControllerProps.

        :param registered_device: The registered_device of this StorageFlexFlashControllerProps.
        :type: AssetDeviceRegistrationRef
        """

        self._registered_device = registered_device

    @property
    def startup_fw_version(self):
        """
        Gets the startup_fw_version of this StorageFlexFlashControllerProps.

        :return: The startup_fw_version of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._startup_fw_version

    @startup_fw_version.setter
    def startup_fw_version(self, startup_fw_version):
        """
        Sets the startup_fw_version of this StorageFlexFlashControllerProps.

        :param startup_fw_version: The startup_fw_version of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._startup_fw_version = startup_fw_version

    @property
    def storage_flex_flash_controller(self):
        """
        Gets the storage_flex_flash_controller of this StorageFlexFlashControllerProps.

        :return: The storage_flex_flash_controller of this StorageFlexFlashControllerProps.
        :rtype: StorageFlexFlashControllerRef
        """
        return self._storage_flex_flash_controller

    @storage_flex_flash_controller.setter
    def storage_flex_flash_controller(self, storage_flex_flash_controller):
        """
        Sets the storage_flex_flash_controller of this StorageFlexFlashControllerProps.

        :param storage_flex_flash_controller: The storage_flex_flash_controller of this StorageFlexFlashControllerProps.
        :type: StorageFlexFlashControllerRef
        """

        self._storage_flex_flash_controller = storage_flex_flash_controller

    @property
    def virtual_drive_count(self):
        """
        Gets the virtual_drive_count of this StorageFlexFlashControllerProps.

        :return: The virtual_drive_count of this StorageFlexFlashControllerProps.
        :rtype: str
        """
        return self._virtual_drive_count

    @virtual_drive_count.setter
    def virtual_drive_count(self, virtual_drive_count):
        """
        Sets the virtual_drive_count of this StorageFlexFlashControllerProps.

        :param virtual_drive_count: The virtual_drive_count of this StorageFlexFlashControllerProps.
        :type: str
        """

        self._virtual_drive_count = virtual_drive_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StorageFlexFlashControllerProps):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
