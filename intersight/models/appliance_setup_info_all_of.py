# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ApplianceSetupInfoAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'build_type': 'str',
        'capabilities': 'list[ApplianceKeyValuePair]',
        'cloud_url': 'str',
        'end_time': 'datetime',
        'setup_states': 'list[str]',
        'start_time': 'datetime',
        'account': 'IamAccount'
    }

    attribute_map = {
        'build_type': 'BuildType',
        'capabilities': 'Capabilities',
        'cloud_url': 'CloudUrl',
        'end_time': 'EndTime',
        'setup_states': 'SetupStates',
        'start_time': 'StartTime',
        'account': 'Account'
    }

    def __init__(self,
                 build_type=None,
                 capabilities=None,
                 cloud_url=None,
                 end_time=None,
                 setup_states=None,
                 start_time=None,
                 account=None,
                 local_vars_configuration=None):  # noqa: E501
        """ApplianceSetupInfoAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._build_type = None
        self._capabilities = None
        self._cloud_url = None
        self._end_time = None
        self._setup_states = None
        self._start_time = None
        self._account = None
        self.discriminator = None

        if build_type is not None:
            self.build_type = build_type
        if capabilities is not None:
            self.capabilities = capabilities
        if cloud_url is not None:
            self.cloud_url = cloud_url
        if end_time is not None:
            self.end_time = end_time
        if setup_states is not None:
            self.setup_states = setup_states
        if start_time is not None:
            self.start_time = start_time
        if account is not None:
            self.account = account

    @property
    def build_type(self):
        """Gets the build_type of this ApplianceSetupInfoAllOf.  # noqa: E501

        Build type of the Intersight Appliance setup (e.g. release or debug).    # noqa: E501

        :return: The build_type of this ApplianceSetupInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """Sets the build_type of this ApplianceSetupInfoAllOf.

        Build type of the Intersight Appliance setup (e.g. release or debug).    # noqa: E501

        :param build_type: The build_type of this ApplianceSetupInfoAllOf.  # noqa: E501
        :type: str
        """

        self._build_type = build_type

    @property
    def capabilities(self):
        """Gets the capabilities of this ApplianceSetupInfoAllOf.  # noqa: E501


        :return: The capabilities of this ApplianceSetupInfoAllOf.  # noqa: E501
        :rtype: list[ApplianceKeyValuePair]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this ApplianceSetupInfoAllOf.


        :param capabilities: The capabilities of this ApplianceSetupInfoAllOf.  # noqa: E501
        :type: list[ApplianceKeyValuePair]
        """

        self._capabilities = capabilities

    @property
    def cloud_url(self):
        """Gets the cloud_url of this ApplianceSetupInfoAllOf.  # noqa: E501

        URL of the Intersight to which this Intersight Appliance is connected to.    # noqa: E501

        :return: The cloud_url of this ApplianceSetupInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._cloud_url

    @cloud_url.setter
    def cloud_url(self, cloud_url):
        """Sets the cloud_url of this ApplianceSetupInfoAllOf.

        URL of the Intersight to which this Intersight Appliance is connected to.    # noqa: E501

        :param cloud_url: The cloud_url of this ApplianceSetupInfoAllOf.  # noqa: E501
        :type: str
        """

        self._cloud_url = cloud_url

    @property
    def end_time(self):
        """Gets the end_time of this ApplianceSetupInfoAllOf.  # noqa: E501

        End date of the Intersight Appliance's initial setup.     # noqa: E501

        :return: The end_time of this ApplianceSetupInfoAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ApplianceSetupInfoAllOf.

        End date of the Intersight Appliance's initial setup.     # noqa: E501

        :param end_time: The end_time of this ApplianceSetupInfoAllOf.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def setup_states(self):
        """Gets the setup_states of this ApplianceSetupInfoAllOf.  # noqa: E501


        :return: The setup_states of this ApplianceSetupInfoAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._setup_states

    @setup_states.setter
    def setup_states(self, setup_states):
        """Sets the setup_states of this ApplianceSetupInfoAllOf.


        :param setup_states: The setup_states of this ApplianceSetupInfoAllOf.  # noqa: E501
        :type: list[str]
        """

        self._setup_states = setup_states

    @property
    def start_time(self):
        """Gets the start_time of this ApplianceSetupInfoAllOf.  # noqa: E501

        Start date of the Intersight Appliance's initial setup.     # noqa: E501

        :return: The start_time of this ApplianceSetupInfoAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ApplianceSetupInfoAllOf.

        Start date of the Intersight Appliance's initial setup.     # noqa: E501

        :param start_time: The start_time of this ApplianceSetupInfoAllOf.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def account(self):
        """Gets the account of this ApplianceSetupInfoAllOf.  # noqa: E501


        :return: The account of this ApplianceSetupInfoAllOf.  # noqa: E501
        :rtype: IamAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ApplianceSetupInfoAllOf.


        :param account: The account of this ApplianceSetupInfoAllOf.  # noqa: E501
        :type: IamAccount
        """

        self._account = account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplianceSetupInfoAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplianceSetupInfoAllOf):
            return True

        return self.to_dict() != other.to_dict()
