# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class NiatelemetryNiaInventory(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cpu': 'float',
        'crash_reset_logs': 'str',
        'device_name': 'str',
        'device_type': 'str',
        'disk': 'NiatelemetryDiskinfo',
        'log_in_time': 'str',
        'log_out_time': 'str',
        'memory': 'int',
        'record_type': 'str',
        'record_version': 'str',
        'serial': 'str',
        'software_download': 'str',
        'version': 'str',
        'license_state': 'NiatelemetryNiaLicenseState',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'cpu': 'Cpu',
        'crash_reset_logs': 'CrashResetLogs',
        'device_name': 'DeviceName',
        'device_type': 'DeviceType',
        'disk': 'Disk',
        'log_in_time': 'LogInTime',
        'log_out_time': 'LogOutTime',
        'memory': 'Memory',
        'record_type': 'RecordType',
        'record_version': 'RecordVersion',
        'serial': 'Serial',
        'software_download': 'SoftwareDownload',
        'version': 'Version',
        'license_state': 'LicenseState',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 cpu=None,
                 crash_reset_logs=None,
                 device_name=None,
                 device_type=None,
                 disk=None,
                 log_in_time=None,
                 log_out_time=None,
                 memory=None,
                 record_type=None,
                 record_version=None,
                 serial=None,
                 software_download=None,
                 version=None,
                 license_state=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """NiatelemetryNiaInventory - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cpu = None
        self._crash_reset_logs = None
        self._device_name = None
        self._device_type = None
        self._disk = None
        self._log_in_time = None
        self._log_out_time = None
        self._memory = None
        self._record_type = None
        self._record_version = None
        self._serial = None
        self._software_download = None
        self._version = None
        self._license_state = None
        self._registered_device = None
        self.discriminator = None

        if cpu is not None:
            self.cpu = cpu
        if crash_reset_logs is not None:
            self.crash_reset_logs = crash_reset_logs
        if device_name is not None:
            self.device_name = device_name
        if device_type is not None:
            self.device_type = device_type
        if disk is not None:
            self.disk = disk
        if log_in_time is not None:
            self.log_in_time = log_in_time
        if log_out_time is not None:
            self.log_out_time = log_out_time
        if memory is not None:
            self.memory = memory
        if record_type is not None:
            self.record_type = record_type
        if record_version is not None:
            self.record_version = record_version
        if serial is not None:
            self.serial = serial
        if software_download is not None:
            self.software_download = software_download
        if version is not None:
            self.version = version
        if license_state is not None:
            self.license_state = license_state
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def cpu(self):
        """Gets the cpu of this NiatelemetryNiaInventory.  # noqa: E501

        CPU usage of device being inventoried.    # noqa: E501

        :return: The cpu of this NiatelemetryNiaInventory.  # noqa: E501
        :rtype: float
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this NiatelemetryNiaInventory.

        CPU usage of device being inventoried.    # noqa: E501

        :param cpu: The cpu of this NiatelemetryNiaInventory.  # noqa: E501
        :type: float
        """

        self._cpu = cpu

    @property
    def crash_reset_logs(self):
        """Gets the crash_reset_logs of this NiatelemetryNiaInventory.  # noqa: E501

        Last crash reset reason of device being inventoried.    # noqa: E501

        :return: The crash_reset_logs of this NiatelemetryNiaInventory.  # noqa: E501
        :rtype: str
        """
        return self._crash_reset_logs

    @crash_reset_logs.setter
    def crash_reset_logs(self, crash_reset_logs):
        """Sets the crash_reset_logs of this NiatelemetryNiaInventory.

        Last crash reset reason of device being inventoried.    # noqa: E501

        :param crash_reset_logs: The crash_reset_logs of this NiatelemetryNiaInventory.  # noqa: E501
        :type: str
        """

        self._crash_reset_logs = crash_reset_logs

    @property
    def device_name(self):
        """Gets the device_name of this NiatelemetryNiaInventory.  # noqa: E501

        Name of device being inventoried.    # noqa: E501

        :return: The device_name of this NiatelemetryNiaInventory.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this NiatelemetryNiaInventory.

        Name of device being inventoried.    # noqa: E501

        :param device_name: The device_name of this NiatelemetryNiaInventory.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def device_type(self):
        """Gets the device_type of this NiatelemetryNiaInventory.  # noqa: E501

        Type of device being inventoried.    # noqa: E501

        :return: The device_type of this NiatelemetryNiaInventory.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this NiatelemetryNiaInventory.

        Type of device being inventoried.    # noqa: E501

        :param device_type: The device_type of this NiatelemetryNiaInventory.  # noqa: E501
        :type: str
        """

        self._device_type = device_type

    @property
    def disk(self):
        """Gets the disk of this NiatelemetryNiaInventory.  # noqa: E501


        :return: The disk of this NiatelemetryNiaInventory.  # noqa: E501
        :rtype: NiatelemetryDiskinfo
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this NiatelemetryNiaInventory.


        :param disk: The disk of this NiatelemetryNiaInventory.  # noqa: E501
        :type: NiatelemetryDiskinfo
        """

        self._disk = disk

    @property
    def log_in_time(self):
        """Gets the log_in_time of this NiatelemetryNiaInventory.  # noqa: E501

        Last log in time device being inventoried.    # noqa: E501

        :return: The log_in_time of this NiatelemetryNiaInventory.  # noqa: E501
        :rtype: str
        """
        return self._log_in_time

    @log_in_time.setter
    def log_in_time(self, log_in_time):
        """Sets the log_in_time of this NiatelemetryNiaInventory.

        Last log in time device being inventoried.    # noqa: E501

        :param log_in_time: The log_in_time of this NiatelemetryNiaInventory.  # noqa: E501
        :type: str
        """

        self._log_in_time = log_in_time

    @property
    def log_out_time(self):
        """Gets the log_out_time of this NiatelemetryNiaInventory.  # noqa: E501

        Last log out time of device being inventoried.    # noqa: E501

        :return: The log_out_time of this NiatelemetryNiaInventory.  # noqa: E501
        :rtype: str
        """
        return self._log_out_time

    @log_out_time.setter
    def log_out_time(self, log_out_time):
        """Sets the log_out_time of this NiatelemetryNiaInventory.

        Last log out time of device being inventoried.    # noqa: E501

        :param log_out_time: The log_out_time of this NiatelemetryNiaInventory.  # noqa: E501
        :type: str
        """

        self._log_out_time = log_out_time

    @property
    def memory(self):
        """Gets the memory of this NiatelemetryNiaInventory.  # noqa: E501

        Memory usage of device being inventoried.    # noqa: E501

        :return: The memory of this NiatelemetryNiaInventory.  # noqa: E501
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this NiatelemetryNiaInventory.

        Memory usage of device being inventoried.    # noqa: E501

        :param memory: The memory of this NiatelemetryNiaInventory.  # noqa: E501
        :type: int
        """

        self._memory = memory

    @property
    def record_type(self):
        """Gets the record_type of this NiatelemetryNiaInventory.  # noqa: E501

        Type of record DCNM / APIC / SE.    # noqa: E501

        :return: The record_type of this NiatelemetryNiaInventory.  # noqa: E501
        :rtype: str
        """
        return self._record_type

    @record_type.setter
    def record_type(self, record_type):
        """Sets the record_type of this NiatelemetryNiaInventory.

        Type of record DCNM / APIC / SE.    # noqa: E501

        :param record_type: The record_type of this NiatelemetryNiaInventory.  # noqa: E501
        :type: str
        """

        self._record_type = record_type

    @property
    def record_version(self):
        """Gets the record_version of this NiatelemetryNiaInventory.  # noqa: E501

        Version of record being pushed.    # noqa: E501

        :return: The record_version of this NiatelemetryNiaInventory.  # noqa: E501
        :rtype: str
        """
        return self._record_version

    @record_version.setter
    def record_version(self, record_version):
        """Sets the record_version of this NiatelemetryNiaInventory.

        Version of record being pushed.    # noqa: E501

        :param record_version: The record_version of this NiatelemetryNiaInventory.  # noqa: E501
        :type: str
        """

        self._record_version = record_version

    @property
    def serial(self):
        """Gets the serial of this NiatelemetryNiaInventory.  # noqa: E501

        Serial number of device being invetoried.    # noqa: E501

        :return: The serial of this NiatelemetryNiaInventory.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this NiatelemetryNiaInventory.

        Serial number of device being invetoried.    # noqa: E501

        :param serial: The serial of this NiatelemetryNiaInventory.  # noqa: E501
        :type: str
        """

        self._serial = serial

    @property
    def software_download(self):
        """Gets the software_download of this NiatelemetryNiaInventory.  # noqa: E501

        Last software downloaded of device being inventoried.    # noqa: E501

        :return: The software_download of this NiatelemetryNiaInventory.  # noqa: E501
        :rtype: str
        """
        return self._software_download

    @software_download.setter
    def software_download(self, software_download):
        """Sets the software_download of this NiatelemetryNiaInventory.

        Last software downloaded of device being inventoried.    # noqa: E501

        :param software_download: The software_download of this NiatelemetryNiaInventory.  # noqa: E501
        :type: str
        """

        self._software_download = software_download

    @property
    def version(self):
        """Gets the version of this NiatelemetryNiaInventory.  # noqa: E501

        Software version of device being inventoried.     # noqa: E501

        :return: The version of this NiatelemetryNiaInventory.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this NiatelemetryNiaInventory.

        Software version of device being inventoried.     # noqa: E501

        :param version: The version of this NiatelemetryNiaInventory.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def license_state(self):
        """Gets the license_state of this NiatelemetryNiaInventory.  # noqa: E501


        :return: The license_state of this NiatelemetryNiaInventory.  # noqa: E501
        :rtype: NiatelemetryNiaLicenseState
        """
        return self._license_state

    @license_state.setter
    def license_state(self, license_state):
        """Sets the license_state of this NiatelemetryNiaInventory.


        :param license_state: The license_state of this NiatelemetryNiaInventory.  # noqa: E501
        :type: NiatelemetryNiaLicenseState
        """

        self._license_state = license_state

    @property
    def registered_device(self):
        """Gets the registered_device of this NiatelemetryNiaInventory.  # noqa: E501


        :return: The registered_device of this NiatelemetryNiaInventory.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this NiatelemetryNiaInventory.


        :param registered_device: The registered_device of this NiatelemetryNiaInventory.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NiatelemetryNiaInventory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NiatelemetryNiaInventory):
            return True

        return self.to_dict() != other.to_dict()
