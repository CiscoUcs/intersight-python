# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class HyperflexAppCatalogAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'version': 'str',
        'feature_limit_external': 'HyperflexFeatureLimitExternal',
        'feature_limit_internal': 'HyperflexFeatureLimitInternal',
        'hxdp_versions': 'list[HyperflexHxdpVersion]',
        'hyperflex_capability_infos': 'list[HyperflexCapabilityInfo]',
        'hyperflex_software_compatibility_infos':
        'list[HclHyperflexSoftwareCompatibilityInfo]',
        'server_firmware_version': 'HyperflexServerFirmwareVersion',
        'server_model': 'HyperflexServerModel'
    }

    attribute_map = {
        'version': 'Version',
        'feature_limit_external': 'FeatureLimitExternal',
        'feature_limit_internal': 'FeatureLimitInternal',
        'hxdp_versions': 'HxdpVersions',
        'hyperflex_capability_infos': 'HyperflexCapabilityInfos',
        'hyperflex_software_compatibility_infos':
        'HyperflexSoftwareCompatibilityInfos',
        'server_firmware_version': 'ServerFirmwareVersion',
        'server_model': 'ServerModel'
    }

    def __init__(self,
                 version=None,
                 feature_limit_external=None,
                 feature_limit_internal=None,
                 hxdp_versions=None,
                 hyperflex_capability_infos=None,
                 hyperflex_software_compatibility_infos=None,
                 server_firmware_version=None,
                 server_model=None,
                 local_vars_configuration=None):  # noqa: E501
        """HyperflexAppCatalogAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._version = None
        self._feature_limit_external = None
        self._feature_limit_internal = None
        self._hxdp_versions = None
        self._hyperflex_capability_infos = None
        self._hyperflex_software_compatibility_infos = None
        self._server_firmware_version = None
        self._server_model = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if feature_limit_external is not None:
            self.feature_limit_external = feature_limit_external
        if feature_limit_internal is not None:
            self.feature_limit_internal = feature_limit_internal
        if hxdp_versions is not None:
            self.hxdp_versions = hxdp_versions
        if hyperflex_capability_infos is not None:
            self.hyperflex_capability_infos = hyperflex_capability_infos
        if hyperflex_software_compatibility_infos is not None:
            self.hyperflex_software_compatibility_infos = hyperflex_software_compatibility_infos
        if server_firmware_version is not None:
            self.server_firmware_version = server_firmware_version
        if server_model is not None:
            self.server_model = server_model

    @property
    def version(self):
        """Gets the version of this HyperflexAppCatalogAllOf.  # noqa: E501

        The catalog version used in HyperFlex cluster configuration service.     # noqa: E501

        :return: The version of this HyperflexAppCatalogAllOf.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this HyperflexAppCatalogAllOf.

        The catalog version used in HyperFlex cluster configuration service.     # noqa: E501

        :param version: The version of this HyperflexAppCatalogAllOf.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def feature_limit_external(self):
        """Gets the feature_limit_external of this HyperflexAppCatalogAllOf.  # noqa: E501


        :return: The feature_limit_external of this HyperflexAppCatalogAllOf.  # noqa: E501
        :rtype: HyperflexFeatureLimitExternal
        """
        return self._feature_limit_external

    @feature_limit_external.setter
    def feature_limit_external(self, feature_limit_external):
        """Sets the feature_limit_external of this HyperflexAppCatalogAllOf.


        :param feature_limit_external: The feature_limit_external of this HyperflexAppCatalogAllOf.  # noqa: E501
        :type: HyperflexFeatureLimitExternal
        """

        self._feature_limit_external = feature_limit_external

    @property
    def feature_limit_internal(self):
        """Gets the feature_limit_internal of this HyperflexAppCatalogAllOf.  # noqa: E501


        :return: The feature_limit_internal of this HyperflexAppCatalogAllOf.  # noqa: E501
        :rtype: HyperflexFeatureLimitInternal
        """
        return self._feature_limit_internal

    @feature_limit_internal.setter
    def feature_limit_internal(self, feature_limit_internal):
        """Sets the feature_limit_internal of this HyperflexAppCatalogAllOf.


        :param feature_limit_internal: The feature_limit_internal of this HyperflexAppCatalogAllOf.  # noqa: E501
        :type: HyperflexFeatureLimitInternal
        """

        self._feature_limit_internal = feature_limit_internal

    @property
    def hxdp_versions(self):
        """Gets the hxdp_versions of this HyperflexAppCatalogAllOf.  # noqa: E501

        A reference to a hyperflexHxdpVersion resource. When the $expand query parameter is specified, the referenced resource is returned inline. The list of supported HyperFlex Data Platform versions.   # noqa: E501

        :return: The hxdp_versions of this HyperflexAppCatalogAllOf.  # noqa: E501
        :rtype: list[HyperflexHxdpVersion]
        """
        return self._hxdp_versions

    @hxdp_versions.setter
    def hxdp_versions(self, hxdp_versions):
        """Sets the hxdp_versions of this HyperflexAppCatalogAllOf.

        A reference to a hyperflexHxdpVersion resource. When the $expand query parameter is specified, the referenced resource is returned inline. The list of supported HyperFlex Data Platform versions.   # noqa: E501

        :param hxdp_versions: The hxdp_versions of this HyperflexAppCatalogAllOf.  # noqa: E501
        :type: list[HyperflexHxdpVersion]
        """

        self._hxdp_versions = hxdp_versions

    @property
    def hyperflex_capability_infos(self):
        """Gets the hyperflex_capability_infos of this HyperflexAppCatalogAllOf.  # noqa: E501

        A reference to a hyperflexCapabilityInfo resource. When the $expand query parameter is specified, the referenced resource is returned inline. Lists all supported HyperFlex feature capabilities and limitations.   # noqa: E501

        :return: The hyperflex_capability_infos of this HyperflexAppCatalogAllOf.  # noqa: E501
        :rtype: list[HyperflexCapabilityInfo]
        """
        return self._hyperflex_capability_infos

    @hyperflex_capability_infos.setter
    def hyperflex_capability_infos(self, hyperflex_capability_infos):
        """Sets the hyperflex_capability_infos of this HyperflexAppCatalogAllOf.

        A reference to a hyperflexCapabilityInfo resource. When the $expand query parameter is specified, the referenced resource is returned inline. Lists all supported HyperFlex feature capabilities and limitations.   # noqa: E501

        :param hyperflex_capability_infos: The hyperflex_capability_infos of this HyperflexAppCatalogAllOf.  # noqa: E501
        :type: list[HyperflexCapabilityInfo]
        """

        self._hyperflex_capability_infos = hyperflex_capability_infos

    @property
    def hyperflex_software_compatibility_infos(self):
        """Gets the hyperflex_software_compatibility_infos of this HyperflexAppCatalogAllOf.  # noqa: E501

        A reference to a hclHyperflexSoftwareCompatibilityInfo resource. When the $expand query parameter is specified, the referenced resource is returned inline. Lists software compatibility information between different HyperFlex component versions like HXDP, Hypervisor, Drive Firmware, etc.   # noqa: E501

        :return: The hyperflex_software_compatibility_infos of this HyperflexAppCatalogAllOf.  # noqa: E501
        :rtype: list[HclHyperflexSoftwareCompatibilityInfo]
        """
        return self._hyperflex_software_compatibility_infos

    @hyperflex_software_compatibility_infos.setter
    def hyperflex_software_compatibility_infos(
            self, hyperflex_software_compatibility_infos):
        """Sets the hyperflex_software_compatibility_infos of this HyperflexAppCatalogAllOf.

        A reference to a hclHyperflexSoftwareCompatibilityInfo resource. When the $expand query parameter is specified, the referenced resource is returned inline. Lists software compatibility information between different HyperFlex component versions like HXDP, Hypervisor, Drive Firmware, etc.   # noqa: E501

        :param hyperflex_software_compatibility_infos: The hyperflex_software_compatibility_infos of this HyperflexAppCatalogAllOf.  # noqa: E501
        :type: list[HclHyperflexSoftwareCompatibilityInfo]
        """

        self._hyperflex_software_compatibility_infos = hyperflex_software_compatibility_infos

    @property
    def server_firmware_version(self):
        """Gets the server_firmware_version of this HyperflexAppCatalogAllOf.  # noqa: E501


        :return: The server_firmware_version of this HyperflexAppCatalogAllOf.  # noqa: E501
        :rtype: HyperflexServerFirmwareVersion
        """
        return self._server_firmware_version

    @server_firmware_version.setter
    def server_firmware_version(self, server_firmware_version):
        """Sets the server_firmware_version of this HyperflexAppCatalogAllOf.


        :param server_firmware_version: The server_firmware_version of this HyperflexAppCatalogAllOf.  # noqa: E501
        :type: HyperflexServerFirmwareVersion
        """

        self._server_firmware_version = server_firmware_version

    @property
    def server_model(self):
        """Gets the server_model of this HyperflexAppCatalogAllOf.  # noqa: E501


        :return: The server_model of this HyperflexAppCatalogAllOf.  # noqa: E501
        :rtype: HyperflexServerModel
        """
        return self._server_model

    @server_model.setter
    def server_model(self, server_model):
        """Sets the server_model of this HyperflexAppCatalogAllOf.


        :param server_model: The server_model of this HyperflexAppCatalogAllOf.  # noqa: E501
        :type: HyperflexServerModel
        """

        self._server_model = server_model

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HyperflexAppCatalogAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HyperflexAppCatalogAllOf):
            return True

        return self.to_dict() != other.to_dict()
