# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class HclHyperflexSoftwareCompatibilityInfoAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'constraints': 'list[HclConstraint]',
        'hxdp_version': 'str',
        'hypervisor_type': 'str',
        'hypervisor_version': 'str',
        'server_fw_version': 'str',
        'app_catalog': 'HyperflexAppCatalog'
    }

    attribute_map = {
        'constraints': 'Constraints',
        'hxdp_version': 'HxdpVersion',
        'hypervisor_type': 'HypervisorType',
        'hypervisor_version': 'HypervisorVersion',
        'server_fw_version': 'ServerFwVersion',
        'app_catalog': 'AppCatalog'
    }

    def __init__(self,
                 constraints=None,
                 hxdp_version=None,
                 hypervisor_type='Unknown',
                 hypervisor_version=None,
                 server_fw_version=None,
                 app_catalog=None,
                 local_vars_configuration=None):  # noqa: E501
        """HclHyperflexSoftwareCompatibilityInfoAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._constraints = None
        self._hxdp_version = None
        self._hypervisor_type = None
        self._hypervisor_version = None
        self._server_fw_version = None
        self._app_catalog = None
        self.discriminator = None

        if constraints is not None:
            self.constraints = constraints
        if hxdp_version is not None:
            self.hxdp_version = hxdp_version
        if hypervisor_type is not None:
            self.hypervisor_type = hypervisor_type
        if hypervisor_version is not None:
            self.hypervisor_version = hypervisor_version
        if server_fw_version is not None:
            self.server_fw_version = server_fw_version
        if app_catalog is not None:
            self.app_catalog = app_catalog

    @property
    def constraints(self):
        """Gets the constraints of this HclHyperflexSoftwareCompatibilityInfoAllOf.  # noqa: E501


        :return: The constraints of this HclHyperflexSoftwareCompatibilityInfoAllOf.  # noqa: E501
        :rtype: list[HclConstraint]
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this HclHyperflexSoftwareCompatibilityInfoAllOf.


        :param constraints: The constraints of this HclHyperflexSoftwareCompatibilityInfoAllOf.  # noqa: E501
        :type: list[HclConstraint]
        """

        self._constraints = constraints

    @property
    def hxdp_version(self):
        """Gets the hxdp_version of this HclHyperflexSoftwareCompatibilityInfoAllOf.  # noqa: E501

        HXDP component software version.    # noqa: E501

        :return: The hxdp_version of this HclHyperflexSoftwareCompatibilityInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._hxdp_version

    @hxdp_version.setter
    def hxdp_version(self, hxdp_version):
        """Sets the hxdp_version of this HclHyperflexSoftwareCompatibilityInfoAllOf.

        HXDP component software version.    # noqa: E501

        :param hxdp_version: The hxdp_version of this HclHyperflexSoftwareCompatibilityInfoAllOf.  # noqa: E501
        :type: str
        """

        self._hxdp_version = hxdp_version

    @property
    def hypervisor_type(self):
        """Gets the hypervisor_type of this HclHyperflexSoftwareCompatibilityInfoAllOf.  # noqa: E501

        Type fo Hypervisor the HyperFlex components versions are compatible with. For example ESX, Hyperv or KVM.    # noqa: E501

        :return: The hypervisor_type of this HclHyperflexSoftwareCompatibilityInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._hypervisor_type

    @hypervisor_type.setter
    def hypervisor_type(self, hypervisor_type):
        """Sets the hypervisor_type of this HclHyperflexSoftwareCompatibilityInfoAllOf.

        Type fo Hypervisor the HyperFlex components versions are compatible with. For example ESX, Hyperv or KVM.    # noqa: E501

        :param hypervisor_type: The hypervisor_type of this HclHyperflexSoftwareCompatibilityInfoAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Hyper-V", "ESXi"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and hypervisor_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `hypervisor_type` ({0}), must be one of {1}"  # noqa: E501
                .format(hypervisor_type, allowed_values))

        self._hypervisor_type = hypervisor_type

    @property
    def hypervisor_version(self):
        """Gets the hypervisor_version of this HclHyperflexSoftwareCompatibilityInfoAllOf.  # noqa: E501

        Hypervisor component software version.    # noqa: E501

        :return: The hypervisor_version of this HclHyperflexSoftwareCompatibilityInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._hypervisor_version

    @hypervisor_version.setter
    def hypervisor_version(self, hypervisor_version):
        """Sets the hypervisor_version of this HclHyperflexSoftwareCompatibilityInfoAllOf.

        Hypervisor component software version.    # noqa: E501

        :param hypervisor_version: The hypervisor_version of this HclHyperflexSoftwareCompatibilityInfoAllOf.  # noqa: E501
        :type: str
        """

        self._hypervisor_version = hypervisor_version

    @property
    def server_fw_version(self):
        """Gets the server_fw_version of this HclHyperflexSoftwareCompatibilityInfoAllOf.  # noqa: E501

        UCS Server Firmware component software version.     # noqa: E501

        :return: The server_fw_version of this HclHyperflexSoftwareCompatibilityInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._server_fw_version

    @server_fw_version.setter
    def server_fw_version(self, server_fw_version):
        """Sets the server_fw_version of this HclHyperflexSoftwareCompatibilityInfoAllOf.

        UCS Server Firmware component software version.     # noqa: E501

        :param server_fw_version: The server_fw_version of this HclHyperflexSoftwareCompatibilityInfoAllOf.  # noqa: E501
        :type: str
        """

        self._server_fw_version = server_fw_version

    @property
    def app_catalog(self):
        """Gets the app_catalog of this HclHyperflexSoftwareCompatibilityInfoAllOf.  # noqa: E501


        :return: The app_catalog of this HclHyperflexSoftwareCompatibilityInfoAllOf.  # noqa: E501
        :rtype: HyperflexAppCatalog
        """
        return self._app_catalog

    @app_catalog.setter
    def app_catalog(self, app_catalog):
        """Sets the app_catalog of this HclHyperflexSoftwareCompatibilityInfoAllOf.


        :param app_catalog: The app_catalog of this HclHyperflexSoftwareCompatibilityInfoAllOf.  # noqa: E501
        :type: HyperflexAppCatalog
        """

        self._app_catalog = app_catalog

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HclHyperflexSoftwareCompatibilityInfoAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HclHyperflexSoftwareCompatibilityInfoAllOf):
            return True

        return self.to_dict() != other.to_dict()
