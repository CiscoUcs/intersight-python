# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1415
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ComputeRackUnit(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoOptionalTag]',
        'version_context': 'MoOptionalVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'device_mo_id': 'str',
        'dn': 'str',
        'rn': 'str',
        'model': 'str',
        'revision': 'str',
        'serial': 'str',
        'vendor': 'str',
        'admin_power_state': 'str',
        'asset_tag': 'str',
        'available_memory': 'int',
        'fault_summary': 'int',
        'kvm_ip_addresses': 'list[ComputeOptionalIpAddress]',
        'memory_speed': 'str',
        'mgmt_ip_address': 'str',
        'num_adaptors': 'int',
        'num_cpu_cores': 'int',
        'num_cpu_cores_enabled': 'int',
        'num_cpus': 'int',
        'num_eth_host_interfaces': 'int',
        'num_fc_host_interfaces': 'int',
        'num_threads': 'int',
        'oper_power_state': 'str',
        'oper_state': 'str',
        'operability': 'str',
        'platform_type': 'str',
        'presence': 'str',
        'service_profile': 'str',
        'total_memory': 'int',
        'user_label': 'str',
        'uuid': 'str',
        'server_id': 'int',
        'adapters': 'list[AdapterUnitRef]',
        'bios_bootmode': 'BiosBootModeRef',
        'biosunits': 'list[BiosUnitRef]',
        'bmc': 'ManagementControllerRef',
        'board': 'ComputeBoardRef',
        'boot_device_bootmode': 'BootDeviceBootModeRef',
        'fanmodules': 'list[EquipmentFanModuleRef]',
        'generic_inventory_holders': 'list[InventoryGenericInventoryHolderRef]',
        'locator_led': 'EquipmentLocatorLedRef',
        'pci_devices': 'list[PciDeviceRef]',
        'psus': 'list[EquipmentPsuRef]',
        'rack_enclosure_slot': 'EquipmentRackEnclosureSlotRef',
        'registered_device': 'AssetDeviceRegistrationRef',
        'sas_expanders': 'list[StorageSasExpanderRef]',
        'storage_enclosures': 'list[StorageEnclosureRef]',
        'top_system': 'TopSystemRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'device_mo_id': 'DeviceMoId',
        'dn': 'Dn',
        'rn': 'Rn',
        'model': 'Model',
        'revision': 'Revision',
        'serial': 'Serial',
        'vendor': 'Vendor',
        'admin_power_state': 'AdminPowerState',
        'asset_tag': 'AssetTag',
        'available_memory': 'AvailableMemory',
        'fault_summary': 'FaultSummary',
        'kvm_ip_addresses': 'KvmIpAddresses',
        'memory_speed': 'MemorySpeed',
        'mgmt_ip_address': 'MgmtIpAddress',
        'num_adaptors': 'NumAdaptors',
        'num_cpu_cores': 'NumCpuCores',
        'num_cpu_cores_enabled': 'NumCpuCoresEnabled',
        'num_cpus': 'NumCpus',
        'num_eth_host_interfaces': 'NumEthHostInterfaces',
        'num_fc_host_interfaces': 'NumFcHostInterfaces',
        'num_threads': 'NumThreads',
        'oper_power_state': 'OperPowerState',
        'oper_state': 'OperState',
        'operability': 'Operability',
        'platform_type': 'PlatformType',
        'presence': 'Presence',
        'service_profile': 'ServiceProfile',
        'total_memory': 'TotalMemory',
        'user_label': 'UserLabel',
        'uuid': 'Uuid',
        'server_id': 'ServerId',
        'adapters': 'Adapters',
        'bios_bootmode': 'BiosBootmode',
        'biosunits': 'Biosunits',
        'bmc': 'Bmc',
        'board': 'Board',
        'boot_device_bootmode': 'BootDeviceBootmode',
        'fanmodules': 'Fanmodules',
        'generic_inventory_holders': 'GenericInventoryHolders',
        'locator_led': 'LocatorLed',
        'pci_devices': 'PciDevices',
        'psus': 'Psus',
        'rack_enclosure_slot': 'RackEnclosureSlot',
        'registered_device': 'RegisteredDevice',
        'sas_expanders': 'SasExpanders',
        'storage_enclosures': 'StorageEnclosures',
        'top_system': 'TopSystem'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, device_mo_id=None, dn=None, rn=None, model=None, revision=None, serial=None, vendor=None, admin_power_state=None, asset_tag=None, available_memory=None, fault_summary=None, kvm_ip_addresses=None, memory_speed=None, mgmt_ip_address=None, num_adaptors=None, num_cpu_cores=None, num_cpu_cores_enabled=None, num_cpus=None, num_eth_host_interfaces=None, num_fc_host_interfaces=None, num_threads=None, oper_power_state=None, oper_state=None, operability=None, platform_type=None, presence=None, service_profile=None, total_memory=None, user_label=None, uuid=None, server_id=None, adapters=None, bios_bootmode=None, biosunits=None, bmc=None, board=None, boot_device_bootmode=None, fanmodules=None, generic_inventory_holders=None, locator_led=None, pci_devices=None, psus=None, rack_enclosure_slot=None, registered_device=None, sas_expanders=None, storage_enclosures=None, top_system=None):
        """
        ComputeRackUnit - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._device_mo_id = None
        self._dn = None
        self._rn = None
        self._model = None
        self._revision = None
        self._serial = None
        self._vendor = None
        self._admin_power_state = None
        self._asset_tag = None
        self._available_memory = None
        self._fault_summary = None
        self._kvm_ip_addresses = None
        self._memory_speed = None
        self._mgmt_ip_address = None
        self._num_adaptors = None
        self._num_cpu_cores = None
        self._num_cpu_cores_enabled = None
        self._num_cpus = None
        self._num_eth_host_interfaces = None
        self._num_fc_host_interfaces = None
        self._num_threads = None
        self._oper_power_state = None
        self._oper_state = None
        self._operability = None
        self._platform_type = None
        self._presence = None
        self._service_profile = None
        self._total_memory = None
        self._user_label = None
        self._uuid = None
        self._server_id = None
        self._adapters = None
        self._bios_bootmode = None
        self._biosunits = None
        self._bmc = None
        self._board = None
        self._boot_device_bootmode = None
        self._fanmodules = None
        self._generic_inventory_holders = None
        self._locator_led = None
        self._pci_devices = None
        self._psus = None
        self._rack_enclosure_slot = None
        self._registered_device = None
        self._sas_expanders = None
        self._storage_enclosures = None
        self._top_system = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if device_mo_id is not None:
          self.device_mo_id = device_mo_id
        if dn is not None:
          self.dn = dn
        if rn is not None:
          self.rn = rn
        if model is not None:
          self.model = model
        if revision is not None:
          self.revision = revision
        if serial is not None:
          self.serial = serial
        if vendor is not None:
          self.vendor = vendor
        if admin_power_state is not None:
          self.admin_power_state = admin_power_state
        if asset_tag is not None:
          self.asset_tag = asset_tag
        if available_memory is not None:
          self.available_memory = available_memory
        if fault_summary is not None:
          self.fault_summary = fault_summary
        if kvm_ip_addresses is not None:
          self.kvm_ip_addresses = kvm_ip_addresses
        if memory_speed is not None:
          self.memory_speed = memory_speed
        if mgmt_ip_address is not None:
          self.mgmt_ip_address = mgmt_ip_address
        if num_adaptors is not None:
          self.num_adaptors = num_adaptors
        if num_cpu_cores is not None:
          self.num_cpu_cores = num_cpu_cores
        if num_cpu_cores_enabled is not None:
          self.num_cpu_cores_enabled = num_cpu_cores_enabled
        if num_cpus is not None:
          self.num_cpus = num_cpus
        if num_eth_host_interfaces is not None:
          self.num_eth_host_interfaces = num_eth_host_interfaces
        if num_fc_host_interfaces is not None:
          self.num_fc_host_interfaces = num_fc_host_interfaces
        if num_threads is not None:
          self.num_threads = num_threads
        if oper_power_state is not None:
          self.oper_power_state = oper_power_state
        if oper_state is not None:
          self.oper_state = oper_state
        if operability is not None:
          self.operability = operability
        if platform_type is not None:
          self.platform_type = platform_type
        if presence is not None:
          self.presence = presence
        if service_profile is not None:
          self.service_profile = service_profile
        if total_memory is not None:
          self.total_memory = total_memory
        if user_label is not None:
          self.user_label = user_label
        if uuid is not None:
          self.uuid = uuid
        if server_id is not None:
          self.server_id = server_id
        if adapters is not None:
          self.adapters = adapters
        if bios_bootmode is not None:
          self.bios_bootmode = bios_bootmode
        if biosunits is not None:
          self.biosunits = biosunits
        if bmc is not None:
          self.bmc = bmc
        if board is not None:
          self.board = board
        if boot_device_bootmode is not None:
          self.boot_device_bootmode = boot_device_bootmode
        if fanmodules is not None:
          self.fanmodules = fanmodules
        if generic_inventory_holders is not None:
          self.generic_inventory_holders = generic_inventory_holders
        if locator_led is not None:
          self.locator_led = locator_led
        if pci_devices is not None:
          self.pci_devices = pci_devices
        if psus is not None:
          self.psus = psus
        if rack_enclosure_slot is not None:
          self.rack_enclosure_slot = rack_enclosure_slot
        if registered_device is not None:
          self.registered_device = registered_device
        if sas_expanders is not None:
          self.sas_expanders = sas_expanders
        if storage_enclosures is not None:
          self.storage_enclosures = storage_enclosures
        if top_system is not None:
          self.top_system = top_system

    @property
    def account_moid(self):
        """
        Gets the account_moid of this ComputeRackUnit.
        The Account ID for this managed object.  

        :return: The account_moid of this ComputeRackUnit.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this ComputeRackUnit.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this ComputeRackUnit.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this ComputeRackUnit.
        The time when this managed object was created.  

        :return: The create_time of this ComputeRackUnit.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this ComputeRackUnit.
        The time when this managed object was created.  

        :param create_time: The create_time of this ComputeRackUnit.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this ComputeRackUnit.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this ComputeRackUnit.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this ComputeRackUnit.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this ComputeRackUnit.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this ComputeRackUnit.
        The time when this managed object was last modified.  

        :return: The mod_time of this ComputeRackUnit.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this ComputeRackUnit.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this ComputeRackUnit.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this ComputeRackUnit.
        The unique identifier of this Managed Object instance.   

        :return: The moid of this ComputeRackUnit.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this ComputeRackUnit.
        The unique identifier of this Managed Object instance.   

        :param moid: The moid of this ComputeRackUnit.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this ComputeRackUnit.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :return: The object_type of this ComputeRackUnit.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this ComputeRackUnit.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :param object_type: The object_type of this ComputeRackUnit.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this ComputeRackUnit.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this ComputeRackUnit.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this ComputeRackUnit.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this ComputeRackUnit.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this ComputeRackUnit.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this ComputeRackUnit.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this ComputeRackUnit.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this ComputeRackUnit.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this ComputeRackUnit.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this ComputeRackUnit.
        :rtype: list[MoOptionalTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this ComputeRackUnit.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this ComputeRackUnit.
        :type: list[MoOptionalTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this ComputeRackUnit.
        The versioning info for this managed object.   

        :return: The version_context of this ComputeRackUnit.
        :rtype: MoOptionalVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this ComputeRackUnit.
        The versioning info for this managed object.   

        :param version_context: The version_context of this ComputeRackUnit.
        :type: MoOptionalVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this ComputeRackUnit.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this ComputeRackUnit.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this ComputeRackUnit.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this ComputeRackUnit.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this ComputeRackUnit.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this ComputeRackUnit.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this ComputeRackUnit.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this ComputeRackUnit.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this ComputeRackUnit.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :return: The permission_resources of this ComputeRackUnit.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this ComputeRackUnit.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :param permission_resources: The permission_resources of this ComputeRackUnit.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def device_mo_id(self):
        """
        Gets the device_mo_id of this ComputeRackUnit.

        :return: The device_mo_id of this ComputeRackUnit.
        :rtype: str
        """
        return self._device_mo_id

    @device_mo_id.setter
    def device_mo_id(self, device_mo_id):
        """
        Sets the device_mo_id of this ComputeRackUnit.

        :param device_mo_id: The device_mo_id of this ComputeRackUnit.
        :type: str
        """

        self._device_mo_id = device_mo_id

    @property
    def dn(self):
        """
        Gets the dn of this ComputeRackUnit.
        The Distinguished Name unambiguously identifies an object in the system.  

        :return: The dn of this ComputeRackUnit.
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """
        Sets the dn of this ComputeRackUnit.
        The Distinguished Name unambiguously identifies an object in the system.  

        :param dn: The dn of this ComputeRackUnit.
        :type: str
        """

        self._dn = dn

    @property
    def rn(self):
        """
        Gets the rn of this ComputeRackUnit.
        The Relative Name uniquely identifies an object within a given context.   

        :return: The rn of this ComputeRackUnit.
        :rtype: str
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """
        Sets the rn of this ComputeRackUnit.
        The Relative Name uniquely identifies an object within a given context.   

        :param rn: The rn of this ComputeRackUnit.
        :type: str
        """

        self._rn = rn

    @property
    def model(self):
        """
        Gets the model of this ComputeRackUnit.
        This field identifies the model of the given component.  

        :return: The model of this ComputeRackUnit.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this ComputeRackUnit.
        This field identifies the model of the given component.  

        :param model: The model of this ComputeRackUnit.
        :type: str
        """

        self._model = model

    @property
    def revision(self):
        """
        Gets the revision of this ComputeRackUnit.

        :return: The revision of this ComputeRackUnit.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this ComputeRackUnit.

        :param revision: The revision of this ComputeRackUnit.
        :type: str
        """

        self._revision = revision

    @property
    def serial(self):
        """
        Gets the serial of this ComputeRackUnit.
        This field identifies the serial of the given component.  

        :return: The serial of this ComputeRackUnit.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """
        Sets the serial of this ComputeRackUnit.
        This field identifies the serial of the given component.  

        :param serial: The serial of this ComputeRackUnit.
        :type: str
        """

        self._serial = serial

    @property
    def vendor(self):
        """
        Gets the vendor of this ComputeRackUnit.
        This field identifies the vendor of the given component.   

        :return: The vendor of this ComputeRackUnit.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """
        Sets the vendor of this ComputeRackUnit.
        This field identifies the vendor of the given component.   

        :param vendor: The vendor of this ComputeRackUnit.
        :type: str
        """

        self._vendor = vendor

    @property
    def admin_power_state(self):
        """
        Gets the admin_power_state of this ComputeRackUnit.

        :return: The admin_power_state of this ComputeRackUnit.
        :rtype: str
        """
        return self._admin_power_state

    @admin_power_state.setter
    def admin_power_state(self, admin_power_state):
        """
        Sets the admin_power_state of this ComputeRackUnit.

        :param admin_power_state: The admin_power_state of this ComputeRackUnit.
        :type: str
        """

        self._admin_power_state = admin_power_state

    @property
    def asset_tag(self):
        """
        Gets the asset_tag of this ComputeRackUnit.

        :return: The asset_tag of this ComputeRackUnit.
        :rtype: str
        """
        return self._asset_tag

    @asset_tag.setter
    def asset_tag(self, asset_tag):
        """
        Sets the asset_tag of this ComputeRackUnit.

        :param asset_tag: The asset_tag of this ComputeRackUnit.
        :type: str
        """

        self._asset_tag = asset_tag

    @property
    def available_memory(self):
        """
        Gets the available_memory of this ComputeRackUnit.

        :return: The available_memory of this ComputeRackUnit.
        :rtype: int
        """
        return self._available_memory

    @available_memory.setter
    def available_memory(self, available_memory):
        """
        Sets the available_memory of this ComputeRackUnit.

        :param available_memory: The available_memory of this ComputeRackUnit.
        :type: int
        """

        self._available_memory = available_memory

    @property
    def fault_summary(self):
        """
        Gets the fault_summary of this ComputeRackUnit.

        :return: The fault_summary of this ComputeRackUnit.
        :rtype: int
        """
        return self._fault_summary

    @fault_summary.setter
    def fault_summary(self, fault_summary):
        """
        Sets the fault_summary of this ComputeRackUnit.

        :param fault_summary: The fault_summary of this ComputeRackUnit.
        :type: int
        """

        self._fault_summary = fault_summary

    @property
    def kvm_ip_addresses(self):
        """
        Gets the kvm_ip_addresses of this ComputeRackUnit.
        KVM address of the device.  

        :return: The kvm_ip_addresses of this ComputeRackUnit.
        :rtype: list[ComputeOptionalIpAddress]
        """
        return self._kvm_ip_addresses

    @kvm_ip_addresses.setter
    def kvm_ip_addresses(self, kvm_ip_addresses):
        """
        Sets the kvm_ip_addresses of this ComputeRackUnit.
        KVM address of the device.  

        :param kvm_ip_addresses: The kvm_ip_addresses of this ComputeRackUnit.
        :type: list[ComputeOptionalIpAddress]
        """

        self._kvm_ip_addresses = kvm_ip_addresses

    @property
    def memory_speed(self):
        """
        Gets the memory_speed of this ComputeRackUnit.

        :return: The memory_speed of this ComputeRackUnit.
        :rtype: str
        """
        return self._memory_speed

    @memory_speed.setter
    def memory_speed(self, memory_speed):
        """
        Sets the memory_speed of this ComputeRackUnit.

        :param memory_speed: The memory_speed of this ComputeRackUnit.
        :type: str
        """

        self._memory_speed = memory_speed

    @property
    def mgmt_ip_address(self):
        """
        Gets the mgmt_ip_address of this ComputeRackUnit.
        Management address of the server.  

        :return: The mgmt_ip_address of this ComputeRackUnit.
        :rtype: str
        """
        return self._mgmt_ip_address

    @mgmt_ip_address.setter
    def mgmt_ip_address(self, mgmt_ip_address):
        """
        Sets the mgmt_ip_address of this ComputeRackUnit.
        Management address of the server.  

        :param mgmt_ip_address: The mgmt_ip_address of this ComputeRackUnit.
        :type: str
        """

        self._mgmt_ip_address = mgmt_ip_address

    @property
    def num_adaptors(self):
        """
        Gets the num_adaptors of this ComputeRackUnit.
        Total number of Adaptors available.  

        :return: The num_adaptors of this ComputeRackUnit.
        :rtype: int
        """
        return self._num_adaptors

    @num_adaptors.setter
    def num_adaptors(self, num_adaptors):
        """
        Sets the num_adaptors of this ComputeRackUnit.
        Total number of Adaptors available.  

        :param num_adaptors: The num_adaptors of this ComputeRackUnit.
        :type: int
        """

        self._num_adaptors = num_adaptors

    @property
    def num_cpu_cores(self):
        """
        Gets the num_cpu_cores of this ComputeRackUnit.

        :return: The num_cpu_cores of this ComputeRackUnit.
        :rtype: int
        """
        return self._num_cpu_cores

    @num_cpu_cores.setter
    def num_cpu_cores(self, num_cpu_cores):
        """
        Sets the num_cpu_cores of this ComputeRackUnit.

        :param num_cpu_cores: The num_cpu_cores of this ComputeRackUnit.
        :type: int
        """

        self._num_cpu_cores = num_cpu_cores

    @property
    def num_cpu_cores_enabled(self):
        """
        Gets the num_cpu_cores_enabled of this ComputeRackUnit.
        Number of CPU cores enabled.  

        :return: The num_cpu_cores_enabled of this ComputeRackUnit.
        :rtype: int
        """
        return self._num_cpu_cores_enabled

    @num_cpu_cores_enabled.setter
    def num_cpu_cores_enabled(self, num_cpu_cores_enabled):
        """
        Sets the num_cpu_cores_enabled of this ComputeRackUnit.
        Number of CPU cores enabled.  

        :param num_cpu_cores_enabled: The num_cpu_cores_enabled of this ComputeRackUnit.
        :type: int
        """

        self._num_cpu_cores_enabled = num_cpu_cores_enabled

    @property
    def num_cpus(self):
        """
        Gets the num_cpus of this ComputeRackUnit.
        Total number of CPU's available.  

        :return: The num_cpus of this ComputeRackUnit.
        :rtype: int
        """
        return self._num_cpus

    @num_cpus.setter
    def num_cpus(self, num_cpus):
        """
        Sets the num_cpus of this ComputeRackUnit.
        Total number of CPU's available.  

        :param num_cpus: The num_cpus of this ComputeRackUnit.
        :type: int
        """

        self._num_cpus = num_cpus

    @property
    def num_eth_host_interfaces(self):
        """
        Gets the num_eth_host_interfaces of this ComputeRackUnit.
        Number of Ethernet Host Interfaces.  

        :return: The num_eth_host_interfaces of this ComputeRackUnit.
        :rtype: int
        """
        return self._num_eth_host_interfaces

    @num_eth_host_interfaces.setter
    def num_eth_host_interfaces(self, num_eth_host_interfaces):
        """
        Sets the num_eth_host_interfaces of this ComputeRackUnit.
        Number of Ethernet Host Interfaces.  

        :param num_eth_host_interfaces: The num_eth_host_interfaces of this ComputeRackUnit.
        :type: int
        """

        self._num_eth_host_interfaces = num_eth_host_interfaces

    @property
    def num_fc_host_interfaces(self):
        """
        Gets the num_fc_host_interfaces of this ComputeRackUnit.

        :return: The num_fc_host_interfaces of this ComputeRackUnit.
        :rtype: int
        """
        return self._num_fc_host_interfaces

    @num_fc_host_interfaces.setter
    def num_fc_host_interfaces(self, num_fc_host_interfaces):
        """
        Sets the num_fc_host_interfaces of this ComputeRackUnit.

        :param num_fc_host_interfaces: The num_fc_host_interfaces of this ComputeRackUnit.
        :type: int
        """

        self._num_fc_host_interfaces = num_fc_host_interfaces

    @property
    def num_threads(self):
        """
        Gets the num_threads of this ComputeRackUnit.
        Number of threads enabled.  

        :return: The num_threads of this ComputeRackUnit.
        :rtype: int
        """
        return self._num_threads

    @num_threads.setter
    def num_threads(self, num_threads):
        """
        Sets the num_threads of this ComputeRackUnit.
        Number of threads enabled.  

        :param num_threads: The num_threads of this ComputeRackUnit.
        :type: int
        """

        self._num_threads = num_threads

    @property
    def oper_power_state(self):
        """
        Gets the oper_power_state of this ComputeRackUnit.

        :return: The oper_power_state of this ComputeRackUnit.
        :rtype: str
        """
        return self._oper_power_state

    @oper_power_state.setter
    def oper_power_state(self, oper_power_state):
        """
        Sets the oper_power_state of this ComputeRackUnit.

        :param oper_power_state: The oper_power_state of this ComputeRackUnit.
        :type: str
        """

        self._oper_power_state = oper_power_state

    @property
    def oper_state(self):
        """
        Gets the oper_state of this ComputeRackUnit.

        :return: The oper_state of this ComputeRackUnit.
        :rtype: str
        """
        return self._oper_state

    @oper_state.setter
    def oper_state(self, oper_state):
        """
        Sets the oper_state of this ComputeRackUnit.

        :param oper_state: The oper_state of this ComputeRackUnit.
        :type: str
        """

        self._oper_state = oper_state

    @property
    def operability(self):
        """
        Gets the operability of this ComputeRackUnit.

        :return: The operability of this ComputeRackUnit.
        :rtype: str
        """
        return self._operability

    @operability.setter
    def operability(self, operability):
        """
        Sets the operability of this ComputeRackUnit.

        :param operability: The operability of this ComputeRackUnit.
        :type: str
        """

        self._operability = operability

    @property
    def platform_type(self):
        """
        Gets the platform_type of this ComputeRackUnit.
        Platform type of the device.  

        :return: The platform_type of this ComputeRackUnit.
        :rtype: str
        """
        return self._platform_type

    @platform_type.setter
    def platform_type(self, platform_type):
        """
        Sets the platform_type of this ComputeRackUnit.
        Platform type of the device.  

        :param platform_type: The platform_type of this ComputeRackUnit.
        :type: str
        """

        self._platform_type = platform_type

    @property
    def presence(self):
        """
        Gets the presence of this ComputeRackUnit.

        :return: The presence of this ComputeRackUnit.
        :rtype: str
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """
        Sets the presence of this ComputeRackUnit.

        :param presence: The presence of this ComputeRackUnit.
        :type: str
        """

        self._presence = presence

    @property
    def service_profile(self):
        """
        Gets the service_profile of this ComputeRackUnit.

        :return: The service_profile of this ComputeRackUnit.
        :rtype: str
        """
        return self._service_profile

    @service_profile.setter
    def service_profile(self, service_profile):
        """
        Sets the service_profile of this ComputeRackUnit.

        :param service_profile: The service_profile of this ComputeRackUnit.
        :type: str
        """

        self._service_profile = service_profile

    @property
    def total_memory(self):
        """
        Gets the total_memory of this ComputeRackUnit.

        :return: The total_memory of this ComputeRackUnit.
        :rtype: int
        """
        return self._total_memory

    @total_memory.setter
    def total_memory(self, total_memory):
        """
        Sets the total_memory of this ComputeRackUnit.

        :param total_memory: The total_memory of this ComputeRackUnit.
        :type: int
        """

        self._total_memory = total_memory

    @property
    def user_label(self):
        """
        Gets the user_label of this ComputeRackUnit.

        :return: The user_label of this ComputeRackUnit.
        :rtype: str
        """
        return self._user_label

    @user_label.setter
    def user_label(self, user_label):
        """
        Sets the user_label of this ComputeRackUnit.

        :param user_label: The user_label of this ComputeRackUnit.
        :type: str
        """

        self._user_label = user_label

    @property
    def uuid(self):
        """
        Gets the uuid of this ComputeRackUnit.

        :return: The uuid of this ComputeRackUnit.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this ComputeRackUnit.

        :param uuid: The uuid of this ComputeRackUnit.
        :type: str
        """

        self._uuid = uuid

    @property
    def server_id(self):
        """
        Gets the server_id of this ComputeRackUnit.

        :return: The server_id of this ComputeRackUnit.
        :rtype: int
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """
        Sets the server_id of this ComputeRackUnit.

        :param server_id: The server_id of this ComputeRackUnit.
        :type: int
        """

        self._server_id = server_id

    @property
    def adapters(self):
        """
        Gets the adapters of this ComputeRackUnit.

        :return: The adapters of this ComputeRackUnit.
        :rtype: list[AdapterUnitRef]
        """
        return self._adapters

    @adapters.setter
    def adapters(self, adapters):
        """
        Sets the adapters of this ComputeRackUnit.

        :param adapters: The adapters of this ComputeRackUnit.
        :type: list[AdapterUnitRef]
        """

        self._adapters = adapters

    @property
    def bios_bootmode(self):
        """
        Gets the bios_bootmode of this ComputeRackUnit.

        :return: The bios_bootmode of this ComputeRackUnit.
        :rtype: BiosBootModeRef
        """
        return self._bios_bootmode

    @bios_bootmode.setter
    def bios_bootmode(self, bios_bootmode):
        """
        Sets the bios_bootmode of this ComputeRackUnit.

        :param bios_bootmode: The bios_bootmode of this ComputeRackUnit.
        :type: BiosBootModeRef
        """

        self._bios_bootmode = bios_bootmode

    @property
    def biosunits(self):
        """
        Gets the biosunits of this ComputeRackUnit.

        :return: The biosunits of this ComputeRackUnit.
        :rtype: list[BiosUnitRef]
        """
        return self._biosunits

    @biosunits.setter
    def biosunits(self, biosunits):
        """
        Sets the biosunits of this ComputeRackUnit.

        :param biosunits: The biosunits of this ComputeRackUnit.
        :type: list[BiosUnitRef]
        """

        self._biosunits = biosunits

    @property
    def bmc(self):
        """
        Gets the bmc of this ComputeRackUnit.

        :return: The bmc of this ComputeRackUnit.
        :rtype: ManagementControllerRef
        """
        return self._bmc

    @bmc.setter
    def bmc(self, bmc):
        """
        Sets the bmc of this ComputeRackUnit.

        :param bmc: The bmc of this ComputeRackUnit.
        :type: ManagementControllerRef
        """

        self._bmc = bmc

    @property
    def board(self):
        """
        Gets the board of this ComputeRackUnit.

        :return: The board of this ComputeRackUnit.
        :rtype: ComputeBoardRef
        """
        return self._board

    @board.setter
    def board(self, board):
        """
        Sets the board of this ComputeRackUnit.

        :param board: The board of this ComputeRackUnit.
        :type: ComputeBoardRef
        """

        self._board = board

    @property
    def boot_device_bootmode(self):
        """
        Gets the boot_device_bootmode of this ComputeRackUnit.

        :return: The boot_device_bootmode of this ComputeRackUnit.
        :rtype: BootDeviceBootModeRef
        """
        return self._boot_device_bootmode

    @boot_device_bootmode.setter
    def boot_device_bootmode(self, boot_device_bootmode):
        """
        Sets the boot_device_bootmode of this ComputeRackUnit.

        :param boot_device_bootmode: The boot_device_bootmode of this ComputeRackUnit.
        :type: BootDeviceBootModeRef
        """

        self._boot_device_bootmode = boot_device_bootmode

    @property
    def fanmodules(self):
        """
        Gets the fanmodules of this ComputeRackUnit.

        :return: The fanmodules of this ComputeRackUnit.
        :rtype: list[EquipmentFanModuleRef]
        """
        return self._fanmodules

    @fanmodules.setter
    def fanmodules(self, fanmodules):
        """
        Sets the fanmodules of this ComputeRackUnit.

        :param fanmodules: The fanmodules of this ComputeRackUnit.
        :type: list[EquipmentFanModuleRef]
        """

        self._fanmodules = fanmodules

    @property
    def generic_inventory_holders(self):
        """
        Gets the generic_inventory_holders of this ComputeRackUnit.

        :return: The generic_inventory_holders of this ComputeRackUnit.
        :rtype: list[InventoryGenericInventoryHolderRef]
        """
        return self._generic_inventory_holders

    @generic_inventory_holders.setter
    def generic_inventory_holders(self, generic_inventory_holders):
        """
        Sets the generic_inventory_holders of this ComputeRackUnit.

        :param generic_inventory_holders: The generic_inventory_holders of this ComputeRackUnit.
        :type: list[InventoryGenericInventoryHolderRef]
        """

        self._generic_inventory_holders = generic_inventory_holders

    @property
    def locator_led(self):
        """
        Gets the locator_led of this ComputeRackUnit.

        :return: The locator_led of this ComputeRackUnit.
        :rtype: EquipmentLocatorLedRef
        """
        return self._locator_led

    @locator_led.setter
    def locator_led(self, locator_led):
        """
        Sets the locator_led of this ComputeRackUnit.

        :param locator_led: The locator_led of this ComputeRackUnit.
        :type: EquipmentLocatorLedRef
        """

        self._locator_led = locator_led

    @property
    def pci_devices(self):
        """
        Gets the pci_devices of this ComputeRackUnit.

        :return: The pci_devices of this ComputeRackUnit.
        :rtype: list[PciDeviceRef]
        """
        return self._pci_devices

    @pci_devices.setter
    def pci_devices(self, pci_devices):
        """
        Sets the pci_devices of this ComputeRackUnit.

        :param pci_devices: The pci_devices of this ComputeRackUnit.
        :type: list[PciDeviceRef]
        """

        self._pci_devices = pci_devices

    @property
    def psus(self):
        """
        Gets the psus of this ComputeRackUnit.

        :return: The psus of this ComputeRackUnit.
        :rtype: list[EquipmentPsuRef]
        """
        return self._psus

    @psus.setter
    def psus(self, psus):
        """
        Sets the psus of this ComputeRackUnit.

        :param psus: The psus of this ComputeRackUnit.
        :type: list[EquipmentPsuRef]
        """

        self._psus = psus

    @property
    def rack_enclosure_slot(self):
        """
        Gets the rack_enclosure_slot of this ComputeRackUnit.
        A collection of references to the [equipment.RackEnclosureSlot](mo://equipment.RackEnclosureSlot) Managed Object.  When this managed object is deleted, the referenced [equipment.RackEnclosureSlot](mo://equipment.RackEnclosureSlot) MO unsets its reference to this deleted MO. 

        :return: The rack_enclosure_slot of this ComputeRackUnit.
        :rtype: EquipmentRackEnclosureSlotRef
        """
        return self._rack_enclosure_slot

    @rack_enclosure_slot.setter
    def rack_enclosure_slot(self, rack_enclosure_slot):
        """
        Sets the rack_enclosure_slot of this ComputeRackUnit.
        A collection of references to the [equipment.RackEnclosureSlot](mo://equipment.RackEnclosureSlot) Managed Object.  When this managed object is deleted, the referenced [equipment.RackEnclosureSlot](mo://equipment.RackEnclosureSlot) MO unsets its reference to this deleted MO. 

        :param rack_enclosure_slot: The rack_enclosure_slot of this ComputeRackUnit.
        :type: EquipmentRackEnclosureSlotRef
        """

        self._rack_enclosure_slot = rack_enclosure_slot

    @property
    def registered_device(self):
        """
        Gets the registered_device of this ComputeRackUnit.
        The Device to which this Managed Object is associated. 

        :return: The registered_device of this ComputeRackUnit.
        :rtype: AssetDeviceRegistrationRef
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """
        Sets the registered_device of this ComputeRackUnit.
        The Device to which this Managed Object is associated. 

        :param registered_device: The registered_device of this ComputeRackUnit.
        :type: AssetDeviceRegistrationRef
        """

        self._registered_device = registered_device

    @property
    def sas_expanders(self):
        """
        Gets the sas_expanders of this ComputeRackUnit.

        :return: The sas_expanders of this ComputeRackUnit.
        :rtype: list[StorageSasExpanderRef]
        """
        return self._sas_expanders

    @sas_expanders.setter
    def sas_expanders(self, sas_expanders):
        """
        Sets the sas_expanders of this ComputeRackUnit.

        :param sas_expanders: The sas_expanders of this ComputeRackUnit.
        :type: list[StorageSasExpanderRef]
        """

        self._sas_expanders = sas_expanders

    @property
    def storage_enclosures(self):
        """
        Gets the storage_enclosures of this ComputeRackUnit.

        :return: The storage_enclosures of this ComputeRackUnit.
        :rtype: list[StorageEnclosureRef]
        """
        return self._storage_enclosures

    @storage_enclosures.setter
    def storage_enclosures(self, storage_enclosures):
        """
        Sets the storage_enclosures of this ComputeRackUnit.

        :param storage_enclosures: The storage_enclosures of this ComputeRackUnit.
        :type: list[StorageEnclosureRef]
        """

        self._storage_enclosures = storage_enclosures

    @property
    def top_system(self):
        """
        Gets the top_system of this ComputeRackUnit.
        A collection of references to the [top.System](mo://top.System) Managed Object.  When this managed object is deleted, the referenced [top.System](mo://top.System) MO unsets its reference to this deleted MO. 

        :return: The top_system of this ComputeRackUnit.
        :rtype: TopSystemRef
        """
        return self._top_system

    @top_system.setter
    def top_system(self, top_system):
        """
        Sets the top_system of this ComputeRackUnit.
        A collection of references to the [top.System](mo://top.System) Managed Object.  When this managed object is deleted, the referenced [top.System](mo://top.System) MO unsets its reference to this deleted MO. 

        :param top_system: The top_system of this ComputeRackUnit.
        :type: TopSystemRef
        """

        self._top_system = top_system

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ComputeRackUnit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
