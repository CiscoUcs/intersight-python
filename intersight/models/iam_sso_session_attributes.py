# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1295
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IamSsoSessionAttributes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'idp_session_expiration': 'str',
        'idp_session_index': 'str'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'idp_session_expiration': 'IdpSessionExpiration',
        'idp_session_index': 'IdpSessionIndex'
    }

    def __init__(self, object_type=None, idp_session_expiration=None, idp_session_index=None):
        """
        IamSsoSessionAttributes - a model defined in Swagger
        """

        self._object_type = None
        self._idp_session_expiration = None
        self._idp_session_index = None

        if object_type is not None:
          self.object_type = object_type
        if idp_session_expiration is not None:
          self.idp_session_expiration = idp_session_expiration
        if idp_session_index is not None:
          self.idp_session_index = idp_session_index

    @property
    def object_type(self):
        """
        Gets the object_type of this IamSsoSessionAttributes.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :return: The object_type of this IamSsoSessionAttributes.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this IamSsoSessionAttributes.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :param object_type: The object_type of this IamSsoSessionAttributes.
        :type: str
        """

        self._object_type = object_type

    @property
    def idp_session_expiration(self):
        """
        Gets the idp_session_expiration of this IamSsoSessionAttributes.
        SAML SessionNotOnOrAfter attribute sent by IdP in the assertion. IdP uses this to control for how long SP session maybe. SP does not issue SLO if the session is not valid.  

        :return: The idp_session_expiration of this IamSsoSessionAttributes.
        :rtype: str
        """
        return self._idp_session_expiration

    @idp_session_expiration.setter
    def idp_session_expiration(self, idp_session_expiration):
        """
        Sets the idp_session_expiration of this IamSsoSessionAttributes.
        SAML SessionNotOnOrAfter attribute sent by IdP in the assertion. IdP uses this to control for how long SP session maybe. SP does not issue SLO if the session is not valid.  

        :param idp_session_expiration: The idp_session_expiration of this IamSsoSessionAttributes.
        :type: str
        """

        self._idp_session_expiration = idp_session_expiration

    @property
    def idp_session_index(self):
        """
        Gets the idp_session_index of this IamSsoSessionAttributes.
        SAML SessionIndex attribute sent by IdP in the assertion. This has to be sent back to IdP in LogoutRequest.   

        :return: The idp_session_index of this IamSsoSessionAttributes.
        :rtype: str
        """
        return self._idp_session_index

    @idp_session_index.setter
    def idp_session_index(self, idp_session_index):
        """
        Sets the idp_session_index of this IamSsoSessionAttributes.
        SAML SessionIndex attribute sent by IdP in the assertion. This has to be sent back to IdP in LogoutRequest.   

        :param idp_session_index: The idp_session_index of this IamSsoSessionAttributes.
        :type: str
        """

        self._idp_session_index = idp_session_index

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IamSsoSessionAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
