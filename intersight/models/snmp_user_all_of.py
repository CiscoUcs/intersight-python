# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class SnmpUserAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_auth_password_set': 'bool',
        'auth_password': 'str',
        'auth_type': 'str',
        'is_privacy_password_set': 'bool',
        'name': 'str',
        'privacy_password': 'str',
        'privacy_type': 'str',
        'security_level': 'str'
    }

    attribute_map = {
        'is_auth_password_set': 'IsAuthPasswordSet',
        'auth_password': 'AuthPassword',
        'auth_type': 'AuthType',
        'is_privacy_password_set': 'IsPrivacyPasswordSet',
        'name': 'Name',
        'privacy_password': 'PrivacyPassword',
        'privacy_type': 'PrivacyType',
        'security_level': 'SecurityLevel'
    }

    def __init__(self,
                 is_auth_password_set=None,
                 auth_password=None,
                 auth_type='NA',
                 is_privacy_password_set=None,
                 name=None,
                 privacy_password=None,
                 privacy_type='NA',
                 security_level='AuthPriv',
                 local_vars_configuration=None):  # noqa: E501
        """SnmpUserAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_auth_password_set = None
        self._auth_password = None
        self._auth_type = None
        self._is_privacy_password_set = None
        self._name = None
        self._privacy_password = None
        self._privacy_type = None
        self._security_level = None
        self.discriminator = None

        if is_auth_password_set is not None:
            self.is_auth_password_set = is_auth_password_set
        if auth_password is not None:
            self.auth_password = auth_password
        if auth_type is not None:
            self.auth_type = auth_type
        if is_privacy_password_set is not None:
            self.is_privacy_password_set = is_privacy_password_set
        if name is not None:
            self.name = name
        if privacy_password is not None:
            self.privacy_password = privacy_password
        if privacy_type is not None:
            self.privacy_type = privacy_type
        if security_level is not None:
            self.security_level = security_level

    @property
    def is_auth_password_set(self):
        """Gets the is_auth_password_set of this SnmpUserAllOf.  # noqa: E501

        Indicates whether the value of the 'authPassword' property has been set.    # noqa: E501

        :return: The is_auth_password_set of this SnmpUserAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_auth_password_set

    @is_auth_password_set.setter
    def is_auth_password_set(self, is_auth_password_set):
        """Sets the is_auth_password_set of this SnmpUserAllOf.

        Indicates whether the value of the 'authPassword' property has been set.    # noqa: E501

        :param is_auth_password_set: The is_auth_password_set of this SnmpUserAllOf.  # noqa: E501
        :type: bool
        """

        self._is_auth_password_set = is_auth_password_set

    @property
    def auth_password(self):
        """Gets the auth_password of this SnmpUserAllOf.  # noqa: E501

        Authorization password for the user.    # noqa: E501

        :return: The auth_password of this SnmpUserAllOf.  # noqa: E501
        :rtype: str
        """
        return self._auth_password

    @auth_password.setter
    def auth_password(self, auth_password):
        """Sets the auth_password of this SnmpUserAllOf.

        Authorization password for the user.    # noqa: E501

        :param auth_password: The auth_password of this SnmpUserAllOf.  # noqa: E501
        :type: str
        """

        self._auth_password = auth_password

    @property
    def auth_type(self):
        """Gets the auth_type of this SnmpUserAllOf.  # noqa: E501

        Authorization protocol for authenticating the user.    # noqa: E501

        :return: The auth_type of this SnmpUserAllOf.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this SnmpUserAllOf.

        Authorization protocol for authenticating the user.    # noqa: E501

        :param auth_type: The auth_type of this SnmpUserAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["NA", "MD5", "SHA"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and auth_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"  # noqa: E501
                .format(auth_type, allowed_values))

        self._auth_type = auth_type

    @property
    def is_privacy_password_set(self):
        """Gets the is_privacy_password_set of this SnmpUserAllOf.  # noqa: E501


        :return: The is_privacy_password_set of this SnmpUserAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_privacy_password_set

    @is_privacy_password_set.setter
    def is_privacy_password_set(self, is_privacy_password_set):
        """Sets the is_privacy_password_set of this SnmpUserAllOf.


        :param is_privacy_password_set: The is_privacy_password_set of this SnmpUserAllOf.  # noqa: E501
        :type: bool
        """

        self._is_privacy_password_set = is_privacy_password_set

    @property
    def name(self):
        """Gets the name of this SnmpUserAllOf.  # noqa: E501

        SNMP username. Must have a minimum of 1 and and a maximum of 31 characters.    # noqa: E501

        :return: The name of this SnmpUserAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SnmpUserAllOf.

        SNMP username. Must have a minimum of 1 and and a maximum of 31 characters.    # noqa: E501

        :param name: The name of this SnmpUserAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def privacy_password(self):
        """Gets the privacy_password of this SnmpUserAllOf.  # noqa: E501

        Privacy password for the user.    # noqa: E501

        :return: The privacy_password of this SnmpUserAllOf.  # noqa: E501
        :rtype: str
        """
        return self._privacy_password

    @privacy_password.setter
    def privacy_password(self, privacy_password):
        """Sets the privacy_password of this SnmpUserAllOf.

        Privacy password for the user.    # noqa: E501

        :param privacy_password: The privacy_password of this SnmpUserAllOf.  # noqa: E501
        :type: str
        """

        self._privacy_password = privacy_password

    @property
    def privacy_type(self):
        """Gets the privacy_type of this SnmpUserAllOf.  # noqa: E501

        Privacy protocol for the user.    # noqa: E501

        :return: The privacy_type of this SnmpUserAllOf.  # noqa: E501
        :rtype: str
        """
        return self._privacy_type

    @privacy_type.setter
    def privacy_type(self, privacy_type):
        """Sets the privacy_type of this SnmpUserAllOf.

        Privacy protocol for the user.    # noqa: E501

        :param privacy_type: The privacy_type of this SnmpUserAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["NA", "DES", "AES"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and privacy_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `privacy_type` ({0}), must be one of {1}"  # noqa: E501
                .format(privacy_type, allowed_values))

        self._privacy_type = privacy_type

    @property
    def security_level(self):
        """Gets the security_level of this SnmpUserAllOf.  # noqa: E501

        Security mechanism used for communication between agent and manager.     # noqa: E501

        :return: The security_level of this SnmpUserAllOf.  # noqa: E501
        :rtype: str
        """
        return self._security_level

    @security_level.setter
    def security_level(self, security_level):
        """Sets the security_level of this SnmpUserAllOf.

        Security mechanism used for communication between agent and manager.     # noqa: E501

        :param security_level: The security_level of this SnmpUserAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["AuthPriv", "NoAuthNoPriv",
                          "AuthNoPriv"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and security_level not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `security_level` ({0}), must be one of {1}"  # noqa: E501
                .format(security_level, allowed_values))

        self._security_level = security_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnmpUserAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SnmpUserAllOf):
            return True

        return self.to_dict() != other.to_dict()
