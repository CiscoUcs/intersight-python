# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-961
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StoragePhysicalDisk(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'ancestors': 'list[MoBaseMoRef]',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'parent': 'MoBaseMoRef',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'device_mo_id': 'str',
        'dn': 'str',
        'rn': 'str',
        'model': 'str',
        'revision': 'str',
        'serial': 'str',
        'vendor': 'str',
        'block_size': 'str',
        'bootable': 'str',
        'configuration_checkpoint': 'str',
        'configuration_state': 'str',
        'discovered_path': 'str',
        'disk_id': 'str',
        'disk_state': 'str',
        'drive_firmware': 'str',
        'drive_state': 'str',
        'fde_capable': 'str',
        'link_speed': 'str',
        'link_state': 'str',
        'locator_led': 'EquipmentLocatorLedRef',
        'num_blocks': 'str',
        'oper_power_state': 'str',
        'oper_qualifier_reason': 'str',
        'operability': 'str',
        'physical_block_size': 'str',
        'physical_disk_extensions': 'list[StoragePhysicalDiskExtensionRef]',
        'pid': 'str',
        'presence': 'str',
        'protocol': 'str',
        'raw_size': 'str',
        'registered_device': 'AssetDeviceRegistrationRef',
        'running_firmware': 'list[FirmwareRunningFirmwareRef]',
        'sas_ports': 'list[StorageSasPortRef]',
        'secured': 'str',
        'size': 'str',
        'storage_controller': 'StorageControllerRef',
        'storage_enclosure': 'StorageEnclosureRef',
        'thermal': 'str',
        'type': 'str',
        'variant_type': 'str'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'ancestors': 'Ancestors',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'parent': 'Parent',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'device_mo_id': 'DeviceMoId',
        'dn': 'Dn',
        'rn': 'Rn',
        'model': 'Model',
        'revision': 'Revision',
        'serial': 'Serial',
        'vendor': 'Vendor',
        'block_size': 'BlockSize',
        'bootable': 'Bootable',
        'configuration_checkpoint': 'ConfigurationCheckpoint',
        'configuration_state': 'ConfigurationState',
        'discovered_path': 'DiscoveredPath',
        'disk_id': 'DiskId',
        'disk_state': 'DiskState',
        'drive_firmware': 'DriveFirmware',
        'drive_state': 'DriveState',
        'fde_capable': 'FdeCapable',
        'link_speed': 'LinkSpeed',
        'link_state': 'LinkState',
        'locator_led': 'LocatorLed',
        'num_blocks': 'NumBlocks',
        'oper_power_state': 'OperPowerState',
        'oper_qualifier_reason': 'OperQualifierReason',
        'operability': 'Operability',
        'physical_block_size': 'PhysicalBlockSize',
        'physical_disk_extensions': 'PhysicalDiskExtensions',
        'pid': 'Pid',
        'presence': 'Presence',
        'protocol': 'Protocol',
        'raw_size': 'RawSize',
        'registered_device': 'RegisteredDevice',
        'running_firmware': 'RunningFirmware',
        'sas_ports': 'SasPorts',
        'secured': 'Secured',
        'size': 'Size',
        'storage_controller': 'StorageController',
        'storage_enclosure': 'StorageEnclosure',
        'thermal': 'Thermal',
        'type': 'Type',
        'variant_type': 'VariantType'
    }

    def __init__(self, account_moid=None, ancestors=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, parent=None, shared_scope=None, tags=None, version_context=None, device_mo_id=None, dn=None, rn=None, model=None, revision=None, serial=None, vendor=None, block_size=None, bootable=None, configuration_checkpoint=None, configuration_state=None, discovered_path=None, disk_id=None, disk_state=None, drive_firmware=None, drive_state=None, fde_capable=None, link_speed=None, link_state=None, locator_led=None, num_blocks=None, oper_power_state=None, oper_qualifier_reason=None, operability=None, physical_block_size=None, physical_disk_extensions=None, pid=None, presence=None, protocol=None, raw_size=None, registered_device=None, running_firmware=None, sas_ports=None, secured=None, size=None, storage_controller=None, storage_enclosure=None, thermal=None, type=None, variant_type=None):
        """
        StoragePhysicalDisk - a model defined in Swagger
        """

        self._account_moid = None
        self._ancestors = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._parent = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._device_mo_id = None
        self._dn = None
        self._rn = None
        self._model = None
        self._revision = None
        self._serial = None
        self._vendor = None
        self._block_size = None
        self._bootable = None
        self._configuration_checkpoint = None
        self._configuration_state = None
        self._discovered_path = None
        self._disk_id = None
        self._disk_state = None
        self._drive_firmware = None
        self._drive_state = None
        self._fde_capable = None
        self._link_speed = None
        self._link_state = None
        self._locator_led = None
        self._num_blocks = None
        self._oper_power_state = None
        self._oper_qualifier_reason = None
        self._operability = None
        self._physical_block_size = None
        self._physical_disk_extensions = None
        self._pid = None
        self._presence = None
        self._protocol = None
        self._raw_size = None
        self._registered_device = None
        self._running_firmware = None
        self._sas_ports = None
        self._secured = None
        self._size = None
        self._storage_controller = None
        self._storage_enclosure = None
        self._thermal = None
        self._type = None
        self._variant_type = None

        if account_moid is not None:
          self.account_moid = account_moid
        if ancestors is not None:
          self.ancestors = ancestors
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if parent is not None:
          self.parent = parent
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if device_mo_id is not None:
          self.device_mo_id = device_mo_id
        if dn is not None:
          self.dn = dn
        if rn is not None:
          self.rn = rn
        if model is not None:
          self.model = model
        if revision is not None:
          self.revision = revision
        if serial is not None:
          self.serial = serial
        if vendor is not None:
          self.vendor = vendor
        if block_size is not None:
          self.block_size = block_size
        if bootable is not None:
          self.bootable = bootable
        if configuration_checkpoint is not None:
          self.configuration_checkpoint = configuration_checkpoint
        if configuration_state is not None:
          self.configuration_state = configuration_state
        if discovered_path is not None:
          self.discovered_path = discovered_path
        if disk_id is not None:
          self.disk_id = disk_id
        if disk_state is not None:
          self.disk_state = disk_state
        if drive_firmware is not None:
          self.drive_firmware = drive_firmware
        if drive_state is not None:
          self.drive_state = drive_state
        if fde_capable is not None:
          self.fde_capable = fde_capable
        if link_speed is not None:
          self.link_speed = link_speed
        if link_state is not None:
          self.link_state = link_state
        if locator_led is not None:
          self.locator_led = locator_led
        if num_blocks is not None:
          self.num_blocks = num_blocks
        if oper_power_state is not None:
          self.oper_power_state = oper_power_state
        if oper_qualifier_reason is not None:
          self.oper_qualifier_reason = oper_qualifier_reason
        if operability is not None:
          self.operability = operability
        if physical_block_size is not None:
          self.physical_block_size = physical_block_size
        if physical_disk_extensions is not None:
          self.physical_disk_extensions = physical_disk_extensions
        if pid is not None:
          self.pid = pid
        if presence is not None:
          self.presence = presence
        if protocol is not None:
          self.protocol = protocol
        if raw_size is not None:
          self.raw_size = raw_size
        if registered_device is not None:
          self.registered_device = registered_device
        if running_firmware is not None:
          self.running_firmware = running_firmware
        if sas_ports is not None:
          self.sas_ports = sas_ports
        if secured is not None:
          self.secured = secured
        if size is not None:
          self.size = size
        if storage_controller is not None:
          self.storage_controller = storage_controller
        if storage_enclosure is not None:
          self.storage_enclosure = storage_enclosure
        if thermal is not None:
          self.thermal = thermal
        if type is not None:
          self.type = type
        if variant_type is not None:
          self.variant_type = variant_type

    @property
    def account_moid(self):
        """
        Gets the account_moid of this StoragePhysicalDisk.
        The Account ID for this managed object.  

        :return: The account_moid of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this StoragePhysicalDisk.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this StoragePhysicalDisk.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def ancestors(self):
        """
        Gets the ancestors of this StoragePhysicalDisk.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this StoragePhysicalDisk.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this StoragePhysicalDisk.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this StoragePhysicalDisk.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def create_time(self):
        """
        Gets the create_time of this StoragePhysicalDisk.
        The time when this managed object was created.  

        :return: The create_time of this StoragePhysicalDisk.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this StoragePhysicalDisk.
        The time when this managed object was created.  

        :param create_time: The create_time of this StoragePhysicalDisk.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this StoragePhysicalDisk.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this StoragePhysicalDisk.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this StoragePhysicalDisk.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this StoragePhysicalDisk.
        The time when this managed object was last modified.  

        :return: The mod_time of this StoragePhysicalDisk.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this StoragePhysicalDisk.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this StoragePhysicalDisk.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this StoragePhysicalDisk.
        The unique identifier of this Managed Object instance.  

        :return: The moid of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this StoragePhysicalDisk.
        The unique identifier of this Managed Object instance.  

        :param moid: The moid of this StoragePhysicalDisk.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this StoragePhysicalDisk.
        The fully-qualified type of this managed object, e.g. the class name.  

        :return: The object_type of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this StoragePhysicalDisk.
        The fully-qualified type of this managed object, e.g. the class name.  

        :param object_type: The object_type of this StoragePhysicalDisk.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this StoragePhysicalDisk.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this StoragePhysicalDisk.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this StoragePhysicalDisk.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this StoragePhysicalDisk.
        :type: list[str]
        """

        self._owners = owners

    @property
    def parent(self):
        """
        Gets the parent of this StoragePhysicalDisk.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this StoragePhysicalDisk.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this StoragePhysicalDisk.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this StoragePhysicalDisk.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this StoragePhysicalDisk.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this StoragePhysicalDisk.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this StoragePhysicalDisk.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this StoragePhysicalDisk.
        The array of tags, which allow to add key, value meta-data to managed objects.  

        :return: The tags of this StoragePhysicalDisk.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this StoragePhysicalDisk.
        The array of tags, which allow to add key, value meta-data to managed objects.  

        :param tags: The tags of this StoragePhysicalDisk.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this StoragePhysicalDisk.
        The versioning info for this managed object.   

        :return: The version_context of this StoragePhysicalDisk.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this StoragePhysicalDisk.
        The versioning info for this managed object.   

        :param version_context: The version_context of this StoragePhysicalDisk.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def device_mo_id(self):
        """
        Gets the device_mo_id of this StoragePhysicalDisk.

        :return: The device_mo_id of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._device_mo_id

    @device_mo_id.setter
    def device_mo_id(self, device_mo_id):
        """
        Sets the device_mo_id of this StoragePhysicalDisk.

        :param device_mo_id: The device_mo_id of this StoragePhysicalDisk.
        :type: str
        """

        self._device_mo_id = device_mo_id

    @property
    def dn(self):
        """
        Gets the dn of this StoragePhysicalDisk.

        :return: The dn of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """
        Sets the dn of this StoragePhysicalDisk.

        :param dn: The dn of this StoragePhysicalDisk.
        :type: str
        """

        self._dn = dn

    @property
    def rn(self):
        """
        Gets the rn of this StoragePhysicalDisk.

        :return: The rn of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """
        Sets the rn of this StoragePhysicalDisk.

        :param rn: The rn of this StoragePhysicalDisk.
        :type: str
        """

        self._rn = rn

    @property
    def model(self):
        """
        Gets the model of this StoragePhysicalDisk.
        This field identifies the model of the given component.  

        :return: The model of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this StoragePhysicalDisk.
        This field identifies the model of the given component.  

        :param model: The model of this StoragePhysicalDisk.
        :type: str
        """

        self._model = model

    @property
    def revision(self):
        """
        Gets the revision of this StoragePhysicalDisk.

        :return: The revision of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this StoragePhysicalDisk.

        :param revision: The revision of this StoragePhysicalDisk.
        :type: str
        """

        self._revision = revision

    @property
    def serial(self):
        """
        Gets the serial of this StoragePhysicalDisk.
        This field identifies the serial of the given component.  

        :return: The serial of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """
        Sets the serial of this StoragePhysicalDisk.
        This field identifies the serial of the given component.  

        :param serial: The serial of this StoragePhysicalDisk.
        :type: str
        """

        self._serial = serial

    @property
    def vendor(self):
        """
        Gets the vendor of this StoragePhysicalDisk.
        This field identifies the vendor of the given component.   

        :return: The vendor of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """
        Sets the vendor of this StoragePhysicalDisk.
        This field identifies the vendor of the given component.   

        :param vendor: The vendor of this StoragePhysicalDisk.
        :type: str
        """

        self._vendor = vendor

    @property
    def block_size(self):
        """
        Gets the block_size of this StoragePhysicalDisk.

        :return: The block_size of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """
        Sets the block_size of this StoragePhysicalDisk.

        :param block_size: The block_size of this StoragePhysicalDisk.
        :type: str
        """

        self._block_size = block_size

    @property
    def bootable(self):
        """
        Gets the bootable of this StoragePhysicalDisk.

        :return: The bootable of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._bootable

    @bootable.setter
    def bootable(self, bootable):
        """
        Sets the bootable of this StoragePhysicalDisk.

        :param bootable: The bootable of this StoragePhysicalDisk.
        :type: str
        """

        self._bootable = bootable

    @property
    def configuration_checkpoint(self):
        """
        Gets the configuration_checkpoint of this StoragePhysicalDisk.

        :return: The configuration_checkpoint of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._configuration_checkpoint

    @configuration_checkpoint.setter
    def configuration_checkpoint(self, configuration_checkpoint):
        """
        Sets the configuration_checkpoint of this StoragePhysicalDisk.

        :param configuration_checkpoint: The configuration_checkpoint of this StoragePhysicalDisk.
        :type: str
        """

        self._configuration_checkpoint = configuration_checkpoint

    @property
    def configuration_state(self):
        """
        Gets the configuration_state of this StoragePhysicalDisk.

        :return: The configuration_state of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._configuration_state

    @configuration_state.setter
    def configuration_state(self, configuration_state):
        """
        Sets the configuration_state of this StoragePhysicalDisk.

        :param configuration_state: The configuration_state of this StoragePhysicalDisk.
        :type: str
        """

        self._configuration_state = configuration_state

    @property
    def discovered_path(self):
        """
        Gets the discovered_path of this StoragePhysicalDisk.

        :return: The discovered_path of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._discovered_path

    @discovered_path.setter
    def discovered_path(self, discovered_path):
        """
        Sets the discovered_path of this StoragePhysicalDisk.

        :param discovered_path: The discovered_path of this StoragePhysicalDisk.
        :type: str
        """

        self._discovered_path = discovered_path

    @property
    def disk_id(self):
        """
        Gets the disk_id of this StoragePhysicalDisk.

        :return: The disk_id of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._disk_id

    @disk_id.setter
    def disk_id(self, disk_id):
        """
        Sets the disk_id of this StoragePhysicalDisk.

        :param disk_id: The disk_id of this StoragePhysicalDisk.
        :type: str
        """

        self._disk_id = disk_id

    @property
    def disk_state(self):
        """
        Gets the disk_state of this StoragePhysicalDisk.
        This field identifies the health of the disk.  

        :return: The disk_state of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._disk_state

    @disk_state.setter
    def disk_state(self, disk_state):
        """
        Sets the disk_state of this StoragePhysicalDisk.
        This field identifies the health of the disk.  

        :param disk_state: The disk_state of this StoragePhysicalDisk.
        :type: str
        """

        self._disk_state = disk_state

    @property
    def drive_firmware(self):
        """
        Gets the drive_firmware of this StoragePhysicalDisk.

        :return: The drive_firmware of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._drive_firmware

    @drive_firmware.setter
    def drive_firmware(self, drive_firmware):
        """
        Sets the drive_firmware of this StoragePhysicalDisk.

        :param drive_firmware: The drive_firmware of this StoragePhysicalDisk.
        :type: str
        """

        self._drive_firmware = drive_firmware

    @property
    def drive_state(self):
        """
        Gets the drive_state of this StoragePhysicalDisk.

        :return: The drive_state of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._drive_state

    @drive_state.setter
    def drive_state(self, drive_state):
        """
        Sets the drive_state of this StoragePhysicalDisk.

        :param drive_state: The drive_state of this StoragePhysicalDisk.
        :type: str
        """

        self._drive_state = drive_state

    @property
    def fde_capable(self):
        """
        Gets the fde_capable of this StoragePhysicalDisk.

        :return: The fde_capable of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._fde_capable

    @fde_capable.setter
    def fde_capable(self, fde_capable):
        """
        Sets the fde_capable of this StoragePhysicalDisk.

        :param fde_capable: The fde_capable of this StoragePhysicalDisk.
        :type: str
        """

        self._fde_capable = fde_capable

    @property
    def link_speed(self):
        """
        Gets the link_speed of this StoragePhysicalDisk.

        :return: The link_speed of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._link_speed

    @link_speed.setter
    def link_speed(self, link_speed):
        """
        Sets the link_speed of this StoragePhysicalDisk.

        :param link_speed: The link_speed of this StoragePhysicalDisk.
        :type: str
        """

        self._link_speed = link_speed

    @property
    def link_state(self):
        """
        Gets the link_state of this StoragePhysicalDisk.

        :return: The link_state of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._link_state

    @link_state.setter
    def link_state(self, link_state):
        """
        Sets the link_state of this StoragePhysicalDisk.

        :param link_state: The link_state of this StoragePhysicalDisk.
        :type: str
        """

        self._link_state = link_state

    @property
    def locator_led(self):
        """
        Gets the locator_led of this StoragePhysicalDisk.

        :return: The locator_led of this StoragePhysicalDisk.
        :rtype: EquipmentLocatorLedRef
        """
        return self._locator_led

    @locator_led.setter
    def locator_led(self, locator_led):
        """
        Sets the locator_led of this StoragePhysicalDisk.

        :param locator_led: The locator_led of this StoragePhysicalDisk.
        :type: EquipmentLocatorLedRef
        """

        self._locator_led = locator_led

    @property
    def num_blocks(self):
        """
        Gets the num_blocks of this StoragePhysicalDisk.

        :return: The num_blocks of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._num_blocks

    @num_blocks.setter
    def num_blocks(self, num_blocks):
        """
        Sets the num_blocks of this StoragePhysicalDisk.

        :param num_blocks: The num_blocks of this StoragePhysicalDisk.
        :type: str
        """

        self._num_blocks = num_blocks

    @property
    def oper_power_state(self):
        """
        Gets the oper_power_state of this StoragePhysicalDisk.

        :return: The oper_power_state of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._oper_power_state

    @oper_power_state.setter
    def oper_power_state(self, oper_power_state):
        """
        Sets the oper_power_state of this StoragePhysicalDisk.

        :param oper_power_state: The oper_power_state of this StoragePhysicalDisk.
        :type: str
        """

        self._oper_power_state = oper_power_state

    @property
    def oper_qualifier_reason(self):
        """
        Gets the oper_qualifier_reason of this StoragePhysicalDisk.

        :return: The oper_qualifier_reason of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._oper_qualifier_reason

    @oper_qualifier_reason.setter
    def oper_qualifier_reason(self, oper_qualifier_reason):
        """
        Sets the oper_qualifier_reason of this StoragePhysicalDisk.

        :param oper_qualifier_reason: The oper_qualifier_reason of this StoragePhysicalDisk.
        :type: str
        """

        self._oper_qualifier_reason = oper_qualifier_reason

    @property
    def operability(self):
        """
        Gets the operability of this StoragePhysicalDisk.

        :return: The operability of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._operability

    @operability.setter
    def operability(self, operability):
        """
        Sets the operability of this StoragePhysicalDisk.

        :param operability: The operability of this StoragePhysicalDisk.
        :type: str
        """

        self._operability = operability

    @property
    def physical_block_size(self):
        """
        Gets the physical_block_size of this StoragePhysicalDisk.

        :return: The physical_block_size of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._physical_block_size

    @physical_block_size.setter
    def physical_block_size(self, physical_block_size):
        """
        Sets the physical_block_size of this StoragePhysicalDisk.

        :param physical_block_size: The physical_block_size of this StoragePhysicalDisk.
        :type: str
        """

        self._physical_block_size = physical_block_size

    @property
    def physical_disk_extensions(self):
        """
        Gets the physical_disk_extensions of this StoragePhysicalDisk.
        This object is created to indicate a SCSI controller has physical connectivity to specified physical disk. 

        :return: The physical_disk_extensions of this StoragePhysicalDisk.
        :rtype: list[StoragePhysicalDiskExtensionRef]
        """
        return self._physical_disk_extensions

    @physical_disk_extensions.setter
    def physical_disk_extensions(self, physical_disk_extensions):
        """
        Sets the physical_disk_extensions of this StoragePhysicalDisk.
        This object is created to indicate a SCSI controller has physical connectivity to specified physical disk. 

        :param physical_disk_extensions: The physical_disk_extensions of this StoragePhysicalDisk.
        :type: list[StoragePhysicalDiskExtensionRef]
        """

        self._physical_disk_extensions = physical_disk_extensions

    @property
    def pid(self):
        """
        Gets the pid of this StoragePhysicalDisk.
        This field identifies the Product ID for physicalDisk.  

        :return: The pid of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """
        Sets the pid of this StoragePhysicalDisk.
        This field identifies the Product ID for physicalDisk.  

        :param pid: The pid of this StoragePhysicalDisk.
        :type: str
        """

        self._pid = pid

    @property
    def presence(self):
        """
        Gets the presence of this StoragePhysicalDisk.

        :return: The presence of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """
        Sets the presence of this StoragePhysicalDisk.

        :param presence: The presence of this StoragePhysicalDisk.
        :type: str
        """

        self._presence = presence

    @property
    def protocol(self):
        """
        Gets the protocol of this StoragePhysicalDisk.

        :return: The protocol of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """
        Sets the protocol of this StoragePhysicalDisk.

        :param protocol: The protocol of this StoragePhysicalDisk.
        :type: str
        """

        self._protocol = protocol

    @property
    def raw_size(self):
        """
        Gets the raw_size of this StoragePhysicalDisk.

        :return: The raw_size of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._raw_size

    @raw_size.setter
    def raw_size(self, raw_size):
        """
        Sets the raw_size of this StoragePhysicalDisk.

        :param raw_size: The raw_size of this StoragePhysicalDisk.
        :type: str
        """

        self._raw_size = raw_size

    @property
    def registered_device(self):
        """
        Gets the registered_device of this StoragePhysicalDisk.
        The Device to which this Managed Object is associated. 

        :return: The registered_device of this StoragePhysicalDisk.
        :rtype: AssetDeviceRegistrationRef
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """
        Sets the registered_device of this StoragePhysicalDisk.
        The Device to which this Managed Object is associated. 

        :param registered_device: The registered_device of this StoragePhysicalDisk.
        :type: AssetDeviceRegistrationRef
        """

        self._registered_device = registered_device

    @property
    def running_firmware(self):
        """
        Gets the running_firmware of this StoragePhysicalDisk.

        :return: The running_firmware of this StoragePhysicalDisk.
        :rtype: list[FirmwareRunningFirmwareRef]
        """
        return self._running_firmware

    @running_firmware.setter
    def running_firmware(self, running_firmware):
        """
        Sets the running_firmware of this StoragePhysicalDisk.

        :param running_firmware: The running_firmware of this StoragePhysicalDisk.
        :type: list[FirmwareRunningFirmwareRef]
        """

        self._running_firmware = running_firmware

    @property
    def sas_ports(self):
        """
        Gets the sas_ports of this StoragePhysicalDisk.
        It is a reference to SAS Port to physical disk. 

        :return: The sas_ports of this StoragePhysicalDisk.
        :rtype: list[StorageSasPortRef]
        """
        return self._sas_ports

    @sas_ports.setter
    def sas_ports(self, sas_ports):
        """
        Sets the sas_ports of this StoragePhysicalDisk.
        It is a reference to SAS Port to physical disk. 

        :param sas_ports: The sas_ports of this StoragePhysicalDisk.
        :type: list[StorageSasPortRef]
        """

        self._sas_ports = sas_ports

    @property
    def secured(self):
        """
        Gets the secured of this StoragePhysicalDisk.
        This field identifies whether the disk is encrypted.  

        :return: The secured of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._secured

    @secured.setter
    def secured(self, secured):
        """
        Sets the secured of this StoragePhysicalDisk.
        This field identifies whether the disk is encrypted.  

        :param secured: The secured of this StoragePhysicalDisk.
        :type: str
        """

        self._secured = secured

    @property
    def size(self):
        """
        Gets the size of this StoragePhysicalDisk.

        :return: The size of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this StoragePhysicalDisk.

        :param size: The size of this StoragePhysicalDisk.
        :type: str
        """

        self._size = size

    @property
    def storage_controller(self):
        """
        Gets the storage_controller of this StoragePhysicalDisk.
        A collection of references to the [storage.Controller](mo://storage.Controller) Managed Object.  When this managed object is deleted, the referenced [storage.Controller](mo://storage.Controller) MO unsets its reference to this deleted MO. 

        :return: The storage_controller of this StoragePhysicalDisk.
        :rtype: StorageControllerRef
        """
        return self._storage_controller

    @storage_controller.setter
    def storage_controller(self, storage_controller):
        """
        Sets the storage_controller of this StoragePhysicalDisk.
        A collection of references to the [storage.Controller](mo://storage.Controller) Managed Object.  When this managed object is deleted, the referenced [storage.Controller](mo://storage.Controller) MO unsets its reference to this deleted MO. 

        :param storage_controller: The storage_controller of this StoragePhysicalDisk.
        :type: StorageControllerRef
        """

        self._storage_controller = storage_controller

    @property
    def storage_enclosure(self):
        """
        Gets the storage_enclosure of this StoragePhysicalDisk.
        A collection of references to the [storage.Enclosure](mo://storage.Enclosure) Managed Object.  When this managed object is deleted, the referenced [storage.Enclosure](mo://storage.Enclosure) MO unsets its reference to this deleted MO. 

        :return: The storage_enclosure of this StoragePhysicalDisk.
        :rtype: StorageEnclosureRef
        """
        return self._storage_enclosure

    @storage_enclosure.setter
    def storage_enclosure(self, storage_enclosure):
        """
        Sets the storage_enclosure of this StoragePhysicalDisk.
        A collection of references to the [storage.Enclosure](mo://storage.Enclosure) Managed Object.  When this managed object is deleted, the referenced [storage.Enclosure](mo://storage.Enclosure) MO unsets its reference to this deleted MO. 

        :param storage_enclosure: The storage_enclosure of this StoragePhysicalDisk.
        :type: StorageEnclosureRef
        """

        self._storage_enclosure = storage_enclosure

    @property
    def thermal(self):
        """
        Gets the thermal of this StoragePhysicalDisk.

        :return: The thermal of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._thermal

    @thermal.setter
    def thermal(self, thermal):
        """
        Sets the thermal of this StoragePhysicalDisk.

        :param thermal: The thermal of this StoragePhysicalDisk.
        :type: str
        """

        self._thermal = thermal

    @property
    def type(self):
        """
        Gets the type of this StoragePhysicalDisk.

        :return: The type of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this StoragePhysicalDisk.

        :param type: The type of this StoragePhysicalDisk.
        :type: str
        """

        self._type = type

    @property
    def variant_type(self):
        """
        Gets the variant_type of this StoragePhysicalDisk.

        :return: The variant_type of this StoragePhysicalDisk.
        :rtype: str
        """
        return self._variant_type

    @variant_type.setter
    def variant_type(self, variant_type):
        """
        Sets the variant_type of this StoragePhysicalDisk.

        :param variant_type: The variant_type of this StoragePhysicalDisk.
        :type: str
        """

        self._variant_type = variant_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StoragePhysicalDisk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
