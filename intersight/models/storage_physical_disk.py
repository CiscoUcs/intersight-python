# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StoragePhysicalDisk(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'block_size': 'str',
        'bootable': 'str',
        'configuration_checkpoint': 'str',
        'configuration_state': 'str',
        'discovered_path': 'str',
        'disk_id': 'str',
        'disk_state': 'str',
        'drive_firmware': 'str',
        'drive_state': 'str',
        'fde_capable': 'str',
        'link_speed': 'str',
        'link_state': 'str',
        'num_blocks': 'str',
        'oper_power_state': 'str',
        'oper_qualifier_reason': 'str',
        'operability': 'str',
        'physical_block_size': 'str',
        'pid': 'str',
        'presence': 'str',
        'protocol': 'str',
        'raw_size': 'str',
        'secured': 'str',
        'size': 'str',
        'thermal': 'str',
        'type': 'str',
        'variant_type': 'str',
        'locator_led': 'EquipmentLocatorLed',
        'physical_disk_extensions': 'list[StoragePhysicalDiskExtension]',
        'registered_device': 'AssetDeviceRegistration',
        'running_firmware': 'list[FirmwareRunningFirmware]',
        'sas_ports': 'list[StorageSasPort]',
        'storage_controller': 'StorageController',
        'storage_enclosure': 'StorageEnclosure'
    }

    attribute_map = {
        'block_size': 'BlockSize',
        'bootable': 'Bootable',
        'configuration_checkpoint': 'ConfigurationCheckpoint',
        'configuration_state': 'ConfigurationState',
        'discovered_path': 'DiscoveredPath',
        'disk_id': 'DiskId',
        'disk_state': 'DiskState',
        'drive_firmware': 'DriveFirmware',
        'drive_state': 'DriveState',
        'fde_capable': 'FdeCapable',
        'link_speed': 'LinkSpeed',
        'link_state': 'LinkState',
        'num_blocks': 'NumBlocks',
        'oper_power_state': 'OperPowerState',
        'oper_qualifier_reason': 'OperQualifierReason',
        'operability': 'Operability',
        'physical_block_size': 'PhysicalBlockSize',
        'pid': 'Pid',
        'presence': 'Presence',
        'protocol': 'Protocol',
        'raw_size': 'RawSize',
        'secured': 'Secured',
        'size': 'Size',
        'thermal': 'Thermal',
        'type': 'Type',
        'variant_type': 'VariantType',
        'locator_led': 'LocatorLed',
        'physical_disk_extensions': 'PhysicalDiskExtensions',
        'registered_device': 'RegisteredDevice',
        'running_firmware': 'RunningFirmware',
        'sas_ports': 'SasPorts',
        'storage_controller': 'StorageController',
        'storage_enclosure': 'StorageEnclosure'
    }

    def __init__(self,
                 block_size=None,
                 bootable=None,
                 configuration_checkpoint=None,
                 configuration_state=None,
                 discovered_path=None,
                 disk_id=None,
                 disk_state=None,
                 drive_firmware=None,
                 drive_state=None,
                 fde_capable=None,
                 link_speed=None,
                 link_state=None,
                 num_blocks=None,
                 oper_power_state=None,
                 oper_qualifier_reason=None,
                 operability=None,
                 physical_block_size=None,
                 pid=None,
                 presence=None,
                 protocol=None,
                 raw_size=None,
                 secured=None,
                 size=None,
                 thermal=None,
                 type=None,
                 variant_type=None,
                 locator_led=None,
                 physical_disk_extensions=None,
                 registered_device=None,
                 running_firmware=None,
                 sas_ports=None,
                 storage_controller=None,
                 storage_enclosure=None,
                 local_vars_configuration=None):  # noqa: E501
        """StoragePhysicalDisk - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._block_size = None
        self._bootable = None
        self._configuration_checkpoint = None
        self._configuration_state = None
        self._discovered_path = None
        self._disk_id = None
        self._disk_state = None
        self._drive_firmware = None
        self._drive_state = None
        self._fde_capable = None
        self._link_speed = None
        self._link_state = None
        self._num_blocks = None
        self._oper_power_state = None
        self._oper_qualifier_reason = None
        self._operability = None
        self._physical_block_size = None
        self._pid = None
        self._presence = None
        self._protocol = None
        self._raw_size = None
        self._secured = None
        self._size = None
        self._thermal = None
        self._type = None
        self._variant_type = None
        self._locator_led = None
        self._physical_disk_extensions = None
        self._registered_device = None
        self._running_firmware = None
        self._sas_ports = None
        self._storage_controller = None
        self._storage_enclosure = None
        self.discriminator = None

        if block_size is not None:
            self.block_size = block_size
        if bootable is not None:
            self.bootable = bootable
        if configuration_checkpoint is not None:
            self.configuration_checkpoint = configuration_checkpoint
        if configuration_state is not None:
            self.configuration_state = configuration_state
        if discovered_path is not None:
            self.discovered_path = discovered_path
        if disk_id is not None:
            self.disk_id = disk_id
        if disk_state is not None:
            self.disk_state = disk_state
        if drive_firmware is not None:
            self.drive_firmware = drive_firmware
        if drive_state is not None:
            self.drive_state = drive_state
        if fde_capable is not None:
            self.fde_capable = fde_capable
        if link_speed is not None:
            self.link_speed = link_speed
        if link_state is not None:
            self.link_state = link_state
        if num_blocks is not None:
            self.num_blocks = num_blocks
        if oper_power_state is not None:
            self.oper_power_state = oper_power_state
        if oper_qualifier_reason is not None:
            self.oper_qualifier_reason = oper_qualifier_reason
        if operability is not None:
            self.operability = operability
        if physical_block_size is not None:
            self.physical_block_size = physical_block_size
        if pid is not None:
            self.pid = pid
        if presence is not None:
            self.presence = presence
        if protocol is not None:
            self.protocol = protocol
        if raw_size is not None:
            self.raw_size = raw_size
        if secured is not None:
            self.secured = secured
        if size is not None:
            self.size = size
        if thermal is not None:
            self.thermal = thermal
        if type is not None:
            self.type = type
        if variant_type is not None:
            self.variant_type = variant_type
        if locator_led is not None:
            self.locator_led = locator_led
        if physical_disk_extensions is not None:
            self.physical_disk_extensions = physical_disk_extensions
        if registered_device is not None:
            self.registered_device = registered_device
        if running_firmware is not None:
            self.running_firmware = running_firmware
        if sas_ports is not None:
            self.sas_ports = sas_ports
        if storage_controller is not None:
            self.storage_controller = storage_controller
        if storage_enclosure is not None:
            self.storage_enclosure = storage_enclosure

    @property
    def block_size(self):
        """Gets the block_size of this StoragePhysicalDisk.  # noqa: E501

        The block size of the physical disk.    # noqa: E501

        :return: The block_size of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this StoragePhysicalDisk.

        The block size of the physical disk.    # noqa: E501

        :param block_size: The block_size of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._block_size = block_size

    @property
    def bootable(self):
        """Gets the bootable of this StoragePhysicalDisk.  # noqa: E501


        :return: The bootable of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._bootable

    @bootable.setter
    def bootable(self, bootable):
        """Sets the bootable of this StoragePhysicalDisk.


        :param bootable: The bootable of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._bootable = bootable

    @property
    def configuration_checkpoint(self):
        """Gets the configuration_checkpoint of this StoragePhysicalDisk.  # noqa: E501


        :return: The configuration_checkpoint of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._configuration_checkpoint

    @configuration_checkpoint.setter
    def configuration_checkpoint(self, configuration_checkpoint):
        """Sets the configuration_checkpoint of this StoragePhysicalDisk.


        :param configuration_checkpoint: The configuration_checkpoint of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._configuration_checkpoint = configuration_checkpoint

    @property
    def configuration_state(self):
        """Gets the configuration_state of this StoragePhysicalDisk.  # noqa: E501


        :return: The configuration_state of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._configuration_state

    @configuration_state.setter
    def configuration_state(self, configuration_state):
        """Sets the configuration_state of this StoragePhysicalDisk.


        :param configuration_state: The configuration_state of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._configuration_state = configuration_state

    @property
    def discovered_path(self):
        """Gets the discovered_path of this StoragePhysicalDisk.  # noqa: E501


        :return: The discovered_path of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._discovered_path

    @discovered_path.setter
    def discovered_path(self, discovered_path):
        """Sets the discovered_path of this StoragePhysicalDisk.


        :param discovered_path: The discovered_path of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._discovered_path = discovered_path

    @property
    def disk_id(self):
        """Gets the disk_id of this StoragePhysicalDisk.  # noqa: E501


        :return: The disk_id of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._disk_id

    @disk_id.setter
    def disk_id(self, disk_id):
        """Sets the disk_id of this StoragePhysicalDisk.


        :param disk_id: The disk_id of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._disk_id = disk_id

    @property
    def disk_state(self):
        """Gets the disk_state of this StoragePhysicalDisk.  # noqa: E501

        This field identifies the health of the disk.    # noqa: E501

        :return: The disk_state of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._disk_state

    @disk_state.setter
    def disk_state(self, disk_state):
        """Sets the disk_state of this StoragePhysicalDisk.

        This field identifies the health of the disk.    # noqa: E501

        :param disk_state: The disk_state of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._disk_state = disk_state

    @property
    def drive_firmware(self):
        """Gets the drive_firmware of this StoragePhysicalDisk.  # noqa: E501


        :return: The drive_firmware of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._drive_firmware

    @drive_firmware.setter
    def drive_firmware(self, drive_firmware):
        """Sets the drive_firmware of this StoragePhysicalDisk.


        :param drive_firmware: The drive_firmware of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._drive_firmware = drive_firmware

    @property
    def drive_state(self):
        """Gets the drive_state of this StoragePhysicalDisk.  # noqa: E501


        :return: The drive_state of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._drive_state

    @drive_state.setter
    def drive_state(self, drive_state):
        """Sets the drive_state of this StoragePhysicalDisk.


        :param drive_state: The drive_state of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._drive_state = drive_state

    @property
    def fde_capable(self):
        """Gets the fde_capable of this StoragePhysicalDisk.  # noqa: E501


        :return: The fde_capable of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._fde_capable

    @fde_capable.setter
    def fde_capable(self, fde_capable):
        """Sets the fde_capable of this StoragePhysicalDisk.


        :param fde_capable: The fde_capable of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._fde_capable = fde_capable

    @property
    def link_speed(self):
        """Gets the link_speed of this StoragePhysicalDisk.  # noqa: E501


        :return: The link_speed of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._link_speed

    @link_speed.setter
    def link_speed(self, link_speed):
        """Sets the link_speed of this StoragePhysicalDisk.


        :param link_speed: The link_speed of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._link_speed = link_speed

    @property
    def link_state(self):
        """Gets the link_state of this StoragePhysicalDisk.  # noqa: E501


        :return: The link_state of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._link_state

    @link_state.setter
    def link_state(self, link_state):
        """Sets the link_state of this StoragePhysicalDisk.


        :param link_state: The link_state of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._link_state = link_state

    @property
    def num_blocks(self):
        """Gets the num_blocks of this StoragePhysicalDisk.  # noqa: E501

        The number of blocks present on the physical disk.    # noqa: E501

        :return: The num_blocks of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._num_blocks

    @num_blocks.setter
    def num_blocks(self, num_blocks):
        """Sets the num_blocks of this StoragePhysicalDisk.

        The number of blocks present on the physical disk.    # noqa: E501

        :param num_blocks: The num_blocks of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._num_blocks = num_blocks

    @property
    def oper_power_state(self):
        """Gets the oper_power_state of this StoragePhysicalDisk.  # noqa: E501


        :return: The oper_power_state of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._oper_power_state

    @oper_power_state.setter
    def oper_power_state(self, oper_power_state):
        """Sets the oper_power_state of this StoragePhysicalDisk.


        :param oper_power_state: The oper_power_state of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._oper_power_state = oper_power_state

    @property
    def oper_qualifier_reason(self):
        """Gets the oper_qualifier_reason of this StoragePhysicalDisk.  # noqa: E501


        :return: The oper_qualifier_reason of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._oper_qualifier_reason

    @oper_qualifier_reason.setter
    def oper_qualifier_reason(self, oper_qualifier_reason):
        """Sets the oper_qualifier_reason of this StoragePhysicalDisk.


        :param oper_qualifier_reason: The oper_qualifier_reason of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._oper_qualifier_reason = oper_qualifier_reason

    @property
    def operability(self):
        """Gets the operability of this StoragePhysicalDisk.  # noqa: E501


        :return: The operability of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._operability

    @operability.setter
    def operability(self, operability):
        """Sets the operability of this StoragePhysicalDisk.


        :param operability: The operability of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._operability = operability

    @property
    def physical_block_size(self):
        """Gets the physical_block_size of this StoragePhysicalDisk.  # noqa: E501


        :return: The physical_block_size of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._physical_block_size

    @physical_block_size.setter
    def physical_block_size(self, physical_block_size):
        """Sets the physical_block_size of this StoragePhysicalDisk.


        :param physical_block_size: The physical_block_size of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._physical_block_size = physical_block_size

    @property
    def pid(self):
        """Gets the pid of this StoragePhysicalDisk.  # noqa: E501

        This field identifies the Product ID for physicalDisk.    # noqa: E501

        :return: The pid of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this StoragePhysicalDisk.

        This field identifies the Product ID for physicalDisk.    # noqa: E501

        :param pid: The pid of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def presence(self):
        """Gets the presence of this StoragePhysicalDisk.  # noqa: E501


        :return: The presence of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """Sets the presence of this StoragePhysicalDisk.


        :param presence: The presence of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._presence = presence

    @property
    def protocol(self):
        """Gets the protocol of this StoragePhysicalDisk.  # noqa: E501


        :return: The protocol of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this StoragePhysicalDisk.


        :param protocol: The protocol of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def raw_size(self):
        """Gets the raw_size of this StoragePhysicalDisk.  # noqa: E501


        :return: The raw_size of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._raw_size

    @raw_size.setter
    def raw_size(self, raw_size):
        """Sets the raw_size of this StoragePhysicalDisk.


        :param raw_size: The raw_size of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._raw_size = raw_size

    @property
    def secured(self):
        """Gets the secured of this StoragePhysicalDisk.  # noqa: E501

        This field identifies whether the disk is encrypted.    # noqa: E501

        :return: The secured of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._secured

    @secured.setter
    def secured(self, secured):
        """Sets the secured of this StoragePhysicalDisk.

        This field identifies whether the disk is encrypted.    # noqa: E501

        :param secured: The secured of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._secured = secured

    @property
    def size(self):
        """Gets the size of this StoragePhysicalDisk.  # noqa: E501


        :return: The size of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this StoragePhysicalDisk.


        :param size: The size of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def thermal(self):
        """Gets the thermal of this StoragePhysicalDisk.  # noqa: E501


        :return: The thermal of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._thermal

    @thermal.setter
    def thermal(self, thermal):
        """Sets the thermal of this StoragePhysicalDisk.


        :param thermal: The thermal of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._thermal = thermal

    @property
    def type(self):
        """Gets the type of this StoragePhysicalDisk.  # noqa: E501


        :return: The type of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StoragePhysicalDisk.


        :param type: The type of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def variant_type(self):
        """Gets the variant_type of this StoragePhysicalDisk.  # noqa: E501


        :return: The variant_type of this StoragePhysicalDisk.  # noqa: E501
        :rtype: str
        """
        return self._variant_type

    @variant_type.setter
    def variant_type(self, variant_type):
        """Sets the variant_type of this StoragePhysicalDisk.


        :param variant_type: The variant_type of this StoragePhysicalDisk.  # noqa: E501
        :type: str
        """

        self._variant_type = variant_type

    @property
    def locator_led(self):
        """Gets the locator_led of this StoragePhysicalDisk.  # noqa: E501


        :return: The locator_led of this StoragePhysicalDisk.  # noqa: E501
        :rtype: EquipmentLocatorLed
        """
        return self._locator_led

    @locator_led.setter
    def locator_led(self, locator_led):
        """Sets the locator_led of this StoragePhysicalDisk.


        :param locator_led: The locator_led of this StoragePhysicalDisk.  # noqa: E501
        :type: EquipmentLocatorLed
        """

        self._locator_led = locator_led

    @property
    def physical_disk_extensions(self):
        """Gets the physical_disk_extensions of this StoragePhysicalDisk.  # noqa: E501

        A reference to a storagePhysicalDiskExtension resource. When the $expand query parameter is specified, the referenced resource is returned inline. The physical connectivity between a SCSI controller and physical disks.   # noqa: E501

        :return: The physical_disk_extensions of this StoragePhysicalDisk.  # noqa: E501
        :rtype: list[StoragePhysicalDiskExtension]
        """
        return self._physical_disk_extensions

    @physical_disk_extensions.setter
    def physical_disk_extensions(self, physical_disk_extensions):
        """Sets the physical_disk_extensions of this StoragePhysicalDisk.

        A reference to a storagePhysicalDiskExtension resource. When the $expand query parameter is specified, the referenced resource is returned inline. The physical connectivity between a SCSI controller and physical disks.   # noqa: E501

        :param physical_disk_extensions: The physical_disk_extensions of this StoragePhysicalDisk.  # noqa: E501
        :type: list[StoragePhysicalDiskExtension]
        """

        self._physical_disk_extensions = physical_disk_extensions

    @property
    def registered_device(self):
        """Gets the registered_device of this StoragePhysicalDisk.  # noqa: E501


        :return: The registered_device of this StoragePhysicalDisk.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this StoragePhysicalDisk.


        :param registered_device: The registered_device of this StoragePhysicalDisk.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    @property
    def running_firmware(self):
        """Gets the running_firmware of this StoragePhysicalDisk.  # noqa: E501

        A reference to a firmwareRunningFirmware resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The running_firmware of this StoragePhysicalDisk.  # noqa: E501
        :rtype: list[FirmwareRunningFirmware]
        """
        return self._running_firmware

    @running_firmware.setter
    def running_firmware(self, running_firmware):
        """Sets the running_firmware of this StoragePhysicalDisk.

        A reference to a firmwareRunningFirmware resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param running_firmware: The running_firmware of this StoragePhysicalDisk.  # noqa: E501
        :type: list[FirmwareRunningFirmware]
        """

        self._running_firmware = running_firmware

    @property
    def sas_ports(self):
        """Gets the sas_ports of this StoragePhysicalDisk.  # noqa: E501

        A reference to a storageSasPort resource. When the $expand query parameter is specified, the referenced resource is returned inline. It is a reference to SAS Port to physical disk.   # noqa: E501

        :return: The sas_ports of this StoragePhysicalDisk.  # noqa: E501
        :rtype: list[StorageSasPort]
        """
        return self._sas_ports

    @sas_ports.setter
    def sas_ports(self, sas_ports):
        """Sets the sas_ports of this StoragePhysicalDisk.

        A reference to a storageSasPort resource. When the $expand query parameter is specified, the referenced resource is returned inline. It is a reference to SAS Port to physical disk.   # noqa: E501

        :param sas_ports: The sas_ports of this StoragePhysicalDisk.  # noqa: E501
        :type: list[StorageSasPort]
        """

        self._sas_ports = sas_ports

    @property
    def storage_controller(self):
        """Gets the storage_controller of this StoragePhysicalDisk.  # noqa: E501


        :return: The storage_controller of this StoragePhysicalDisk.  # noqa: E501
        :rtype: StorageController
        """
        return self._storage_controller

    @storage_controller.setter
    def storage_controller(self, storage_controller):
        """Sets the storage_controller of this StoragePhysicalDisk.


        :param storage_controller: The storage_controller of this StoragePhysicalDisk.  # noqa: E501
        :type: StorageController
        """

        self._storage_controller = storage_controller

    @property
    def storage_enclosure(self):
        """Gets the storage_enclosure of this StoragePhysicalDisk.  # noqa: E501


        :return: The storage_enclosure of this StoragePhysicalDisk.  # noqa: E501
        :rtype: StorageEnclosure
        """
        return self._storage_enclosure

    @storage_enclosure.setter
    def storage_enclosure(self, storage_enclosure):
        """Sets the storage_enclosure of this StoragePhysicalDisk.


        :param storage_enclosure: The storage_enclosure of this StoragePhysicalDisk.  # noqa: E501
        :type: StorageEnclosure
        """

        self._storage_enclosure = storage_enclosure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoragePhysicalDisk):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StoragePhysicalDisk):
            return True

        return self.to_dict() != other.to_dict()
