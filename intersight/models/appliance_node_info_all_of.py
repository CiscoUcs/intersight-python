# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ApplianceNodeInfoAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'hostname': 'str',
        'node_id': 'int',
        'node_ip_v4_config': 'CommIpV4Interface',
        'operational_status': 'str'
    }

    attribute_map = {
        'hostname': 'Hostname',
        'node_id': 'NodeId',
        'node_ip_v4_config': 'NodeIpV4Config',
        'operational_status': 'OperationalStatus'
    }

    def __init__(self,
                 hostname=None,
                 node_id=None,
                 node_ip_v4_config=None,
                 operational_status='Unknown',
                 local_vars_configuration=None):  # noqa: E501
        """ApplianceNodeInfoAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._hostname = None
        self._node_id = None
        self._node_ip_v4_config = None
        self._operational_status = None
        self.discriminator = None

        if hostname is not None:
            self.hostname = hostname
        if node_id is not None:
            self.node_id = node_id
        if node_ip_v4_config is not None:
            self.node_ip_v4_config = node_ip_v4_config
        if operational_status is not None:
            self.operational_status = operational_status

    @property
    def hostname(self):
        """Gets the hostname of this ApplianceNodeInfoAllOf.  # noqa: E501

        Cluster node's FQDN or IP address.    # noqa: E501

        :return: The hostname of this ApplianceNodeInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ApplianceNodeInfoAllOf.

        Cluster node's FQDN or IP address.    # noqa: E501

        :param hostname: The hostname of this ApplianceNodeInfoAllOf.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def node_id(self):
        """Gets the node_id of this ApplianceNodeInfoAllOf.  # noqa: E501

        System assigned unique ID of the Intersight Appliance node. The system incrementally assigns identifiers to each node in the Intersight Appliance cluster starting with a value of 1.    # noqa: E501

        :return: The node_id of this ApplianceNodeInfoAllOf.  # noqa: E501
        :rtype: int
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this ApplianceNodeInfoAllOf.

        System assigned unique ID of the Intersight Appliance node. The system incrementally assigns identifiers to each node in the Intersight Appliance cluster starting with a value of 1.    # noqa: E501

        :param node_id: The node_id of this ApplianceNodeInfoAllOf.  # noqa: E501
        :type: int
        """

        self._node_id = node_id

    @property
    def node_ip_v4_config(self):
        """Gets the node_ip_v4_config of this ApplianceNodeInfoAllOf.  # noqa: E501


        :return: The node_ip_v4_config of this ApplianceNodeInfoAllOf.  # noqa: E501
        :rtype: CommIpV4Interface
        """
        return self._node_ip_v4_config

    @node_ip_v4_config.setter
    def node_ip_v4_config(self, node_ip_v4_config):
        """Sets the node_ip_v4_config of this ApplianceNodeInfoAllOf.


        :param node_ip_v4_config: The node_ip_v4_config of this ApplianceNodeInfoAllOf.  # noqa: E501
        :type: CommIpV4Interface
        """

        self._node_ip_v4_config = node_ip_v4_config

    @property
    def operational_status(self):
        """Gets the operational_status of this ApplianceNodeInfoAllOf.  # noqa: E501

        Operational status of the Intersight Appliance node.     # noqa: E501

        :return: The operational_status of this ApplianceNodeInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._operational_status

    @operational_status.setter
    def operational_status(self, operational_status):
        """Sets the operational_status of this ApplianceNodeInfoAllOf.

        Operational status of the Intersight Appliance node.     # noqa: E501

        :param operational_status: The operational_status of this ApplianceNodeInfoAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "Unknown", "Operational", "Impaired", "AttentionNeeded"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and operational_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `operational_status` ({0}), must be one of {1}"  # noqa: E501
                .format(operational_status, allowed_values))

        self._operational_status = operational_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplianceNodeInfoAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplianceNodeInfoAllOf):
            return True

        return self.to_dict() != other.to_dict()
