# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class MemoryPersistentMemoryNamespace(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'capacity': 'str',
        'health_state': 'str',
        'label_version': 'str',
        'mode': 'str',
        'name': 'str',
        'uuid': 'str',
        'memory_persistent_memory_region': 'MemoryPersistentMemoryRegion',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'capacity': 'Capacity',
        'health_state': 'HealthState',
        'label_version': 'LabelVersion',
        'mode': 'Mode',
        'name': 'Name',
        'uuid': 'Uuid',
        'memory_persistent_memory_region': 'MemoryPersistentMemoryRegion',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 capacity=None,
                 health_state=None,
                 label_version=None,
                 mode=None,
                 name=None,
                 uuid=None,
                 memory_persistent_memory_region=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """MemoryPersistentMemoryNamespace - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._capacity = None
        self._health_state = None
        self._label_version = None
        self._mode = None
        self._name = None
        self._uuid = None
        self._memory_persistent_memory_region = None
        self._registered_device = None
        self.discriminator = None

        if capacity is not None:
            self.capacity = capacity
        if health_state is not None:
            self.health_state = health_state
        if label_version is not None:
            self.label_version = label_version
        if mode is not None:
            self.mode = mode
        if name is not None:
            self.name = name
        if uuid is not None:
            self.uuid = uuid
        if memory_persistent_memory_region is not None:
            self.memory_persistent_memory_region = memory_persistent_memory_region
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def capacity(self):
        """Gets the capacity of this MemoryPersistentMemoryNamespace.  # noqa: E501

        This represents the capacity in GB of a Persistent Memory Namespace.    # noqa: E501

        :return: The capacity of this MemoryPersistentMemoryNamespace.  # noqa: E501
        :rtype: str
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this MemoryPersistentMemoryNamespace.

        This represents the capacity in GB of a Persistent Memory Namespace.    # noqa: E501

        :param capacity: The capacity of this MemoryPersistentMemoryNamespace.  # noqa: E501
        :type: str
        """

        self._capacity = capacity

    @property
    def health_state(self):
        """Gets the health_state of this MemoryPersistentMemoryNamespace.  # noqa: E501

        This represents the health state of a Persistent Memory Namespace.    # noqa: E501

        :return: The health_state of this MemoryPersistentMemoryNamespace.  # noqa: E501
        :rtype: str
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this MemoryPersistentMemoryNamespace.

        This represents the health state of a Persistent Memory Namespace.    # noqa: E501

        :param health_state: The health_state of this MemoryPersistentMemoryNamespace.  # noqa: E501
        :type: str
        """

        self._health_state = health_state

    @property
    def label_version(self):
        """Gets the label_version of this MemoryPersistentMemoryNamespace.  # noqa: E501

        This represents the label version of a Persistent Memory Namespace.    # noqa: E501

        :return: The label_version of this MemoryPersistentMemoryNamespace.  # noqa: E501
        :rtype: str
        """
        return self._label_version

    @label_version.setter
    def label_version(self, label_version):
        """Sets the label_version of this MemoryPersistentMemoryNamespace.

        This represents the label version of a Persistent Memory Namespace.    # noqa: E501

        :param label_version: The label_version of this MemoryPersistentMemoryNamespace.  # noqa: E501
        :type: str
        """

        self._label_version = label_version

    @property
    def mode(self):
        """Gets the mode of this MemoryPersistentMemoryNamespace.  # noqa: E501

        This represents the mode of a Persistent Memory Namespace.    # noqa: E501

        :return: The mode of this MemoryPersistentMemoryNamespace.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this MemoryPersistentMemoryNamespace.

        This represents the mode of a Persistent Memory Namespace.    # noqa: E501

        :param mode: The mode of this MemoryPersistentMemoryNamespace.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this MemoryPersistentMemoryNamespace.  # noqa: E501

        This represents the name of a Persistent Memory Namespace.    # noqa: E501

        :return: The name of this MemoryPersistentMemoryNamespace.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MemoryPersistentMemoryNamespace.

        This represents the name of a Persistent Memory Namespace.    # noqa: E501

        :param name: The name of this MemoryPersistentMemoryNamespace.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def uuid(self):
        """Gets the uuid of this MemoryPersistentMemoryNamespace.  # noqa: E501

        This represents the uuid of a Persistent Memory Namespace.     # noqa: E501

        :return: The uuid of this MemoryPersistentMemoryNamespace.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this MemoryPersistentMemoryNamespace.

        This represents the uuid of a Persistent Memory Namespace.     # noqa: E501

        :param uuid: The uuid of this MemoryPersistentMemoryNamespace.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def memory_persistent_memory_region(self):
        """Gets the memory_persistent_memory_region of this MemoryPersistentMemoryNamespace.  # noqa: E501


        :return: The memory_persistent_memory_region of this MemoryPersistentMemoryNamespace.  # noqa: E501
        :rtype: MemoryPersistentMemoryRegion
        """
        return self._memory_persistent_memory_region

    @memory_persistent_memory_region.setter
    def memory_persistent_memory_region(self, memory_persistent_memory_region):
        """Sets the memory_persistent_memory_region of this MemoryPersistentMemoryNamespace.


        :param memory_persistent_memory_region: The memory_persistent_memory_region of this MemoryPersistentMemoryNamespace.  # noqa: E501
        :type: MemoryPersistentMemoryRegion
        """

        self._memory_persistent_memory_region = memory_persistent_memory_region

    @property
    def registered_device(self):
        """Gets the registered_device of this MemoryPersistentMemoryNamespace.  # noqa: E501


        :return: The registered_device of this MemoryPersistentMemoryNamespace.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this MemoryPersistentMemoryNamespace.


        :param registered_device: The registered_device of this MemoryPersistentMemoryNamespace.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemoryPersistentMemoryNamespace):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MemoryPersistentMemoryNamespace):
            return True

        return self.to_dict() != other.to_dict()
