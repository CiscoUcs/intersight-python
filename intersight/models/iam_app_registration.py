# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1415
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IamAppRegistration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoOptionalTag]',
        'version_context': 'MoOptionalVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'client_id': 'str',
        'client_name': 'str',
        'client_secret': 'str',
        'client_type': 'str',
        'description': 'str',
        'grant_types': 'list[str]',
        'redirect_uris': 'list[str]',
        'renew_client_secret': 'bool',
        'response_types': 'list[str]',
        'revocation_timestamp': 'datetime',
        'revoke': 'bool',
        'account': 'IamAccountRef',
        'oauth_tokens': 'list[IamOAuthTokenRef]',
        'permission': 'IamPermissionRef',
        'roles': 'list[IamRoleRef]',
        'user': 'IamUserRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'client_id': 'ClientId',
        'client_name': 'ClientName',
        'client_secret': 'ClientSecret',
        'client_type': 'ClientType',
        'description': 'Description',
        'grant_types': 'GrantTypes',
        'redirect_uris': 'RedirectUris',
        'renew_client_secret': 'RenewClientSecret',
        'response_types': 'ResponseTypes',
        'revocation_timestamp': 'RevocationTimestamp',
        'revoke': 'Revoke',
        'account': 'Account',
        'oauth_tokens': 'OauthTokens',
        'permission': 'Permission',
        'roles': 'Roles',
        'user': 'User'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, client_id=None, client_name=None, client_secret=None, client_type='public', description=None, grant_types=None, redirect_uris=None, renew_client_secret=None, response_types=None, revocation_timestamp=None, revoke=None, account=None, oauth_tokens=None, permission=None, roles=None, user=None):
        """
        IamAppRegistration - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._client_id = None
        self._client_name = None
        self._client_secret = None
        self._client_type = None
        self._description = None
        self._grant_types = None
        self._redirect_uris = None
        self._renew_client_secret = None
        self._response_types = None
        self._revocation_timestamp = None
        self._revoke = None
        self._account = None
        self._oauth_tokens = None
        self._permission = None
        self._roles = None
        self._user = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if client_id is not None:
          self.client_id = client_id
        if client_name is not None:
          self.client_name = client_name
        if client_secret is not None:
          self.client_secret = client_secret
        if client_type is not None:
          self.client_type = client_type
        if description is not None:
          self.description = description
        if grant_types is not None:
          self.grant_types = grant_types
        if redirect_uris is not None:
          self.redirect_uris = redirect_uris
        if renew_client_secret is not None:
          self.renew_client_secret = renew_client_secret
        if response_types is not None:
          self.response_types = response_types
        if revocation_timestamp is not None:
          self.revocation_timestamp = revocation_timestamp
        if revoke is not None:
          self.revoke = revoke
        if account is not None:
          self.account = account
        if oauth_tokens is not None:
          self.oauth_tokens = oauth_tokens
        if permission is not None:
          self.permission = permission
        if roles is not None:
          self.roles = roles
        if user is not None:
          self.user = user

    @property
    def account_moid(self):
        """
        Gets the account_moid of this IamAppRegistration.
        The Account ID for this managed object.  

        :return: The account_moid of this IamAppRegistration.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this IamAppRegistration.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this IamAppRegistration.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this IamAppRegistration.
        The time when this managed object was created.  

        :return: The create_time of this IamAppRegistration.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this IamAppRegistration.
        The time when this managed object was created.  

        :param create_time: The create_time of this IamAppRegistration.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this IamAppRegistration.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this IamAppRegistration.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this IamAppRegistration.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this IamAppRegistration.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this IamAppRegistration.
        The time when this managed object was last modified.  

        :return: The mod_time of this IamAppRegistration.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this IamAppRegistration.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this IamAppRegistration.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this IamAppRegistration.
        The unique identifier of this Managed Object instance.   

        :return: The moid of this IamAppRegistration.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this IamAppRegistration.
        The unique identifier of this Managed Object instance.   

        :param moid: The moid of this IamAppRegistration.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this IamAppRegistration.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :return: The object_type of this IamAppRegistration.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this IamAppRegistration.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :param object_type: The object_type of this IamAppRegistration.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this IamAppRegistration.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this IamAppRegistration.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this IamAppRegistration.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this IamAppRegistration.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this IamAppRegistration.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this IamAppRegistration.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this IamAppRegistration.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this IamAppRegistration.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this IamAppRegistration.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this IamAppRegistration.
        :rtype: list[MoOptionalTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this IamAppRegistration.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this IamAppRegistration.
        :type: list[MoOptionalTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this IamAppRegistration.
        The versioning info for this managed object.   

        :return: The version_context of this IamAppRegistration.
        :rtype: MoOptionalVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this IamAppRegistration.
        The versioning info for this managed object.   

        :param version_context: The version_context of this IamAppRegistration.
        :type: MoOptionalVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this IamAppRegistration.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this IamAppRegistration.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this IamAppRegistration.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this IamAppRegistration.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this IamAppRegistration.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this IamAppRegistration.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this IamAppRegistration.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this IamAppRegistration.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this IamAppRegistration.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :return: The permission_resources of this IamAppRegistration.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this IamAppRegistration.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :param permission_resources: The permission_resources of this IamAppRegistration.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def client_id(self):
        """
        Gets the client_id of this IamAppRegistration.
        A unique identifier for the OAuth2 client application. The client ID is auto-generated when the AppRegistration object is created.   

        :return: The client_id of this IamAppRegistration.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this IamAppRegistration.
        A unique identifier for the OAuth2 client application. The client ID is auto-generated when the AppRegistration object is created.   

        :param client_id: The client_id of this IamAppRegistration.
        :type: str
        """

        self._client_id = client_id

    @property
    def client_name(self):
        """
        Gets the client_name of this IamAppRegistration.
        App Registration name specified by user.   

        :return: The client_name of this IamAppRegistration.
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """
        Sets the client_name of this IamAppRegistration.
        App Registration name specified by user.   

        :param client_name: The client_name of this IamAppRegistration.
        :type: str
        """

        self._client_name = client_name

    @property
    def client_secret(self):
        """
        Gets the client_secret of this IamAppRegistration.
        The OAuth2 client secret. The value of this property is generated when grantType includes 'client-credentials'. Otherwise, no client-secret is generated.   

        :return: The client_secret of this IamAppRegistration.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """
        Sets the client_secret of this IamAppRegistration.
        The OAuth2 client secret. The value of this property is generated when grantType includes 'client-credentials'. Otherwise, no client-secret is generated.   

        :param client_secret: The client_secret of this IamAppRegistration.
        :type: str
        """

        self._client_secret = client_secret

    @property
    def client_type(self):
        """
        Gets the client_type of this IamAppRegistration.
        The type of the OAuth2 client (public or confidential), as specified in https://tools.ietf.org/html/rfc6749#section-2.1.   

        :return: The client_type of this IamAppRegistration.
        :rtype: str
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """
        Sets the client_type of this IamAppRegistration.
        The type of the OAuth2 client (public or confidential), as specified in https://tools.ietf.org/html/rfc6749#section-2.1.   

        :param client_type: The client_type of this IamAppRegistration.
        :type: str
        """
        allowed_values = ["public", "confidential"]
        if client_type not in allowed_values:
            raise ValueError(
                "Invalid value for `client_type` ({0}), must be one of {1}"
                .format(client_type, allowed_values)
            )

        self._client_type = client_type

    @property
    def description(self):
        """
        Gets the description of this IamAppRegistration.
        Description of the application.   

        :return: The description of this IamAppRegistration.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this IamAppRegistration.
        Description of the application.   

        :param description: The description of this IamAppRegistration.
        :type: str
        """

        self._description = description

    @property
    def grant_types(self):
        """
        Gets the grant_types of this IamAppRegistration.
        The set of grant types that OAuth2 clients can use for this application. The grant type is used in the OAuth2 login flow to validate the grant type that has been requested by the client. See https://tools.ietf.org/html/rfc7591#page-9 for more details.  # It is set automatically when AppRegistration is created since currently we do not provide option for the user.   

        :return: The grant_types of this IamAppRegistration.
        :rtype: list[str]
        """
        return self._grant_types

    @grant_types.setter
    def grant_types(self, grant_types):
        """
        Sets the grant_types of this IamAppRegistration.
        The set of grant types that OAuth2 clients can use for this application. The grant type is used in the OAuth2 login flow to validate the grant type that has been requested by the client. See https://tools.ietf.org/html/rfc7591#page-9 for more details.  # It is set automatically when AppRegistration is created since currently we do not provide option for the user.   

        :param grant_types: The grant_types of this IamAppRegistration.
        :type: list[str]
        """
        allowed_values = ["authorization_code", "refresh_token", "client_credentials", "implicit", "password", "urn:ietf:params:oauth:grant-type:jwt-bearer", "urn:ietf:params:oauth:grant-type:saml2-bearer"]
        if not set(grant_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `grant_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(grant_types)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._grant_types = grant_types

    @property
    def redirect_uris(self):
        """
        Gets the redirect_uris of this IamAppRegistration.
        After a user successfully authorizes an application, the OAuth2 authorization server will redirect the user back to the application with either an authorization code or access token in the URL. Registered redirect URLs may contain query string parameters, but must not contain anything in the fragment. The registration server rejects the request if a user tries to register a redirect URL that contains a fragment. For native and mobile apps, Intersight allows a user to register a URL scheme such as myapp:// which can then be used in the redirect URL. The authorization server allows arbitrary URL schemes to be registered in order to support registering redirect URLs for native apps.  Redirect URLs are a critical part of the OAuth flow. After a user successfully authorizes an application, the authorization server will redirect the user back to the application with either an authorization code or access token in the URL. Because the redirect URL will contain sensitive information, it is critical that the service doesn’t redirect the user to arbitrary locations. The best way to ensure the user will only be directed to appropriate locations is to require the developer to register one or more redirect URLs when they create the application.  The redirection endpoint URI MUST be an absolute URI.   

        :return: The redirect_uris of this IamAppRegistration.
        :rtype: list[str]
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """
        Sets the redirect_uris of this IamAppRegistration.
        After a user successfully authorizes an application, the OAuth2 authorization server will redirect the user back to the application with either an authorization code or access token in the URL. Registered redirect URLs may contain query string parameters, but must not contain anything in the fragment. The registration server rejects the request if a user tries to register a redirect URL that contains a fragment. For native and mobile apps, Intersight allows a user to register a URL scheme such as myapp:// which can then be used in the redirect URL. The authorization server allows arbitrary URL schemes to be registered in order to support registering redirect URLs for native apps.  Redirect URLs are a critical part of the OAuth flow. After a user successfully authorizes an application, the authorization server will redirect the user back to the application with either an authorization code or access token in the URL. Because the redirect URL will contain sensitive information, it is critical that the service doesn’t redirect the user to arbitrary locations. The best way to ensure the user will only be directed to appropriate locations is to require the developer to register one or more redirect URLs when they create the application.  The redirection endpoint URI MUST be an absolute URI.   

        :param redirect_uris: The redirect_uris of this IamAppRegistration.
        :type: list[str]
        """

        self._redirect_uris = redirect_uris

    @property
    def renew_client_secret(self):
        """
        Gets the renew_client_secret of this IamAppRegistration.
        Set value to true to renew the client-secret. Applicable to client_credentials grant type.   

        :return: The renew_client_secret of this IamAppRegistration.
        :rtype: bool
        """
        return self._renew_client_secret

    @renew_client_secret.setter
    def renew_client_secret(self, renew_client_secret):
        """
        Sets the renew_client_secret of this IamAppRegistration.
        Set value to true to renew the client-secret. Applicable to client_credentials grant type.   

        :param renew_client_secret: The renew_client_secret of this IamAppRegistration.
        :type: bool
        """

        self._renew_client_secret = renew_client_secret

    @property
    def response_types(self):
        """
        Gets the response_types of this IamAppRegistration.
        The set of response types that a OAuth2 client can use. This is static list and it is set automatically when AppRegistration is created. According to RFC, it is used in OAuth2 login flow to check that this AppRegistration supports response type from the request. See https://tools.ietf.org/html/rfc7591#page-9 for more details.   

        :return: The response_types of this IamAppRegistration.
        :rtype: list[str]
        """
        return self._response_types

    @response_types.setter
    def response_types(self, response_types):
        """
        Sets the response_types of this IamAppRegistration.
        The set of response types that a OAuth2 client can use. This is static list and it is set automatically when AppRegistration is created. According to RFC, it is used in OAuth2 login flow to check that this AppRegistration supports response type from the request. See https://tools.ietf.org/html/rfc7591#page-9 for more details.   

        :param response_types: The response_types of this IamAppRegistration.
        :type: list[str]
        """
        allowed_values = ["code", "token"]
        if not set(response_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `response_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(response_types)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._response_types = response_types

    @property
    def revocation_timestamp(self):
        """
        Gets the revocation_timestamp of this IamAppRegistration.
        Used to perform revocation for tokens of AppRegistration. Updated only internally is case Revoke property come from UI with value true. On each request with OAuth2 access token the CreationTime of the OAuth2 token will be compared to RevokationTimestamp of the corresponding App Registration.   

        :return: The revocation_timestamp of this IamAppRegistration.
        :rtype: datetime
        """
        return self._revocation_timestamp

    @revocation_timestamp.setter
    def revocation_timestamp(self, revocation_timestamp):
        """
        Sets the revocation_timestamp of this IamAppRegistration.
        Used to perform revocation for tokens of AppRegistration. Updated only internally is case Revoke property come from UI with value true. On each request with OAuth2 access token the CreationTime of the OAuth2 token will be compared to RevokationTimestamp of the corresponding App Registration.   

        :param revocation_timestamp: The revocation_timestamp of this IamAppRegistration.
        :type: datetime
        """

        self._revocation_timestamp = revocation_timestamp

    @property
    def revoke(self):
        """
        Gets the revoke of this IamAppRegistration.
        Used to trigger update the revocationTimestamp value. If UI sent updating request with the Revoke value is true, then update RevocationTimestamp.    

        :return: The revoke of this IamAppRegistration.
        :rtype: bool
        """
        return self._revoke

    @revoke.setter
    def revoke(self, revoke):
        """
        Sets the revoke of this IamAppRegistration.
        Used to trigger update the revocationTimestamp value. If UI sent updating request with the Revoke value is true, then update RevocationTimestamp.    

        :param revoke: The revoke of this IamAppRegistration.
        :type: bool
        """

        self._revoke = revoke

    @property
    def account(self):
        """
        Gets the account of this IamAppRegistration.
        A collection of references to the [iam.Account](mo://iam.Account) Managed Object.  When this managed object is deleted, the referenced [iam.Account](mo://iam.Account) MO unsets its reference to this deleted MO. 

        :return: The account of this IamAppRegistration.
        :rtype: IamAccountRef
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this IamAppRegistration.
        A collection of references to the [iam.Account](mo://iam.Account) Managed Object.  When this managed object is deleted, the referenced [iam.Account](mo://iam.Account) MO unsets its reference to this deleted MO. 

        :param account: The account of this IamAppRegistration.
        :type: IamAccountRef
        """

        self._account = account

    @property
    def oauth_tokens(self):
        """
        Gets the oauth_tokens of this IamAppRegistration.
        Collection of the OAuth2 tokens. Each OAuth2 token represents valid OAuth session. OAuth2 token is created when login over OAuth2 is performed using Authorization Code grant type. 

        :return: The oauth_tokens of this IamAppRegistration.
        :rtype: list[IamOAuthTokenRef]
        """
        return self._oauth_tokens

    @oauth_tokens.setter
    def oauth_tokens(self, oauth_tokens):
        """
        Sets the oauth_tokens of this IamAppRegistration.
        Collection of the OAuth2 tokens. Each OAuth2 token represents valid OAuth session. OAuth2 token is created when login over OAuth2 is performed using Authorization Code grant type. 

        :param oauth_tokens: The oauth_tokens of this IamAppRegistration.
        :type: list[IamOAuthTokenRef]
        """

        self._oauth_tokens = oauth_tokens

    @property
    def permission(self):
        """
        Gets the permission of this IamAppRegistration.
        Permission associated with OAuth token issued through Client Credentials flow. Permission of the current session will be used. 

        :return: The permission of this IamAppRegistration.
        :rtype: IamPermissionRef
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """
        Sets the permission of this IamAppRegistration.
        Permission associated with OAuth token issued through Client Credentials flow. Permission of the current session will be used. 

        :param permission: The permission of this IamAppRegistration.
        :type: IamPermissionRef
        """

        self._permission = permission

    @property
    def roles(self):
        """
        Gets the roles of this IamAppRegistration.
        The set of roles that can be used when a OAuth2 client is accessing this registered application. For example, multiple roles may be defined in your Intersight account, but you want users to login with the 'Read-Only' role when accessing Intersight through a registered application. In that case, the 'roles' property should contain a single element referencing the 'Read-Only' role. A user can only assign roles they already have.  This relationship is deprecated. Authorization is now performed by passing the 'scope' query parameter in the first request of the Authorization Code OAuth2 flow. The value of the 'scope' parameter is a list of scope names separated by comma: ROLE.Account Administrator, ROLE.<any role name>. 

        :return: The roles of this IamAppRegistration.
        :rtype: list[IamRoleRef]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this IamAppRegistration.
        The set of roles that can be used when a OAuth2 client is accessing this registered application. For example, multiple roles may be defined in your Intersight account, but you want users to login with the 'Read-Only' role when accessing Intersight through a registered application. In that case, the 'roles' property should contain a single element referencing the 'Read-Only' role. A user can only assign roles they already have.  This relationship is deprecated. Authorization is now performed by passing the 'scope' query parameter in the first request of the Authorization Code OAuth2 flow. The value of the 'scope' parameter is a list of scope names separated by comma: ROLE.Account Administrator, ROLE.<any role name>. 

        :param roles: The roles of this IamAppRegistration.
        :type: list[IamRoleRef]
        """

        self._roles = roles

    @property
    def user(self):
        """
        Gets the user of this IamAppRegistration.
        A collection of references to the [iam.User](mo://iam.User) Managed Object.  When this managed object is deleted, the referenced [iam.User](mo://iam.User) MO unsets its reference to this deleted MO. 

        :return: The user of this IamAppRegistration.
        :rtype: IamUserRef
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this IamAppRegistration.
        A collection of references to the [iam.User](mo://iam.User) Managed Object.  When this managed object is deleted, the referenced [iam.User](mo://iam.User) MO unsets its reference to this deleted MO. 

        :param user: The user of this IamAppRegistration.
        :type: IamUserRef
        """

        self._user = user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IamAppRegistration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
