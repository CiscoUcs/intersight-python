# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1461
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StoragePureDisk(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'device_mo_id': 'str',
        'dn': 'str',
        'rn': 'str',
        'model': 'str',
        'revision': 'str',
        'serial': 'str',
        'vendor': 'str',
        'name': 'str',
        'part_number': 'str',
        'protocol': 'str',
        'speed': 'int',
        'status': 'str',
        'storage_utilization': 'StorageCapacity',
        'type': 'str',
        'version': 'str',
        'storage_array': 'StorageGenericArrayRef',
        'registered_device': 'AssetDeviceRegistrationRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'device_mo_id': 'DeviceMoId',
        'dn': 'Dn',
        'rn': 'Rn',
        'model': 'Model',
        'revision': 'Revision',
        'serial': 'Serial',
        'vendor': 'Vendor',
        'name': 'Name',
        'part_number': 'PartNumber',
        'protocol': 'Protocol',
        'speed': 'Speed',
        'status': 'Status',
        'storage_utilization': 'StorageUtilization',
        'type': 'Type',
        'version': 'Version',
        'storage_array': 'StorageArray',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, device_mo_id=None, dn=None, rn=None, model=None, revision=None, serial=None, vendor=None, name=None, part_number=None, protocol='Unknown', speed=None, status='Unknown', storage_utilization=None, type='Unknown', version=None, storage_array=None, registered_device=None):
        """
        StoragePureDisk - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._device_mo_id = None
        self._dn = None
        self._rn = None
        self._model = None
        self._revision = None
        self._serial = None
        self._vendor = None
        self._name = None
        self._part_number = None
        self._protocol = None
        self._speed = None
        self._status = None
        self._storage_utilization = None
        self._type = None
        self._version = None
        self._storage_array = None
        self._registered_device = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if device_mo_id is not None:
          self.device_mo_id = device_mo_id
        if dn is not None:
          self.dn = dn
        if rn is not None:
          self.rn = rn
        if model is not None:
          self.model = model
        if revision is not None:
          self.revision = revision
        if serial is not None:
          self.serial = serial
        if vendor is not None:
          self.vendor = vendor
        if name is not None:
          self.name = name
        if part_number is not None:
          self.part_number = part_number
        if protocol is not None:
          self.protocol = protocol
        if speed is not None:
          self.speed = speed
        if status is not None:
          self.status = status
        if storage_utilization is not None:
          self.storage_utilization = storage_utilization
        if type is not None:
          self.type = type
        if version is not None:
          self.version = version
        if storage_array is not None:
          self.storage_array = storage_array
        if registered_device is not None:
          self.registered_device = registered_device

    @property
    def account_moid(self):
        """
        Gets the account_moid of this StoragePureDisk.
        The Account ID for this managed object.

        :return: The account_moid of this StoragePureDisk.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this StoragePureDisk.
        The Account ID for this managed object.

        :param account_moid: The account_moid of this StoragePureDisk.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this StoragePureDisk.
        The time when this managed object was created.

        :return: The create_time of this StoragePureDisk.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this StoragePureDisk.
        The time when this managed object was created.

        :param create_time: The create_time of this StoragePureDisk.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this StoragePureDisk.
        The DomainGroup ID for this managed object.

        :return: The domain_group_moid of this StoragePureDisk.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this StoragePureDisk.
        The DomainGroup ID for this managed object.

        :param domain_group_moid: The domain_group_moid of this StoragePureDisk.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this StoragePureDisk.
        The time when this managed object was last modified.

        :return: The mod_time of this StoragePureDisk.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this StoragePureDisk.
        The time when this managed object was last modified.

        :param mod_time: The mod_time of this StoragePureDisk.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this StoragePureDisk.
        The unique identifier of this Managed Object instance.

        :return: The moid of this StoragePureDisk.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this StoragePureDisk.
        The unique identifier of this Managed Object instance.

        :param moid: The moid of this StoragePureDisk.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this StoragePureDisk.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        :return: The object_type of this StoragePureDisk.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this StoragePureDisk.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        :param object_type: The object_type of this StoragePureDisk.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this StoragePureDisk.
        The array of owners which represent effective ownership of this object.

        :return: The owners of this StoragePureDisk.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this StoragePureDisk.
        The array of owners which represent effective ownership of this object.

        :param owners: The owners of this StoragePureDisk.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this StoragePureDisk.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.

        :return: The shared_scope of this StoragePureDisk.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this StoragePureDisk.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.

        :param shared_scope: The shared_scope of this StoragePureDisk.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this StoragePureDisk.
        The array of tags, which allow to add key, value meta-data to managed objects.

        :return: The tags of this StoragePureDisk.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this StoragePureDisk.
        The array of tags, which allow to add key, value meta-data to managed objects.

        :param tags: The tags of this StoragePureDisk.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this StoragePureDisk.
        The versioning info for this managed object.

        :return: The version_context of this StoragePureDisk.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this StoragePureDisk.
        The versioning info for this managed object.

        :param version_context: The version_context of this StoragePureDisk.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this StoragePureDisk.
        The array containing the MO references of the ancestors in the object containment hierarchy.

        :return: The ancestors of this StoragePureDisk.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this StoragePureDisk.
        The array containing the MO references of the ancestors in the object containment hierarchy.

        :param ancestors: The ancestors of this StoragePureDisk.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this StoragePureDisk.
        The direct ancestor of this managed object in the containment hierarchy.

        :return: The parent of this StoragePureDisk.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this StoragePureDisk.
        The direct ancestor of this managed object in the containment hierarchy.

        :param parent: The parent of this StoragePureDisk.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this StoragePureDisk.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.

        :return: The permission_resources of this StoragePureDisk.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this StoragePureDisk.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.

        :param permission_resources: The permission_resources of this StoragePureDisk.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def device_mo_id(self):
        """
        Gets the device_mo_id of this StoragePureDisk.

        :return: The device_mo_id of this StoragePureDisk.
        :rtype: str
        """
        return self._device_mo_id

    @device_mo_id.setter
    def device_mo_id(self, device_mo_id):
        """
        Sets the device_mo_id of this StoragePureDisk.

        :param device_mo_id: The device_mo_id of this StoragePureDisk.
        :type: str
        """

        self._device_mo_id = device_mo_id

    @property
    def dn(self):
        """
        Gets the dn of this StoragePureDisk.
        The Distinguished Name unambiguously identifies an object in the system.

        :return: The dn of this StoragePureDisk.
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """
        Sets the dn of this StoragePureDisk.
        The Distinguished Name unambiguously identifies an object in the system.

        :param dn: The dn of this StoragePureDisk.
        :type: str
        """

        self._dn = dn

    @property
    def rn(self):
        """
        Gets the rn of this StoragePureDisk.
        The Relative Name uniquely identifies an object within a given context.

        :return: The rn of this StoragePureDisk.
        :rtype: str
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """
        Sets the rn of this StoragePureDisk.
        The Relative Name uniquely identifies an object within a given context.

        :param rn: The rn of this StoragePureDisk.
        :type: str
        """

        self._rn = rn

    @property
    def model(self):
        """
        Gets the model of this StoragePureDisk.
        This field identifies the model of the given component.

        :return: The model of this StoragePureDisk.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this StoragePureDisk.
        This field identifies the model of the given component.

        :param model: The model of this StoragePureDisk.
        :type: str
        """

        self._model = model

    @property
    def revision(self):
        """
        Gets the revision of this StoragePureDisk.

        :return: The revision of this StoragePureDisk.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this StoragePureDisk.

        :param revision: The revision of this StoragePureDisk.
        :type: str
        """

        self._revision = revision

    @property
    def serial(self):
        """
        Gets the serial of this StoragePureDisk.
        This field identifies the serial of the given component.

        :return: The serial of this StoragePureDisk.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """
        Sets the serial of this StoragePureDisk.
        This field identifies the serial of the given component.

        :param serial: The serial of this StoragePureDisk.
        :type: str
        """

        self._serial = serial

    @property
    def vendor(self):
        """
        Gets the vendor of this StoragePureDisk.
        This field identifies the vendor of the given component.

        :return: The vendor of this StoragePureDisk.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """
        Sets the vendor of this StoragePureDisk.
        This field identifies the vendor of the given component.

        :param vendor: The vendor of this StoragePureDisk.
        :type: str
        """

        self._vendor = vendor

    @property
    def name(self):
        """
        Gets the name of this StoragePureDisk.
        Disk name available in storage array.

        :return: The name of this StoragePureDisk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this StoragePureDisk.
        Disk name available in storage array.

        :param name: The name of this StoragePureDisk.
        :type: str
        """

        self._name = name

    @property
    def part_number(self):
        """
        Gets the part_number of this StoragePureDisk.
        Storage disk part number.

        :return: The part_number of this StoragePureDisk.
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """
        Sets the part_number of this StoragePureDisk.
        Storage disk part number.

        :param part_number: The part_number of this StoragePureDisk.
        :type: str
        """

        self._part_number = part_number

    @property
    def protocol(self):
        """
        Gets the protocol of this StoragePureDisk.
        Storage protocol used in disk for communication. Possible values are SAS, SATA and NVMe.

        :return: The protocol of this StoragePureDisk.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """
        Sets the protocol of this StoragePureDisk.
        Storage protocol used in disk for communication. Possible values are SAS, SATA and NVMe.

        :param protocol: The protocol of this StoragePureDisk.
        :type: str
        """
        allowed_values = ["Unknown", "SAS", "NVMe", "SATA"]
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def speed(self):
        """
        Gets the speed of this StoragePureDisk.
        Disk speed for read or write operation measured in rpm.

        :return: The speed of this StoragePureDisk.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """
        Sets the speed of this StoragePureDisk.
        Disk speed for read or write operation measured in rpm.

        :param speed: The speed of this StoragePureDisk.
        :type: int
        """

        self._speed = speed

    @property
    def status(self):
        """
        Gets the status of this StoragePureDisk.
        Storage disk health status.

        :return: The status of this StoragePureDisk.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this StoragePureDisk.
        Storage disk health status.

        :param status: The status of this StoragePureDisk.
        :type: str
        """
        allowed_values = ["Unknown", "Ok", "Degraded", "Critical", "Offline", "Identifying", "NotAvailable", "Updating", "Unrecognized"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def storage_utilization(self):
        """
        Gets the storage_utilization of this StoragePureDisk.
        Storage utilization information of storage disk.

        :return: The storage_utilization of this StoragePureDisk.
        :rtype: StorageCapacity
        """
        return self._storage_utilization

    @storage_utilization.setter
    def storage_utilization(self, storage_utilization):
        """
        Sets the storage_utilization of this StoragePureDisk.
        Storage utilization information of storage disk.

        :param storage_utilization: The storage_utilization of this StoragePureDisk.
        :type: StorageCapacity
        """

        self._storage_utilization = storage_utilization

    @property
    def type(self):
        """
        Gets the type of this StoragePureDisk.
        Storage disk type, it can be SSD, HDD, NVRAM.

        :return: The type of this StoragePureDisk.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this StoragePureDisk.
        Storage disk type, it can be SSD, HDD, NVRAM.

        :param type: The type of this StoragePureDisk.
        :type: str
        """
        allowed_values = ["Unknown", "SSD", "HDD", "NVRAM"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def version(self):
        """
        Gets the version of this StoragePureDisk.
        Storage disk version number.

        :return: The version of this StoragePureDisk.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this StoragePureDisk.
        Storage disk version number.

        :param version: The version of this StoragePureDisk.
        :type: str
        """

        self._version = version

    @property
    def storage_array(self):
        """
        Gets the storage_array of this StoragePureDisk.
        Storage array managed object.

        :return: The storage_array of this StoragePureDisk.
        :rtype: StorageGenericArrayRef
        """
        return self._storage_array

    @storage_array.setter
    def storage_array(self, storage_array):
        """
        Sets the storage_array of this StoragePureDisk.
        Storage array managed object.

        :param storage_array: The storage_array of this StoragePureDisk.
        :type: StorageGenericArrayRef
        """

        self._storage_array = storage_array

    @property
    def registered_device(self):
        """
        Gets the registered_device of this StoragePureDisk.
        Device registration managed object that represents this storage array connection to Intersight.

        :return: The registered_device of this StoragePureDisk.
        :rtype: AssetDeviceRegistrationRef
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """
        Sets the registered_device of this StoragePureDisk.
        Device registration managed object that represents this storage array connection to Intersight.

        :param registered_device: The registered_device of this StoragePureDisk.
        :type: AssetDeviceRegistrationRef
        """

        self._registered_device = registered_device

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StoragePureDisk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
