# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ManagementEntityAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'entity_id': 'str',
        'leadership': 'str',
        'network_element': 'NetworkElement',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'entity_id': 'EntityId',
        'leadership': 'Leadership',
        'network_element': 'NetworkElement',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 entity_id=None,
                 leadership=None,
                 network_element=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """ManagementEntityAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._entity_id = None
        self._leadership = None
        self._network_element = None
        self._registered_device = None
        self.discriminator = None

        if entity_id is not None:
            self.entity_id = entity_id
        if leadership is not None:
            self.leadership = leadership
        if network_element is not None:
            self.network_element = network_element
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def entity_id(self):
        """Gets the entity_id of this ManagementEntityAllOf.  # noqa: E501

        Identity of the Fabric Interconnect - A/B.    # noqa: E501

        :return: The entity_id of this ManagementEntityAllOf.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this ManagementEntityAllOf.

        Identity of the Fabric Interconnect - A/B.    # noqa: E501

        :param entity_id: The entity_id of this ManagementEntityAllOf.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def leadership(self):
        """Gets the leadership of this ManagementEntityAllOf.  # noqa: E501

        Role (Primary / Subordinate) of the Fabric Interconnect.     # noqa: E501

        :return: The leadership of this ManagementEntityAllOf.  # noqa: E501
        :rtype: str
        """
        return self._leadership

    @leadership.setter
    def leadership(self, leadership):
        """Sets the leadership of this ManagementEntityAllOf.

        Role (Primary / Subordinate) of the Fabric Interconnect.     # noqa: E501

        :param leadership: The leadership of this ManagementEntityAllOf.  # noqa: E501
        :type: str
        """

        self._leadership = leadership

    @property
    def network_element(self):
        """Gets the network_element of this ManagementEntityAllOf.  # noqa: E501


        :return: The network_element of this ManagementEntityAllOf.  # noqa: E501
        :rtype: NetworkElement
        """
        return self._network_element

    @network_element.setter
    def network_element(self, network_element):
        """Sets the network_element of this ManagementEntityAllOf.


        :param network_element: The network_element of this ManagementEntityAllOf.  # noqa: E501
        :type: NetworkElement
        """

        self._network_element = network_element

    @property
    def registered_device(self):
        """Gets the registered_device of this ManagementEntityAllOf.  # noqa: E501


        :return: The registered_device of this ManagementEntityAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this ManagementEntityAllOf.


        :param registered_device: The registered_device of this ManagementEntityAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManagementEntityAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ManagementEntityAllOf):
            return True

        return self.to_dict() != other.to_dict()
