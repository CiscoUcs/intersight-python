# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StorageProtectionGroup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'prefix': 'str',
        'replication_enabled': 'bool',
        'snapshot_enabled': 'bool',
        'storage_array': 'StorageGenericArray'
    }

    attribute_map = {
        'name': 'Name',
        'prefix': 'Prefix',
        'replication_enabled': 'ReplicationEnabled',
        'snapshot_enabled': 'SnapshotEnabled',
        'storage_array': 'StorageArray'
    }

    def __init__(self,
                 name=None,
                 prefix=None,
                 replication_enabled=None,
                 snapshot_enabled=None,
                 storage_array=None,
                 local_vars_configuration=None):  # noqa: E501
        """StorageProtectionGroup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._prefix = None
        self._replication_enabled = None
        self._snapshot_enabled = None
        self._storage_array = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if prefix is not None:
            self.prefix = prefix
        if replication_enabled is not None:
            self.replication_enabled = replication_enabled
        if snapshot_enabled is not None:
            self.snapshot_enabled = snapshot_enabled
        if storage_array is not None:
            self.storage_array = storage_array

    @property
    def name(self):
        """Gets the name of this StorageProtectionGroup.  # noqa: E501

        Name of the protection Group.    # noqa: E501

        :return: The name of this StorageProtectionGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageProtectionGroup.

        Name of the protection Group.    # noqa: E501

        :param name: The name of this StorageProtectionGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def prefix(self):
        """Gets the prefix of this StorageProtectionGroup.  # noqa: E501

        Prefix used for all generated snapshots from the protection group.    # noqa: E501

        :return: The prefix of this StorageProtectionGroup.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this StorageProtectionGroup.

        Prefix used for all generated snapshots from the protection group.    # noqa: E501

        :param prefix: The prefix of this StorageProtectionGroup.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def replication_enabled(self):
        """Gets the replication_enabled of this StorageProtectionGroup.  # noqa: E501

        Flag to determine if the replication is enabled. Snapshots are created on target array if the flag is set.    # noqa: E501

        :return: The replication_enabled of this StorageProtectionGroup.  # noqa: E501
        :rtype: bool
        """
        return self._replication_enabled

    @replication_enabled.setter
    def replication_enabled(self, replication_enabled):
        """Sets the replication_enabled of this StorageProtectionGroup.

        Flag to determine if the replication is enabled. Snapshots are created on target array if the flag is set.    # noqa: E501

        :param replication_enabled: The replication_enabled of this StorageProtectionGroup.  # noqa: E501
        :type: bool
        """

        self._replication_enabled = replication_enabled

    @property
    def snapshot_enabled(self):
        """Gets the snapshot_enabled of this StorageProtectionGroup.  # noqa: E501

        Flag to determine if the snapshot is enabled. Snapshots are created on local array if the flag is set.     # noqa: E501

        :return: The snapshot_enabled of this StorageProtectionGroup.  # noqa: E501
        :rtype: bool
        """
        return self._snapshot_enabled

    @snapshot_enabled.setter
    def snapshot_enabled(self, snapshot_enabled):
        """Sets the snapshot_enabled of this StorageProtectionGroup.

        Flag to determine if the snapshot is enabled. Snapshots are created on local array if the flag is set.     # noqa: E501

        :param snapshot_enabled: The snapshot_enabled of this StorageProtectionGroup.  # noqa: E501
        :type: bool
        """

        self._snapshot_enabled = snapshot_enabled

    @property
    def storage_array(self):
        """Gets the storage_array of this StorageProtectionGroup.  # noqa: E501


        :return: The storage_array of this StorageProtectionGroup.  # noqa: E501
        :rtype: StorageGenericArray
        """
        return self._storage_array

    @storage_array.setter
    def storage_array(self, storage_array):
        """Sets the storage_array of this StorageProtectionGroup.


        :param storage_array: The storage_array of this StorageProtectionGroup.  # noqa: E501
        :type: StorageGenericArray
        """

        self._storage_array = storage_array

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageProtectionGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageProtectionGroup):
            return True

        return self.to_dict() != other.to_dict()
