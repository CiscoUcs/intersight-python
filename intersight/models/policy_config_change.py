# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-961
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PolicyConfigChange(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'changes': 'list[str]',
        'disruptions': 'list[str]'
    }

    attribute_map = {
        'changes': 'Changes',
        'disruptions': 'Disruptions'
    }

    def __init__(self, changes=None, disruptions=None):
        """
        PolicyConfigChange - a model defined in Swagger
        """

        self._changes = None
        self._disruptions = None

        if changes is not None:
          self.changes = changes
        if disruptions is not None:
          self.disruptions = disruptions

    @property
    def changes(self):
        """
        Gets the changes of this PolicyConfigChange.
        Configuration changes at summary level.  

        :return: The changes of this PolicyConfigChange.
        :rtype: list[str]
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """
        Sets the changes of this PolicyConfigChange.
        Configuration changes at summary level.  

        :param changes: The changes of this PolicyConfigChange.
        :type: list[str]
        """

        self._changes = changes

    @property
    def disruptions(self):
        """
        Gets the disruptions of this PolicyConfigChange.
        Configuration disruptions.   

        :return: The disruptions of this PolicyConfigChange.
        :rtype: list[str]
        """
        return self._disruptions

    @disruptions.setter
    def disruptions(self, disruptions):
        """
        Sets the disruptions of this PolicyConfigChange.
        Configuration disruptions.   

        :param disruptions: The disruptions of this PolicyConfigChange.
        :type: list[str]
        """

        self._disruptions = disruptions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PolicyConfigChange):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
