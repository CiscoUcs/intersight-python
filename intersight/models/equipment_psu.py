# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class EquipmentPsu(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'oper_state': 'str',
        'part_number': 'str',
        'pid': 'str',
        'presence': 'str',
        'psu_fw_version': 'str',
        'psu_id': 'int',
        'psu_input_src': 'str',
        'psu_type': 'str',
        'psu_wattage': 'str',
        'sku': 'str',
        'vid': 'str',
        'voltage': 'str',
        'compute_rack_unit': 'ComputeRackUnit',
        'equipment_chassis': 'EquipmentChassis',
        'equipment_rack_enclosure': 'EquipmentRackEnclosure',
        'network_element': 'NetworkElement',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'description': 'Description',
        'oper_state': 'OperState',
        'part_number': 'PartNumber',
        'pid': 'Pid',
        'presence': 'Presence',
        'psu_fw_version': 'PsuFwVersion',
        'psu_id': 'PsuId',
        'psu_input_src': 'PsuInputSrc',
        'psu_type': 'PsuType',
        'psu_wattage': 'PsuWattage',
        'sku': 'Sku',
        'vid': 'Vid',
        'voltage': 'Voltage',
        'compute_rack_unit': 'ComputeRackUnit',
        'equipment_chassis': 'EquipmentChassis',
        'equipment_rack_enclosure': 'EquipmentRackEnclosure',
        'network_element': 'NetworkElement',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 description=None,
                 oper_state=None,
                 part_number=None,
                 pid=None,
                 presence=None,
                 psu_fw_version=None,
                 psu_id=None,
                 psu_input_src=None,
                 psu_type=None,
                 psu_wattage=None,
                 sku=None,
                 vid=None,
                 voltage=None,
                 compute_rack_unit=None,
                 equipment_chassis=None,
                 equipment_rack_enclosure=None,
                 network_element=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """EquipmentPsu - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._oper_state = None
        self._part_number = None
        self._pid = None
        self._presence = None
        self._psu_fw_version = None
        self._psu_id = None
        self._psu_input_src = None
        self._psu_type = None
        self._psu_wattage = None
        self._sku = None
        self._vid = None
        self._voltage = None
        self._compute_rack_unit = None
        self._equipment_chassis = None
        self._equipment_rack_enclosure = None
        self._network_element = None
        self._registered_device = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if oper_state is not None:
            self.oper_state = oper_state
        if part_number is not None:
            self.part_number = part_number
        if pid is not None:
            self.pid = pid
        if presence is not None:
            self.presence = presence
        if psu_fw_version is not None:
            self.psu_fw_version = psu_fw_version
        if psu_id is not None:
            self.psu_id = psu_id
        if psu_input_src is not None:
            self.psu_input_src = psu_input_src
        if psu_type is not None:
            self.psu_type = psu_type
        if psu_wattage is not None:
            self.psu_wattage = psu_wattage
        if sku is not None:
            self.sku = sku
        if vid is not None:
            self.vid = vid
        if voltage is not None:
            self.voltage = voltage
        if compute_rack_unit is not None:
            self.compute_rack_unit = compute_rack_unit
        if equipment_chassis is not None:
            self.equipment_chassis = equipment_chassis
        if equipment_rack_enclosure is not None:
            self.equipment_rack_enclosure = equipment_rack_enclosure
        if network_element is not None:
            self.network_element = network_element
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def description(self):
        """Gets the description of this EquipmentPsu.  # noqa: E501

        This field is to provide description for the power supply unit.    # noqa: E501

        :return: The description of this EquipmentPsu.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EquipmentPsu.

        This field is to provide description for the power supply unit.    # noqa: E501

        :param description: The description of this EquipmentPsu.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def oper_state(self):
        """Gets the oper_state of this EquipmentPsu.  # noqa: E501


        :return: The oper_state of this EquipmentPsu.  # noqa: E501
        :rtype: str
        """
        return self._oper_state

    @oper_state.setter
    def oper_state(self, oper_state):
        """Sets the oper_state of this EquipmentPsu.


        :param oper_state: The oper_state of this EquipmentPsu.  # noqa: E501
        :type: str
        """

        self._oper_state = oper_state

    @property
    def part_number(self):
        """Gets the part_number of this EquipmentPsu.  # noqa: E501

        This field identifies the Part Number for this Power Supply Unit.    # noqa: E501

        :return: The part_number of this EquipmentPsu.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this EquipmentPsu.

        This field identifies the Part Number for this Power Supply Unit.    # noqa: E501

        :param part_number: The part_number of this EquipmentPsu.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def pid(self):
        """Gets the pid of this EquipmentPsu.  # noqa: E501

        This field identifies the Product ID for the Power Supply.    # noqa: E501

        :return: The pid of this EquipmentPsu.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this EquipmentPsu.

        This field identifies the Product ID for the Power Supply.    # noqa: E501

        :param pid: The pid of this EquipmentPsu.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def presence(self):
        """Gets the presence of this EquipmentPsu.  # noqa: E501

        This field identifies the presence state of the psu.    # noqa: E501

        :return: The presence of this EquipmentPsu.  # noqa: E501
        :rtype: str
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """Sets the presence of this EquipmentPsu.

        This field identifies the presence state of the psu.    # noqa: E501

        :param presence: The presence of this EquipmentPsu.  # noqa: E501
        :type: str
        """

        self._presence = presence

    @property
    def psu_fw_version(self):
        """Gets the psu_fw_version of this EquipmentPsu.  # noqa: E501

        This field identifies the Firmware Version of the Power Supply.    # noqa: E501

        :return: The psu_fw_version of this EquipmentPsu.  # noqa: E501
        :rtype: str
        """
        return self._psu_fw_version

    @psu_fw_version.setter
    def psu_fw_version(self, psu_fw_version):
        """Sets the psu_fw_version of this EquipmentPsu.

        This field identifies the Firmware Version of the Power Supply.    # noqa: E501

        :param psu_fw_version: The psu_fw_version of this EquipmentPsu.  # noqa: E501
        :type: str
        """

        self._psu_fw_version = psu_fw_version

    @property
    def psu_id(self):
        """Gets the psu_id of this EquipmentPsu.  # noqa: E501


        :return: The psu_id of this EquipmentPsu.  # noqa: E501
        :rtype: int
        """
        return self._psu_id

    @psu_id.setter
    def psu_id(self, psu_id):
        """Sets the psu_id of this EquipmentPsu.


        :param psu_id: The psu_id of this EquipmentPsu.  # noqa: E501
        :type: int
        """

        self._psu_id = psu_id

    @property
    def psu_input_src(self):
        """Gets the psu_input_src of this EquipmentPsu.  # noqa: E501

        This field identifies the input source for the Power Supply.    # noqa: E501

        :return: The psu_input_src of this EquipmentPsu.  # noqa: E501
        :rtype: str
        """
        return self._psu_input_src

    @psu_input_src.setter
    def psu_input_src(self, psu_input_src):
        """Sets the psu_input_src of this EquipmentPsu.

        This field identifies the input source for the Power Supply.    # noqa: E501

        :param psu_input_src: The psu_input_src of this EquipmentPsu.  # noqa: E501
        :type: str
        """

        self._psu_input_src = psu_input_src

    @property
    def psu_type(self):
        """Gets the psu_type of this EquipmentPsu.  # noqa: E501

        This field identifies the type of the Power Supply.    # noqa: E501

        :return: The psu_type of this EquipmentPsu.  # noqa: E501
        :rtype: str
        """
        return self._psu_type

    @psu_type.setter
    def psu_type(self, psu_type):
        """Sets the psu_type of this EquipmentPsu.

        This field identifies the type of the Power Supply.    # noqa: E501

        :param psu_type: The psu_type of this EquipmentPsu.  # noqa: E501
        :type: str
        """

        self._psu_type = psu_type

    @property
    def psu_wattage(self):
        """Gets the psu_wattage of this EquipmentPsu.  # noqa: E501

        This field identifies the Wattage of the Power Supply.    # noqa: E501

        :return: The psu_wattage of this EquipmentPsu.  # noqa: E501
        :rtype: str
        """
        return self._psu_wattage

    @psu_wattage.setter
    def psu_wattage(self, psu_wattage):
        """Sets the psu_wattage of this EquipmentPsu.

        This field identifies the Wattage of the Power Supply.    # noqa: E501

        :param psu_wattage: The psu_wattage of this EquipmentPsu.  # noqa: E501
        :type: str
        """

        self._psu_wattage = psu_wattage

    @property
    def sku(self):
        """Gets the sku of this EquipmentPsu.  # noqa: E501

        This field identifies the Stockkeeping Unit for this Power Supply.    # noqa: E501

        :return: The sku of this EquipmentPsu.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this EquipmentPsu.

        This field identifies the Stockkeeping Unit for this Power Supply.    # noqa: E501

        :param sku: The sku of this EquipmentPsu.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def vid(self):
        """Gets the vid of this EquipmentPsu.  # noqa: E501

        This field identifies the Vendor ID for this Power Supply Unit.    # noqa: E501

        :return: The vid of this EquipmentPsu.  # noqa: E501
        :rtype: str
        """
        return self._vid

    @vid.setter
    def vid(self, vid):
        """Sets the vid of this EquipmentPsu.

        This field identifies the Vendor ID for this Power Supply Unit.    # noqa: E501

        :param vid: The vid of this EquipmentPsu.  # noqa: E501
        :type: str
        """

        self._vid = vid

    @property
    def voltage(self):
        """Gets the voltage of this EquipmentPsu.  # noqa: E501

        This field is used to indicate the Voltage for this Power Supply.     # noqa: E501

        :return: The voltage of this EquipmentPsu.  # noqa: E501
        :rtype: str
        """
        return self._voltage

    @voltage.setter
    def voltage(self, voltage):
        """Sets the voltage of this EquipmentPsu.

        This field is used to indicate the Voltage for this Power Supply.     # noqa: E501

        :param voltage: The voltage of this EquipmentPsu.  # noqa: E501
        :type: str
        """

        self._voltage = voltage

    @property
    def compute_rack_unit(self):
        """Gets the compute_rack_unit of this EquipmentPsu.  # noqa: E501


        :return: The compute_rack_unit of this EquipmentPsu.  # noqa: E501
        :rtype: ComputeRackUnit
        """
        return self._compute_rack_unit

    @compute_rack_unit.setter
    def compute_rack_unit(self, compute_rack_unit):
        """Sets the compute_rack_unit of this EquipmentPsu.


        :param compute_rack_unit: The compute_rack_unit of this EquipmentPsu.  # noqa: E501
        :type: ComputeRackUnit
        """

        self._compute_rack_unit = compute_rack_unit

    @property
    def equipment_chassis(self):
        """Gets the equipment_chassis of this EquipmentPsu.  # noqa: E501


        :return: The equipment_chassis of this EquipmentPsu.  # noqa: E501
        :rtype: EquipmentChassis
        """
        return self._equipment_chassis

    @equipment_chassis.setter
    def equipment_chassis(self, equipment_chassis):
        """Sets the equipment_chassis of this EquipmentPsu.


        :param equipment_chassis: The equipment_chassis of this EquipmentPsu.  # noqa: E501
        :type: EquipmentChassis
        """

        self._equipment_chassis = equipment_chassis

    @property
    def equipment_rack_enclosure(self):
        """Gets the equipment_rack_enclosure of this EquipmentPsu.  # noqa: E501


        :return: The equipment_rack_enclosure of this EquipmentPsu.  # noqa: E501
        :rtype: EquipmentRackEnclosure
        """
        return self._equipment_rack_enclosure

    @equipment_rack_enclosure.setter
    def equipment_rack_enclosure(self, equipment_rack_enclosure):
        """Sets the equipment_rack_enclosure of this EquipmentPsu.


        :param equipment_rack_enclosure: The equipment_rack_enclosure of this EquipmentPsu.  # noqa: E501
        :type: EquipmentRackEnclosure
        """

        self._equipment_rack_enclosure = equipment_rack_enclosure

    @property
    def network_element(self):
        """Gets the network_element of this EquipmentPsu.  # noqa: E501


        :return: The network_element of this EquipmentPsu.  # noqa: E501
        :rtype: NetworkElement
        """
        return self._network_element

    @network_element.setter
    def network_element(self, network_element):
        """Sets the network_element of this EquipmentPsu.


        :param network_element: The network_element of this EquipmentPsu.  # noqa: E501
        :type: NetworkElement
        """

        self._network_element = network_element

    @property
    def registered_device(self):
        """Gets the registered_device of this EquipmentPsu.  # noqa: E501


        :return: The registered_device of this EquipmentPsu.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this EquipmentPsu.


        :param registered_device: The registered_device of this EquipmentPsu.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EquipmentPsu):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EquipmentPsu):
            return True

        return self.to_dict() != other.to_dict()
