# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class IamUserGroupAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'idp': 'IamIdp',
        'idpreference': 'IamIdpReference',
        'permissions': 'list[IamPermission]',
        'qualifier': 'IamQualifier',
        'users': 'list[IamUser]'
    }

    attribute_map = {
        'name': 'Name',
        'idp': 'Idp',
        'idpreference': 'Idpreference',
        'permissions': 'Permissions',
        'qualifier': 'Qualifier',
        'users': 'Users'
    }

    def __init__(self,
                 name=None,
                 idp=None,
                 idpreference=None,
                 permissions=None,
                 qualifier=None,
                 users=None,
                 local_vars_configuration=None):  # noqa: E501
        """IamUserGroupAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._idp = None
        self._idpreference = None
        self._permissions = None
        self._qualifier = None
        self._users = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if idp is not None:
            self.idp = idp
        if idpreference is not None:
            self.idpreference = idpreference
        if permissions is not None:
            self.permissions = permissions
        if qualifier is not None:
            self.qualifier = qualifier
        if users is not None:
            self.users = users

    @property
    def name(self):
        """Gets the name of this IamUserGroupAllOf.  # noqa: E501

        The name of the user group which the dynamic user belongs to.     # noqa: E501

        :return: The name of this IamUserGroupAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IamUserGroupAllOf.

        The name of the user group which the dynamic user belongs to.     # noqa: E501

        :param name: The name of this IamUserGroupAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def idp(self):
        """Gets the idp of this IamUserGroupAllOf.  # noqa: E501


        :return: The idp of this IamUserGroupAllOf.  # noqa: E501
        :rtype: IamIdp
        """
        return self._idp

    @idp.setter
    def idp(self, idp):
        """Sets the idp of this IamUserGroupAllOf.


        :param idp: The idp of this IamUserGroupAllOf.  # noqa: E501
        :type: IamIdp
        """

        self._idp = idp

    @property
    def idpreference(self):
        """Gets the idpreference of this IamUserGroupAllOf.  # noqa: E501


        :return: The idpreference of this IamUserGroupAllOf.  # noqa: E501
        :rtype: IamIdpReference
        """
        return self._idpreference

    @idpreference.setter
    def idpreference(self, idpreference):
        """Sets the idpreference of this IamUserGroupAllOf.


        :param idpreference: The idpreference of this IamUserGroupAllOf.  # noqa: E501
        :type: IamIdpReference
        """

        self._idpreference = idpreference

    @property
    def permissions(self):
        """Gets the permissions of this IamUserGroupAllOf.  # noqa: E501

        A reference to a iamPermission resource. When the $expand query parameter is specified, the referenced resource is returned inline. Permissions assigned to the user group. Permission provides a way to assign roles to a user or user group to perform operations on object hierarchy.   # noqa: E501

        :return: The permissions of this IamUserGroupAllOf.  # noqa: E501
        :rtype: list[IamPermission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this IamUserGroupAllOf.

        A reference to a iamPermission resource. When the $expand query parameter is specified, the referenced resource is returned inline. Permissions assigned to the user group. Permission provides a way to assign roles to a user or user group to perform operations on object hierarchy.   # noqa: E501

        :param permissions: The permissions of this IamUserGroupAllOf.  # noqa: E501
        :type: list[IamPermission]
        """

        self._permissions = permissions

    @property
    def qualifier(self):
        """Gets the qualifier of this IamUserGroupAllOf.  # noqa: E501


        :return: The qualifier of this IamUserGroupAllOf.  # noqa: E501
        :rtype: IamQualifier
        """
        return self._qualifier

    @qualifier.setter
    def qualifier(self, qualifier):
        """Sets the qualifier of this IamUserGroupAllOf.


        :param qualifier: The qualifier of this IamUserGroupAllOf.  # noqa: E501
        :type: IamQualifier
        """

        self._qualifier = qualifier

    @property
    def users(self):
        """Gets the users of this IamUserGroupAllOf.  # noqa: E501

        A reference to a iamUser resource. When the $expand query parameter is specified, the referenced resource is returned inline. Users logged in using this user group.   # noqa: E501

        :return: The users of this IamUserGroupAllOf.  # noqa: E501
        :rtype: list[IamUser]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this IamUserGroupAllOf.

        A reference to a iamUser resource. When the $expand query parameter is specified, the referenced resource is returned inline. Users logged in using this user group.   # noqa: E501

        :param users: The users of this IamUserGroupAllOf.  # noqa: E501
        :type: list[IamUser]
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IamUserGroupAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IamUserGroupAllOf):
            return True

        return self.to_dict() != other.to_dict()
