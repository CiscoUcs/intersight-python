# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class AssetSudiInfoAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pid': 'str',
        'serial_number': 'str',
        'signature': 'str',
        'status': 'str',
        'sudi_certificate': 'X509Certificate'
    }

    attribute_map = {
        'pid': 'Pid',
        'serial_number': 'SerialNumber',
        'signature': 'Signature',
        'status': 'Status',
        'sudi_certificate': 'SudiCertificate'
    }

    def __init__(self,
                 pid=None,
                 serial_number=None,
                 signature=None,
                 status='DeviceStatusUnknown',
                 sudi_certificate=None,
                 local_vars_configuration=None):  # noqa: E501
        """AssetSudiInfoAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pid = None
        self._serial_number = None
        self._signature = None
        self._status = None
        self._sudi_certificate = None
        self.discriminator = None

        if pid is not None:
            self.pid = pid
        if serial_number is not None:
            self.serial_number = serial_number
        if signature is not None:
            self.signature = signature
        if status is not None:
            self.status = status
        if sudi_certificate is not None:
            self.sudi_certificate = sudi_certificate

    @property
    def pid(self):
        """Gets the pid of this AssetSudiInfoAllOf.  # noqa: E501

        The device model (PID) extracted from the X.509 SUDI Leaf Certificate.    # noqa: E501

        :return: The pid of this AssetSudiInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this AssetSudiInfoAllOf.

        The device model (PID) extracted from the X.509 SUDI Leaf Certificate.    # noqa: E501

        :param pid: The pid of this AssetSudiInfoAllOf.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def serial_number(self):
        """Gets the serial_number of this AssetSudiInfoAllOf.  # noqa: E501

        The device SerialNumber extracted from the X.509 SUDI Leaf Certiicate.    # noqa: E501

        :return: The serial_number of this AssetSudiInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this AssetSudiInfoAllOf.

        The device SerialNumber extracted from the X.509 SUDI Leaf Certiicate.    # noqa: E501

        :param serial_number: The serial_number of this AssetSudiInfoAllOf.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def signature(self):
        """Gets the signature of this AssetSudiInfoAllOf.  # noqa: E501

        The signature is obtained by taking the base64 encoding of the Serial Number + PID + Status, taking the SHA256 hash and then signing with the SUDI X.509 Leaf Certifiate.    # noqa: E501

        :return: The signature of this AssetSudiInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this AssetSudiInfoAllOf.

        The signature is obtained by taking the base64 encoding of the Serial Number + PID + Status, taking the SHA256 hash and then signing with the SUDI X.509 Leaf Certifiate.    # noqa: E501

        :param signature: The signature of this AssetSudiInfoAllOf.  # noqa: E501
        :type: str
        """

        self._signature = signature

    @property
    def status(self):
        """Gets the status of this AssetSudiInfoAllOf.  # noqa: E501

        The validation status of the device.    # noqa: E501

        :return: The status of this AssetSudiInfoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssetSudiInfoAllOf.

        The validation status of the device.    # noqa: E501

        :param status: The status of this AssetSudiInfoAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "DeviceStatusUnknown", "Verified", "CertificateValidationFailed",
            "UnsupportedFirmware", "UnsupportedHardware", "DeviceNotResponding"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values))

        self._status = status

    @property
    def sudi_certificate(self):
        """Gets the sudi_certificate of this AssetSudiInfoAllOf.  # noqa: E501


        :return: The sudi_certificate of this AssetSudiInfoAllOf.  # noqa: E501
        :rtype: X509Certificate
        """
        return self._sudi_certificate

    @sudi_certificate.setter
    def sudi_certificate(self, sudi_certificate):
        """Sets the sudi_certificate of this AssetSudiInfoAllOf.


        :param sudi_certificate: The sudi_certificate of this AssetSudiInfoAllOf.  # noqa: E501
        :type: X509Certificate
        """

        self._sudi_certificate = sudi_certificate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetSudiInfoAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetSudiInfoAllOf):
            return True

        return self.to_dict() != other.to_dict()
