# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1415
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ComputePhysicalSummary(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoOptionalTag]',
        'version_context': 'MoOptionalVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'admin_power_state': 'str',
        'asset_tag': 'str',
        'available_memory': 'int',
        'chassis_id': 'str',
        'cpu_capacity': 'float',
        'device_mo_id': 'str',
        'dn': 'str',
        'fault_summary': 'int',
        'firmware': 'str',
        'ipv4_address': 'str',
        'kvm_ip_addresses': 'list[ComputeOptionalIpAddress]',
        'memory_speed': 'str',
        'mgmt_ip_address': 'str',
        'model': 'str',
        'name': 'str',
        'num_adaptors': 'int',
        'num_cpu_cores': 'int',
        'num_cpu_cores_enabled': 'int',
        'num_cpus': 'int',
        'num_eth_host_interfaces': 'int',
        'num_fc_host_interfaces': 'int',
        'num_threads': 'int',
        'oper_power_state': 'str',
        'oper_state': 'str',
        'operability': 'str',
        'platform_type': 'str',
        'presence': 'str',
        'revision': 'str',
        'rn': 'str',
        'scaled_mode': 'str',
        'serial': 'str',
        'server_id': 'int',
        'service_profile': 'str',
        'slot_id': 'int',
        'source_object_type': 'str',
        'total_memory': 'int',
        'user_label': 'str',
        'uuid': 'str',
        'vendor': 'str',
        'registered_device': 'AssetDeviceRegistrationRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'admin_power_state': 'AdminPowerState',
        'asset_tag': 'AssetTag',
        'available_memory': 'AvailableMemory',
        'chassis_id': 'ChassisId',
        'cpu_capacity': 'CpuCapacity',
        'device_mo_id': 'DeviceMoId',
        'dn': 'Dn',
        'fault_summary': 'FaultSummary',
        'firmware': 'Firmware',
        'ipv4_address': 'Ipv4Address',
        'kvm_ip_addresses': 'KvmIpAddresses',
        'memory_speed': 'MemorySpeed',
        'mgmt_ip_address': 'MgmtIpAddress',
        'model': 'Model',
        'name': 'Name',
        'num_adaptors': 'NumAdaptors',
        'num_cpu_cores': 'NumCpuCores',
        'num_cpu_cores_enabled': 'NumCpuCoresEnabled',
        'num_cpus': 'NumCpus',
        'num_eth_host_interfaces': 'NumEthHostInterfaces',
        'num_fc_host_interfaces': 'NumFcHostInterfaces',
        'num_threads': 'NumThreads',
        'oper_power_state': 'OperPowerState',
        'oper_state': 'OperState',
        'operability': 'Operability',
        'platform_type': 'PlatformType',
        'presence': 'Presence',
        'revision': 'Revision',
        'rn': 'Rn',
        'scaled_mode': 'ScaledMode',
        'serial': 'Serial',
        'server_id': 'ServerId',
        'service_profile': 'ServiceProfile',
        'slot_id': 'SlotId',
        'source_object_type': 'SourceObjectType',
        'total_memory': 'TotalMemory',
        'user_label': 'UserLabel',
        'uuid': 'Uuid',
        'vendor': 'Vendor',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, admin_power_state=None, asset_tag=None, available_memory=None, chassis_id=None, cpu_capacity=None, device_mo_id=None, dn=None, fault_summary=None, firmware=None, ipv4_address=None, kvm_ip_addresses=None, memory_speed=None, mgmt_ip_address=None, model=None, name=None, num_adaptors=None, num_cpu_cores=None, num_cpu_cores_enabled=None, num_cpus=None, num_eth_host_interfaces=None, num_fc_host_interfaces=None, num_threads=None, oper_power_state=None, oper_state=None, operability=None, platform_type=None, presence=None, revision=None, rn=None, scaled_mode=None, serial=None, server_id=None, service_profile=None, slot_id=None, source_object_type=None, total_memory=None, user_label=None, uuid=None, vendor=None, registered_device=None):
        """
        ComputePhysicalSummary - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._admin_power_state = None
        self._asset_tag = None
        self._available_memory = None
        self._chassis_id = None
        self._cpu_capacity = None
        self._device_mo_id = None
        self._dn = None
        self._fault_summary = None
        self._firmware = None
        self._ipv4_address = None
        self._kvm_ip_addresses = None
        self._memory_speed = None
        self._mgmt_ip_address = None
        self._model = None
        self._name = None
        self._num_adaptors = None
        self._num_cpu_cores = None
        self._num_cpu_cores_enabled = None
        self._num_cpus = None
        self._num_eth_host_interfaces = None
        self._num_fc_host_interfaces = None
        self._num_threads = None
        self._oper_power_state = None
        self._oper_state = None
        self._operability = None
        self._platform_type = None
        self._presence = None
        self._revision = None
        self._rn = None
        self._scaled_mode = None
        self._serial = None
        self._server_id = None
        self._service_profile = None
        self._slot_id = None
        self._source_object_type = None
        self._total_memory = None
        self._user_label = None
        self._uuid = None
        self._vendor = None
        self._registered_device = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if admin_power_state is not None:
          self.admin_power_state = admin_power_state
        if asset_tag is not None:
          self.asset_tag = asset_tag
        if available_memory is not None:
          self.available_memory = available_memory
        if chassis_id is not None:
          self.chassis_id = chassis_id
        if cpu_capacity is not None:
          self.cpu_capacity = cpu_capacity
        if device_mo_id is not None:
          self.device_mo_id = device_mo_id
        if dn is not None:
          self.dn = dn
        if fault_summary is not None:
          self.fault_summary = fault_summary
        if firmware is not None:
          self.firmware = firmware
        if ipv4_address is not None:
          self.ipv4_address = ipv4_address
        if kvm_ip_addresses is not None:
          self.kvm_ip_addresses = kvm_ip_addresses
        if memory_speed is not None:
          self.memory_speed = memory_speed
        if mgmt_ip_address is not None:
          self.mgmt_ip_address = mgmt_ip_address
        if model is not None:
          self.model = model
        if name is not None:
          self.name = name
        if num_adaptors is not None:
          self.num_adaptors = num_adaptors
        if num_cpu_cores is not None:
          self.num_cpu_cores = num_cpu_cores
        if num_cpu_cores_enabled is not None:
          self.num_cpu_cores_enabled = num_cpu_cores_enabled
        if num_cpus is not None:
          self.num_cpus = num_cpus
        if num_eth_host_interfaces is not None:
          self.num_eth_host_interfaces = num_eth_host_interfaces
        if num_fc_host_interfaces is not None:
          self.num_fc_host_interfaces = num_fc_host_interfaces
        if num_threads is not None:
          self.num_threads = num_threads
        if oper_power_state is not None:
          self.oper_power_state = oper_power_state
        if oper_state is not None:
          self.oper_state = oper_state
        if operability is not None:
          self.operability = operability
        if platform_type is not None:
          self.platform_type = platform_type
        if presence is not None:
          self.presence = presence
        if revision is not None:
          self.revision = revision
        if rn is not None:
          self.rn = rn
        if scaled_mode is not None:
          self.scaled_mode = scaled_mode
        if serial is not None:
          self.serial = serial
        if server_id is not None:
          self.server_id = server_id
        if service_profile is not None:
          self.service_profile = service_profile
        if slot_id is not None:
          self.slot_id = slot_id
        if source_object_type is not None:
          self.source_object_type = source_object_type
        if total_memory is not None:
          self.total_memory = total_memory
        if user_label is not None:
          self.user_label = user_label
        if uuid is not None:
          self.uuid = uuid
        if vendor is not None:
          self.vendor = vendor
        if registered_device is not None:
          self.registered_device = registered_device

    @property
    def account_moid(self):
        """
        Gets the account_moid of this ComputePhysicalSummary.
        The Account ID for this managed object.  

        :return: The account_moid of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this ComputePhysicalSummary.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this ComputePhysicalSummary.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this ComputePhysicalSummary.
        The time when this managed object was created.  

        :return: The create_time of this ComputePhysicalSummary.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this ComputePhysicalSummary.
        The time when this managed object was created.  

        :param create_time: The create_time of this ComputePhysicalSummary.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this ComputePhysicalSummary.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this ComputePhysicalSummary.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this ComputePhysicalSummary.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this ComputePhysicalSummary.
        The time when this managed object was last modified.  

        :return: The mod_time of this ComputePhysicalSummary.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this ComputePhysicalSummary.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this ComputePhysicalSummary.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this ComputePhysicalSummary.
        The unique identifier of this Managed Object instance.   

        :return: The moid of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this ComputePhysicalSummary.
        The unique identifier of this Managed Object instance.   

        :param moid: The moid of this ComputePhysicalSummary.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this ComputePhysicalSummary.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :return: The object_type of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this ComputePhysicalSummary.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :param object_type: The object_type of this ComputePhysicalSummary.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this ComputePhysicalSummary.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this ComputePhysicalSummary.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this ComputePhysicalSummary.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this ComputePhysicalSummary.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this ComputePhysicalSummary.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this ComputePhysicalSummary.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this ComputePhysicalSummary.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this ComputePhysicalSummary.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this ComputePhysicalSummary.
        :rtype: list[MoOptionalTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this ComputePhysicalSummary.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this ComputePhysicalSummary.
        :type: list[MoOptionalTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this ComputePhysicalSummary.
        The versioning info for this managed object.   

        :return: The version_context of this ComputePhysicalSummary.
        :rtype: MoOptionalVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this ComputePhysicalSummary.
        The versioning info for this managed object.   

        :param version_context: The version_context of this ComputePhysicalSummary.
        :type: MoOptionalVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this ComputePhysicalSummary.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this ComputePhysicalSummary.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this ComputePhysicalSummary.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this ComputePhysicalSummary.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this ComputePhysicalSummary.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this ComputePhysicalSummary.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this ComputePhysicalSummary.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this ComputePhysicalSummary.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this ComputePhysicalSummary.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :return: The permission_resources of this ComputePhysicalSummary.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this ComputePhysicalSummary.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :param permission_resources: The permission_resources of this ComputePhysicalSummary.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def admin_power_state(self):
        """
        Gets the admin_power_state of this ComputePhysicalSummary.

        :return: The admin_power_state of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._admin_power_state

    @admin_power_state.setter
    def admin_power_state(self, admin_power_state):
        """
        Sets the admin_power_state of this ComputePhysicalSummary.

        :param admin_power_state: The admin_power_state of this ComputePhysicalSummary.
        :type: str
        """

        self._admin_power_state = admin_power_state

    @property
    def asset_tag(self):
        """
        Gets the asset_tag of this ComputePhysicalSummary.

        :return: The asset_tag of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._asset_tag

    @asset_tag.setter
    def asset_tag(self, asset_tag):
        """
        Sets the asset_tag of this ComputePhysicalSummary.

        :param asset_tag: The asset_tag of this ComputePhysicalSummary.
        :type: str
        """

        self._asset_tag = asset_tag

    @property
    def available_memory(self):
        """
        Gets the available_memory of this ComputePhysicalSummary.

        :return: The available_memory of this ComputePhysicalSummary.
        :rtype: int
        """
        return self._available_memory

    @available_memory.setter
    def available_memory(self, available_memory):
        """
        Sets the available_memory of this ComputePhysicalSummary.

        :param available_memory: The available_memory of this ComputePhysicalSummary.
        :type: int
        """

        self._available_memory = available_memory

    @property
    def chassis_id(self):
        """
        Gets the chassis_id of this ComputePhysicalSummary.
        The id of the chassis that the blade is located in.  

        :return: The chassis_id of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._chassis_id

    @chassis_id.setter
    def chassis_id(self, chassis_id):
        """
        Sets the chassis_id of this ComputePhysicalSummary.
        The id of the chassis that the blade is located in.  

        :param chassis_id: The chassis_id of this ComputePhysicalSummary.
        :type: str
        """

        self._chassis_id = chassis_id

    @property
    def cpu_capacity(self):
        """
        Gets the cpu_capacity of this ComputePhysicalSummary.
        CPU Capacity = Number of CPU Sockets x Enabled Cores x Speed (GHz).  

        :return: The cpu_capacity of this ComputePhysicalSummary.
        :rtype: float
        """
        return self._cpu_capacity

    @cpu_capacity.setter
    def cpu_capacity(self, cpu_capacity):
        """
        Sets the cpu_capacity of this ComputePhysicalSummary.
        CPU Capacity = Number of CPU Sockets x Enabled Cores x Speed (GHz).  

        :param cpu_capacity: The cpu_capacity of this ComputePhysicalSummary.
        :type: float
        """

        self._cpu_capacity = cpu_capacity

    @property
    def device_mo_id(self):
        """
        Gets the device_mo_id of this ComputePhysicalSummary.

        :return: The device_mo_id of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._device_mo_id

    @device_mo_id.setter
    def device_mo_id(self, device_mo_id):
        """
        Sets the device_mo_id of this ComputePhysicalSummary.

        :param device_mo_id: The device_mo_id of this ComputePhysicalSummary.
        :type: str
        """

        self._device_mo_id = device_mo_id

    @property
    def dn(self):
        """
        Gets the dn of this ComputePhysicalSummary.
        The Distinguished Name unambiguously identifies an object in the system.  

        :return: The dn of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """
        Sets the dn of this ComputePhysicalSummary.
        The Distinguished Name unambiguously identifies an object in the system.  

        :param dn: The dn of this ComputePhysicalSummary.
        :type: str
        """

        self._dn = dn

    @property
    def fault_summary(self):
        """
        Gets the fault_summary of this ComputePhysicalSummary.

        :return: The fault_summary of this ComputePhysicalSummary.
        :rtype: int
        """
        return self._fault_summary

    @fault_summary.setter
    def fault_summary(self, fault_summary):
        """
        Sets the fault_summary of this ComputePhysicalSummary.

        :param fault_summary: The fault_summary of this ComputePhysicalSummary.
        :type: int
        """

        self._fault_summary = fault_summary

    @property
    def firmware(self):
        """
        Gets the firmware of this ComputePhysicalSummary.
        The firmware version of the Cisco Integrated Management Controller (CIMC) for this server.  

        :return: The firmware of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._firmware

    @firmware.setter
    def firmware(self, firmware):
        """
        Sets the firmware of this ComputePhysicalSummary.
        The firmware version of the Cisco Integrated Management Controller (CIMC) for this server.  

        :param firmware: The firmware of this ComputePhysicalSummary.
        :type: str
        """

        self._firmware = firmware

    @property
    def ipv4_address(self):
        """
        Gets the ipv4_address of this ComputePhysicalSummary.
        The IPv4 address configured on the management interface of the Integrated Management Controller.  

        :return: The ipv4_address of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._ipv4_address

    @ipv4_address.setter
    def ipv4_address(self, ipv4_address):
        """
        Sets the ipv4_address of this ComputePhysicalSummary.
        The IPv4 address configured on the management interface of the Integrated Management Controller.  

        :param ipv4_address: The ipv4_address of this ComputePhysicalSummary.
        :type: str
        """

        self._ipv4_address = ipv4_address

    @property
    def kvm_ip_addresses(self):
        """
        Gets the kvm_ip_addresses of this ComputePhysicalSummary.
        KVM address of the device.  

        :return: The kvm_ip_addresses of this ComputePhysicalSummary.
        :rtype: list[ComputeOptionalIpAddress]
        """
        return self._kvm_ip_addresses

    @kvm_ip_addresses.setter
    def kvm_ip_addresses(self, kvm_ip_addresses):
        """
        Sets the kvm_ip_addresses of this ComputePhysicalSummary.
        KVM address of the device.  

        :param kvm_ip_addresses: The kvm_ip_addresses of this ComputePhysicalSummary.
        :type: list[ComputeOptionalIpAddress]
        """

        self._kvm_ip_addresses = kvm_ip_addresses

    @property
    def memory_speed(self):
        """
        Gets the memory_speed of this ComputePhysicalSummary.

        :return: The memory_speed of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._memory_speed

    @memory_speed.setter
    def memory_speed(self, memory_speed):
        """
        Sets the memory_speed of this ComputePhysicalSummary.

        :param memory_speed: The memory_speed of this ComputePhysicalSummary.
        :type: str
        """

        self._memory_speed = memory_speed

    @property
    def mgmt_ip_address(self):
        """
        Gets the mgmt_ip_address of this ComputePhysicalSummary.
        Management address of the server.  

        :return: The mgmt_ip_address of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._mgmt_ip_address

    @mgmt_ip_address.setter
    def mgmt_ip_address(self, mgmt_ip_address):
        """
        Sets the mgmt_ip_address of this ComputePhysicalSummary.
        Management address of the server.  

        :param mgmt_ip_address: The mgmt_ip_address of this ComputePhysicalSummary.
        :type: str
        """

        self._mgmt_ip_address = mgmt_ip_address

    @property
    def model(self):
        """
        Gets the model of this ComputePhysicalSummary.
        This field identifies the model of the given component.  

        :return: The model of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this ComputePhysicalSummary.
        This field identifies the model of the given component.  

        :param model: The model of this ComputePhysicalSummary.
        :type: str
        """

        self._model = model

    @property
    def name(self):
        """
        Gets the name of this ComputePhysicalSummary.
        The name of the UCS Fabric Interconnect cluster or Cisco Integrated Management Controller (CIMC).  When this server is attached to a UCS Fabric Interconnect, the value of this property is the name of the UCS Fabric Interconnect. When this server configured in standalone mode, the value of this property is the name of the Cisco Integrated Management Controller.   

        :return: The name of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ComputePhysicalSummary.
        The name of the UCS Fabric Interconnect cluster or Cisco Integrated Management Controller (CIMC).  When this server is attached to a UCS Fabric Interconnect, the value of this property is the name of the UCS Fabric Interconnect. When this server configured in standalone mode, the value of this property is the name of the Cisco Integrated Management Controller.   

        :param name: The name of this ComputePhysicalSummary.
        :type: str
        """

        self._name = name

    @property
    def num_adaptors(self):
        """
        Gets the num_adaptors of this ComputePhysicalSummary.
        Total number of Adaptors available.  

        :return: The num_adaptors of this ComputePhysicalSummary.
        :rtype: int
        """
        return self._num_adaptors

    @num_adaptors.setter
    def num_adaptors(self, num_adaptors):
        """
        Sets the num_adaptors of this ComputePhysicalSummary.
        Total number of Adaptors available.  

        :param num_adaptors: The num_adaptors of this ComputePhysicalSummary.
        :type: int
        """

        self._num_adaptors = num_adaptors

    @property
    def num_cpu_cores(self):
        """
        Gets the num_cpu_cores of this ComputePhysicalSummary.

        :return: The num_cpu_cores of this ComputePhysicalSummary.
        :rtype: int
        """
        return self._num_cpu_cores

    @num_cpu_cores.setter
    def num_cpu_cores(self, num_cpu_cores):
        """
        Sets the num_cpu_cores of this ComputePhysicalSummary.

        :param num_cpu_cores: The num_cpu_cores of this ComputePhysicalSummary.
        :type: int
        """

        self._num_cpu_cores = num_cpu_cores

    @property
    def num_cpu_cores_enabled(self):
        """
        Gets the num_cpu_cores_enabled of this ComputePhysicalSummary.
        Number of CPU cores enabled.  

        :return: The num_cpu_cores_enabled of this ComputePhysicalSummary.
        :rtype: int
        """
        return self._num_cpu_cores_enabled

    @num_cpu_cores_enabled.setter
    def num_cpu_cores_enabled(self, num_cpu_cores_enabled):
        """
        Sets the num_cpu_cores_enabled of this ComputePhysicalSummary.
        Number of CPU cores enabled.  

        :param num_cpu_cores_enabled: The num_cpu_cores_enabled of this ComputePhysicalSummary.
        :type: int
        """

        self._num_cpu_cores_enabled = num_cpu_cores_enabled

    @property
    def num_cpus(self):
        """
        Gets the num_cpus of this ComputePhysicalSummary.
        Total number of CPU's available.  

        :return: The num_cpus of this ComputePhysicalSummary.
        :rtype: int
        """
        return self._num_cpus

    @num_cpus.setter
    def num_cpus(self, num_cpus):
        """
        Sets the num_cpus of this ComputePhysicalSummary.
        Total number of CPU's available.  

        :param num_cpus: The num_cpus of this ComputePhysicalSummary.
        :type: int
        """

        self._num_cpus = num_cpus

    @property
    def num_eth_host_interfaces(self):
        """
        Gets the num_eth_host_interfaces of this ComputePhysicalSummary.
        Number of Ethernet Host Interfaces.  

        :return: The num_eth_host_interfaces of this ComputePhysicalSummary.
        :rtype: int
        """
        return self._num_eth_host_interfaces

    @num_eth_host_interfaces.setter
    def num_eth_host_interfaces(self, num_eth_host_interfaces):
        """
        Sets the num_eth_host_interfaces of this ComputePhysicalSummary.
        Number of Ethernet Host Interfaces.  

        :param num_eth_host_interfaces: The num_eth_host_interfaces of this ComputePhysicalSummary.
        :type: int
        """

        self._num_eth_host_interfaces = num_eth_host_interfaces

    @property
    def num_fc_host_interfaces(self):
        """
        Gets the num_fc_host_interfaces of this ComputePhysicalSummary.

        :return: The num_fc_host_interfaces of this ComputePhysicalSummary.
        :rtype: int
        """
        return self._num_fc_host_interfaces

    @num_fc_host_interfaces.setter
    def num_fc_host_interfaces(self, num_fc_host_interfaces):
        """
        Sets the num_fc_host_interfaces of this ComputePhysicalSummary.

        :param num_fc_host_interfaces: The num_fc_host_interfaces of this ComputePhysicalSummary.
        :type: int
        """

        self._num_fc_host_interfaces = num_fc_host_interfaces

    @property
    def num_threads(self):
        """
        Gets the num_threads of this ComputePhysicalSummary.
        Number of threads enabled.  

        :return: The num_threads of this ComputePhysicalSummary.
        :rtype: int
        """
        return self._num_threads

    @num_threads.setter
    def num_threads(self, num_threads):
        """
        Sets the num_threads of this ComputePhysicalSummary.
        Number of threads enabled.  

        :param num_threads: The num_threads of this ComputePhysicalSummary.
        :type: int
        """

        self._num_threads = num_threads

    @property
    def oper_power_state(self):
        """
        Gets the oper_power_state of this ComputePhysicalSummary.

        :return: The oper_power_state of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._oper_power_state

    @oper_power_state.setter
    def oper_power_state(self, oper_power_state):
        """
        Sets the oper_power_state of this ComputePhysicalSummary.

        :param oper_power_state: The oper_power_state of this ComputePhysicalSummary.
        :type: str
        """

        self._oper_power_state = oper_power_state

    @property
    def oper_state(self):
        """
        Gets the oper_state of this ComputePhysicalSummary.

        :return: The oper_state of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._oper_state

    @oper_state.setter
    def oper_state(self, oper_state):
        """
        Sets the oper_state of this ComputePhysicalSummary.

        :param oper_state: The oper_state of this ComputePhysicalSummary.
        :type: str
        """

        self._oper_state = oper_state

    @property
    def operability(self):
        """
        Gets the operability of this ComputePhysicalSummary.

        :return: The operability of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._operability

    @operability.setter
    def operability(self, operability):
        """
        Sets the operability of this ComputePhysicalSummary.

        :param operability: The operability of this ComputePhysicalSummary.
        :type: str
        """

        self._operability = operability

    @property
    def platform_type(self):
        """
        Gets the platform_type of this ComputePhysicalSummary.
        Platform type of the device.  

        :return: The platform_type of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._platform_type

    @platform_type.setter
    def platform_type(self, platform_type):
        """
        Sets the platform_type of this ComputePhysicalSummary.
        Platform type of the device.  

        :param platform_type: The platform_type of this ComputePhysicalSummary.
        :type: str
        """

        self._platform_type = platform_type

    @property
    def presence(self):
        """
        Gets the presence of this ComputePhysicalSummary.

        :return: The presence of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """
        Sets the presence of this ComputePhysicalSummary.

        :param presence: The presence of this ComputePhysicalSummary.
        :type: str
        """

        self._presence = presence

    @property
    def revision(self):
        """
        Gets the revision of this ComputePhysicalSummary.

        :return: The revision of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this ComputePhysicalSummary.

        :param revision: The revision of this ComputePhysicalSummary.
        :type: str
        """

        self._revision = revision

    @property
    def rn(self):
        """
        Gets the rn of this ComputePhysicalSummary.
        The Relative Name uniquely identifies an object within a given context.  

        :return: The rn of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """
        Sets the rn of this ComputePhysicalSummary.
        The Relative Name uniquely identifies an object within a given context.  

        :param rn: The rn of this ComputePhysicalSummary.
        :type: str
        """

        self._rn = rn

    @property
    def scaled_mode(self):
        """
        Gets the scaled_mode of this ComputePhysicalSummary.

        :return: The scaled_mode of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._scaled_mode

    @scaled_mode.setter
    def scaled_mode(self, scaled_mode):
        """
        Sets the scaled_mode of this ComputePhysicalSummary.

        :param scaled_mode: The scaled_mode of this ComputePhysicalSummary.
        :type: str
        """

        self._scaled_mode = scaled_mode

    @property
    def serial(self):
        """
        Gets the serial of this ComputePhysicalSummary.
        This field identifies the serial of the given component.  

        :return: The serial of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """
        Sets the serial of this ComputePhysicalSummary.
        This field identifies the serial of the given component.  

        :param serial: The serial of this ComputePhysicalSummary.
        :type: str
        """

        self._serial = serial

    @property
    def server_id(self):
        """
        Gets the server_id of this ComputePhysicalSummary.

        :return: The server_id of this ComputePhysicalSummary.
        :rtype: int
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """
        Sets the server_id of this ComputePhysicalSummary.

        :param server_id: The server_id of this ComputePhysicalSummary.
        :type: int
        """

        self._server_id = server_id

    @property
    def service_profile(self):
        """
        Gets the service_profile of this ComputePhysicalSummary.

        :return: The service_profile of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._service_profile

    @service_profile.setter
    def service_profile(self, service_profile):
        """
        Sets the service_profile of this ComputePhysicalSummary.

        :param service_profile: The service_profile of this ComputePhysicalSummary.
        :type: str
        """

        self._service_profile = service_profile

    @property
    def slot_id(self):
        """
        Gets the slot_id of this ComputePhysicalSummary.

        :return: The slot_id of this ComputePhysicalSummary.
        :rtype: int
        """
        return self._slot_id

    @slot_id.setter
    def slot_id(self, slot_id):
        """
        Sets the slot_id of this ComputePhysicalSummary.

        :param slot_id: The slot_id of this ComputePhysicalSummary.
        :type: int
        """

        self._slot_id = slot_id

    @property
    def source_object_type(self):
        """
        Gets the source_object_type of this ComputePhysicalSummary.
        The source object type of this view MO.  

        :return: The source_object_type of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._source_object_type

    @source_object_type.setter
    def source_object_type(self, source_object_type):
        """
        Sets the source_object_type of this ComputePhysicalSummary.
        The source object type of this view MO.  

        :param source_object_type: The source_object_type of this ComputePhysicalSummary.
        :type: str
        """

        self._source_object_type = source_object_type

    @property
    def total_memory(self):
        """
        Gets the total_memory of this ComputePhysicalSummary.

        :return: The total_memory of this ComputePhysicalSummary.
        :rtype: int
        """
        return self._total_memory

    @total_memory.setter
    def total_memory(self, total_memory):
        """
        Sets the total_memory of this ComputePhysicalSummary.

        :param total_memory: The total_memory of this ComputePhysicalSummary.
        :type: int
        """

        self._total_memory = total_memory

    @property
    def user_label(self):
        """
        Gets the user_label of this ComputePhysicalSummary.

        :return: The user_label of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._user_label

    @user_label.setter
    def user_label(self, user_label):
        """
        Sets the user_label of this ComputePhysicalSummary.

        :param user_label: The user_label of this ComputePhysicalSummary.
        :type: str
        """

        self._user_label = user_label

    @property
    def uuid(self):
        """
        Gets the uuid of this ComputePhysicalSummary.

        :return: The uuid of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this ComputePhysicalSummary.

        :param uuid: The uuid of this ComputePhysicalSummary.
        :type: str
        """

        self._uuid = uuid

    @property
    def vendor(self):
        """
        Gets the vendor of this ComputePhysicalSummary.
        This field identifies the vendor of the given component.   

        :return: The vendor of this ComputePhysicalSummary.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """
        Sets the vendor of this ComputePhysicalSummary.
        This field identifies the vendor of the given component.   

        :param vendor: The vendor of this ComputePhysicalSummary.
        :type: str
        """

        self._vendor = vendor

    @property
    def registered_device(self):
        """
        Gets the registered_device of this ComputePhysicalSummary.
        The Device to which this Managed Object is associated. 

        :return: The registered_device of this ComputePhysicalSummary.
        :rtype: AssetDeviceRegistrationRef
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """
        Sets the registered_device of this ComputePhysicalSummary.
        The Device to which this Managed Object is associated. 

        :param registered_device: The registered_device of this ComputePhysicalSummary.
        :type: AssetDeviceRegistrationRef
        """

        self._registered_device = registered_device

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ComputePhysicalSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
