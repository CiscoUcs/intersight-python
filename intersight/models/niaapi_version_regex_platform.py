# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1415
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NiaapiVersionRegexPlatform(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'anyllregex': 'str',
        'currentlltrain': 'NiaapiOptionalSoftwareRegex',
        'latestsltrain': 'NiaapiOptionalSoftwareRegex',
        'sltrain': 'list[NiaapiOptionalSoftwareRegex]',
        'upcominglltrain': 'NiaapiOptionalSoftwareRegex'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'anyllregex': 'Anyllregex',
        'currentlltrain': 'Currentlltrain',
        'latestsltrain': 'Latestsltrain',
        'sltrain': 'Sltrain',
        'upcominglltrain': 'Upcominglltrain'
    }

    def __init__(self, object_type=None, anyllregex=None, currentlltrain=None, latestsltrain=None, sltrain=None, upcominglltrain=None):
        """
        NiaapiVersionRegexPlatform - a model defined in Swagger
        """

        self._object_type = None
        self._anyllregex = None
        self._currentlltrain = None
        self._latestsltrain = None
        self._sltrain = None
        self._upcominglltrain = None

        if object_type is not None:
          self.object_type = object_type
        if anyllregex is not None:
          self.anyllregex = anyllregex
        if currentlltrain is not None:
          self.currentlltrain = currentlltrain
        if latestsltrain is not None:
          self.latestsltrain = latestsltrain
        if sltrain is not None:
          self.sltrain = sltrain
        if upcominglltrain is not None:
          self.upcominglltrain = upcominglltrain

    @property
    def object_type(self):
        """
        Gets the object_type of this NiaapiVersionRegexPlatform.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :return: The object_type of this NiaapiVersionRegexPlatform.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this NiaapiVersionRegexPlatform.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :param object_type: The object_type of this NiaapiVersionRegexPlatform.
        :type: str
        """

        self._object_type = object_type

    @property
    def anyllregex(self):
        """
        Gets the anyllregex of this NiaapiVersionRegexPlatform.
        All long live version Regex pattern.  

        :return: The anyllregex of this NiaapiVersionRegexPlatform.
        :rtype: str
        """
        return self._anyllregex

    @anyllregex.setter
    def anyllregex(self, anyllregex):
        """
        Sets the anyllregex of this NiaapiVersionRegexPlatform.
        All long live version Regex pattern.  

        :param anyllregex: The anyllregex of this NiaapiVersionRegexPlatform.
        :type: str
        """

        self._anyllregex = anyllregex

    @property
    def currentlltrain(self):
        """
        Gets the currentlltrain of this NiaapiVersionRegexPlatform.
        Current long live version Regex pattern.  

        :return: The currentlltrain of this NiaapiVersionRegexPlatform.
        :rtype: NiaapiOptionalSoftwareRegex
        """
        return self._currentlltrain

    @currentlltrain.setter
    def currentlltrain(self, currentlltrain):
        """
        Sets the currentlltrain of this NiaapiVersionRegexPlatform.
        Current long live version Regex pattern.  

        :param currentlltrain: The currentlltrain of this NiaapiVersionRegexPlatform.
        :type: NiaapiOptionalSoftwareRegex
        """

        self._currentlltrain = currentlltrain

    @property
    def latestsltrain(self):
        """
        Gets the latestsltrain of this NiaapiVersionRegexPlatform.
        Latest short live version Regex pattern.  

        :return: The latestsltrain of this NiaapiVersionRegexPlatform.
        :rtype: NiaapiOptionalSoftwareRegex
        """
        return self._latestsltrain

    @latestsltrain.setter
    def latestsltrain(self, latestsltrain):
        """
        Sets the latestsltrain of this NiaapiVersionRegexPlatform.
        Latest short live version Regex pattern.  

        :param latestsltrain: The latestsltrain of this NiaapiVersionRegexPlatform.
        :type: NiaapiOptionalSoftwareRegex
        """

        self._latestsltrain = latestsltrain

    @property
    def sltrain(self):
        """
        Gets the sltrain of this NiaapiVersionRegexPlatform.
        List of short lived verison and Regex pattern.  

        :return: The sltrain of this NiaapiVersionRegexPlatform.
        :rtype: list[NiaapiOptionalSoftwareRegex]
        """
        return self._sltrain

    @sltrain.setter
    def sltrain(self, sltrain):
        """
        Sets the sltrain of this NiaapiVersionRegexPlatform.
        List of short lived verison and Regex pattern.  

        :param sltrain: The sltrain of this NiaapiVersionRegexPlatform.
        :type: list[NiaapiOptionalSoftwareRegex]
        """

        self._sltrain = sltrain

    @property
    def upcominglltrain(self):
        """
        Gets the upcominglltrain of this NiaapiVersionRegexPlatform.
        Upcoming short live version Regex pattern.   

        :return: The upcominglltrain of this NiaapiVersionRegexPlatform.
        :rtype: NiaapiOptionalSoftwareRegex
        """
        return self._upcominglltrain

    @upcominglltrain.setter
    def upcominglltrain(self, upcominglltrain):
        """
        Sets the upcominglltrain of this NiaapiVersionRegexPlatform.
        Upcoming short live version Regex pattern.   

        :param upcominglltrain: The upcominglltrain of this NiaapiVersionRegexPlatform.
        :type: NiaapiOptionalSoftwareRegex
        """

        self._upcominglltrain = upcominglltrain

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NiaapiVersionRegexPlatform):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
