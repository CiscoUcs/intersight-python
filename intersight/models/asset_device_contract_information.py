# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1295
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AssetDeviceContractInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'contract': 'AssetContractInformation',
        'contract_status': 'str',
        'covered_product_line_end_date': 'str',
        'device_id': 'str',
        'device_type': 'str',
        'end_customer': 'AssetCustomerInformation',
        'end_user_global_ultimate': 'AssetGlobalUltimate',
        'is_valid': 'bool',
        'item_type': 'str',
        'maintenance_purchase_order_number': 'str',
        'maintenance_sales_order_number': 'str',
        'platform_type': 'str',
        'product': 'AssetProductInformation',
        'purchase_order_number': 'str',
        'reseller_global_ultimate': 'AssetGlobalUltimate',
        'sales_order_number': 'str',
        'service_description': 'str',
        'service_end_date': 'datetime',
        'service_level': 'str',
        'service_sku': 'str',
        'service_start_date': 'datetime',
        'state_contract': 'str',
        'warranty_end_date': 'str',
        'warranty_type': 'str',
        'registered_device': 'AssetDeviceRegistrationRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'contract': 'Contract',
        'contract_status': 'ContractStatus',
        'covered_product_line_end_date': 'CoveredProductLineEndDate',
        'device_id': 'DeviceId',
        'device_type': 'DeviceType',
        'end_customer': 'EndCustomer',
        'end_user_global_ultimate': 'EndUserGlobalUltimate',
        'is_valid': 'IsValid',
        'item_type': 'ItemType',
        'maintenance_purchase_order_number': 'MaintenancePurchaseOrderNumber',
        'maintenance_sales_order_number': 'MaintenanceSalesOrderNumber',
        'platform_type': 'PlatformType',
        'product': 'Product',
        'purchase_order_number': 'PurchaseOrderNumber',
        'reseller_global_ultimate': 'ResellerGlobalUltimate',
        'sales_order_number': 'SalesOrderNumber',
        'service_description': 'ServiceDescription',
        'service_end_date': 'ServiceEndDate',
        'service_level': 'ServiceLevel',
        'service_sku': 'ServiceSku',
        'service_start_date': 'ServiceStartDate',
        'state_contract': 'StateContract',
        'warranty_end_date': 'WarrantyEndDate',
        'warranty_type': 'WarrantyType',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, contract=None, contract_status='Not Covered', covered_product_line_end_date=None, device_id=None, device_type='None', end_customer=None, end_user_global_ultimate=None, is_valid=None, item_type=None, maintenance_purchase_order_number=None, maintenance_sales_order_number=None, platform_type='null', product=None, purchase_order_number=None, reseller_global_ultimate=None, sales_order_number=None, service_description=None, service_end_date=None, service_level=None, service_sku=None, service_start_date=None, state_contract='Update', warranty_end_date=None, warranty_type=None, registered_device=None):
        """
        AssetDeviceContractInformation - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._contract = None
        self._contract_status = None
        self._covered_product_line_end_date = None
        self._device_id = None
        self._device_type = None
        self._end_customer = None
        self._end_user_global_ultimate = None
        self._is_valid = None
        self._item_type = None
        self._maintenance_purchase_order_number = None
        self._maintenance_sales_order_number = None
        self._platform_type = None
        self._product = None
        self._purchase_order_number = None
        self._reseller_global_ultimate = None
        self._sales_order_number = None
        self._service_description = None
        self._service_end_date = None
        self._service_level = None
        self._service_sku = None
        self._service_start_date = None
        self._state_contract = None
        self._warranty_end_date = None
        self._warranty_type = None
        self._registered_device = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if contract is not None:
          self.contract = contract
        if contract_status is not None:
          self.contract_status = contract_status
        if covered_product_line_end_date is not None:
          self.covered_product_line_end_date = covered_product_line_end_date
        if device_id is not None:
          self.device_id = device_id
        if device_type is not None:
          self.device_type = device_type
        if end_customer is not None:
          self.end_customer = end_customer
        if end_user_global_ultimate is not None:
          self.end_user_global_ultimate = end_user_global_ultimate
        if is_valid is not None:
          self.is_valid = is_valid
        if item_type is not None:
          self.item_type = item_type
        if maintenance_purchase_order_number is not None:
          self.maintenance_purchase_order_number = maintenance_purchase_order_number
        if maintenance_sales_order_number is not None:
          self.maintenance_sales_order_number = maintenance_sales_order_number
        if platform_type is not None:
          self.platform_type = platform_type
        if product is not None:
          self.product = product
        if purchase_order_number is not None:
          self.purchase_order_number = purchase_order_number
        if reseller_global_ultimate is not None:
          self.reseller_global_ultimate = reseller_global_ultimate
        if sales_order_number is not None:
          self.sales_order_number = sales_order_number
        if service_description is not None:
          self.service_description = service_description
        if service_end_date is not None:
          self.service_end_date = service_end_date
        if service_level is not None:
          self.service_level = service_level
        if service_sku is not None:
          self.service_sku = service_sku
        if service_start_date is not None:
          self.service_start_date = service_start_date
        if state_contract is not None:
          self.state_contract = state_contract
        if warranty_end_date is not None:
          self.warranty_end_date = warranty_end_date
        if warranty_type is not None:
          self.warranty_type = warranty_type
        if registered_device is not None:
          self.registered_device = registered_device

    @property
    def account_moid(self):
        """
        Gets the account_moid of this AssetDeviceContractInformation.
        The Account ID for this managed object.  

        :return: The account_moid of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this AssetDeviceContractInformation.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this AssetDeviceContractInformation.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this AssetDeviceContractInformation.
        The time when this managed object was created.  

        :return: The create_time of this AssetDeviceContractInformation.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this AssetDeviceContractInformation.
        The time when this managed object was created.  

        :param create_time: The create_time of this AssetDeviceContractInformation.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this AssetDeviceContractInformation.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this AssetDeviceContractInformation.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this AssetDeviceContractInformation.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this AssetDeviceContractInformation.
        The time when this managed object was last modified.  

        :return: The mod_time of this AssetDeviceContractInformation.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this AssetDeviceContractInformation.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this AssetDeviceContractInformation.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this AssetDeviceContractInformation.
        The unique identifier of this Managed Object instance.   

        :return: The moid of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this AssetDeviceContractInformation.
        The unique identifier of this Managed Object instance.   

        :param moid: The moid of this AssetDeviceContractInformation.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this AssetDeviceContractInformation.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :return: The object_type of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this AssetDeviceContractInformation.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :param object_type: The object_type of this AssetDeviceContractInformation.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this AssetDeviceContractInformation.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this AssetDeviceContractInformation.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this AssetDeviceContractInformation.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this AssetDeviceContractInformation.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this AssetDeviceContractInformation.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this AssetDeviceContractInformation.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this AssetDeviceContractInformation.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this AssetDeviceContractInformation.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this AssetDeviceContractInformation.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this AssetDeviceContractInformation.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this AssetDeviceContractInformation.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this AssetDeviceContractInformation.
        The versioning info for this managed object.   

        :return: The version_context of this AssetDeviceContractInformation.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this AssetDeviceContractInformation.
        The versioning info for this managed object.   

        :param version_context: The version_context of this AssetDeviceContractInformation.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this AssetDeviceContractInformation.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this AssetDeviceContractInformation.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this AssetDeviceContractInformation.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this AssetDeviceContractInformation.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this AssetDeviceContractInformation.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this AssetDeviceContractInformation.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this AssetDeviceContractInformation.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this AssetDeviceContractInformation.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this AssetDeviceContractInformation.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :return: The permission_resources of this AssetDeviceContractInformation.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this AssetDeviceContractInformation.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :param permission_resources: The permission_resources of this AssetDeviceContractInformation.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def contract(self):
        """
        Gets the contract of this AssetDeviceContractInformation.
        Contract information for the Cisco support contract purchased for the Cisco device.  

        :return: The contract of this AssetDeviceContractInformation.
        :rtype: AssetContractInformation
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """
        Sets the contract of this AssetDeviceContractInformation.
        Contract information for the Cisco support contract purchased for the Cisco device.  

        :param contract: The contract of this AssetDeviceContractInformation.
        :type: AssetContractInformation
        """

        self._contract = contract

    @property
    def contract_status(self):
        """
        Gets the contract_status of this AssetDeviceContractInformation.
        Calculated contract status that is derived based on the service line status and contract end date. It is different from serviceLineStatus property. serviceLineStatus gives us ACTIVE, OVERDUE, EXPIRED. These are transformed into Active, Expiring Soon and Not Covered.  

        :return: The contract_status of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._contract_status

    @contract_status.setter
    def contract_status(self, contract_status):
        """
        Sets the contract_status of this AssetDeviceContractInformation.
        Calculated contract status that is derived based on the service line status and contract end date. It is different from serviceLineStatus property. serviceLineStatus gives us ACTIVE, OVERDUE, EXPIRED. These are transformed into Active, Expiring Soon and Not Covered.  

        :param contract_status: The contract_status of this AssetDeviceContractInformation.
        :type: str
        """
        allowed_values = ["Not Covered", "Active", "Expiring Soon"]
        if contract_status not in allowed_values:
            raise ValueError(
                "Invalid value for `contract_status` ({0}), must be one of {1}"
                .format(contract_status, allowed_values)
            )

        self._contract_status = contract_status

    @property
    def covered_product_line_end_date(self):
        """
        Gets the covered_product_line_end_date of this AssetDeviceContractInformation.
        End date of the covered product line. The coverage end date is fetched from Cisco SN2INFO API.  

        :return: The covered_product_line_end_date of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._covered_product_line_end_date

    @covered_product_line_end_date.setter
    def covered_product_line_end_date(self, covered_product_line_end_date):
        """
        Sets the covered_product_line_end_date of this AssetDeviceContractInformation.
        End date of the covered product line. The coverage end date is fetched from Cisco SN2INFO API.  

        :param covered_product_line_end_date: The covered_product_line_end_date of this AssetDeviceContractInformation.
        :type: str
        """

        self._covered_product_line_end_date = covered_product_line_end_date

    @property
    def device_id(self):
        """
        Gets the device_id of this AssetDeviceContractInformation.
        Unique identifier of the Cisco device. This information is used to query Cisco APIx SN2INFO and CCWR databases.  

        :return: The device_id of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """
        Sets the device_id of this AssetDeviceContractInformation.
        Unique identifier of the Cisco device. This information is used to query Cisco APIx SN2INFO and CCWR databases.  

        :param device_id: The device_id of this AssetDeviceContractInformation.
        :type: str
        """

        self._device_id = device_id

    @property
    def device_type(self):
        """
        Gets the device_type of this AssetDeviceContractInformation.
        Type used to classify the device in Cisco Intersight. Currently supported values are Server and FabricInterconnect. This will be expanded to support more types in future.  

        :return: The device_type of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """
        Sets the device_type of this AssetDeviceContractInformation.
        Type used to classify the device in Cisco Intersight. Currently supported values are Server and FabricInterconnect. This will be expanded to support more types in future.  

        :param device_type: The device_type of this AssetDeviceContractInformation.
        :type: str
        """
        allowed_values = ["None", "CiscoUcsServer", "CiscoUcsFI", "CiscoUcsChassis"]
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def end_customer(self):
        """
        Gets the end_customer of this AssetDeviceContractInformation.
        End customer information for the Cisco support contract purchased for the Cisco device.  

        :return: The end_customer of this AssetDeviceContractInformation.
        :rtype: AssetCustomerInformation
        """
        return self._end_customer

    @end_customer.setter
    def end_customer(self, end_customer):
        """
        Sets the end_customer of this AssetDeviceContractInformation.
        End customer information for the Cisco support contract purchased for the Cisco device.  

        :param end_customer: The end_customer of this AssetDeviceContractInformation.
        :type: AssetCustomerInformation
        """

        self._end_customer = end_customer

    @property
    def end_user_global_ultimate(self):
        """
        Gets the end_user_global_ultimate of this AssetDeviceContractInformation.
        EndUserGlobalUltimate information listed in the contract.  

        :return: The end_user_global_ultimate of this AssetDeviceContractInformation.
        :rtype: AssetGlobalUltimate
        """
        return self._end_user_global_ultimate

    @end_user_global_ultimate.setter
    def end_user_global_ultimate(self, end_user_global_ultimate):
        """
        Sets the end_user_global_ultimate of this AssetDeviceContractInformation.
        EndUserGlobalUltimate information listed in the contract.  

        :param end_user_global_ultimate: The end_user_global_ultimate of this AssetDeviceContractInformation.
        :type: AssetGlobalUltimate
        """

        self._end_user_global_ultimate = end_user_global_ultimate

    @property
    def is_valid(self):
        """
        Gets the is_valid of this AssetDeviceContractInformation.
        Validates if the device is a genuine Cisco device. Validated is done using the Cisco SN2INFO APIs.  

        :return: The is_valid of this AssetDeviceContractInformation.
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """
        Sets the is_valid of this AssetDeviceContractInformation.
        Validates if the device is a genuine Cisco device. Validated is done using the Cisco SN2INFO APIs.  

        :param is_valid: The is_valid of this AssetDeviceContractInformation.
        :type: bool
        """

        self._is_valid = is_valid

    @property
    def item_type(self):
        """
        Gets the item_type of this AssetDeviceContractInformation.
        Item type of this specific Cisco device. example \"Chassis\".  

        :return: The item_type of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """
        Sets the item_type of this AssetDeviceContractInformation.
        Item type of this specific Cisco device. example \"Chassis\".  

        :param item_type: The item_type of this AssetDeviceContractInformation.
        :type: str
        """

        self._item_type = item_type

    @property
    def maintenance_purchase_order_number(self):
        """
        Gets the maintenance_purchase_order_number of this AssetDeviceContractInformation.
        Maintenance purchase order number for the Cisco device.  

        :return: The maintenance_purchase_order_number of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._maintenance_purchase_order_number

    @maintenance_purchase_order_number.setter
    def maintenance_purchase_order_number(self, maintenance_purchase_order_number):
        """
        Sets the maintenance_purchase_order_number of this AssetDeviceContractInformation.
        Maintenance purchase order number for the Cisco device.  

        :param maintenance_purchase_order_number: The maintenance_purchase_order_number of this AssetDeviceContractInformation.
        :type: str
        """

        self._maintenance_purchase_order_number = maintenance_purchase_order_number

    @property
    def maintenance_sales_order_number(self):
        """
        Gets the maintenance_sales_order_number of this AssetDeviceContractInformation.
        Maintenance sales order number for the Cisco device.  

        :return: The maintenance_sales_order_number of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._maintenance_sales_order_number

    @maintenance_sales_order_number.setter
    def maintenance_sales_order_number(self, maintenance_sales_order_number):
        """
        Sets the maintenance_sales_order_number of this AssetDeviceContractInformation.
        Maintenance sales order number for the Cisco device.  

        :param maintenance_sales_order_number: The maintenance_sales_order_number of this AssetDeviceContractInformation.
        :type: str
        """

        self._maintenance_sales_order_number = maintenance_sales_order_number

    @property
    def platform_type(self):
        """
        Gets the platform_type of this AssetDeviceContractInformation.
        The platform type of the Cisco device.  

        :return: The platform_type of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._platform_type

    @platform_type.setter
    def platform_type(self, platform_type):
        """
        Sets the platform_type of this AssetDeviceContractInformation.
        The platform type of the Cisco device.  

        :param platform_type: The platform_type of this AssetDeviceContractInformation.
        :type: str
        """
        allowed_values = ["", "APIC", "DCNM", "UCSFI", "IMC", "IMCM4", "IMCM5", "HX", "HXTriton", "UCSD", "IntersightAppliance", "PureStorage", "VMware", "ServiceEngine"]
        if platform_type not in allowed_values:
            raise ValueError(
                "Invalid value for `platform_type` ({0}), must be one of {1}"
                .format(platform_type, allowed_values)
            )

        self._platform_type = platform_type

    @property
    def product(self):
        """
        Gets the product of this AssetDeviceContractInformation.
        Product information of the offering under a contract.  

        :return: The product of this AssetDeviceContractInformation.
        :rtype: AssetProductInformation
        """
        return self._product

    @product.setter
    def product(self, product):
        """
        Sets the product of this AssetDeviceContractInformation.
        Product information of the offering under a contract.  

        :param product: The product of this AssetDeviceContractInformation.
        :type: AssetProductInformation
        """

        self._product = product

    @property
    def purchase_order_number(self):
        """
        Gets the purchase_order_number of this AssetDeviceContractInformation.
        Purchase order number for the Cisco device. It is a unique number assigned for every purchase.  

        :return: The purchase_order_number of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._purchase_order_number

    @purchase_order_number.setter
    def purchase_order_number(self, purchase_order_number):
        """
        Sets the purchase_order_number of this AssetDeviceContractInformation.
        Purchase order number for the Cisco device. It is a unique number assigned for every purchase.  

        :param purchase_order_number: The purchase_order_number of this AssetDeviceContractInformation.
        :type: str
        """

        self._purchase_order_number = purchase_order_number

    @property
    def reseller_global_ultimate(self):
        """
        Gets the reseller_global_ultimate of this AssetDeviceContractInformation.
        ResellerGlobalUltimate information listed in the contract.  

        :return: The reseller_global_ultimate of this AssetDeviceContractInformation.
        :rtype: AssetGlobalUltimate
        """
        return self._reseller_global_ultimate

    @reseller_global_ultimate.setter
    def reseller_global_ultimate(self, reseller_global_ultimate):
        """
        Sets the reseller_global_ultimate of this AssetDeviceContractInformation.
        ResellerGlobalUltimate information listed in the contract.  

        :param reseller_global_ultimate: The reseller_global_ultimate of this AssetDeviceContractInformation.
        :type: AssetGlobalUltimate
        """

        self._reseller_global_ultimate = reseller_global_ultimate

    @property
    def sales_order_number(self):
        """
        Gets the sales_order_number of this AssetDeviceContractInformation.
        Sales order number for the Cisco device. It is a unique number assigned for every sale.  

        :return: The sales_order_number of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._sales_order_number

    @sales_order_number.setter
    def sales_order_number(self, sales_order_number):
        """
        Sets the sales_order_number of this AssetDeviceContractInformation.
        Sales order number for the Cisco device. It is a unique number assigned for every sale.  

        :param sales_order_number: The sales_order_number of this AssetDeviceContractInformation.
        :type: str
        """

        self._sales_order_number = sales_order_number

    @property
    def service_description(self):
        """
        Gets the service_description of this AssetDeviceContractInformation.
        The type of service contract that covers the Cisco device.  

        :return: The service_description of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._service_description

    @service_description.setter
    def service_description(self, service_description):
        """
        Sets the service_description of this AssetDeviceContractInformation.
        The type of service contract that covers the Cisco device.  

        :param service_description: The service_description of this AssetDeviceContractInformation.
        :type: str
        """

        self._service_description = service_description

    @property
    def service_end_date(self):
        """
        Gets the service_end_date of this AssetDeviceContractInformation.
        End date for the Cisco service contract that covers this Cisco device.  

        :return: The service_end_date of this AssetDeviceContractInformation.
        :rtype: datetime
        """
        return self._service_end_date

    @service_end_date.setter
    def service_end_date(self, service_end_date):
        """
        Sets the service_end_date of this AssetDeviceContractInformation.
        End date for the Cisco service contract that covers this Cisco device.  

        :param service_end_date: The service_end_date of this AssetDeviceContractInformation.
        :type: datetime
        """

        self._service_end_date = service_end_date

    @property
    def service_level(self):
        """
        Gets the service_level of this AssetDeviceContractInformation.
        The type of service contract that covers the Cisco device.  

        :return: The service_level of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._service_level

    @service_level.setter
    def service_level(self, service_level):
        """
        Sets the service_level of this AssetDeviceContractInformation.
        The type of service contract that covers the Cisco device.  

        :param service_level: The service_level of this AssetDeviceContractInformation.
        :type: str
        """

        self._service_level = service_level

    @property
    def service_sku(self):
        """
        Gets the service_sku of this AssetDeviceContractInformation.
        The SKU of the service contract that covers the Cisco device.  

        :return: The service_sku of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._service_sku

    @service_sku.setter
    def service_sku(self, service_sku):
        """
        Sets the service_sku of this AssetDeviceContractInformation.
        The SKU of the service contract that covers the Cisco device.  

        :param service_sku: The service_sku of this AssetDeviceContractInformation.
        :type: str
        """

        self._service_sku = service_sku

    @property
    def service_start_date(self):
        """
        Gets the service_start_date of this AssetDeviceContractInformation.
        Start date for the Cisco service contract that covers this Cisco device.  

        :return: The service_start_date of this AssetDeviceContractInformation.
        :rtype: datetime
        """
        return self._service_start_date

    @service_start_date.setter
    def service_start_date(self, service_start_date):
        """
        Sets the service_start_date of this AssetDeviceContractInformation.
        Start date for the Cisco service contract that covers this Cisco device.  

        :param service_start_date: The service_start_date of this AssetDeviceContractInformation.
        :type: datetime
        """

        self._service_start_date = service_start_date

    @property
    def state_contract(self):
        """
        Gets the state_contract of this AssetDeviceContractInformation.
        Internal property used for triggering and tracking actions for contract information.   

        :return: The state_contract of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._state_contract

    @state_contract.setter
    def state_contract(self, state_contract):
        """
        Sets the state_contract of this AssetDeviceContractInformation.
        Internal property used for triggering and tracking actions for contract information.   

        :param state_contract: The state_contract of this AssetDeviceContractInformation.
        :type: str
        """
        allowed_values = ["Update", "OK", "Failed", "Retry"]
        if state_contract not in allowed_values:
            raise ValueError(
                "Invalid value for `state_contract` ({0}), must be one of {1}"
                .format(state_contract, allowed_values)
            )

        self._state_contract = state_contract

    @property
    def warranty_end_date(self):
        """
        Gets the warranty_end_date of this AssetDeviceContractInformation.
        End date for the warranty that covers the Cisco device.  

        :return: The warranty_end_date of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._warranty_end_date

    @warranty_end_date.setter
    def warranty_end_date(self, warranty_end_date):
        """
        Sets the warranty_end_date of this AssetDeviceContractInformation.
        End date for the warranty that covers the Cisco device.  

        :param warranty_end_date: The warranty_end_date of this AssetDeviceContractInformation.
        :type: str
        """

        self._warranty_end_date = warranty_end_date

    @property
    def warranty_type(self):
        """
        Gets the warranty_type of this AssetDeviceContractInformation.
        Type of warranty that covers the Cisco device.   

        :return: The warranty_type of this AssetDeviceContractInformation.
        :rtype: str
        """
        return self._warranty_type

    @warranty_type.setter
    def warranty_type(self, warranty_type):
        """
        Sets the warranty_type of this AssetDeviceContractInformation.
        Type of warranty that covers the Cisco device.   

        :param warranty_type: The warranty_type of this AssetDeviceContractInformation.
        :type: str
        """

        self._warranty_type = warranty_type

    @property
    def registered_device(self):
        """
        Gets the registered_device of this AssetDeviceContractInformation.
        Reference to the device connector through which the device is connected. 

        :return: The registered_device of this AssetDeviceContractInformation.
        :rtype: AssetDeviceRegistrationRef
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """
        Sets the registered_device of this AssetDeviceContractInformation.
        Reference to the device connector through which the device is connected. 

        :param registered_device: The registered_device of this AssetDeviceContractInformation.
        :type: AssetDeviceRegistrationRef
        """

        self._registered_device = registered_device

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AssetDeviceContractInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
