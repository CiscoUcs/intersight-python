# coding: utf-8

"""
    UCS Starship API

    This is the UCS Starship REST API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BiosProcessor(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boot_performance_mode': 'str',
        'cmci_enable': 'str',
        'core_multi_processing': 'str',
        'cpu_energy_performance': 'str',
        'enhanced_intel_speed_step_tech': 'str',
        'execute_disable_bit': 'str',
        'extended_apic': 'str',
        'hwpm_enable': 'str',
        'imc_interleave': 'str',
        'intel_hyper_threading_tech': 'str',
        'intel_turbo_boost_tech': 'str',
        'intel_virtualization_technology': 'str',
        'kti_prefetch': 'str',
        'llc_prefetch': 'str',
        'package_cstate_limit': 'str',
        'processor_c1e': 'str',
        'processor_c6report': 'str',
        'pstate_coord_type': 'str',
        'pwr_perf_tuning': 'str',
        'snc': 'str',
        'work_load_config': 'str',
        'xpt_prefetch': 'str'
    }

    attribute_map = {
        'boot_performance_mode': 'BootPerformanceMode',
        'cmci_enable': 'CmciEnable',
        'core_multi_processing': 'CoreMultiProcessing',
        'cpu_energy_performance': 'CpuEnergyPerformance',
        'enhanced_intel_speed_step_tech': 'EnhancedIntelSpeedStepTech',
        'execute_disable_bit': 'ExecuteDisableBit',
        'extended_apic': 'ExtendedApic',
        'hwpm_enable': 'HwpmEnable',
        'imc_interleave': 'ImcInterleave',
        'intel_hyper_threading_tech': 'IntelHyperThreadingTech',
        'intel_turbo_boost_tech': 'IntelTurboBoostTech',
        'intel_virtualization_technology': 'IntelVirtualizationTechnology',
        'kti_prefetch': 'KtiPrefetch',
        'llc_prefetch': 'LlcPrefetch',
        'package_cstate_limit': 'PackageCstateLimit',
        'processor_c1e': 'ProcessorC1e',
        'processor_c6report': 'ProcessorC6report',
        'pstate_coord_type': 'PstateCoordType',
        'pwr_perf_tuning': 'PwrPerfTuning',
        'snc': 'Snc',
        'work_load_config': 'WorkLoadConfig',
        'xpt_prefetch': 'XptPrefetch'
    }

    def __init__(self, boot_performance_mode='platform-default', cmci_enable='platform-default', core_multi_processing='platform-default', cpu_energy_performance='platform-default', enhanced_intel_speed_step_tech='platform-default', execute_disable_bit='platform-default', extended_apic='platform-default', hwpm_enable='platform-default', imc_interleave='platform-default', intel_hyper_threading_tech='platform-default', intel_turbo_boost_tech='platform-default', intel_virtualization_technology='platform-default', kti_prefetch='platform-default', llc_prefetch='platform-default', package_cstate_limit='platform-default', processor_c1e='platform-default', processor_c6report='platform-default', pstate_coord_type='platform-default', pwr_perf_tuning='platform-default', snc='platform-default', work_load_config='platform-default', xpt_prefetch='platform-default'):
        """
        BiosProcessor - a model defined in Swagger
        """

        self._boot_performance_mode = None
        self._cmci_enable = None
        self._core_multi_processing = None
        self._cpu_energy_performance = None
        self._enhanced_intel_speed_step_tech = None
        self._execute_disable_bit = None
        self._extended_apic = None
        self._hwpm_enable = None
        self._imc_interleave = None
        self._intel_hyper_threading_tech = None
        self._intel_turbo_boost_tech = None
        self._intel_virtualization_technology = None
        self._kti_prefetch = None
        self._llc_prefetch = None
        self._package_cstate_limit = None
        self._processor_c1e = None
        self._processor_c6report = None
        self._pstate_coord_type = None
        self._pwr_perf_tuning = None
        self._snc = None
        self._work_load_config = None
        self._xpt_prefetch = None

        if boot_performance_mode is not None:
          self.boot_performance_mode = boot_performance_mode
        if cmci_enable is not None:
          self.cmci_enable = cmci_enable
        if core_multi_processing is not None:
          self.core_multi_processing = core_multi_processing
        if cpu_energy_performance is not None:
          self.cpu_energy_performance = cpu_energy_performance
        if enhanced_intel_speed_step_tech is not None:
          self.enhanced_intel_speed_step_tech = enhanced_intel_speed_step_tech
        if execute_disable_bit is not None:
          self.execute_disable_bit = execute_disable_bit
        if extended_apic is not None:
          self.extended_apic = extended_apic
        if hwpm_enable is not None:
          self.hwpm_enable = hwpm_enable
        if imc_interleave is not None:
          self.imc_interleave = imc_interleave
        if intel_hyper_threading_tech is not None:
          self.intel_hyper_threading_tech = intel_hyper_threading_tech
        if intel_turbo_boost_tech is not None:
          self.intel_turbo_boost_tech = intel_turbo_boost_tech
        if intel_virtualization_technology is not None:
          self.intel_virtualization_technology = intel_virtualization_technology
        if kti_prefetch is not None:
          self.kti_prefetch = kti_prefetch
        if llc_prefetch is not None:
          self.llc_prefetch = llc_prefetch
        if package_cstate_limit is not None:
          self.package_cstate_limit = package_cstate_limit
        if processor_c1e is not None:
          self.processor_c1e = processor_c1e
        if processor_c6report is not None:
          self.processor_c6report = processor_c6report
        if pstate_coord_type is not None:
          self.pstate_coord_type = pstate_coord_type
        if pwr_perf_tuning is not None:
          self.pwr_perf_tuning = pwr_perf_tuning
        if snc is not None:
          self.snc = snc
        if work_load_config is not None:
          self.work_load_config = work_load_config
        if xpt_prefetch is not None:
          self.xpt_prefetch = xpt_prefetch

    @property
    def boot_performance_mode(self):
        """
        Gets the boot_performance_mode of this BiosProcessor.
        BIOS Token for setting Boot Performance Mode configuration  

        :return: The boot_performance_mode of this BiosProcessor.
        :rtype: str
        """
        return self._boot_performance_mode

    @boot_performance_mode.setter
    def boot_performance_mode(self, boot_performance_mode):
        """
        Sets the boot_performance_mode of this BiosProcessor.
        BIOS Token for setting Boot Performance Mode configuration  

        :param boot_performance_mode: The boot_performance_mode of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "Max Efficient", "Max Performance", "Set by Intel NM"]
        if boot_performance_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `boot_performance_mode` ({0}), must be one of {1}"
                .format(boot_performance_mode, allowed_values)
            )

        self._boot_performance_mode = boot_performance_mode

    @property
    def cmci_enable(self):
        """
        Gets the cmci_enable of this BiosProcessor.
        BIOS Token for setting Processor CMCI configuration  

        :return: The cmci_enable of this BiosProcessor.
        :rtype: str
        """
        return self._cmci_enable

    @cmci_enable.setter
    def cmci_enable(self, cmci_enable):
        """
        Sets the cmci_enable of this BiosProcessor.
        BIOS Token for setting Processor CMCI configuration  

        :param cmci_enable: The cmci_enable of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if cmci_enable not in allowed_values:
            raise ValueError(
                "Invalid value for `cmci_enable` ({0}), must be one of {1}"
                .format(cmci_enable, allowed_values)
            )

        self._cmci_enable = cmci_enable

    @property
    def core_multi_processing(self):
        """
        Gets the core_multi_processing of this BiosProcessor.
        BIOS Token for setting Cores Enabled configuration  

        :return: The core_multi_processing of this BiosProcessor.
        :rtype: str
        """
        return self._core_multi_processing

    @core_multi_processing.setter
    def core_multi_processing(self, core_multi_processing):
        """
        Sets the core_multi_processing of this BiosProcessor.
        BIOS Token for setting Cores Enabled configuration  

        :param core_multi_processing: The core_multi_processing of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "1", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "2", "20", "21", "22", "23", "24", "25", "26", "27", "3", "4", "5", "6", "7", "8", "9", "all"]
        if core_multi_processing not in allowed_values:
            raise ValueError(
                "Invalid value for `core_multi_processing` ({0}), must be one of {1}"
                .format(core_multi_processing, allowed_values)
            )

        self._core_multi_processing = core_multi_processing

    @property
    def cpu_energy_performance(self):
        """
        Gets the cpu_energy_performance of this BiosProcessor.
        BIOS Token for setting Energy Performance BIOS Config configuration  

        :return: The cpu_energy_performance of this BiosProcessor.
        :rtype: str
        """
        return self._cpu_energy_performance

    @cpu_energy_performance.setter
    def cpu_energy_performance(self, cpu_energy_performance):
        """
        Sets the cpu_energy_performance of this BiosProcessor.
        BIOS Token for setting Energy Performance BIOS Config configuration  

        :param cpu_energy_performance: The cpu_energy_performance of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "balanced-performance", "balanced-power", "performance", "power"]
        if cpu_energy_performance not in allowed_values:
            raise ValueError(
                "Invalid value for `cpu_energy_performance` ({0}), must be one of {1}"
                .format(cpu_energy_performance, allowed_values)
            )

        self._cpu_energy_performance = cpu_energy_performance

    @property
    def enhanced_intel_speed_step_tech(self):
        """
        Gets the enhanced_intel_speed_step_tech of this BiosProcessor.
        BIOS Token for setting Enhanced Intel Speedstep(R) Technology configuration  

        :return: The enhanced_intel_speed_step_tech of this BiosProcessor.
        :rtype: str
        """
        return self._enhanced_intel_speed_step_tech

    @enhanced_intel_speed_step_tech.setter
    def enhanced_intel_speed_step_tech(self, enhanced_intel_speed_step_tech):
        """
        Sets the enhanced_intel_speed_step_tech of this BiosProcessor.
        BIOS Token for setting Enhanced Intel Speedstep(R) Technology configuration  

        :param enhanced_intel_speed_step_tech: The enhanced_intel_speed_step_tech of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if enhanced_intel_speed_step_tech not in allowed_values:
            raise ValueError(
                "Invalid value for `enhanced_intel_speed_step_tech` ({0}), must be one of {1}"
                .format(enhanced_intel_speed_step_tech, allowed_values)
            )

        self._enhanced_intel_speed_step_tech = enhanced_intel_speed_step_tech

    @property
    def execute_disable_bit(self):
        """
        Gets the execute_disable_bit of this BiosProcessor.
        BIOS Token for setting Execute Disable Bit configuration  

        :return: The execute_disable_bit of this BiosProcessor.
        :rtype: str
        """
        return self._execute_disable_bit

    @execute_disable_bit.setter
    def execute_disable_bit(self, execute_disable_bit):
        """
        Sets the execute_disable_bit of this BiosProcessor.
        BIOS Token for setting Execute Disable Bit configuration  

        :param execute_disable_bit: The execute_disable_bit of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if execute_disable_bit not in allowed_values:
            raise ValueError(
                "Invalid value for `execute_disable_bit` ({0}), must be one of {1}"
                .format(execute_disable_bit, allowed_values)
            )

        self._execute_disable_bit = execute_disable_bit

    @property
    def extended_apic(self):
        """
        Gets the extended_apic of this BiosProcessor.
        BIOS Token for setting Extended Apic configuration  

        :return: The extended_apic of this BiosProcessor.
        :rtype: str
        """
        return self._extended_apic

    @extended_apic.setter
    def extended_apic(self, extended_apic):
        """
        Sets the extended_apic of this BiosProcessor.
        BIOS Token for setting Extended Apic configuration  

        :param extended_apic: The extended_apic of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if extended_apic not in allowed_values:
            raise ValueError(
                "Invalid value for `extended_apic` ({0}), must be one of {1}"
                .format(extended_apic, allowed_values)
            )

        self._extended_apic = extended_apic

    @property
    def hwpm_enable(self):
        """
        Gets the hwpm_enable of this BiosProcessor.
        BIOS Token for setting Hardware P-States configuration  

        :return: The hwpm_enable of this BiosProcessor.
        :rtype: str
        """
        return self._hwpm_enable

    @hwpm_enable.setter
    def hwpm_enable(self, hwpm_enable):
        """
        Sets the hwpm_enable of this BiosProcessor.
        BIOS Token for setting Hardware P-States configuration  

        :param hwpm_enable: The hwpm_enable of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "Disabled", "HWPM Native Mode", "HWPM OOB Mode", "Native Mode with no Legacy"]
        if hwpm_enable not in allowed_values:
            raise ValueError(
                "Invalid value for `hwpm_enable` ({0}), must be one of {1}"
                .format(hwpm_enable, allowed_values)
            )

        self._hwpm_enable = hwpm_enable

    @property
    def imc_interleave(self):
        """
        Gets the imc_interleave of this BiosProcessor.
        BIOS Token for setting IMC Interleaving configuration  

        :return: The imc_interleave of this BiosProcessor.
        :rtype: str
        """
        return self._imc_interleave

    @imc_interleave.setter
    def imc_interleave(self, imc_interleave):
        """
        Sets the imc_interleave of this BiosProcessor.
        BIOS Token for setting IMC Interleaving configuration  

        :param imc_interleave: The imc_interleave of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "1-way Interleave", "2-way Interleave", "Auto"]
        if imc_interleave not in allowed_values:
            raise ValueError(
                "Invalid value for `imc_interleave` ({0}), must be one of {1}"
                .format(imc_interleave, allowed_values)
            )

        self._imc_interleave = imc_interleave

    @property
    def intel_hyper_threading_tech(self):
        """
        Gets the intel_hyper_threading_tech of this BiosProcessor.
        BIOS Token for setting Hyper-Threading [ALL] configuration  

        :return: The intel_hyper_threading_tech of this BiosProcessor.
        :rtype: str
        """
        return self._intel_hyper_threading_tech

    @intel_hyper_threading_tech.setter
    def intel_hyper_threading_tech(self, intel_hyper_threading_tech):
        """
        Sets the intel_hyper_threading_tech of this BiosProcessor.
        BIOS Token for setting Hyper-Threading [ALL] configuration  

        :param intel_hyper_threading_tech: The intel_hyper_threading_tech of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if intel_hyper_threading_tech not in allowed_values:
            raise ValueError(
                "Invalid value for `intel_hyper_threading_tech` ({0}), must be one of {1}"
                .format(intel_hyper_threading_tech, allowed_values)
            )

        self._intel_hyper_threading_tech = intel_hyper_threading_tech

    @property
    def intel_turbo_boost_tech(self):
        """
        Gets the intel_turbo_boost_tech of this BiosProcessor.
        BIOS Token for setting Turbo Mode configuration  

        :return: The intel_turbo_boost_tech of this BiosProcessor.
        :rtype: str
        """
        return self._intel_turbo_boost_tech

    @intel_turbo_boost_tech.setter
    def intel_turbo_boost_tech(self, intel_turbo_boost_tech):
        """
        Sets the intel_turbo_boost_tech of this BiosProcessor.
        BIOS Token for setting Turbo Mode configuration  

        :param intel_turbo_boost_tech: The intel_turbo_boost_tech of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if intel_turbo_boost_tech not in allowed_values:
            raise ValueError(
                "Invalid value for `intel_turbo_boost_tech` ({0}), must be one of {1}"
                .format(intel_turbo_boost_tech, allowed_values)
            )

        self._intel_turbo_boost_tech = intel_turbo_boost_tech

    @property
    def intel_virtualization_technology(self):
        """
        Gets the intel_virtualization_technology of this BiosProcessor.
        BIOS Token for setting Intel(R) VT configuration  

        :return: The intel_virtualization_technology of this BiosProcessor.
        :rtype: str
        """
        return self._intel_virtualization_technology

    @intel_virtualization_technology.setter
    def intel_virtualization_technology(self, intel_virtualization_technology):
        """
        Sets the intel_virtualization_technology of this BiosProcessor.
        BIOS Token for setting Intel(R) VT configuration  

        :param intel_virtualization_technology: The intel_virtualization_technology of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if intel_virtualization_technology not in allowed_values:
            raise ValueError(
                "Invalid value for `intel_virtualization_technology` ({0}), must be one of {1}"
                .format(intel_virtualization_technology, allowed_values)
            )

        self._intel_virtualization_technology = intel_virtualization_technology

    @property
    def kti_prefetch(self):
        """
        Gets the kti_prefetch of this BiosProcessor.
        BIOS Token for setting KTI Prefetch configuration  

        :return: The kti_prefetch of this BiosProcessor.
        :rtype: str
        """
        return self._kti_prefetch

    @kti_prefetch.setter
    def kti_prefetch(self, kti_prefetch):
        """
        Sets the kti_prefetch of this BiosProcessor.
        BIOS Token for setting KTI Prefetch configuration  

        :param kti_prefetch: The kti_prefetch of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if kti_prefetch not in allowed_values:
            raise ValueError(
                "Invalid value for `kti_prefetch` ({0}), must be one of {1}"
                .format(kti_prefetch, allowed_values)
            )

        self._kti_prefetch = kti_prefetch

    @property
    def llc_prefetch(self):
        """
        Gets the llc_prefetch of this BiosProcessor.
        BIOS Token for setting LLC Prefetch configuration  

        :return: The llc_prefetch of this BiosProcessor.
        :rtype: str
        """
        return self._llc_prefetch

    @llc_prefetch.setter
    def llc_prefetch(self, llc_prefetch):
        """
        Sets the llc_prefetch of this BiosProcessor.
        BIOS Token for setting LLC Prefetch configuration  

        :param llc_prefetch: The llc_prefetch of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if llc_prefetch not in allowed_values:
            raise ValueError(
                "Invalid value for `llc_prefetch` ({0}), must be one of {1}"
                .format(llc_prefetch, allowed_values)
            )

        self._llc_prefetch = llc_prefetch

    @property
    def package_cstate_limit(self):
        """
        Gets the package_cstate_limit of this BiosProcessor.
        BIOS Token for setting Package C State configuration  

        :return: The package_cstate_limit of this BiosProcessor.
        :rtype: str
        """
        return self._package_cstate_limit

    @package_cstate_limit.setter
    def package_cstate_limit(self, package_cstate_limit):
        """
        Sets the package_cstate_limit of this BiosProcessor.
        BIOS Token for setting Package C State configuration  

        :param package_cstate_limit: The package_cstate_limit of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "C0 C1 State", "C2", "C6 Non Retention", "C6 Retention", "No Limit"]
        if package_cstate_limit not in allowed_values:
            raise ValueError(
                "Invalid value for `package_cstate_limit` ({0}), must be one of {1}"
                .format(package_cstate_limit, allowed_values)
            )

        self._package_cstate_limit = package_cstate_limit

    @property
    def processor_c1e(self):
        """
        Gets the processor_c1e of this BiosProcessor.
        BIOS Token for setting Processor C1E configuration  

        :return: The processor_c1e of this BiosProcessor.
        :rtype: str
        """
        return self._processor_c1e

    @processor_c1e.setter
    def processor_c1e(self, processor_c1e):
        """
        Sets the processor_c1e of this BiosProcessor.
        BIOS Token for setting Processor C1E configuration  

        :param processor_c1e: The processor_c1e of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if processor_c1e not in allowed_values:
            raise ValueError(
                "Invalid value for `processor_c1e` ({0}), must be one of {1}"
                .format(processor_c1e, allowed_values)
            )

        self._processor_c1e = processor_c1e

    @property
    def processor_c6report(self):
        """
        Gets the processor_c6report of this BiosProcessor.
        BIOS Token for setting Processor C6 Report configuration  

        :return: The processor_c6report of this BiosProcessor.
        :rtype: str
        """
        return self._processor_c6report

    @processor_c6report.setter
    def processor_c6report(self, processor_c6report):
        """
        Sets the processor_c6report of this BiosProcessor.
        BIOS Token for setting Processor C6 Report configuration  

        :param processor_c6report: The processor_c6report of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if processor_c6report not in allowed_values:
            raise ValueError(
                "Invalid value for `processor_c6report` ({0}), must be one of {1}"
                .format(processor_c6report, allowed_values)
            )

        self._processor_c6report = processor_c6report

    @property
    def pstate_coord_type(self):
        """
        Gets the pstate_coord_type of this BiosProcessor.
        BIOS Token for setting EIST PSD Function configuration  

        :return: The pstate_coord_type of this BiosProcessor.
        :rtype: str
        """
        return self._pstate_coord_type

    @pstate_coord_type.setter
    def pstate_coord_type(self, pstate_coord_type):
        """
        Sets the pstate_coord_type of this BiosProcessor.
        BIOS Token for setting EIST PSD Function configuration  

        :param pstate_coord_type: The pstate_coord_type of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "HW ALL", "SW ALL", "SW ANY"]
        if pstate_coord_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pstate_coord_type` ({0}), must be one of {1}"
                .format(pstate_coord_type, allowed_values)
            )

        self._pstate_coord_type = pstate_coord_type

    @property
    def pwr_perf_tuning(self):
        """
        Gets the pwr_perf_tuning of this BiosProcessor.
        BIOS Token for setting Power Performance Tuning configuration  

        :return: The pwr_perf_tuning of this BiosProcessor.
        :rtype: str
        """
        return self._pwr_perf_tuning

    @pwr_perf_tuning.setter
    def pwr_perf_tuning(self, pwr_perf_tuning):
        """
        Sets the pwr_perf_tuning of this BiosProcessor.
        BIOS Token for setting Power Performance Tuning configuration  

        :param pwr_perf_tuning: The pwr_perf_tuning of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "bios", "os"]
        if pwr_perf_tuning not in allowed_values:
            raise ValueError(
                "Invalid value for `pwr_perf_tuning` ({0}), must be one of {1}"
                .format(pwr_perf_tuning, allowed_values)
            )

        self._pwr_perf_tuning = pwr_perf_tuning

    @property
    def snc(self):
        """
        Gets the snc of this BiosProcessor.
        BIOS Token for setting Sub Numa Clustering configuration  

        :return: The snc of this BiosProcessor.
        :rtype: str
        """
        return self._snc

    @snc.setter
    def snc(self, snc):
        """
        Sets the snc of this BiosProcessor.
        BIOS Token for setting Sub Numa Clustering configuration  

        :param snc: The snc of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "Auto", "disabled", "enabled"]
        if snc not in allowed_values:
            raise ValueError(
                "Invalid value for `snc` ({0}), must be one of {1}"
                .format(snc, allowed_values)
            )

        self._snc = snc

    @property
    def work_load_config(self):
        """
        Gets the work_load_config of this BiosProcessor.
        BIOS Token for setting Workload Configuration configuration  

        :return: The work_load_config of this BiosProcessor.
        :rtype: str
        """
        return self._work_load_config

    @work_load_config.setter
    def work_load_config(self, work_load_config):
        """
        Sets the work_load_config of this BiosProcessor.
        BIOS Token for setting Workload Configuration configuration  

        :param work_load_config: The work_load_config of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "Balanced", "I/O Sensitive"]
        if work_load_config not in allowed_values:
            raise ValueError(
                "Invalid value for `work_load_config` ({0}), must be one of {1}"
                .format(work_load_config, allowed_values)
            )

        self._work_load_config = work_load_config

    @property
    def xpt_prefetch(self):
        """
        Gets the xpt_prefetch of this BiosProcessor.
        BIOS Token for setting XPT Prefetch configuration   

        :return: The xpt_prefetch of this BiosProcessor.
        :rtype: str
        """
        return self._xpt_prefetch

    @xpt_prefetch.setter
    def xpt_prefetch(self, xpt_prefetch):
        """
        Sets the xpt_prefetch of this BiosProcessor.
        BIOS Token for setting XPT Prefetch configuration   

        :param xpt_prefetch: The xpt_prefetch of this BiosProcessor.
        :type: str
        """
        allowed_values = ["platform-default", "enabled", "disabled"]
        if xpt_prefetch not in allowed_values:
            raise ValueError(
                "Invalid value for `xpt_prefetch` ({0}), must be one of {1}"
                .format(xpt_prefetch, allowed_values)
            )

        self._xpt_prefetch = xpt_prefetch

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BiosProcessor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
