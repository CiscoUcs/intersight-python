# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class WorkflowTaskMeta(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action_type': 'str',
        'description': 'str',
        'input_keys': 'list[str]',
        'internal': 'bool',
        'name': 'str',
        'output_keys': 'list[str]',
        'response_timeout_sec': 'int',
        'retry_count': 'int',
        'retry_delay_sec': 'int',
        'retry_logic': 'str',
        'src': 'str',
        'timeout_policy': 'str',
        'timeout_sec': 'int'
    }

    attribute_map = {
        'action_type': 'ActionType',
        'description': 'Description',
        'input_keys': 'InputKeys',
        'internal': 'Internal',
        'name': 'Name',
        'output_keys': 'OutputKeys',
        'response_timeout_sec': 'ResponseTimeoutSec',
        'retry_count': 'RetryCount',
        'retry_delay_sec': 'RetryDelaySec',
        'retry_logic': 'RetryLogic',
        'src': 'Src',
        'timeout_policy': 'TimeoutPolicy',
        'timeout_sec': 'TimeoutSec'
    }

    def __init__(self,
                 action_type=None,
                 description=None,
                 input_keys=None,
                 internal=None,
                 name=None,
                 output_keys=None,
                 response_timeout_sec=None,
                 retry_count=None,
                 retry_delay_sec=None,
                 retry_logic=None,
                 src=None,
                 timeout_policy=None,
                 timeout_sec=None,
                 local_vars_configuration=None):  # noqa: E501
        """WorkflowTaskMeta - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._action_type = None
        self._description = None
        self._input_keys = None
        self._internal = None
        self._name = None
        self._output_keys = None
        self._response_timeout_sec = None
        self._retry_count = None
        self._retry_delay_sec = None
        self._retry_logic = None
        self._src = None
        self._timeout_policy = None
        self._timeout_sec = None
        self.discriminator = None

        if action_type is not None:
            self.action_type = action_type
        if description is not None:
            self.description = description
        if input_keys is not None:
            self.input_keys = input_keys
        if internal is not None:
            self.internal = internal
        if name is not None:
            self.name = name
        if output_keys is not None:
            self.output_keys = output_keys
        if response_timeout_sec is not None:
            self.response_timeout_sec = response_timeout_sec
        if retry_count is not None:
            self.retry_count = retry_count
        if retry_delay_sec is not None:
            self.retry_delay_sec = retry_delay_sec
        if retry_logic is not None:
            self.retry_logic = retry_logic
        if src is not None:
            self.src = src
        if timeout_policy is not None:
            self.timeout_policy = timeout_policy
        if timeout_sec is not None:
            self.timeout_sec = timeout_sec

    @property
    def action_type(self):
        """Gets the action_type of this WorkflowTaskMeta.  # noqa: E501

        A task execution type to indicate if it is a system task.    # noqa: E501

        :return: The action_type of this WorkflowTaskMeta.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this WorkflowTaskMeta.

        A task execution type to indicate if it is a system task.    # noqa: E501

        :param action_type: The action_type of this WorkflowTaskMeta.  # noqa: E501
        :type: str
        """

        self._action_type = action_type

    @property
    def description(self):
        """Gets the description of this WorkflowTaskMeta.  # noqa: E501

        A description of the task.    # noqa: E501

        :return: The description of this WorkflowTaskMeta.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkflowTaskMeta.

        A description of the task.    # noqa: E501

        :param description: The description of this WorkflowTaskMeta.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def input_keys(self):
        """Gets the input_keys of this WorkflowTaskMeta.  # noqa: E501


        :return: The input_keys of this WorkflowTaskMeta.  # noqa: E501
        :rtype: list[str]
        """
        return self._input_keys

    @input_keys.setter
    def input_keys(self, input_keys):
        """Sets the input_keys of this WorkflowTaskMeta.


        :param input_keys: The input_keys of this WorkflowTaskMeta.  # noqa: E501
        :type: list[str]
        """

        self._input_keys = input_keys

    @property
    def internal(self):
        """Gets the internal of this WorkflowTaskMeta.  # noqa: E501

        Denotes whether or not this is an internal task.  Internal tasks will be hidden from the UI within a workflow.    # noqa: E501

        :return: The internal of this WorkflowTaskMeta.  # noqa: E501
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this WorkflowTaskMeta.

        Denotes whether or not this is an internal task.  Internal tasks will be hidden from the UI within a workflow.    # noqa: E501

        :param internal: The internal of this WorkflowTaskMeta.  # noqa: E501
        :type: bool
        """

        self._internal = internal

    @property
    def name(self):
        """Gets the name of this WorkflowTaskMeta.  # noqa: E501

        A task name that should be unique in Conductor DB.    # noqa: E501

        :return: The name of this WorkflowTaskMeta.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowTaskMeta.

        A task name that should be unique in Conductor DB.    # noqa: E501

        :param name: The name of this WorkflowTaskMeta.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def output_keys(self):
        """Gets the output_keys of this WorkflowTaskMeta.  # noqa: E501


        :return: The output_keys of this WorkflowTaskMeta.  # noqa: E501
        :rtype: list[str]
        """
        return self._output_keys

    @output_keys.setter
    def output_keys(self, output_keys):
        """Sets the output_keys of this WorkflowTaskMeta.


        :param output_keys: The output_keys of this WorkflowTaskMeta.  # noqa: E501
        :type: list[str]
        """

        self._output_keys = output_keys

    @property
    def response_timeout_sec(self):
        """Gets the response_timeout_sec of this WorkflowTaskMeta.  # noqa: E501

        The worker respnose timeout value.    # noqa: E501

        :return: The response_timeout_sec of this WorkflowTaskMeta.  # noqa: E501
        :rtype: int
        """
        return self._response_timeout_sec

    @response_timeout_sec.setter
    def response_timeout_sec(self, response_timeout_sec):
        """Sets the response_timeout_sec of this WorkflowTaskMeta.

        The worker respnose timeout value.    # noqa: E501

        :param response_timeout_sec: The response_timeout_sec of this WorkflowTaskMeta.  # noqa: E501
        :type: int
        """

        self._response_timeout_sec = response_timeout_sec

    @property
    def retry_count(self):
        """Gets the retry_count of this WorkflowTaskMeta.  # noqa: E501

        A number of reties for this task.    # noqa: E501

        :return: The retry_count of this WorkflowTaskMeta.  # noqa: E501
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this WorkflowTaskMeta.

        A number of reties for this task.    # noqa: E501

        :param retry_count: The retry_count of this WorkflowTaskMeta.  # noqa: E501
        :type: int
        """

        self._retry_count = retry_count

    @property
    def retry_delay_sec(self):
        """Gets the retry_delay_sec of this WorkflowTaskMeta.  # noqa: E501

        The time on which the retry will be delayed.    # noqa: E501

        :return: The retry_delay_sec of this WorkflowTaskMeta.  # noqa: E501
        :rtype: int
        """
        return self._retry_delay_sec

    @retry_delay_sec.setter
    def retry_delay_sec(self, retry_delay_sec):
        """Sets the retry_delay_sec of this WorkflowTaskMeta.

        The time on which the retry will be delayed.    # noqa: E501

        :param retry_delay_sec: The retry_delay_sec of this WorkflowTaskMeta.  # noqa: E501
        :type: int
        """

        self._retry_delay_sec = retry_delay_sec

    @property
    def retry_logic(self):
        """Gets the retry_logic of this WorkflowTaskMeta.  # noqa: E501

        A logic which defines the way to handle retry (FIXED, EXPONENTIAL_BACKOFF).    # noqa: E501

        :return: The retry_logic of this WorkflowTaskMeta.  # noqa: E501
        :rtype: str
        """
        return self._retry_logic

    @retry_logic.setter
    def retry_logic(self, retry_logic):
        """Sets the retry_logic of this WorkflowTaskMeta.

        A logic which defines the way to handle retry (FIXED, EXPONENTIAL_BACKOFF).    # noqa: E501

        :param retry_logic: The retry_logic of this WorkflowTaskMeta.  # noqa: E501
        :type: str
        """

        self._retry_logic = retry_logic

    @property
    def src(self):
        """Gets the src of this WorkflowTaskMeta.  # noqa: E501

        A service owns the task metadata.    # noqa: E501

        :return: The src of this WorkflowTaskMeta.  # noqa: E501
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this WorkflowTaskMeta.

        A service owns the task metadata.    # noqa: E501

        :param src: The src of this WorkflowTaskMeta.  # noqa: E501
        :type: str
        """

        self._src = src

    @property
    def timeout_policy(self):
        """Gets the timeout_policy of this WorkflowTaskMeta.  # noqa: E501

        A policy which defines the way to handle timeout (RETRY, TIME_OUT_WF, ALERT_ONLY).    # noqa: E501

        :return: The timeout_policy of this WorkflowTaskMeta.  # noqa: E501
        :rtype: str
        """
        return self._timeout_policy

    @timeout_policy.setter
    def timeout_policy(self, timeout_policy):
        """Sets the timeout_policy of this WorkflowTaskMeta.

        A policy which defines the way to handle timeout (RETRY, TIME_OUT_WF, ALERT_ONLY).    # noqa: E501

        :param timeout_policy: The timeout_policy of this WorkflowTaskMeta.  # noqa: E501
        :type: str
        """

        self._timeout_policy = timeout_policy

    @property
    def timeout_sec(self):
        """Gets the timeout_sec of this WorkflowTaskMeta.  # noqa: E501

        A timeout value for the task in seconds.     # noqa: E501

        :return: The timeout_sec of this WorkflowTaskMeta.  # noqa: E501
        :rtype: int
        """
        return self._timeout_sec

    @timeout_sec.setter
    def timeout_sec(self, timeout_sec):
        """Sets the timeout_sec of this WorkflowTaskMeta.

        A timeout value for the task in seconds.     # noqa: E501

        :param timeout_sec: The timeout_sec of this WorkflowTaskMeta.  # noqa: E501
        :type: int
        """

        self._timeout_sec = timeout_sec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowTaskMeta):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowTaskMeta):
            return True

        return self.to_dict() != other.to_dict()
