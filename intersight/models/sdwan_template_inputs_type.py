# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1461
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SdwanTemplateInputsType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'editable': 'bool',
        'key': 'str',
        'required': 'bool',
        'template': 'str',
        'title': 'str',
        'type': 'str',
        'value': 'str'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'editable': 'Editable',
        'key': 'Key',
        'required': 'Required',
        'template': 'Template',
        'title': 'Title',
        'type': 'Type',
        'value': 'Value'
    }

    def __init__(self, object_type=None, editable=None, key=None, required=None, template=None, title=None, type=None, value=None):
        """
        SdwanTemplateInputsType - a model defined in Swagger
        """

        self._object_type = None
        self._editable = None
        self._key = None
        self._required = None
        self._template = None
        self._title = None
        self._type = None
        self._value = None

        if object_type is not None:
          self.object_type = object_type
        if editable is not None:
          self.editable = editable
        if key is not None:
          self.key = key
        if required is not None:
          self.required = required
        if template is not None:
          self.template = template
        if title is not None:
          self.title = title
        if type is not None:
          self.type = type
        if value is not None:
          self.value = value

    @property
    def object_type(self):
        """
        Gets the object_type of this SdwanTemplateInputsType.
        The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.

        :return: The object_type of this SdwanTemplateInputsType.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this SdwanTemplateInputsType.
        The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.

        :param object_type: The object_type of this SdwanTemplateInputsType.
        :type: str
        """

        self._object_type = object_type

    @property
    def editable(self):
        """
        Gets the editable of this SdwanTemplateInputsType.
        Defines if the input is editable.

        :return: The editable of this SdwanTemplateInputsType.
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """
        Sets the editable of this SdwanTemplateInputsType.
        Defines if the input is editable.

        :param editable: The editable of this SdwanTemplateInputsType.
        :type: bool
        """

        self._editable = editable

    @property
    def key(self):
        """
        Gets the key of this SdwanTemplateInputsType.
        Name of the dynamic input key specified in the vManage template.

        :return: The key of this SdwanTemplateInputsType.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this SdwanTemplateInputsType.
        Name of the dynamic input key specified in the vManage template.

        :param key: The key of this SdwanTemplateInputsType.
        :type: str
        """

        self._key = key

    @property
    def required(self):
        """
        Gets the required of this SdwanTemplateInputsType.
        Defines if the input is optional or required.

        :return: The required of this SdwanTemplateInputsType.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """
        Sets the required of this SdwanTemplateInputsType.
        Defines if the input is optional or required.

        :param required: The required of this SdwanTemplateInputsType.
        :type: bool
        """

        self._required = required

    @property
    def template(self):
        """
        Gets the template of this SdwanTemplateInputsType.
        Refers to the name of the vManage template that this inputs belongs to.

        :return: The template of this SdwanTemplateInputsType.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """
        Sets the template of this SdwanTemplateInputsType.
        Refers to the name of the vManage template that this inputs belongs to.

        :param template: The template of this SdwanTemplateInputsType.
        :type: str
        """

        self._template = template

    @property
    def title(self):
        """
        Gets the title of this SdwanTemplateInputsType.
        Label for the property being saved in the current instance of template Input.

        :return: The title of this SdwanTemplateInputsType.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this SdwanTemplateInputsType.
        Label for the property being saved in the current instance of template Input.

        :param title: The title of this SdwanTemplateInputsType.
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """
        Gets the type of this SdwanTemplateInputsType.
        Defines the object type for the input.

        :return: The type of this SdwanTemplateInputsType.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SdwanTemplateInputsType.
        Defines the object type for the input.

        :param type: The type of this SdwanTemplateInputsType.
        :type: str
        """

        self._type = type

    @property
    def value(self):
        """
        Gets the value of this SdwanTemplateInputsType.
        Value of the dynamic input key specfied in the vManage template.

        :return: The value of this SdwanTemplateInputsType.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this SdwanTemplateInputsType.
        Value of the dynamic input key specfied in the vManage template.

        :param value: The value of this SdwanTemplateInputsType.
        :type: str
        """

        self._value = value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SdwanTemplateInputsType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
