# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StorageVirtualDrive(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_policy': 'str',
        'actual_write_cache_policy': 'str',
        'available_size': 'str',
        'block_size': 'str',
        'bootable': 'str',
        'config_state': 'str',
        'configured_write_cache_policy': 'str',
        'connection_protocol': 'str',
        'drive_cache': 'str',
        'drive_security': 'str',
        'drive_state': 'str',
        'io_policy': 'str',
        'name': 'str',
        'num_blocks': 'str',
        'oper_state': 'str',
        'operability': 'str',
        'physical_block_size': 'str',
        'presence': 'str',
        'read_policy': 'str',
        'security_flags': 'str',
        'size': 'str',
        'strip_size': 'str',
        'type': 'str',
        'uuid': 'str',
        'vendor_uuid': 'str',
        'virtual_drive_id': 'str',
        'physical_disk_usages': 'list[StoragePhysicalDiskUsage]',
        'registered_device': 'AssetDeviceRegistration',
        'storage_controller': 'StorageController',
        'vd_member_eps': 'list[StorageVdMemberEp]',
        'virtual_drive_extension': 'StorageVirtualDriveExtension'
    }

    attribute_map = {
        'access_policy': 'AccessPolicy',
        'actual_write_cache_policy': 'ActualWriteCachePolicy',
        'available_size': 'AvailableSize',
        'block_size': 'BlockSize',
        'bootable': 'Bootable',
        'config_state': 'ConfigState',
        'configured_write_cache_policy': 'ConfiguredWriteCachePolicy',
        'connection_protocol': 'ConnectionProtocol',
        'drive_cache': 'DriveCache',
        'drive_security': 'DriveSecurity',
        'drive_state': 'DriveState',
        'io_policy': 'IoPolicy',
        'name': 'Name',
        'num_blocks': 'NumBlocks',
        'oper_state': 'OperState',
        'operability': 'Operability',
        'physical_block_size': 'PhysicalBlockSize',
        'presence': 'Presence',
        'read_policy': 'ReadPolicy',
        'security_flags': 'SecurityFlags',
        'size': 'Size',
        'strip_size': 'StripSize',
        'type': 'Type',
        'uuid': 'Uuid',
        'vendor_uuid': 'VendorUuid',
        'virtual_drive_id': 'VirtualDriveId',
        'physical_disk_usages': 'PhysicalDiskUsages',
        'registered_device': 'RegisteredDevice',
        'storage_controller': 'StorageController',
        'vd_member_eps': 'VdMemberEps',
        'virtual_drive_extension': 'VirtualDriveExtension'
    }

    def __init__(self,
                 access_policy=None,
                 actual_write_cache_policy=None,
                 available_size=None,
                 block_size=None,
                 bootable=None,
                 config_state=None,
                 configured_write_cache_policy=None,
                 connection_protocol=None,
                 drive_cache=None,
                 drive_security=None,
                 drive_state=None,
                 io_policy=None,
                 name=None,
                 num_blocks=None,
                 oper_state=None,
                 operability=None,
                 physical_block_size=None,
                 presence=None,
                 read_policy=None,
                 security_flags=None,
                 size=None,
                 strip_size=None,
                 type=None,
                 uuid=None,
                 vendor_uuid=None,
                 virtual_drive_id=None,
                 physical_disk_usages=None,
                 registered_device=None,
                 storage_controller=None,
                 vd_member_eps=None,
                 virtual_drive_extension=None,
                 local_vars_configuration=None):  # noqa: E501
        """StorageVirtualDrive - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_policy = None
        self._actual_write_cache_policy = None
        self._available_size = None
        self._block_size = None
        self._bootable = None
        self._config_state = None
        self._configured_write_cache_policy = None
        self._connection_protocol = None
        self._drive_cache = None
        self._drive_security = None
        self._drive_state = None
        self._io_policy = None
        self._name = None
        self._num_blocks = None
        self._oper_state = None
        self._operability = None
        self._physical_block_size = None
        self._presence = None
        self._read_policy = None
        self._security_flags = None
        self._size = None
        self._strip_size = None
        self._type = None
        self._uuid = None
        self._vendor_uuid = None
        self._virtual_drive_id = None
        self._physical_disk_usages = None
        self._registered_device = None
        self._storage_controller = None
        self._vd_member_eps = None
        self._virtual_drive_extension = None
        self.discriminator = None

        if access_policy is not None:
            self.access_policy = access_policy
        if actual_write_cache_policy is not None:
            self.actual_write_cache_policy = actual_write_cache_policy
        if available_size is not None:
            self.available_size = available_size
        if block_size is not None:
            self.block_size = block_size
        if bootable is not None:
            self.bootable = bootable
        if config_state is not None:
            self.config_state = config_state
        if configured_write_cache_policy is not None:
            self.configured_write_cache_policy = configured_write_cache_policy
        if connection_protocol is not None:
            self.connection_protocol = connection_protocol
        if drive_cache is not None:
            self.drive_cache = drive_cache
        if drive_security is not None:
            self.drive_security = drive_security
        if drive_state is not None:
            self.drive_state = drive_state
        if io_policy is not None:
            self.io_policy = io_policy
        if name is not None:
            self.name = name
        if num_blocks is not None:
            self.num_blocks = num_blocks
        if oper_state is not None:
            self.oper_state = oper_state
        if operability is not None:
            self.operability = operability
        if physical_block_size is not None:
            self.physical_block_size = physical_block_size
        if presence is not None:
            self.presence = presence
        if read_policy is not None:
            self.read_policy = read_policy
        if security_flags is not None:
            self.security_flags = security_flags
        if size is not None:
            self.size = size
        if strip_size is not None:
            self.strip_size = strip_size
        if type is not None:
            self.type = type
        if uuid is not None:
            self.uuid = uuid
        if vendor_uuid is not None:
            self.vendor_uuid = vendor_uuid
        if virtual_drive_id is not None:
            self.virtual_drive_id = virtual_drive_id
        if physical_disk_usages is not None:
            self.physical_disk_usages = physical_disk_usages
        if registered_device is not None:
            self.registered_device = registered_device
        if storage_controller is not None:
            self.storage_controller = storage_controller
        if vd_member_eps is not None:
            self.vd_member_eps = vd_member_eps
        if virtual_drive_extension is not None:
            self.virtual_drive_extension = virtual_drive_extension

    @property
    def access_policy(self):
        """Gets the access_policy of this StorageVirtualDrive.  # noqa: E501


        :return: The access_policy of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._access_policy

    @access_policy.setter
    def access_policy(self, access_policy):
        """Sets the access_policy of this StorageVirtualDrive.


        :param access_policy: The access_policy of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._access_policy = access_policy

    @property
    def actual_write_cache_policy(self):
        """Gets the actual_write_cache_policy of this StorageVirtualDrive.  # noqa: E501


        :return: The actual_write_cache_policy of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._actual_write_cache_policy

    @actual_write_cache_policy.setter
    def actual_write_cache_policy(self, actual_write_cache_policy):
        """Sets the actual_write_cache_policy of this StorageVirtualDrive.


        :param actual_write_cache_policy: The actual_write_cache_policy of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._actual_write_cache_policy = actual_write_cache_policy

    @property
    def available_size(self):
        """Gets the available_size of this StorageVirtualDrive.  # noqa: E501


        :return: The available_size of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._available_size

    @available_size.setter
    def available_size(self, available_size):
        """Sets the available_size of this StorageVirtualDrive.


        :param available_size: The available_size of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._available_size = available_size

    @property
    def block_size(self):
        """Gets the block_size of this StorageVirtualDrive.  # noqa: E501


        :return: The block_size of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this StorageVirtualDrive.


        :param block_size: The block_size of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._block_size = block_size

    @property
    def bootable(self):
        """Gets the bootable of this StorageVirtualDrive.  # noqa: E501


        :return: The bootable of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._bootable

    @bootable.setter
    def bootable(self, bootable):
        """Sets the bootable of this StorageVirtualDrive.


        :param bootable: The bootable of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._bootable = bootable

    @property
    def config_state(self):
        """Gets the config_state of this StorageVirtualDrive.  # noqa: E501


        :return: The config_state of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._config_state

    @config_state.setter
    def config_state(self, config_state):
        """Sets the config_state of this StorageVirtualDrive.


        :param config_state: The config_state of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._config_state = config_state

    @property
    def configured_write_cache_policy(self):
        """Gets the configured_write_cache_policy of this StorageVirtualDrive.  # noqa: E501


        :return: The configured_write_cache_policy of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._configured_write_cache_policy

    @configured_write_cache_policy.setter
    def configured_write_cache_policy(self, configured_write_cache_policy):
        """Sets the configured_write_cache_policy of this StorageVirtualDrive.


        :param configured_write_cache_policy: The configured_write_cache_policy of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._configured_write_cache_policy = configured_write_cache_policy

    @property
    def connection_protocol(self):
        """Gets the connection_protocol of this StorageVirtualDrive.  # noqa: E501


        :return: The connection_protocol of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._connection_protocol

    @connection_protocol.setter
    def connection_protocol(self, connection_protocol):
        """Sets the connection_protocol of this StorageVirtualDrive.


        :param connection_protocol: The connection_protocol of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._connection_protocol = connection_protocol

    @property
    def drive_cache(self):
        """Gets the drive_cache of this StorageVirtualDrive.  # noqa: E501


        :return: The drive_cache of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._drive_cache

    @drive_cache.setter
    def drive_cache(self, drive_cache):
        """Sets the drive_cache of this StorageVirtualDrive.


        :param drive_cache: The drive_cache of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._drive_cache = drive_cache

    @property
    def drive_security(self):
        """Gets the drive_security of this StorageVirtualDrive.  # noqa: E501


        :return: The drive_security of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._drive_security

    @drive_security.setter
    def drive_security(self, drive_security):
        """Sets the drive_security of this StorageVirtualDrive.


        :param drive_security: The drive_security of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._drive_security = drive_security

    @property
    def drive_state(self):
        """Gets the drive_state of this StorageVirtualDrive.  # noqa: E501

        It shows the Virtual drive state.    # noqa: E501

        :return: The drive_state of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._drive_state

    @drive_state.setter
    def drive_state(self, drive_state):
        """Sets the drive_state of this StorageVirtualDrive.

        It shows the Virtual drive state.    # noqa: E501

        :param drive_state: The drive_state of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._drive_state = drive_state

    @property
    def io_policy(self):
        """Gets the io_policy of this StorageVirtualDrive.  # noqa: E501


        :return: The io_policy of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._io_policy

    @io_policy.setter
    def io_policy(self, io_policy):
        """Sets the io_policy of this StorageVirtualDrive.


        :param io_policy: The io_policy of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._io_policy = io_policy

    @property
    def name(self):
        """Gets the name of this StorageVirtualDrive.  # noqa: E501


        :return: The name of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageVirtualDrive.


        :param name: The name of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def num_blocks(self):
        """Gets the num_blocks of this StorageVirtualDrive.  # noqa: E501


        :return: The num_blocks of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._num_blocks

    @num_blocks.setter
    def num_blocks(self, num_blocks):
        """Sets the num_blocks of this StorageVirtualDrive.


        :param num_blocks: The num_blocks of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._num_blocks = num_blocks

    @property
    def oper_state(self):
        """Gets the oper_state of this StorageVirtualDrive.  # noqa: E501

        It shows the current operational state of Virtual drive.    # noqa: E501

        :return: The oper_state of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._oper_state

    @oper_state.setter
    def oper_state(self, oper_state):
        """Sets the oper_state of this StorageVirtualDrive.

        It shows the current operational state of Virtual drive.    # noqa: E501

        :param oper_state: The oper_state of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._oper_state = oper_state

    @property
    def operability(self):
        """Gets the operability of this StorageVirtualDrive.  # noqa: E501


        :return: The operability of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._operability

    @operability.setter
    def operability(self, operability):
        """Sets the operability of this StorageVirtualDrive.


        :param operability: The operability of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._operability = operability

    @property
    def physical_block_size(self):
        """Gets the physical_block_size of this StorageVirtualDrive.  # noqa: E501


        :return: The physical_block_size of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._physical_block_size

    @physical_block_size.setter
    def physical_block_size(self, physical_block_size):
        """Sets the physical_block_size of this StorageVirtualDrive.


        :param physical_block_size: The physical_block_size of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._physical_block_size = physical_block_size

    @property
    def presence(self):
        """Gets the presence of this StorageVirtualDrive.  # noqa: E501


        :return: The presence of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """Sets the presence of this StorageVirtualDrive.


        :param presence: The presence of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._presence = presence

    @property
    def read_policy(self):
        """Gets the read_policy of this StorageVirtualDrive.  # noqa: E501


        :return: The read_policy of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._read_policy

    @read_policy.setter
    def read_policy(self, read_policy):
        """Sets the read_policy of this StorageVirtualDrive.


        :param read_policy: The read_policy of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._read_policy = read_policy

    @property
    def security_flags(self):
        """Gets the security_flags of this StorageVirtualDrive.  # noqa: E501


        :return: The security_flags of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._security_flags

    @security_flags.setter
    def security_flags(self, security_flags):
        """Sets the security_flags of this StorageVirtualDrive.


        :param security_flags: The security_flags of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._security_flags = security_flags

    @property
    def size(self):
        """Gets the size of this StorageVirtualDrive.  # noqa: E501


        :return: The size of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this StorageVirtualDrive.


        :param size: The size of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def strip_size(self):
        """Gets the strip_size of this StorageVirtualDrive.  # noqa: E501

        The strip size is the portion of a stripe that resides on a single drive in the drive group, this is measured in KB.    # noqa: E501

        :return: The strip_size of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._strip_size

    @strip_size.setter
    def strip_size(self, strip_size):
        """Sets the strip_size of this StorageVirtualDrive.

        The strip size is the portion of a stripe that resides on a single drive in the drive group, this is measured in KB.    # noqa: E501

        :param strip_size: The strip_size of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._strip_size = strip_size

    @property
    def type(self):
        """Gets the type of this StorageVirtualDrive.  # noqa: E501


        :return: The type of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StorageVirtualDrive.


        :param type: The type of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uuid(self):
        """Gets the uuid of this StorageVirtualDrive.  # noqa: E501


        :return: The uuid of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this StorageVirtualDrive.


        :param uuid: The uuid of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def vendor_uuid(self):
        """Gets the vendor_uuid of this StorageVirtualDrive.  # noqa: E501


        :return: The vendor_uuid of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._vendor_uuid

    @vendor_uuid.setter
    def vendor_uuid(self, vendor_uuid):
        """Sets the vendor_uuid of this StorageVirtualDrive.


        :param vendor_uuid: The vendor_uuid of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._vendor_uuid = vendor_uuid

    @property
    def virtual_drive_id(self):
        """Gets the virtual_drive_id of this StorageVirtualDrive.  # noqa: E501


        :return: The virtual_drive_id of this StorageVirtualDrive.  # noqa: E501
        :rtype: str
        """
        return self._virtual_drive_id

    @virtual_drive_id.setter
    def virtual_drive_id(self, virtual_drive_id):
        """Sets the virtual_drive_id of this StorageVirtualDrive.


        :param virtual_drive_id: The virtual_drive_id of this StorageVirtualDrive.  # noqa: E501
        :type: str
        """

        self._virtual_drive_id = virtual_drive_id

    @property
    def physical_disk_usages(self):
        """Gets the physical_disk_usages of this StorageVirtualDrive.  # noqa: E501

        A reference to a storagePhysicalDiskUsage resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :return: The physical_disk_usages of this StorageVirtualDrive.  # noqa: E501
        :rtype: list[StoragePhysicalDiskUsage]
        """
        return self._physical_disk_usages

    @physical_disk_usages.setter
    def physical_disk_usages(self, physical_disk_usages):
        """Sets the physical_disk_usages of this StorageVirtualDrive.

        A reference to a storagePhysicalDiskUsage resource. When the $expand query parameter is specified, the referenced resource is returned inline.   # noqa: E501

        :param physical_disk_usages: The physical_disk_usages of this StorageVirtualDrive.  # noqa: E501
        :type: list[StoragePhysicalDiskUsage]
        """

        self._physical_disk_usages = physical_disk_usages

    @property
    def registered_device(self):
        """Gets the registered_device of this StorageVirtualDrive.  # noqa: E501


        :return: The registered_device of this StorageVirtualDrive.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this StorageVirtualDrive.


        :param registered_device: The registered_device of this StorageVirtualDrive.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    @property
    def storage_controller(self):
        """Gets the storage_controller of this StorageVirtualDrive.  # noqa: E501


        :return: The storage_controller of this StorageVirtualDrive.  # noqa: E501
        :rtype: StorageController
        """
        return self._storage_controller

    @storage_controller.setter
    def storage_controller(self, storage_controller):
        """Sets the storage_controller of this StorageVirtualDrive.


        :param storage_controller: The storage_controller of this StorageVirtualDrive.  # noqa: E501
        :type: StorageController
        """

        self._storage_controller = storage_controller

    @property
    def vd_member_eps(self):
        """Gets the vd_member_eps of this StorageVirtualDrive.  # noqa: E501

        A reference to a storageVdMemberEp resource. When the $expand query parameter is specified, the referenced resource is returned inline. It is a reference to LocalDisk to build up a VirtualDrive.   # noqa: E501

        :return: The vd_member_eps of this StorageVirtualDrive.  # noqa: E501
        :rtype: list[StorageVdMemberEp]
        """
        return self._vd_member_eps

    @vd_member_eps.setter
    def vd_member_eps(self, vd_member_eps):
        """Sets the vd_member_eps of this StorageVirtualDrive.

        A reference to a storageVdMemberEp resource. When the $expand query parameter is specified, the referenced resource is returned inline. It is a reference to LocalDisk to build up a VirtualDrive.   # noqa: E501

        :param vd_member_eps: The vd_member_eps of this StorageVirtualDrive.  # noqa: E501
        :type: list[StorageVdMemberEp]
        """

        self._vd_member_eps = vd_member_eps

    @property
    def virtual_drive_extension(self):
        """Gets the virtual_drive_extension of this StorageVirtualDrive.  # noqa: E501


        :return: The virtual_drive_extension of this StorageVirtualDrive.  # noqa: E501
        :rtype: StorageVirtualDriveExtension
        """
        return self._virtual_drive_extension

    @virtual_drive_extension.setter
    def virtual_drive_extension(self, virtual_drive_extension):
        """Sets the virtual_drive_extension of this StorageVirtualDrive.


        :param virtual_drive_extension: The virtual_drive_extension of this StorageVirtualDrive.  # noqa: E501
        :type: StorageVirtualDriveExtension
        """

        self._virtual_drive_extension = virtual_drive_extension

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageVirtualDrive):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageVirtualDrive):
            return True

        return self.to_dict() != other.to_dict()
