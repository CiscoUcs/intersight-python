# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-228
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StorageVirtualDrive(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'ancestors': 'list[MoBaseMoRef]',
        'create_time': 'datetime',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'parent': 'MoBaseMoRef',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'device_mo_id': 'str',
        'dn': 'str',
        'rn': 'str',
        'model': 'str',
        'revision': 'str',
        'serial': 'str',
        'vendor': 'str',
        'access_policy': 'str',
        'actual_write_cache_policy': 'str',
        'available_size': 'str',
        'block_size': 'str',
        'bootable': 'str',
        'config_state': 'str',
        'configured_write_cache_policy': 'str',
        'connection_protocol': 'str',
        'drive_cache': 'str',
        'drive_security': 'str',
        'drive_state': 'str',
        'io_policy': 'str',
        'name': 'str',
        'num_blocks': 'str',
        'oper_state': 'str',
        'operability': 'str',
        'physical_block_size': 'str',
        'physical_disk_usages': 'list[StoragePhysicalDiskUsageRef]',
        'presence': 'str',
        'read_policy': 'str',
        'registered_device': 'AssetDeviceRegistrationRef',
        'security_flags': 'str',
        'size': 'str',
        'storage_controller': 'StorageControllerRef',
        'strip_size': 'str',
        'type': 'str',
        'uuid': 'str',
        'vd_member_eps': 'list[StorageVdMemberEpRef]',
        'vendor_uuid': 'str',
        'virtual_drive_extension': 'StorageVirtualDriveExtensionRef',
        'virtual_drive_id': 'str'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'ancestors': 'Ancestors',
        'create_time': 'CreateTime',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'parent': 'Parent',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'device_mo_id': 'DeviceMoId',
        'dn': 'Dn',
        'rn': 'Rn',
        'model': 'Model',
        'revision': 'Revision',
        'serial': 'Serial',
        'vendor': 'Vendor',
        'access_policy': 'AccessPolicy',
        'actual_write_cache_policy': 'ActualWriteCachePolicy',
        'available_size': 'AvailableSize',
        'block_size': 'BlockSize',
        'bootable': 'Bootable',
        'config_state': 'ConfigState',
        'configured_write_cache_policy': 'ConfiguredWriteCachePolicy',
        'connection_protocol': 'ConnectionProtocol',
        'drive_cache': 'DriveCache',
        'drive_security': 'DriveSecurity',
        'drive_state': 'DriveState',
        'io_policy': 'IoPolicy',
        'name': 'Name',
        'num_blocks': 'NumBlocks',
        'oper_state': 'OperState',
        'operability': 'Operability',
        'physical_block_size': 'PhysicalBlockSize',
        'physical_disk_usages': 'PhysicalDiskUsages',
        'presence': 'Presence',
        'read_policy': 'ReadPolicy',
        'registered_device': 'RegisteredDevice',
        'security_flags': 'SecurityFlags',
        'size': 'Size',
        'storage_controller': 'StorageController',
        'strip_size': 'StripSize',
        'type': 'Type',
        'uuid': 'Uuid',
        'vd_member_eps': 'VdMemberEps',
        'vendor_uuid': 'VendorUuid',
        'virtual_drive_extension': 'VirtualDriveExtension',
        'virtual_drive_id': 'VirtualDriveId'
    }

    def __init__(self, account_moid=None, ancestors=None, create_time=None, mod_time=None, moid=None, object_type=None, owners=None, parent=None, tags=None, version_context=None, device_mo_id=None, dn=None, rn=None, model=None, revision=None, serial=None, vendor=None, access_policy=None, actual_write_cache_policy=None, available_size=None, block_size=None, bootable=None, config_state=None, configured_write_cache_policy=None, connection_protocol=None, drive_cache=None, drive_security=None, drive_state=None, io_policy=None, name=None, num_blocks=None, oper_state=None, operability=None, physical_block_size=None, physical_disk_usages=None, presence=None, read_policy=None, registered_device=None, security_flags=None, size=None, storage_controller=None, strip_size=None, type=None, uuid=None, vd_member_eps=None, vendor_uuid=None, virtual_drive_extension=None, virtual_drive_id=None):
        """
        StorageVirtualDrive - a model defined in Swagger
        """

        self._account_moid = None
        self._ancestors = None
        self._create_time = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._parent = None
        self._tags = None
        self._version_context = None
        self._device_mo_id = None
        self._dn = None
        self._rn = None
        self._model = None
        self._revision = None
        self._serial = None
        self._vendor = None
        self._access_policy = None
        self._actual_write_cache_policy = None
        self._available_size = None
        self._block_size = None
        self._bootable = None
        self._config_state = None
        self._configured_write_cache_policy = None
        self._connection_protocol = None
        self._drive_cache = None
        self._drive_security = None
        self._drive_state = None
        self._io_policy = None
        self._name = None
        self._num_blocks = None
        self._oper_state = None
        self._operability = None
        self._physical_block_size = None
        self._physical_disk_usages = None
        self._presence = None
        self._read_policy = None
        self._registered_device = None
        self._security_flags = None
        self._size = None
        self._storage_controller = None
        self._strip_size = None
        self._type = None
        self._uuid = None
        self._vd_member_eps = None
        self._vendor_uuid = None
        self._virtual_drive_extension = None
        self._virtual_drive_id = None

        if account_moid is not None:
          self.account_moid = account_moid
        if ancestors is not None:
          self.ancestors = ancestors
        if create_time is not None:
          self.create_time = create_time
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if parent is not None:
          self.parent = parent
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if device_mo_id is not None:
          self.device_mo_id = device_mo_id
        if dn is not None:
          self.dn = dn
        if rn is not None:
          self.rn = rn
        if model is not None:
          self.model = model
        if revision is not None:
          self.revision = revision
        if serial is not None:
          self.serial = serial
        if vendor is not None:
          self.vendor = vendor
        if access_policy is not None:
          self.access_policy = access_policy
        if actual_write_cache_policy is not None:
          self.actual_write_cache_policy = actual_write_cache_policy
        if available_size is not None:
          self.available_size = available_size
        if block_size is not None:
          self.block_size = block_size
        if bootable is not None:
          self.bootable = bootable
        if config_state is not None:
          self.config_state = config_state
        if configured_write_cache_policy is not None:
          self.configured_write_cache_policy = configured_write_cache_policy
        if connection_protocol is not None:
          self.connection_protocol = connection_protocol
        if drive_cache is not None:
          self.drive_cache = drive_cache
        if drive_security is not None:
          self.drive_security = drive_security
        if drive_state is not None:
          self.drive_state = drive_state
        if io_policy is not None:
          self.io_policy = io_policy
        if name is not None:
          self.name = name
        if num_blocks is not None:
          self.num_blocks = num_blocks
        if oper_state is not None:
          self.oper_state = oper_state
        if operability is not None:
          self.operability = operability
        if physical_block_size is not None:
          self.physical_block_size = physical_block_size
        if physical_disk_usages is not None:
          self.physical_disk_usages = physical_disk_usages
        if presence is not None:
          self.presence = presence
        if read_policy is not None:
          self.read_policy = read_policy
        if registered_device is not None:
          self.registered_device = registered_device
        if security_flags is not None:
          self.security_flags = security_flags
        if size is not None:
          self.size = size
        if storage_controller is not None:
          self.storage_controller = storage_controller
        if strip_size is not None:
          self.strip_size = strip_size
        if type is not None:
          self.type = type
        if uuid is not None:
          self.uuid = uuid
        if vd_member_eps is not None:
          self.vd_member_eps = vd_member_eps
        if vendor_uuid is not None:
          self.vendor_uuid = vendor_uuid
        if virtual_drive_extension is not None:
          self.virtual_drive_extension = virtual_drive_extension
        if virtual_drive_id is not None:
          self.virtual_drive_id = virtual_drive_id

    @property
    def account_moid(self):
        """
        Gets the account_moid of this StorageVirtualDrive.
        The Account ID for this managed object.  

        :return: The account_moid of this StorageVirtualDrive.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this StorageVirtualDrive.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this StorageVirtualDrive.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def ancestors(self):
        """
        Gets the ancestors of this StorageVirtualDrive.
        Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this StorageVirtualDrive.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this StorageVirtualDrive.
        Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this StorageVirtualDrive.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def create_time(self):
        """
        Gets the create_time of this StorageVirtualDrive.
        The time when this managed object was created.  

        :return: The create_time of this StorageVirtualDrive.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this StorageVirtualDrive.
        The time when this managed object was created.  

        :param create_time: The create_time of this StorageVirtualDrive.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def mod_time(self):
        """
        Gets the mod_time of this StorageVirtualDrive.
        The time when this managed object was last modified.  

        :return: The mod_time of this StorageVirtualDrive.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this StorageVirtualDrive.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this StorageVirtualDrive.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this StorageVirtualDrive.
        A unique identifier of this Managed Object instance.  

        :return: The moid of this StorageVirtualDrive.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this StorageVirtualDrive.
        A unique identifier of this Managed Object instance.  

        :param moid: The moid of this StorageVirtualDrive.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this StorageVirtualDrive.
        The fully-qualified type of this managed object, e.g. the class name.  

        :return: The object_type of this StorageVirtualDrive.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this StorageVirtualDrive.
        The fully-qualified type of this managed object, e.g. the class name.  

        :param object_type: The object_type of this StorageVirtualDrive.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this StorageVirtualDrive.
        An array of owners which represent effective ownership of this object.   

        :return: The owners of this StorageVirtualDrive.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this StorageVirtualDrive.
        An array of owners which represent effective ownership of this object.   

        :param owners: The owners of this StorageVirtualDrive.
        :type: list[str]
        """

        self._owners = owners

    @property
    def parent(self):
        """
        Gets the parent of this StorageVirtualDrive.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this StorageVirtualDrive.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this StorageVirtualDrive.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this StorageVirtualDrive.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def tags(self):
        """
        Gets the tags of this StorageVirtualDrive.
        An array of tags, which allow to add key, value meta-data to managed objects.  

        :return: The tags of this StorageVirtualDrive.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this StorageVirtualDrive.
        An array of tags, which allow to add key, value meta-data to managed objects.  

        :param tags: The tags of this StorageVirtualDrive.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this StorageVirtualDrive.
        The versioning info for this managed object   

        :return: The version_context of this StorageVirtualDrive.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this StorageVirtualDrive.
        The versioning info for this managed object   

        :param version_context: The version_context of this StorageVirtualDrive.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def device_mo_id(self):
        """
        Gets the device_mo_id of this StorageVirtualDrive.

        :return: The device_mo_id of this StorageVirtualDrive.
        :rtype: str
        """
        return self._device_mo_id

    @device_mo_id.setter
    def device_mo_id(self, device_mo_id):
        """
        Sets the device_mo_id of this StorageVirtualDrive.

        :param device_mo_id: The device_mo_id of this StorageVirtualDrive.
        :type: str
        """

        self._device_mo_id = device_mo_id

    @property
    def dn(self):
        """
        Gets the dn of this StorageVirtualDrive.

        :return: The dn of this StorageVirtualDrive.
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """
        Sets the dn of this StorageVirtualDrive.

        :param dn: The dn of this StorageVirtualDrive.
        :type: str
        """

        self._dn = dn

    @property
    def rn(self):
        """
        Gets the rn of this StorageVirtualDrive.

        :return: The rn of this StorageVirtualDrive.
        :rtype: str
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """
        Sets the rn of this StorageVirtualDrive.

        :param rn: The rn of this StorageVirtualDrive.
        :type: str
        """

        self._rn = rn

    @property
    def model(self):
        """
        Gets the model of this StorageVirtualDrive.

        :return: The model of this StorageVirtualDrive.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this StorageVirtualDrive.

        :param model: The model of this StorageVirtualDrive.
        :type: str
        """

        self._model = model

    @property
    def revision(self):
        """
        Gets the revision of this StorageVirtualDrive.

        :return: The revision of this StorageVirtualDrive.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this StorageVirtualDrive.

        :param revision: The revision of this StorageVirtualDrive.
        :type: str
        """

        self._revision = revision

    @property
    def serial(self):
        """
        Gets the serial of this StorageVirtualDrive.

        :return: The serial of this StorageVirtualDrive.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """
        Sets the serial of this StorageVirtualDrive.

        :param serial: The serial of this StorageVirtualDrive.
        :type: str
        """

        self._serial = serial

    @property
    def vendor(self):
        """
        Gets the vendor of this StorageVirtualDrive.

        :return: The vendor of this StorageVirtualDrive.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """
        Sets the vendor of this StorageVirtualDrive.

        :param vendor: The vendor of this StorageVirtualDrive.
        :type: str
        """

        self._vendor = vendor

    @property
    def access_policy(self):
        """
        Gets the access_policy of this StorageVirtualDrive.

        :return: The access_policy of this StorageVirtualDrive.
        :rtype: str
        """
        return self._access_policy

    @access_policy.setter
    def access_policy(self, access_policy):
        """
        Sets the access_policy of this StorageVirtualDrive.

        :param access_policy: The access_policy of this StorageVirtualDrive.
        :type: str
        """

        self._access_policy = access_policy

    @property
    def actual_write_cache_policy(self):
        """
        Gets the actual_write_cache_policy of this StorageVirtualDrive.

        :return: The actual_write_cache_policy of this StorageVirtualDrive.
        :rtype: str
        """
        return self._actual_write_cache_policy

    @actual_write_cache_policy.setter
    def actual_write_cache_policy(self, actual_write_cache_policy):
        """
        Sets the actual_write_cache_policy of this StorageVirtualDrive.

        :param actual_write_cache_policy: The actual_write_cache_policy of this StorageVirtualDrive.
        :type: str
        """

        self._actual_write_cache_policy = actual_write_cache_policy

    @property
    def available_size(self):
        """
        Gets the available_size of this StorageVirtualDrive.

        :return: The available_size of this StorageVirtualDrive.
        :rtype: str
        """
        return self._available_size

    @available_size.setter
    def available_size(self, available_size):
        """
        Sets the available_size of this StorageVirtualDrive.

        :param available_size: The available_size of this StorageVirtualDrive.
        :type: str
        """

        self._available_size = available_size

    @property
    def block_size(self):
        """
        Gets the block_size of this StorageVirtualDrive.

        :return: The block_size of this StorageVirtualDrive.
        :rtype: str
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """
        Sets the block_size of this StorageVirtualDrive.

        :param block_size: The block_size of this StorageVirtualDrive.
        :type: str
        """

        self._block_size = block_size

    @property
    def bootable(self):
        """
        Gets the bootable of this StorageVirtualDrive.

        :return: The bootable of this StorageVirtualDrive.
        :rtype: str
        """
        return self._bootable

    @bootable.setter
    def bootable(self, bootable):
        """
        Sets the bootable of this StorageVirtualDrive.

        :param bootable: The bootable of this StorageVirtualDrive.
        :type: str
        """

        self._bootable = bootable

    @property
    def config_state(self):
        """
        Gets the config_state of this StorageVirtualDrive.

        :return: The config_state of this StorageVirtualDrive.
        :rtype: str
        """
        return self._config_state

    @config_state.setter
    def config_state(self, config_state):
        """
        Sets the config_state of this StorageVirtualDrive.

        :param config_state: The config_state of this StorageVirtualDrive.
        :type: str
        """

        self._config_state = config_state

    @property
    def configured_write_cache_policy(self):
        """
        Gets the configured_write_cache_policy of this StorageVirtualDrive.

        :return: The configured_write_cache_policy of this StorageVirtualDrive.
        :rtype: str
        """
        return self._configured_write_cache_policy

    @configured_write_cache_policy.setter
    def configured_write_cache_policy(self, configured_write_cache_policy):
        """
        Sets the configured_write_cache_policy of this StorageVirtualDrive.

        :param configured_write_cache_policy: The configured_write_cache_policy of this StorageVirtualDrive.
        :type: str
        """

        self._configured_write_cache_policy = configured_write_cache_policy

    @property
    def connection_protocol(self):
        """
        Gets the connection_protocol of this StorageVirtualDrive.

        :return: The connection_protocol of this StorageVirtualDrive.
        :rtype: str
        """
        return self._connection_protocol

    @connection_protocol.setter
    def connection_protocol(self, connection_protocol):
        """
        Sets the connection_protocol of this StorageVirtualDrive.

        :param connection_protocol: The connection_protocol of this StorageVirtualDrive.
        :type: str
        """

        self._connection_protocol = connection_protocol

    @property
    def drive_cache(self):
        """
        Gets the drive_cache of this StorageVirtualDrive.

        :return: The drive_cache of this StorageVirtualDrive.
        :rtype: str
        """
        return self._drive_cache

    @drive_cache.setter
    def drive_cache(self, drive_cache):
        """
        Sets the drive_cache of this StorageVirtualDrive.

        :param drive_cache: The drive_cache of this StorageVirtualDrive.
        :type: str
        """

        self._drive_cache = drive_cache

    @property
    def drive_security(self):
        """
        Gets the drive_security of this StorageVirtualDrive.

        :return: The drive_security of this StorageVirtualDrive.
        :rtype: str
        """
        return self._drive_security

    @drive_security.setter
    def drive_security(self, drive_security):
        """
        Sets the drive_security of this StorageVirtualDrive.

        :param drive_security: The drive_security of this StorageVirtualDrive.
        :type: str
        """

        self._drive_security = drive_security

    @property
    def drive_state(self):
        """
        Gets the drive_state of this StorageVirtualDrive.

        :return: The drive_state of this StorageVirtualDrive.
        :rtype: str
        """
        return self._drive_state

    @drive_state.setter
    def drive_state(self, drive_state):
        """
        Sets the drive_state of this StorageVirtualDrive.

        :param drive_state: The drive_state of this StorageVirtualDrive.
        :type: str
        """

        self._drive_state = drive_state

    @property
    def io_policy(self):
        """
        Gets the io_policy of this StorageVirtualDrive.

        :return: The io_policy of this StorageVirtualDrive.
        :rtype: str
        """
        return self._io_policy

    @io_policy.setter
    def io_policy(self, io_policy):
        """
        Sets the io_policy of this StorageVirtualDrive.

        :param io_policy: The io_policy of this StorageVirtualDrive.
        :type: str
        """

        self._io_policy = io_policy

    @property
    def name(self):
        """
        Gets the name of this StorageVirtualDrive.

        :return: The name of this StorageVirtualDrive.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this StorageVirtualDrive.

        :param name: The name of this StorageVirtualDrive.
        :type: str
        """

        self._name = name

    @property
    def num_blocks(self):
        """
        Gets the num_blocks of this StorageVirtualDrive.

        :return: The num_blocks of this StorageVirtualDrive.
        :rtype: str
        """
        return self._num_blocks

    @num_blocks.setter
    def num_blocks(self, num_blocks):
        """
        Sets the num_blocks of this StorageVirtualDrive.

        :param num_blocks: The num_blocks of this StorageVirtualDrive.
        :type: str
        """

        self._num_blocks = num_blocks

    @property
    def oper_state(self):
        """
        Gets the oper_state of this StorageVirtualDrive.

        :return: The oper_state of this StorageVirtualDrive.
        :rtype: str
        """
        return self._oper_state

    @oper_state.setter
    def oper_state(self, oper_state):
        """
        Sets the oper_state of this StorageVirtualDrive.

        :param oper_state: The oper_state of this StorageVirtualDrive.
        :type: str
        """

        self._oper_state = oper_state

    @property
    def operability(self):
        """
        Gets the operability of this StorageVirtualDrive.

        :return: The operability of this StorageVirtualDrive.
        :rtype: str
        """
        return self._operability

    @operability.setter
    def operability(self, operability):
        """
        Sets the operability of this StorageVirtualDrive.

        :param operability: The operability of this StorageVirtualDrive.
        :type: str
        """

        self._operability = operability

    @property
    def physical_block_size(self):
        """
        Gets the physical_block_size of this StorageVirtualDrive.

        :return: The physical_block_size of this StorageVirtualDrive.
        :rtype: str
        """
        return self._physical_block_size

    @physical_block_size.setter
    def physical_block_size(self, physical_block_size):
        """
        Sets the physical_block_size of this StorageVirtualDrive.

        :param physical_block_size: The physical_block_size of this StorageVirtualDrive.
        :type: str
        """

        self._physical_block_size = physical_block_size

    @property
    def physical_disk_usages(self):
        """
        Gets the physical_disk_usages of this StorageVirtualDrive.

        :return: The physical_disk_usages of this StorageVirtualDrive.
        :rtype: list[StoragePhysicalDiskUsageRef]
        """
        return self._physical_disk_usages

    @physical_disk_usages.setter
    def physical_disk_usages(self, physical_disk_usages):
        """
        Sets the physical_disk_usages of this StorageVirtualDrive.

        :param physical_disk_usages: The physical_disk_usages of this StorageVirtualDrive.
        :type: list[StoragePhysicalDiskUsageRef]
        """

        self._physical_disk_usages = physical_disk_usages

    @property
    def presence(self):
        """
        Gets the presence of this StorageVirtualDrive.

        :return: The presence of this StorageVirtualDrive.
        :rtype: str
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """
        Sets the presence of this StorageVirtualDrive.

        :param presence: The presence of this StorageVirtualDrive.
        :type: str
        """

        self._presence = presence

    @property
    def read_policy(self):
        """
        Gets the read_policy of this StorageVirtualDrive.

        :return: The read_policy of this StorageVirtualDrive.
        :rtype: str
        """
        return self._read_policy

    @read_policy.setter
    def read_policy(self, read_policy):
        """
        Sets the read_policy of this StorageVirtualDrive.

        :param read_policy: The read_policy of this StorageVirtualDrive.
        :type: str
        """

        self._read_policy = read_policy

    @property
    def registered_device(self):
        """
        Gets the registered_device of this StorageVirtualDrive.

        :return: The registered_device of this StorageVirtualDrive.
        :rtype: AssetDeviceRegistrationRef
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """
        Sets the registered_device of this StorageVirtualDrive.

        :param registered_device: The registered_device of this StorageVirtualDrive.
        :type: AssetDeviceRegistrationRef
        """

        self._registered_device = registered_device

    @property
    def security_flags(self):
        """
        Gets the security_flags of this StorageVirtualDrive.

        :return: The security_flags of this StorageVirtualDrive.
        :rtype: str
        """
        return self._security_flags

    @security_flags.setter
    def security_flags(self, security_flags):
        """
        Sets the security_flags of this StorageVirtualDrive.

        :param security_flags: The security_flags of this StorageVirtualDrive.
        :type: str
        """

        self._security_flags = security_flags

    @property
    def size(self):
        """
        Gets the size of this StorageVirtualDrive.

        :return: The size of this StorageVirtualDrive.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this StorageVirtualDrive.

        :param size: The size of this StorageVirtualDrive.
        :type: str
        """

        self._size = size

    @property
    def storage_controller(self):
        """
        Gets the storage_controller of this StorageVirtualDrive.

        :return: The storage_controller of this StorageVirtualDrive.
        :rtype: StorageControllerRef
        """
        return self._storage_controller

    @storage_controller.setter
    def storage_controller(self, storage_controller):
        """
        Sets the storage_controller of this StorageVirtualDrive.

        :param storage_controller: The storage_controller of this StorageVirtualDrive.
        :type: StorageControllerRef
        """

        self._storage_controller = storage_controller

    @property
    def strip_size(self):
        """
        Gets the strip_size of this StorageVirtualDrive.

        :return: The strip_size of this StorageVirtualDrive.
        :rtype: str
        """
        return self._strip_size

    @strip_size.setter
    def strip_size(self, strip_size):
        """
        Sets the strip_size of this StorageVirtualDrive.

        :param strip_size: The strip_size of this StorageVirtualDrive.
        :type: str
        """

        self._strip_size = strip_size

    @property
    def type(self):
        """
        Gets the type of this StorageVirtualDrive.

        :return: The type of this StorageVirtualDrive.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this StorageVirtualDrive.

        :param type: The type of this StorageVirtualDrive.
        :type: str
        """

        self._type = type

    @property
    def uuid(self):
        """
        Gets the uuid of this StorageVirtualDrive.

        :return: The uuid of this StorageVirtualDrive.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this StorageVirtualDrive.

        :param uuid: The uuid of this StorageVirtualDrive.
        :type: str
        """

        self._uuid = uuid

    @property
    def vd_member_eps(self):
        """
        Gets the vd_member_eps of this StorageVirtualDrive.

        :return: The vd_member_eps of this StorageVirtualDrive.
        :rtype: list[StorageVdMemberEpRef]
        """
        return self._vd_member_eps

    @vd_member_eps.setter
    def vd_member_eps(self, vd_member_eps):
        """
        Sets the vd_member_eps of this StorageVirtualDrive.

        :param vd_member_eps: The vd_member_eps of this StorageVirtualDrive.
        :type: list[StorageVdMemberEpRef]
        """

        self._vd_member_eps = vd_member_eps

    @property
    def vendor_uuid(self):
        """
        Gets the vendor_uuid of this StorageVirtualDrive.

        :return: The vendor_uuid of this StorageVirtualDrive.
        :rtype: str
        """
        return self._vendor_uuid

    @vendor_uuid.setter
    def vendor_uuid(self, vendor_uuid):
        """
        Sets the vendor_uuid of this StorageVirtualDrive.

        :param vendor_uuid: The vendor_uuid of this StorageVirtualDrive.
        :type: str
        """

        self._vendor_uuid = vendor_uuid

    @property
    def virtual_drive_extension(self):
        """
        Gets the virtual_drive_extension of this StorageVirtualDrive.

        :return: The virtual_drive_extension of this StorageVirtualDrive.
        :rtype: StorageVirtualDriveExtensionRef
        """
        return self._virtual_drive_extension

    @virtual_drive_extension.setter
    def virtual_drive_extension(self, virtual_drive_extension):
        """
        Sets the virtual_drive_extension of this StorageVirtualDrive.

        :param virtual_drive_extension: The virtual_drive_extension of this StorageVirtualDrive.
        :type: StorageVirtualDriveExtensionRef
        """

        self._virtual_drive_extension = virtual_drive_extension

    @property
    def virtual_drive_id(self):
        """
        Gets the virtual_drive_id of this StorageVirtualDrive.

        :return: The virtual_drive_id of this StorageVirtualDrive.
        :rtype: str
        """
        return self._virtual_drive_id

    @virtual_drive_id.setter
    def virtual_drive_id(self, virtual_drive_id):
        """
        Sets the virtual_drive_id of this StorageVirtualDrive.

        :param virtual_drive_id: The virtual_drive_id of this StorageVirtualDrive.
        :type: str
        """

        self._virtual_drive_id = virtual_drive_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StorageVirtualDrive):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
