# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class CondHclStatusDetailAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'hardware_status': 'str',
        'hcl_cimc_version': 'str',
        'hcl_driver_name': 'str',
        'hcl_driver_version': 'str',
        'hcl_firmware_version': 'str',
        'hcl_model': 'str',
        'inv_cimc_version': 'str',
        'inv_driver_name': 'str',
        'inv_driver_version': 'str',
        'inv_firmware_version': 'str',
        'inv_model': 'str',
        'reason': 'str',
        'software_status': 'str',
        'status': 'str',
        'component': 'InventoryBase',
        'hcl_status': 'CondHclStatus'
    }

    attribute_map = {
        'hardware_status': 'HardwareStatus',
        'hcl_cimc_version': 'HclCimcVersion',
        'hcl_driver_name': 'HclDriverName',
        'hcl_driver_version': 'HclDriverVersion',
        'hcl_firmware_version': 'HclFirmwareVersion',
        'hcl_model': 'HclModel',
        'inv_cimc_version': 'InvCimcVersion',
        'inv_driver_name': 'InvDriverName',
        'inv_driver_version': 'InvDriverVersion',
        'inv_firmware_version': 'InvFirmwareVersion',
        'inv_model': 'InvModel',
        'reason': 'Reason',
        'software_status': 'SoftwareStatus',
        'status': 'Status',
        'component': 'Component',
        'hcl_status': 'HclStatus'
    }

    def __init__(self,
                 hardware_status='Missing-Os-Driver-Info',
                 hcl_cimc_version=None,
                 hcl_driver_name=None,
                 hcl_driver_version=None,
                 hcl_firmware_version=None,
                 hcl_model=None,
                 inv_cimc_version=None,
                 inv_driver_name=None,
                 inv_driver_version=None,
                 inv_firmware_version=None,
                 inv_model=None,
                 reason='Missing-Os-Driver-Info',
                 software_status='Missing-Os-Driver-Info',
                 status='Incomplete',
                 component=None,
                 hcl_status=None,
                 local_vars_configuration=None):  # noqa: E501
        """CondHclStatusDetailAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._hardware_status = None
        self._hcl_cimc_version = None
        self._hcl_driver_name = None
        self._hcl_driver_version = None
        self._hcl_firmware_version = None
        self._hcl_model = None
        self._inv_cimc_version = None
        self._inv_driver_name = None
        self._inv_driver_version = None
        self._inv_firmware_version = None
        self._inv_model = None
        self._reason = None
        self._software_status = None
        self._status = None
        self._component = None
        self._hcl_status = None
        self.discriminator = None

        if hardware_status is not None:
            self.hardware_status = hardware_status
        if hcl_cimc_version is not None:
            self.hcl_cimc_version = hcl_cimc_version
        if hcl_driver_name is not None:
            self.hcl_driver_name = hcl_driver_name
        if hcl_driver_version is not None:
            self.hcl_driver_version = hcl_driver_version
        if hcl_firmware_version is not None:
            self.hcl_firmware_version = hcl_firmware_version
        if hcl_model is not None:
            self.hcl_model = hcl_model
        if inv_cimc_version is not None:
            self.inv_cimc_version = inv_cimc_version
        if inv_driver_name is not None:
            self.inv_driver_name = inv_driver_name
        if inv_driver_version is not None:
            self.inv_driver_version = inv_driver_version
        if inv_firmware_version is not None:
            self.inv_firmware_version = inv_firmware_version
        if inv_model is not None:
            self.inv_model = inv_model
        if reason is not None:
            self.reason = reason
        if software_status is not None:
            self.software_status = software_status
        if status is not None:
            self.status = status
        if component is not None:
            self.component = component
        if hcl_status is not None:
            self.hcl_status = hcl_status

    @property
    def hardware_status(self):
        """Gets the hardware_status of this CondHclStatusDetailAllOf.  # noqa: E501

        The model is considered as part of the hardware profile for the component. This will provide the HCL validation status for the hardware profile. The reasons can be one of the following \"Incompatible-Server-With-Component\" - the server model and component combination is not listed in HCL \"Incompatible-Firmware\" - The server's firmware is not listed for this component's hardware profile \"Incompatible-Component\" - the component's model is not listed in the HCL \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Not-Evaluated\" - the hardware profile was not evaulated for the component because the server's hw/sw status is not listed or server is exempted. \"Compatible\" - this component's hardware profile is listed in the HCL.    # noqa: E501

        :return: The hardware_status of this CondHclStatusDetailAllOf.  # noqa: E501
        :rtype: str
        """
        return self._hardware_status

    @hardware_status.setter
    def hardware_status(self, hardware_status):
        """Sets the hardware_status of this CondHclStatusDetailAllOf.

        The model is considered as part of the hardware profile for the component. This will provide the HCL validation status for the hardware profile. The reasons can be one of the following \"Incompatible-Server-With-Component\" - the server model and component combination is not listed in HCL \"Incompatible-Firmware\" - The server's firmware is not listed for this component's hardware profile \"Incompatible-Component\" - the component's model is not listed in the HCL \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Not-Evaluated\" - the hardware profile was not evaulated for the component because the server's hw/sw status is not listed or server is exempted. \"Compatible\" - this component's hardware profile is listed in the HCL.    # noqa: E501

        :param hardware_status: The hardware_status of this CondHclStatusDetailAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "Missing-Os-Driver-Info", "Incompatible-Server-With-Component",
            "Incompatible-Processor", "Incompatible-Os-Info",
            "Incompatible-Component-Model", "Incompatible-Firmware",
            "Incompatible-Driver", "Incompatible-Firmware-Driver",
            "Service-Unavailable", "Service-Error", "Unrecognized-Protocol",
            "Not-Evaluated", "Compatible"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and hardware_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `hardware_status` ({0}), must be one of {1}"  # noqa: E501
                .format(hardware_status, allowed_values))

        self._hardware_status = hardware_status

    @property
    def hcl_cimc_version(self):
        """Gets the hcl_cimc_version of this CondHclStatusDetailAllOf.  # noqa: E501

        The current CIMC version for the server normalized for querying HCL data.    # noqa: E501

        :return: The hcl_cimc_version of this CondHclStatusDetailAllOf.  # noqa: E501
        :rtype: str
        """
        return self._hcl_cimc_version

    @hcl_cimc_version.setter
    def hcl_cimc_version(self, hcl_cimc_version):
        """Sets the hcl_cimc_version of this CondHclStatusDetailAllOf.

        The current CIMC version for the server normalized for querying HCL data.    # noqa: E501

        :param hcl_cimc_version: The hcl_cimc_version of this CondHclStatusDetailAllOf.  # noqa: E501
        :type: str
        """

        self._hcl_cimc_version = hcl_cimc_version

    @property
    def hcl_driver_name(self):
        """Gets the hcl_driver_name of this CondHclStatusDetailAllOf.  # noqa: E501

        The current driver name of the component we are validating normalized for querying HCL data.    # noqa: E501

        :return: The hcl_driver_name of this CondHclStatusDetailAllOf.  # noqa: E501
        :rtype: str
        """
        return self._hcl_driver_name

    @hcl_driver_name.setter
    def hcl_driver_name(self, hcl_driver_name):
        """Sets the hcl_driver_name of this CondHclStatusDetailAllOf.

        The current driver name of the component we are validating normalized for querying HCL data.    # noqa: E501

        :param hcl_driver_name: The hcl_driver_name of this CondHclStatusDetailAllOf.  # noqa: E501
        :type: str
        """

        self._hcl_driver_name = hcl_driver_name

    @property
    def hcl_driver_version(self):
        """Gets the hcl_driver_version of this CondHclStatusDetailAllOf.  # noqa: E501

        The current driver version of the component we are validating normalized for querying HCL data.    # noqa: E501

        :return: The hcl_driver_version of this CondHclStatusDetailAllOf.  # noqa: E501
        :rtype: str
        """
        return self._hcl_driver_version

    @hcl_driver_version.setter
    def hcl_driver_version(self, hcl_driver_version):
        """Sets the hcl_driver_version of this CondHclStatusDetailAllOf.

        The current driver version of the component we are validating normalized for querying HCL data.    # noqa: E501

        :param hcl_driver_version: The hcl_driver_version of this CondHclStatusDetailAllOf.  # noqa: E501
        :type: str
        """

        self._hcl_driver_version = hcl_driver_version

    @property
    def hcl_firmware_version(self):
        """Gets the hcl_firmware_version of this CondHclStatusDetailAllOf.  # noqa: E501

        The current firmware version of the component model normalized for querying HCL data.    # noqa: E501

        :return: The hcl_firmware_version of this CondHclStatusDetailAllOf.  # noqa: E501
        :rtype: str
        """
        return self._hcl_firmware_version

    @hcl_firmware_version.setter
    def hcl_firmware_version(self, hcl_firmware_version):
        """Sets the hcl_firmware_version of this CondHclStatusDetailAllOf.

        The current firmware version of the component model normalized for querying HCL data.    # noqa: E501

        :param hcl_firmware_version: The hcl_firmware_version of this CondHclStatusDetailAllOf.  # noqa: E501
        :type: str
        """

        self._hcl_firmware_version = hcl_firmware_version

    @property
    def hcl_model(self):
        """Gets the hcl_model of this CondHclStatusDetailAllOf.  # noqa: E501

        The component model we are trying to validate normalized for querying HCL data.    # noqa: E501

        :return: The hcl_model of this CondHclStatusDetailAllOf.  # noqa: E501
        :rtype: str
        """
        return self._hcl_model

    @hcl_model.setter
    def hcl_model(self, hcl_model):
        """Sets the hcl_model of this CondHclStatusDetailAllOf.

        The component model we are trying to validate normalized for querying HCL data.    # noqa: E501

        :param hcl_model: The hcl_model of this CondHclStatusDetailAllOf.  # noqa: E501
        :type: str
        """

        self._hcl_model = hcl_model

    @property
    def inv_cimc_version(self):
        """Gets the inv_cimc_version of this CondHclStatusDetailAllOf.  # noqa: E501

        The current CIMC version for the server as received from inventory.    # noqa: E501

        :return: The inv_cimc_version of this CondHclStatusDetailAllOf.  # noqa: E501
        :rtype: str
        """
        return self._inv_cimc_version

    @inv_cimc_version.setter
    def inv_cimc_version(self, inv_cimc_version):
        """Sets the inv_cimc_version of this CondHclStatusDetailAllOf.

        The current CIMC version for the server as received from inventory.    # noqa: E501

        :param inv_cimc_version: The inv_cimc_version of this CondHclStatusDetailAllOf.  # noqa: E501
        :type: str
        """

        self._inv_cimc_version = inv_cimc_version

    @property
    def inv_driver_name(self):
        """Gets the inv_driver_name of this CondHclStatusDetailAllOf.  # noqa: E501

        The current driver name of the component we are validating as received from inventory.    # noqa: E501

        :return: The inv_driver_name of this CondHclStatusDetailAllOf.  # noqa: E501
        :rtype: str
        """
        return self._inv_driver_name

    @inv_driver_name.setter
    def inv_driver_name(self, inv_driver_name):
        """Sets the inv_driver_name of this CondHclStatusDetailAllOf.

        The current driver name of the component we are validating as received from inventory.    # noqa: E501

        :param inv_driver_name: The inv_driver_name of this CondHclStatusDetailAllOf.  # noqa: E501
        :type: str
        """

        self._inv_driver_name = inv_driver_name

    @property
    def inv_driver_version(self):
        """Gets the inv_driver_version of this CondHclStatusDetailAllOf.  # noqa: E501

        The current driver version of the component we are validating as received from inventory.    # noqa: E501

        :return: The inv_driver_version of this CondHclStatusDetailAllOf.  # noqa: E501
        :rtype: str
        """
        return self._inv_driver_version

    @inv_driver_version.setter
    def inv_driver_version(self, inv_driver_version):
        """Sets the inv_driver_version of this CondHclStatusDetailAllOf.

        The current driver version of the component we are validating as received from inventory.    # noqa: E501

        :param inv_driver_version: The inv_driver_version of this CondHclStatusDetailAllOf.  # noqa: E501
        :type: str
        """

        self._inv_driver_version = inv_driver_version

    @property
    def inv_firmware_version(self):
        """Gets the inv_firmware_version of this CondHclStatusDetailAllOf.  # noqa: E501

        The current firmware version of the component model as received from inventory.    # noqa: E501

        :return: The inv_firmware_version of this CondHclStatusDetailAllOf.  # noqa: E501
        :rtype: str
        """
        return self._inv_firmware_version

    @inv_firmware_version.setter
    def inv_firmware_version(self, inv_firmware_version):
        """Sets the inv_firmware_version of this CondHclStatusDetailAllOf.

        The current firmware version of the component model as received from inventory.    # noqa: E501

        :param inv_firmware_version: The inv_firmware_version of this CondHclStatusDetailAllOf.  # noqa: E501
        :type: str
        """

        self._inv_firmware_version = inv_firmware_version

    @property
    def inv_model(self):
        """Gets the inv_model of this CondHclStatusDetailAllOf.  # noqa: E501

        The component model we are trying to validate as received from inventory.    # noqa: E501

        :return: The inv_model of this CondHclStatusDetailAllOf.  # noqa: E501
        :rtype: str
        """
        return self._inv_model

    @inv_model.setter
    def inv_model(self, inv_model):
        """Sets the inv_model of this CondHclStatusDetailAllOf.

        The component model we are trying to validate as received from inventory.    # noqa: E501

        :param inv_model: The inv_model of this CondHclStatusDetailAllOf.  # noqa: E501
        :type: str
        """

        self._inv_model = inv_model

    @property
    def reason(self):
        """Gets the reason of this CondHclStatusDetailAllOf.  # noqa: E501

        The reason for the status. The reason can be one of \"Incompatible-Server-With-Component\" - HCL validation has failed because the server model is not validated with this component \"Incompatible-Processor\" - HCL validation has failed because the processor is not validated with this server \"Incompatible-Os-Info\" - HCL validation has failed because the os vendor and version is not validated with this server \"Incompatible-Component-Model\" - HCL validation has failed because the component model is not validated \"Incompatible-Firmware\" - HCL validation has failed because the component or server firmware version is not validated \"Incompatible-Driver\" - HCL validation has failed because the driver version is not validated \"Incompatible-Firmware-Driver\" - HCL validation has failed because the firmware version and driver version is not validated \"Missing-Os-Driver-Info\" - HCL validation was not performed because we are missing os driver information form the inventory \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Service-Error\" - HCL data service is available but an error occured when making the request or parsing the response \"Unrecognized-Protocol\" - This service does not recognize the reason code in the response from the HCL data service \"Compatible\" - this component's inventory data has \"Validated\" status with the HCL. \"Not-Evaluated\" - The component is not evaluated against the HCL because the server is exempted.    # noqa: E501

        :return: The reason of this CondHclStatusDetailAllOf.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CondHclStatusDetailAllOf.

        The reason for the status. The reason can be one of \"Incompatible-Server-With-Component\" - HCL validation has failed because the server model is not validated with this component \"Incompatible-Processor\" - HCL validation has failed because the processor is not validated with this server \"Incompatible-Os-Info\" - HCL validation has failed because the os vendor and version is not validated with this server \"Incompatible-Component-Model\" - HCL validation has failed because the component model is not validated \"Incompatible-Firmware\" - HCL validation has failed because the component or server firmware version is not validated \"Incompatible-Driver\" - HCL validation has failed because the driver version is not validated \"Incompatible-Firmware-Driver\" - HCL validation has failed because the firmware version and driver version is not validated \"Missing-Os-Driver-Info\" - HCL validation was not performed because we are missing os driver information form the inventory \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Service-Error\" - HCL data service is available but an error occured when making the request or parsing the response \"Unrecognized-Protocol\" - This service does not recognize the reason code in the response from the HCL data service \"Compatible\" - this component's inventory data has \"Validated\" status with the HCL. \"Not-Evaluated\" - The component is not evaluated against the HCL because the server is exempted.    # noqa: E501

        :param reason: The reason of this CondHclStatusDetailAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "Missing-Os-Driver-Info", "Incompatible-Server-With-Component",
            "Incompatible-Processor", "Incompatible-Os-Info",
            "Incompatible-Component-Model", "Incompatible-Firmware",
            "Incompatible-Driver", "Incompatible-Firmware-Driver",
            "Service-Unavailable", "Service-Error", "Unrecognized-Protocol",
            "Not-Evaluated", "Compatible"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and reason not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"  # noqa: E501
                .format(reason, allowed_values))

        self._reason = reason

    @property
    def software_status(self):
        """Gets the software_status of this CondHclStatusDetailAllOf.  # noqa: E501

        The firmware, driver name and driver version are considered as part of the software profile for the component. This will provide the HCL validation status for the software profile. The reasons can be one of the following \"Incompatible-Firmware\" - the component's firmware is not listed under the server's hardware and software profile and the component's hardware profile \"Incompatible-Driver\" - the component's driver is not listed under the server's hardware and software profile and the component's hardware profile \"Incompatible-Firmware-Driver\" - the component's firmware and driver are not listed under the server's hardware and software profile and the component's hardware profile \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Not-Evaluated\" - the component's hardware status was not evaluated because the server's hardware or software profile is not listed or server is exempted. \"Compatible\" - this component's hardware profile is listed in the HCL.    # noqa: E501

        :return: The software_status of this CondHclStatusDetailAllOf.  # noqa: E501
        :rtype: str
        """
        return self._software_status

    @software_status.setter
    def software_status(self, software_status):
        """Sets the software_status of this CondHclStatusDetailAllOf.

        The firmware, driver name and driver version are considered as part of the software profile for the component. This will provide the HCL validation status for the software profile. The reasons can be one of the following \"Incompatible-Firmware\" - the component's firmware is not listed under the server's hardware and software profile and the component's hardware profile \"Incompatible-Driver\" - the component's driver is not listed under the server's hardware and software profile and the component's hardware profile \"Incompatible-Firmware-Driver\" - the component's firmware and driver are not listed under the server's hardware and software profile and the component's hardware profile \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Not-Evaluated\" - the component's hardware status was not evaluated because the server's hardware or software profile is not listed or server is exempted. \"Compatible\" - this component's hardware profile is listed in the HCL.    # noqa: E501

        :param software_status: The software_status of this CondHclStatusDetailAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "Missing-Os-Driver-Info", "Incompatible-Server-With-Component",
            "Incompatible-Processor", "Incompatible-Os-Info",
            "Incompatible-Component-Model", "Incompatible-Firmware",
            "Incompatible-Driver", "Incompatible-Firmware-Driver",
            "Service-Unavailable", "Service-Error", "Unrecognized-Protocol",
            "Not-Evaluated", "Compatible"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and software_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `software_status` ({0}), must be one of {1}"  # noqa: E501
                .format(software_status, allowed_values))

        self._software_status = software_status

    @property
    def status(self):
        """Gets the status of this CondHclStatusDetailAllOf.  # noqa: E501

        The status for the component model, firmware version, driver name, and driver version after validating against the HCL. The status can be one of the following \"Unknown\" - we do not have enough information to evaluate against the HCL data \"Validated\" - we have validated this component against the HCL and it has \"Validated\" status \"Not-Validated\" - we have validated this component against the HCL and it has \"Not-Validated\" status. \"Not-Evaluated\" - The component is not evaluated against the HCL because the server is exempted.     # noqa: E501

        :return: The status of this CondHclStatusDetailAllOf.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CondHclStatusDetailAllOf.

        The status for the component model, firmware version, driver name, and driver version after validating against the HCL. The status can be one of the following \"Unknown\" - we do not have enough information to evaluate against the HCL data \"Validated\" - we have validated this component against the HCL and it has \"Validated\" status \"Not-Validated\" - we have validated this component against the HCL and it has \"Not-Validated\" status. \"Not-Evaluated\" - The component is not evaluated against the HCL because the server is exempted.     # noqa: E501

        :param status: The status of this CondHclStatusDetailAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "Incomplete", "Not-Found", "Not-Listed", "Validated",
            "Not-Evaluated"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values))

        self._status = status

    @property
    def component(self):
        """Gets the component of this CondHclStatusDetailAllOf.  # noqa: E501


        :return: The component of this CondHclStatusDetailAllOf.  # noqa: E501
        :rtype: InventoryBase
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this CondHclStatusDetailAllOf.


        :param component: The component of this CondHclStatusDetailAllOf.  # noqa: E501
        :type: InventoryBase
        """

        self._component = component

    @property
    def hcl_status(self):
        """Gets the hcl_status of this CondHclStatusDetailAllOf.  # noqa: E501


        :return: The hcl_status of this CondHclStatusDetailAllOf.  # noqa: E501
        :rtype: CondHclStatus
        """
        return self._hcl_status

    @hcl_status.setter
    def hcl_status(self, hcl_status):
        """Sets the hcl_status of this CondHclStatusDetailAllOf.


        :param hcl_status: The hcl_status of this CondHclStatusDetailAllOf.  # noqa: E501
        :type: CondHclStatus
        """

        self._hcl_status = hcl_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CondHclStatusDetailAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CondHclStatusDetailAllOf):
            return True

        return self.to_dict() != other.to_dict()
