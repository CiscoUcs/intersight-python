# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class UcsdUcsdRestoreParametersAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_password_set': 'bool',
        'location': 'str',
        'password': 'str',
        'protocol': 'str',
        'restore_configuration_files': 'bool',
        'restore_license': 'bool',
        'username': 'str'
    }

    attribute_map = {
        'is_password_set': 'IsPasswordSet',
        'location': 'Location',
        'password': 'Password',
        'protocol': 'Protocol',
        'restore_configuration_files': 'RestoreConfigurationFiles',
        'restore_license': 'RestoreLicense',
        'username': 'Username'
    }

    def __init__(self,
                 is_password_set=None,
                 location=None,
                 password=None,
                 protocol=None,
                 restore_configuration_files=None,
                 restore_license=None,
                 username=None,
                 local_vars_configuration=None):  # noqa: E501
        """UcsdUcsdRestoreParametersAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_password_set = None
        self._location = None
        self._password = None
        self._protocol = None
        self._restore_configuration_files = None
        self._restore_license = None
        self._username = None
        self.discriminator = None

        if is_password_set is not None:
            self.is_password_set = is_password_set
        if location is not None:
            self.location = location
        if password is not None:
            self.password = password
        if protocol is not None:
            self.protocol = protocol
        if restore_configuration_files is not None:
            self.restore_configuration_files = restore_configuration_files
        if restore_license is not None:
            self.restore_license = restore_license
        if username is not None:
            self.username = username

    @property
    def is_password_set(self):
        """Gets the is_password_set of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501


        :return: The is_password_set of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_password_set

    @is_password_set.setter
    def is_password_set(self, is_password_set):
        """Sets the is_password_set of this UcsdUcsdRestoreParametersAllOf.


        :param is_password_set: The is_password_set of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501
        :type: bool
        """

        self._is_password_set = is_password_set

    @property
    def location(self):
        """Gets the location of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501

        The complete location of the path on the server. The location should be specified in the following format- hostname-or-ipv4address<:port>/absolute-file-path    # noqa: E501

        :return: The location of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this UcsdUcsdRestoreParametersAllOf.

        The complete location of the path on the server. The location should be specified in the following format- hostname-or-ipv4address<:port>/absolute-file-path    # noqa: E501

        :param location: The location of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def password(self):
        """Gets the password of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501

        The password of the target backup server. Only required if the target server is accessed using SFTP or SCP protocol.    # noqa: E501

        :return: The password of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UcsdUcsdRestoreParametersAllOf.

        The password of the target backup server. Only required if the target server is accessed using SFTP or SCP protocol.    # noqa: E501

        :param password: The password of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def protocol(self):
        """Gets the protocol of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501

        The protocol used to backup the UCS Director.    # noqa: E501

        :return: The protocol of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this UcsdUcsdRestoreParametersAllOf.

        The protocol used to backup the UCS Director.    # noqa: E501

        :param protocol: The protocol of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def restore_configuration_files(self):
        """Gets the restore_configuration_files of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501

        Decides whether UCS Director property files should also be restored    # noqa: E501

        :return: The restore_configuration_files of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._restore_configuration_files

    @restore_configuration_files.setter
    def restore_configuration_files(self, restore_configuration_files):
        """Sets the restore_configuration_files of this UcsdUcsdRestoreParametersAllOf.

        Decides whether UCS Director property files should also be restored    # noqa: E501

        :param restore_configuration_files: The restore_configuration_files of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501
        :type: bool
        """

        self._restore_configuration_files = restore_configuration_files

    @property
    def restore_license(self):
        """Gets the restore_license of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501

        Decides whether license should also be restored    # noqa: E501

        :return: The restore_license of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._restore_license

    @restore_license.setter
    def restore_license(self, restore_license):
        """Sets the restore_license of this UcsdUcsdRestoreParametersAllOf.

        Decides whether license should also be restored    # noqa: E501

        :param restore_license: The restore_license of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501
        :type: bool
        """

        self._restore_license = restore_license

    @property
    def username(self):
        """Gets the username of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501

        The username of the target backup server. Only required if the target server is accessed using SFTP or SCP protocol.     # noqa: E501

        :return: The username of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UcsdUcsdRestoreParametersAllOf.

        The username of the target backup server. Only required if the target server is accessed using SFTP or SCP protocol.     # noqa: E501

        :param username: The username of this UcsdUcsdRestoreParametersAllOf.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UcsdUcsdRestoreParametersAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UcsdUcsdRestoreParametersAllOf):
            return True

        return self.to_dict() != other.to_dict()
