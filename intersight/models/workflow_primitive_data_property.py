# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1461
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorkflowPrimitiveDataProperty(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'constraints': 'WorkflowConstraints',
        'inventory_selector': 'list[WorkflowMoReferenceProperty]',
        'secure': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'constraints': 'Constraints',
        'inventory_selector': 'InventorySelector',
        'secure': 'Secure',
        'type': 'Type'
    }

    def __init__(self, object_type=None, constraints=None, inventory_selector=None, secure=None, type='string'):
        """
        WorkflowPrimitiveDataProperty - a model defined in Swagger
        """

        self._object_type = None
        self._constraints = None
        self._inventory_selector = None
        self._secure = None
        self._type = None

        if object_type is not None:
          self.object_type = object_type
        if constraints is not None:
          self.constraints = constraints
        if inventory_selector is not None:
          self.inventory_selector = inventory_selector
        if secure is not None:
          self.secure = secure
        if type is not None:
          self.type = type

    @property
    def object_type(self):
        """
        Gets the object_type of this WorkflowPrimitiveDataProperty.
        The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.

        :return: The object_type of this WorkflowPrimitiveDataProperty.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this WorkflowPrimitiveDataProperty.
        The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.

        :param object_type: The object_type of this WorkflowPrimitiveDataProperty.
        :type: str
        """

        self._object_type = object_type

    @property
    def constraints(self):
        """
        Gets the constraints of this WorkflowPrimitiveDataProperty.
        Constraints that must be applied to the parameter value supplied for this data type.

        :return: The constraints of this WorkflowPrimitiveDataProperty.
        :rtype: WorkflowConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """
        Sets the constraints of this WorkflowPrimitiveDataProperty.
        Constraints that must be applied to the parameter value supplied for this data type.

        :param constraints: The constraints of this WorkflowPrimitiveDataProperty.
        :type: WorkflowConstraints
        """

        self._constraints = constraints

    @property
    def inventory_selector(self):
        """
        Gets the inventory_selector of this WorkflowPrimitiveDataProperty.
        List of Intersight managed object selectors. The workflow execution user interface show objects from inventory that are matching the selectors to help with selecting inputs.

        :return: The inventory_selector of this WorkflowPrimitiveDataProperty.
        :rtype: list[WorkflowMoReferenceProperty]
        """
        return self._inventory_selector

    @inventory_selector.setter
    def inventory_selector(self, inventory_selector):
        """
        Sets the inventory_selector of this WorkflowPrimitiveDataProperty.
        List of Intersight managed object selectors. The workflow execution user interface show objects from inventory that are matching the selectors to help with selecting inputs.

        :param inventory_selector: The inventory_selector of this WorkflowPrimitiveDataProperty.
        :type: list[WorkflowMoReferenceProperty]
        """

        self._inventory_selector = inventory_selector

    @property
    def secure(self):
        """
        Gets the secure of this WorkflowPrimitiveDataProperty.
        Intersight supports secure properties as task input/output. The values of these properties are encrypted and stored in Intersight. This flag marks the property to be secure when it is set to true.

        :return: The secure of this WorkflowPrimitiveDataProperty.
        :rtype: bool
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """
        Sets the secure of this WorkflowPrimitiveDataProperty.
        Intersight supports secure properties as task input/output. The values of these properties are encrypted and stored in Intersight. This flag marks the property to be secure when it is set to true.

        :param secure: The secure of this WorkflowPrimitiveDataProperty.
        :type: bool
        """

        self._secure = secure

    @property
    def type(self):
        """
        Gets the type of this WorkflowPrimitiveDataProperty.
        Specify the enum type for primitive data type.

        :return: The type of this WorkflowPrimitiveDataProperty.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this WorkflowPrimitiveDataProperty.
        Specify the enum type for primitive data type.

        :param type: The type of this WorkflowPrimitiveDataProperty.
        :type: str
        """
        allowed_values = ["string", "integer", "float", "boolean", "json", "enum"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkflowPrimitiveDataProperty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
