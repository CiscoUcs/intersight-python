# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class TamAdvisoryInstanceAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'affected_object_moid': 'str',
        'affected_object_type': 'str',
        'last_state_change_time': 'datetime',
        'last_verified_time': 'datetime',
        'state': 'str',
        'advisory': 'TamAdvisory',
        'affected_object': 'MoBaseMo',
        'device_registration': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'affected_object_moid': 'AffectedObjectMoid',
        'affected_object_type': 'AffectedObjectType',
        'last_state_change_time': 'LastStateChangeTime',
        'last_verified_time': 'LastVerifiedTime',
        'state': 'State',
        'advisory': 'Advisory',
        'affected_object': 'AffectedObject',
        'device_registration': 'DeviceRegistration'
    }

    def __init__(self,
                 affected_object_moid=None,
                 affected_object_type=None,
                 last_state_change_time=None,
                 last_verified_time=None,
                 state='unknown',
                 advisory=None,
                 affected_object=None,
                 device_registration=None,
                 local_vars_configuration=None):  # noqa: E501
        """TamAdvisoryInstanceAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._affected_object_moid = None
        self._affected_object_type = None
        self._last_state_change_time = None
        self._last_verified_time = None
        self._state = None
        self._advisory = None
        self._affected_object = None
        self._device_registration = None
        self.discriminator = None

        if affected_object_moid is not None:
            self.affected_object_moid = affected_object_moid
        if affected_object_type is not None:
            self.affected_object_type = affected_object_type
        if last_state_change_time is not None:
            self.last_state_change_time = last_state_change_time
        if last_verified_time is not None:
            self.last_verified_time = last_verified_time
        if state is not None:
            self.state = state
        if advisory is not None:
            self.advisory = advisory
        if affected_object is not None:
            self.affected_object = affected_object
        if device_registration is not None:
            self.device_registration = device_registration

    @property
    def affected_object_moid(self):
        """Gets the affected_object_moid of this TamAdvisoryInstanceAllOf.  # noqa: E501

        Moid of the Intersight MO affected by the alert. Deprecated now and will be removed in subsequent releases.    # noqa: E501

        :return: The affected_object_moid of this TamAdvisoryInstanceAllOf.  # noqa: E501
        :rtype: str
        """
        return self._affected_object_moid

    @affected_object_moid.setter
    def affected_object_moid(self, affected_object_moid):
        """Sets the affected_object_moid of this TamAdvisoryInstanceAllOf.

        Moid of the Intersight MO affected by the alert. Deprecated now and will be removed in subsequent releases.    # noqa: E501

        :param affected_object_moid: The affected_object_moid of this TamAdvisoryInstanceAllOf.  # noqa: E501
        :type: str
        """

        self._affected_object_moid = affected_object_moid

    @property
    def affected_object_type(self):
        """Gets the affected_object_type of this TamAdvisoryInstanceAllOf.  # noqa: E501

        Object type of the Intersight MO affected by the alert. Deprecated now and will be removed in subsequent releases.    # noqa: E501

        :return: The affected_object_type of this TamAdvisoryInstanceAllOf.  # noqa: E501
        :rtype: str
        """
        return self._affected_object_type

    @affected_object_type.setter
    def affected_object_type(self, affected_object_type):
        """Sets the affected_object_type of this TamAdvisoryInstanceAllOf.

        Object type of the Intersight MO affected by the alert. Deprecated now and will be removed in subsequent releases.    # noqa: E501

        :param affected_object_type: The affected_object_type of this TamAdvisoryInstanceAllOf.  # noqa: E501
        :type: str
        """

        self._affected_object_type = affected_object_type

    @property
    def last_state_change_time(self):
        """Gets the last_state_change_time of this TamAdvisoryInstanceAllOf.  # noqa: E501

        Timestamp when a state change was observed on this advisory instnace.    # noqa: E501

        :return: The last_state_change_time of this TamAdvisoryInstanceAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._last_state_change_time

    @last_state_change_time.setter
    def last_state_change_time(self, last_state_change_time):
        """Sets the last_state_change_time of this TamAdvisoryInstanceAllOf.

        Timestamp when a state change was observed on this advisory instnace.    # noqa: E501

        :param last_state_change_time: The last_state_change_time of this TamAdvisoryInstanceAllOf.  # noqa: E501
        :type: datetime
        """

        self._last_state_change_time = last_state_change_time

    @property
    def last_verified_time(self):
        """Gets the last_verified_time of this TamAdvisoryInstanceAllOf.  # noqa: E501

        Timestamp when this advisory was last evaluated.    # noqa: E501

        :return: The last_verified_time of this TamAdvisoryInstanceAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._last_verified_time

    @last_verified_time.setter
    def last_verified_time(self, last_verified_time):
        """Sets the last_verified_time of this TamAdvisoryInstanceAllOf.

        Timestamp when this advisory was last evaluated.    # noqa: E501

        :param last_verified_time: The last_verified_time of this TamAdvisoryInstanceAllOf.  # noqa: E501
        :type: datetime
        """

        self._last_verified_time = last_verified_time

    @property
    def state(self):
        """Gets the state of this TamAdvisoryInstanceAllOf.  # noqa: E501

        Current state of the advisory instance (Active/Cleared/Unknown etc.).     # noqa: E501

        :return: The state of this TamAdvisoryInstanceAllOf.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TamAdvisoryInstanceAllOf.

        Current state of the advisory instance (Active/Cleared/Unknown etc.).     # noqa: E501

        :param state: The state of this TamAdvisoryInstanceAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["unknown", "active", "cleared"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values))

        self._state = state

    @property
    def advisory(self):
        """Gets the advisory of this TamAdvisoryInstanceAllOf.  # noqa: E501


        :return: The advisory of this TamAdvisoryInstanceAllOf.  # noqa: E501
        :rtype: TamAdvisory
        """
        return self._advisory

    @advisory.setter
    def advisory(self, advisory):
        """Sets the advisory of this TamAdvisoryInstanceAllOf.


        :param advisory: The advisory of this TamAdvisoryInstanceAllOf.  # noqa: E501
        :type: TamAdvisory
        """

        self._advisory = advisory

    @property
    def affected_object(self):
        """Gets the affected_object of this TamAdvisoryInstanceAllOf.  # noqa: E501


        :return: The affected_object of this TamAdvisoryInstanceAllOf.  # noqa: E501
        :rtype: MoBaseMo
        """
        return self._affected_object

    @affected_object.setter
    def affected_object(self, affected_object):
        """Sets the affected_object of this TamAdvisoryInstanceAllOf.


        :param affected_object: The affected_object of this TamAdvisoryInstanceAllOf.  # noqa: E501
        :type: MoBaseMo
        """

        self._affected_object = affected_object

    @property
    def device_registration(self):
        """Gets the device_registration of this TamAdvisoryInstanceAllOf.  # noqa: E501


        :return: The device_registration of this TamAdvisoryInstanceAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._device_registration

    @device_registration.setter
    def device_registration(self, device_registration):
        """Sets the device_registration of this TamAdvisoryInstanceAllOf.


        :param device_registration: The device_registration of this TamAdvisoryInstanceAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._device_registration = device_registration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TamAdvisoryInstanceAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TamAdvisoryInstanceAllOf):
            return True

        return self.to_dict() != other.to_dict()
