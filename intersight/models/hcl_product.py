# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class HclProduct(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'driver_names': 'list[str]',
        'error_code': 'str',
        'firmwares': 'list[HclFirmware]',
        'id': 'str',
        'model': 'str',
        'revision': 'str',
        'type': 'str',
        'vendor': 'str'
    }

    attribute_map = {
        'driver_names': 'DriverNames',
        'error_code': 'ErrorCode',
        'firmwares': 'Firmwares',
        'id': 'Id',
        'model': 'Model',
        'revision': 'Revision',
        'type': 'Type',
        'vendor': 'Vendor'
    }

    def __init__(self,
                 driver_names=None,
                 error_code='Success',
                 firmwares=None,
                 id=None,
                 model=None,
                 revision=None,
                 type=None,
                 vendor=None,
                 local_vars_configuration=None):  # noqa: E501
        """HclProduct - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._driver_names = None
        self._error_code = None
        self._firmwares = None
        self._id = None
        self._model = None
        self._revision = None
        self._type = None
        self._vendor = None
        self.discriminator = None

        if driver_names is not None:
            self.driver_names = driver_names
        if error_code is not None:
            self.error_code = error_code
        if firmwares is not None:
            self.firmwares = firmwares
        if id is not None:
            self.id = id
        if model is not None:
            self.model = model
        if revision is not None:
            self.revision = revision
        if type is not None:
            self.type = type
        if vendor is not None:
            self.vendor = vendor

    @property
    def driver_names(self):
        """Gets the driver_names of this HclProduct.  # noqa: E501


        :return: The driver_names of this HclProduct.  # noqa: E501
        :rtype: list[str]
        """
        return self._driver_names

    @driver_names.setter
    def driver_names(self, driver_names):
        """Sets the driver_names of this HclProduct.


        :param driver_names: The driver_names of this HclProduct.  # noqa: E501
        :type: list[str]
        """

        self._driver_names = driver_names

    @property
    def error_code(self):
        """Gets the error_code of this HclProduct.  # noqa: E501

        Error code indicating the support status.    # noqa: E501

        :return: The error_code of this HclProduct.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this HclProduct.

        Error code indicating the support status.    # noqa: E501

        :param error_code: The error_code of this HclProduct.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "Success", "Unknown", "UnknownServer", "InvalidUcsVersion",
            "ProcessorNotSupported", "OSNotSupported", "OSUnknown",
            "UCSVersionNotSupported",
            "UcsVersionServerOSCombinationNotSupported", "ProductUnknown",
            "ProductNotSupported", "DriverNameNotSupported",
            "FirmwareVersionNotSupported", "DriverVersionNotSupported",
            "FirmwareVersionDriverVersionCombinationNotSupported",
            "FirmwareVersionAndDriverVersionNotSupported",
            "FirmwareVersionAndDriverNameNotSupported", "InternalError",
            "MarshallingError", "Exempted"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and error_code not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `error_code` ({0}), must be one of {1}"  # noqa: E501
                .format(error_code, allowed_values))

        self._error_code = error_code

    @property
    def firmwares(self):
        """Gets the firmwares of this HclProduct.  # noqa: E501


        :return: The firmwares of this HclProduct.  # noqa: E501
        :rtype: list[HclFirmware]
        """
        return self._firmwares

    @firmwares.setter
    def firmwares(self, firmwares):
        """Sets the firmwares of this HclProduct.


        :param firmwares: The firmwares of this HclProduct.  # noqa: E501
        :type: list[HclFirmware]
        """

        self._firmwares = firmwares

    @property
    def id(self):
        """Gets the id of this HclProduct.  # noqa: E501

        Identifier of the product.    # noqa: E501

        :return: The id of this HclProduct.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HclProduct.

        Identifier of the product.    # noqa: E501

        :param id: The id of this HclProduct.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def model(self):
        """Gets the model of this HclProduct.  # noqa: E501

        Model/PID of the product/adapter.    # noqa: E501

        :return: The model of this HclProduct.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this HclProduct.

        Model/PID of the product/adapter.    # noqa: E501

        :param model: The model of this HclProduct.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def revision(self):
        """Gets the revision of this HclProduct.  # noqa: E501

        Revision of the adapter model.    # noqa: E501

        :return: The revision of this HclProduct.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this HclProduct.

        Revision of the adapter model.    # noqa: E501

        :param revision: The revision of this HclProduct.  # noqa: E501
        :type: str
        """

        self._revision = revision

    @property
    def type(self):
        """Gets the type of this HclProduct.  # noqa: E501

        Type of the product/adapter say OCP, PT, GPU.    # noqa: E501

        :return: The type of this HclProduct.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HclProduct.

        Type of the product/adapter say OCP, PT, GPU.    # noqa: E501

        :param type: The type of this HclProduct.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def vendor(self):
        """Gets the vendor of this HclProduct.  # noqa: E501

        Vendor of the product or adapter.     # noqa: E501

        :return: The vendor of this HclProduct.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this HclProduct.

        Vendor of the product or adapter.     # noqa: E501

        :param vendor: The vendor of this HclProduct.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HclProduct):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HclProduct):
            return True

        return self.to_dict() != other.to_dict()
