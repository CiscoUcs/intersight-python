# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1295
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CondHclStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'component_status': 'str',
        'hardware_status': 'str',
        'hcl_firmware_version': 'str',
        'hcl_model': 'str',
        'hcl_os_vendor': 'str',
        'hcl_os_version': 'str',
        'hcl_processor': 'str',
        'inv_firmware_version': 'str',
        'inv_model': 'str',
        'inv_os_vendor': 'str',
        'inv_os_version': 'str',
        'inv_processor': 'str',
        'reason': 'str',
        'server_reason': 'str',
        'software_status': 'str',
        'status': 'str',
        'details': 'list[CondHclStatusDetailRef]',
        'managed_object': 'InventoryBaseRef',
        'registered_device': 'AssetDeviceRegistrationRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'component_status': 'ComponentStatus',
        'hardware_status': 'HardwareStatus',
        'hcl_firmware_version': 'HclFirmwareVersion',
        'hcl_model': 'HclModel',
        'hcl_os_vendor': 'HclOsVendor',
        'hcl_os_version': 'HclOsVersion',
        'hcl_processor': 'HclProcessor',
        'inv_firmware_version': 'InvFirmwareVersion',
        'inv_model': 'InvModel',
        'inv_os_vendor': 'InvOsVendor',
        'inv_os_version': 'InvOsVersion',
        'inv_processor': 'InvProcessor',
        'reason': 'Reason',
        'server_reason': 'ServerReason',
        'software_status': 'SoftwareStatus',
        'status': 'Status',
        'details': 'Details',
        'managed_object': 'ManagedObject',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, component_status='Incomplete', hardware_status='Incomplete', hcl_firmware_version=None, hcl_model=None, hcl_os_vendor=None, hcl_os_version=None, hcl_processor=None, inv_firmware_version=None, inv_model=None, inv_os_vendor=None, inv_os_version=None, inv_processor=None, reason='Missing-Os-Info', server_reason='Missing-Os-Driver-Info', software_status='Incomplete', status='Incomplete', details=None, managed_object=None, registered_device=None):
        """
        CondHclStatus - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._component_status = None
        self._hardware_status = None
        self._hcl_firmware_version = None
        self._hcl_model = None
        self._hcl_os_vendor = None
        self._hcl_os_version = None
        self._hcl_processor = None
        self._inv_firmware_version = None
        self._inv_model = None
        self._inv_os_vendor = None
        self._inv_os_version = None
        self._inv_processor = None
        self._reason = None
        self._server_reason = None
        self._software_status = None
        self._status = None
        self._details = None
        self._managed_object = None
        self._registered_device = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if component_status is not None:
          self.component_status = component_status
        if hardware_status is not None:
          self.hardware_status = hardware_status
        if hcl_firmware_version is not None:
          self.hcl_firmware_version = hcl_firmware_version
        if hcl_model is not None:
          self.hcl_model = hcl_model
        if hcl_os_vendor is not None:
          self.hcl_os_vendor = hcl_os_vendor
        if hcl_os_version is not None:
          self.hcl_os_version = hcl_os_version
        if hcl_processor is not None:
          self.hcl_processor = hcl_processor
        if inv_firmware_version is not None:
          self.inv_firmware_version = inv_firmware_version
        if inv_model is not None:
          self.inv_model = inv_model
        if inv_os_vendor is not None:
          self.inv_os_vendor = inv_os_vendor
        if inv_os_version is not None:
          self.inv_os_version = inv_os_version
        if inv_processor is not None:
          self.inv_processor = inv_processor
        if reason is not None:
          self.reason = reason
        if server_reason is not None:
          self.server_reason = server_reason
        if software_status is not None:
          self.software_status = software_status
        if status is not None:
          self.status = status
        if details is not None:
          self.details = details
        if managed_object is not None:
          self.managed_object = managed_object
        if registered_device is not None:
          self.registered_device = registered_device

    @property
    def account_moid(self):
        """
        Gets the account_moid of this CondHclStatus.
        The Account ID for this managed object.  

        :return: The account_moid of this CondHclStatus.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this CondHclStatus.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this CondHclStatus.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this CondHclStatus.
        The time when this managed object was created.  

        :return: The create_time of this CondHclStatus.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this CondHclStatus.
        The time when this managed object was created.  

        :param create_time: The create_time of this CondHclStatus.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this CondHclStatus.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this CondHclStatus.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this CondHclStatus.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this CondHclStatus.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this CondHclStatus.
        The time when this managed object was last modified.  

        :return: The mod_time of this CondHclStatus.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this CondHclStatus.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this CondHclStatus.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this CondHclStatus.
        The unique identifier of this Managed Object instance.   

        :return: The moid of this CondHclStatus.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this CondHclStatus.
        The unique identifier of this Managed Object instance.   

        :param moid: The moid of this CondHclStatus.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this CondHclStatus.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :return: The object_type of this CondHclStatus.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this CondHclStatus.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :param object_type: The object_type of this CondHclStatus.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this CondHclStatus.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this CondHclStatus.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this CondHclStatus.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this CondHclStatus.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this CondHclStatus.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this CondHclStatus.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this CondHclStatus.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this CondHclStatus.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this CondHclStatus.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this CondHclStatus.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this CondHclStatus.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this CondHclStatus.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this CondHclStatus.
        The versioning info for this managed object.   

        :return: The version_context of this CondHclStatus.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this CondHclStatus.
        The versioning info for this managed object.   

        :param version_context: The version_context of this CondHclStatus.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this CondHclStatus.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this CondHclStatus.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this CondHclStatus.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this CondHclStatus.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this CondHclStatus.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this CondHclStatus.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this CondHclStatus.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this CondHclStatus.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this CondHclStatus.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :return: The permission_resources of this CondHclStatus.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this CondHclStatus.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :param permission_resources: The permission_resources of this CondHclStatus.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def component_status(self):
        """
        Gets the component_status of this CondHclStatus.
        The overall status for the components found in the HCL. This will provide the HCL validation status for all the components. It can be one of the following. \"Validated\" - all the components hardware/software profiles are listed in the HCL. \"Not-Listed\" - one or more components hardware/software profiles are not listed in the HCL \"Incomplete\" - the components are not evaluated as the server's software/hardware profiles are not listed in the HCL. \"Not-Evaluated\" - The components are not evaluated against the HCL because it is exempted.  

        :return: The component_status of this CondHclStatus.
        :rtype: str
        """
        return self._component_status

    @component_status.setter
    def component_status(self, component_status):
        """
        Sets the component_status of this CondHclStatus.
        The overall status for the components found in the HCL. This will provide the HCL validation status for all the components. It can be one of the following. \"Validated\" - all the components hardware/software profiles are listed in the HCL. \"Not-Listed\" - one or more components hardware/software profiles are not listed in the HCL \"Incomplete\" - the components are not evaluated as the server's software/hardware profiles are not listed in the HCL. \"Not-Evaluated\" - The components are not evaluated against the HCL because it is exempted.  

        :param component_status: The component_status of this CondHclStatus.
        :type: str
        """
        allowed_values = ["Incomplete", "Not-Found", "Not-Listed", "Validated", "Not-Evaluated"]
        if component_status not in allowed_values:
            raise ValueError(
                "Invalid value for `component_status` ({0}), must be one of {1}"
                .format(component_status, allowed_values)
            )

        self._component_status = component_status

    @property
    def hardware_status(self):
        """
        Gets the hardware_status of this CondHclStatus.
        The server model, processor and firmware are considered as part of the hardware profile for the server. This will provide the HCL validation status for the hardware profile. For the failure reason see the serverReason property. The status can be one of the following \"Validated\" - The server model, processor and firmware combination is listed in the HCL \"Not-Listed\" - The server model, processor and firmware combination is not listed in the HCL. \"Not-Evaluated\" - The server is not evaluated against the HCL because it is exempted.  

        :return: The hardware_status of this CondHclStatus.
        :rtype: str
        """
        return self._hardware_status

    @hardware_status.setter
    def hardware_status(self, hardware_status):
        """
        Sets the hardware_status of this CondHclStatus.
        The server model, processor and firmware are considered as part of the hardware profile for the server. This will provide the HCL validation status for the hardware profile. For the failure reason see the serverReason property. The status can be one of the following \"Validated\" - The server model, processor and firmware combination is listed in the HCL \"Not-Listed\" - The server model, processor and firmware combination is not listed in the HCL. \"Not-Evaluated\" - The server is not evaluated against the HCL because it is exempted.  

        :param hardware_status: The hardware_status of this CondHclStatus.
        :type: str
        """
        allowed_values = ["Incomplete", "Not-Found", "Not-Listed", "Validated", "Not-Evaluated"]
        if hardware_status not in allowed_values:
            raise ValueError(
                "Invalid value for `hardware_status` ({0}), must be one of {1}"
                .format(hardware_status, allowed_values)
            )

        self._hardware_status = hardware_status

    @property
    def hcl_firmware_version(self):
        """
        Gets the hcl_firmware_version of this CondHclStatus.
        The current CIMC version for the server normalized for querying HCL data. It is empty if we are missing this information.  

        :return: The hcl_firmware_version of this CondHclStatus.
        :rtype: str
        """
        return self._hcl_firmware_version

    @hcl_firmware_version.setter
    def hcl_firmware_version(self, hcl_firmware_version):
        """
        Sets the hcl_firmware_version of this CondHclStatus.
        The current CIMC version for the server normalized for querying HCL data. It is empty if we are missing this information.  

        :param hcl_firmware_version: The hcl_firmware_version of this CondHclStatus.
        :type: str
        """

        self._hcl_firmware_version = hcl_firmware_version

    @property
    def hcl_model(self):
        """
        Gets the hcl_model of this CondHclStatus.
        The managed object's model to validate normalized for querying HCL data. It is empty if we are missing this information.  

        :return: The hcl_model of this CondHclStatus.
        :rtype: str
        """
        return self._hcl_model

    @hcl_model.setter
    def hcl_model(self, hcl_model):
        """
        Sets the hcl_model of this CondHclStatus.
        The managed object's model to validate normalized for querying HCL data. It is empty if we are missing this information.  

        :param hcl_model: The hcl_model of this CondHclStatus.
        :type: str
        """

        self._hcl_model = hcl_model

    @property
    def hcl_os_vendor(self):
        """
        Gets the hcl_os_vendor of this CondHclStatus.
        The OS Vendor for the managed object to validate normalized for querying HCL data. It is empty if we are missing this information.  

        :return: The hcl_os_vendor of this CondHclStatus.
        :rtype: str
        """
        return self._hcl_os_vendor

    @hcl_os_vendor.setter
    def hcl_os_vendor(self, hcl_os_vendor):
        """
        Sets the hcl_os_vendor of this CondHclStatus.
        The OS Vendor for the managed object to validate normalized for querying HCL data. It is empty if we are missing this information.  

        :param hcl_os_vendor: The hcl_os_vendor of this CondHclStatus.
        :type: str
        """

        self._hcl_os_vendor = hcl_os_vendor

    @property
    def hcl_os_version(self):
        """
        Gets the hcl_os_version of this CondHclStatus.
        The OS Version for the managed object to validate normalized for querying HCL data. It is empty if we are missing this information.  

        :return: The hcl_os_version of this CondHclStatus.
        :rtype: str
        """
        return self._hcl_os_version

    @hcl_os_version.setter
    def hcl_os_version(self, hcl_os_version):
        """
        Sets the hcl_os_version of this CondHclStatus.
        The OS Version for the managed object to validate normalized for querying HCL data. It is empty if we are missing this information.  

        :param hcl_os_version: The hcl_os_version of this CondHclStatus.
        :type: str
        """

        self._hcl_os_version = hcl_os_version

    @property
    def hcl_processor(self):
        """
        Gets the hcl_processor of this CondHclStatus.
        The managed object's processor to validate if applicable normalized for querying HCL data. It is empty if we are missing this information.  

        :return: The hcl_processor of this CondHclStatus.
        :rtype: str
        """
        return self._hcl_processor

    @hcl_processor.setter
    def hcl_processor(self, hcl_processor):
        """
        Sets the hcl_processor of this CondHclStatus.
        The managed object's processor to validate if applicable normalized for querying HCL data. It is empty if we are missing this information.  

        :param hcl_processor: The hcl_processor of this CondHclStatus.
        :type: str
        """

        self._hcl_processor = hcl_processor

    @property
    def inv_firmware_version(self):
        """
        Gets the inv_firmware_version of this CondHclStatus.
        The current CIMC version for the server as received from inventory. It is empty if we are missing this information.  

        :return: The inv_firmware_version of this CondHclStatus.
        :rtype: str
        """
        return self._inv_firmware_version

    @inv_firmware_version.setter
    def inv_firmware_version(self, inv_firmware_version):
        """
        Sets the inv_firmware_version of this CondHclStatus.
        The current CIMC version for the server as received from inventory. It is empty if we are missing this information.  

        :param inv_firmware_version: The inv_firmware_version of this CondHclStatus.
        :type: str
        """

        self._inv_firmware_version = inv_firmware_version

    @property
    def inv_model(self):
        """
        Gets the inv_model of this CondHclStatus.
        The managed object's model to validate as received from the inventory. It is empty if we are missing this information.  

        :return: The inv_model of this CondHclStatus.
        :rtype: str
        """
        return self._inv_model

    @inv_model.setter
    def inv_model(self, inv_model):
        """
        Sets the inv_model of this CondHclStatus.
        The managed object's model to validate as received from the inventory. It is empty if we are missing this information.  

        :param inv_model: The inv_model of this CondHclStatus.
        :type: str
        """

        self._inv_model = inv_model

    @property
    def inv_os_vendor(self):
        """
        Gets the inv_os_vendor of this CondHclStatus.
        The OS Vendor for the managed object to validate as received from inventory. It is empty if we are missing this information.  

        :return: The inv_os_vendor of this CondHclStatus.
        :rtype: str
        """
        return self._inv_os_vendor

    @inv_os_vendor.setter
    def inv_os_vendor(self, inv_os_vendor):
        """
        Sets the inv_os_vendor of this CondHclStatus.
        The OS Vendor for the managed object to validate as received from inventory. It is empty if we are missing this information.  

        :param inv_os_vendor: The inv_os_vendor of this CondHclStatus.
        :type: str
        """

        self._inv_os_vendor = inv_os_vendor

    @property
    def inv_os_version(self):
        """
        Gets the inv_os_version of this CondHclStatus.
        The OS Version for the managed object to validate as received from inventory. It is empty if we are missing this information.  

        :return: The inv_os_version of this CondHclStatus.
        :rtype: str
        """
        return self._inv_os_version

    @inv_os_version.setter
    def inv_os_version(self, inv_os_version):
        """
        Sets the inv_os_version of this CondHclStatus.
        The OS Version for the managed object to validate as received from inventory. It is empty if we are missing this information.  

        :param inv_os_version: The inv_os_version of this CondHclStatus.
        :type: str
        """

        self._inv_os_version = inv_os_version

    @property
    def inv_processor(self):
        """
        Gets the inv_processor of this CondHclStatus.
        The managed object's processor to validate if applicable as received from inventory. It is empty if we are missing this information.  

        :return: The inv_processor of this CondHclStatus.
        :rtype: str
        """
        return self._inv_processor

    @inv_processor.setter
    def inv_processor(self, inv_processor):
        """
        Sets the inv_processor of this CondHclStatus.
        The managed object's processor to validate if applicable as received from inventory. It is empty if we are missing this information.  

        :param inv_processor: The inv_processor of this CondHclStatus.
        :type: str
        """

        self._inv_processor = inv_processor

    @property
    def reason(self):
        """
        Gets the reason of this CondHclStatus.
        The reason for the HCL status. It will be one of the following \"Missing-Os-Info\" - we are missing os information in the inventory from the device connector \"Incompatible-Components\" - we have 1 or more components with \"Not-Validated\" status \"Compatible\" - all the components have \"Validated\" status. \"Not-Evaluated\" - The server is not evaluated against the HCL because it is exempted.  

        :return: The reason of this CondHclStatus.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """
        Sets the reason of this CondHclStatus.
        The reason for the HCL status. It will be one of the following \"Missing-Os-Info\" - we are missing os information in the inventory from the device connector \"Incompatible-Components\" - we have 1 or more components with \"Not-Validated\" status \"Compatible\" - all the components have \"Validated\" status. \"Not-Evaluated\" - The server is not evaluated against the HCL because it is exempted.  

        :param reason: The reason of this CondHclStatus.
        :type: str
        """
        allowed_values = ["Missing-Os-Info", "Incompatible-Components", "Compatible", "Not-Evaluated"]
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def server_reason(self):
        """
        Gets the server_reason of this CondHclStatus.
        The reason generated by the server's HCL validation. For HCL the evaluation can be seen in three logical stages 1. Evaluate the server's hardware status 2. Evaluate the server's software status 3. Evaluate the server's components (each component has its own hardware/software evaluation) The evaluation does not proceed to the next stage until the previous stage is evaluated. Therefore there can be only one validation reason. \"Incompatible-Server\" - the server model is not listed in the HCL. \"Incompatible-Processor\" - the server model and processor combination is not listed in HCL. \"Incompatible-Firmware\" - the server model, processor and server firmware is not listed in HCL. \"Missing-Os-Info\" - the os vendor and version is not listed in HCL with the HW profile. \"Incompatible-Os-Info\" - the os vendor and version is not listed in HCL with the HW profile. \"Incompatible-Components\" - there is one or more components with \"Not-Validated\" status \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). \"Compatible\" - the server and all its components are validated. \"Not-Evaluated\" - The server is not evaluated against the HCL because it is exempted.  

        :return: The server_reason of this CondHclStatus.
        :rtype: str
        """
        return self._server_reason

    @server_reason.setter
    def server_reason(self, server_reason):
        """
        Sets the server_reason of this CondHclStatus.
        The reason generated by the server's HCL validation. For HCL the evaluation can be seen in three logical stages 1. Evaluate the server's hardware status 2. Evaluate the server's software status 3. Evaluate the server's components (each component has its own hardware/software evaluation) The evaluation does not proceed to the next stage until the previous stage is evaluated. Therefore there can be only one validation reason. \"Incompatible-Server\" - the server model is not listed in the HCL. \"Incompatible-Processor\" - the server model and processor combination is not listed in HCL. \"Incompatible-Firmware\" - the server model, processor and server firmware is not listed in HCL. \"Missing-Os-Info\" - the os vendor and version is not listed in HCL with the HW profile. \"Incompatible-Os-Info\" - the os vendor and version is not listed in HCL with the HW profile. \"Incompatible-Components\" - there is one or more components with \"Not-Validated\" status \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). \"Compatible\" - the server and all its components are validated. \"Not-Evaluated\" - The server is not evaluated against the HCL because it is exempted.  

        :param server_reason: The server_reason of this CondHclStatus.
        :type: str
        """
        allowed_values = ["Missing-Os-Driver-Info", "Incompatible-Server", "Incompatible-Processor", "Incompatible-Os-Info", "Incompatible-Firmware", "Service-Unavailable", "Service-Error", "Not-Evaluated", "Incompatible-Components", "Compatible"]
        if server_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `server_reason` ({0}), must be one of {1}"
                .format(server_reason, allowed_values)
            )

        self._server_reason = server_reason

    @property
    def software_status(self):
        """
        Gets the software_status of this CondHclStatus.
        The OS vendor and version are considered part of the software profile for the server. This will provide the HCL validation status for the software profile. For the failure reason see the serverReason property. The status can be be one of the following \"Validated\" - The os vendor/version is listed in the HCL for the server model, processor and firmware \"Not-Listed\" - The os vendor/version is not listed in the HCL for the server model, processor and firmware \"Incomplete\" - The inventory is missing os vendor/version and HCL validation was not performed. \"Not-Evaluated\" - The server is not evaluated against the HCL because it is exempted.  

        :return: The software_status of this CondHclStatus.
        :rtype: str
        """
        return self._software_status

    @software_status.setter
    def software_status(self, software_status):
        """
        Sets the software_status of this CondHclStatus.
        The OS vendor and version are considered part of the software profile for the server. This will provide the HCL validation status for the software profile. For the failure reason see the serverReason property. The status can be be one of the following \"Validated\" - The os vendor/version is listed in the HCL for the server model, processor and firmware \"Not-Listed\" - The os vendor/version is not listed in the HCL for the server model, processor and firmware \"Incomplete\" - The inventory is missing os vendor/version and HCL validation was not performed. \"Not-Evaluated\" - The server is not evaluated against the HCL because it is exempted.  

        :param software_status: The software_status of this CondHclStatus.
        :type: str
        """
        allowed_values = ["Incomplete", "Not-Found", "Not-Listed", "Validated", "Not-Evaluated"]
        if software_status not in allowed_values:
            raise ValueError(
                "Invalid value for `software_status` ({0}), must be one of {1}"
                .format(software_status, allowed_values)
            )

        self._software_status = software_status

    @property
    def status(self):
        """
        Gets the status of this CondHclStatus.
        The HCL compatibility status of the managed object. The status can be one of the following \"Incomplete\" - there is no enough information to evaluate against the HCL data \"Validated\" - all components have been evaluated against the HCL and they all have \"Validated\" status \"Not-Listed\" - all components have been evaluated against the HCL and one or more have \"Not-Listed\" status. \"Not-Evaluated\" - server is not evaluated against the HCL because it is exempted.   

        :return: The status of this CondHclStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this CondHclStatus.
        The HCL compatibility status of the managed object. The status can be one of the following \"Incomplete\" - there is no enough information to evaluate against the HCL data \"Validated\" - all components have been evaluated against the HCL and they all have \"Validated\" status \"Not-Listed\" - all components have been evaluated against the HCL and one or more have \"Not-Listed\" status. \"Not-Evaluated\" - server is not evaluated against the HCL because it is exempted.   

        :param status: The status of this CondHclStatus.
        :type: str
        """
        allowed_values = ["Incomplete", "Not-Found", "Not-Listed", "Validated", "Not-Evaluated"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def details(self):
        """
        Gets the details of this CondHclStatus.
        The collection of all the detailed related components for which we performed HCL validation. 

        :return: The details of this CondHclStatus.
        :rtype: list[CondHclStatusDetailRef]
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this CondHclStatus.
        The collection of all the detailed related components for which we performed HCL validation. 

        :param details: The details of this CondHclStatus.
        :type: list[CondHclStatusDetailRef]
        """

        self._details = details

    @property
    def managed_object(self):
        """
        Gets the managed_object of this CondHclStatus.
        The managed object relationship for this HCLStatus. 

        :return: The managed_object of this CondHclStatus.
        :rtype: InventoryBaseRef
        """
        return self._managed_object

    @managed_object.setter
    def managed_object(self, managed_object):
        """
        Sets the managed_object of this CondHclStatus.
        The managed object relationship for this HCLStatus. 

        :param managed_object: The managed_object of this CondHclStatus.
        :type: InventoryBaseRef
        """

        self._managed_object = managed_object

    @property
    def registered_device(self):
        """
        Gets the registered_device of this CondHclStatus.
        The Relationship to the registered device. We need this in order to correctly set permissions during device claim. 

        :return: The registered_device of this CondHclStatus.
        :rtype: AssetDeviceRegistrationRef
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """
        Sets the registered_device of this CondHclStatus.
        The Relationship to the registered device. We need this in order to correctly set permissions during device claim. 

        :param registered_device: The registered_device of this CondHclStatus.
        :type: AssetDeviceRegistrationRef
        """

        self._registered_device = registered_device

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CondHclStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
