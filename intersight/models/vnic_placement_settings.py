# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1461
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VnicPlacementSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'id': 'str',
        'pci_link': 'int',
        'uplink': 'int'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'id': 'Id',
        'pci_link': 'PciLink',
        'uplink': 'Uplink'
    }

    def __init__(self, object_type=None, id=None, pci_link=None, uplink=None):
        """
        VnicPlacementSettings - a model defined in Swagger
        """

        self._object_type = None
        self._id = None
        self._pci_link = None
        self._uplink = None

        if object_type is not None:
          self.object_type = object_type
        if id is not None:
          self.id = id
        if pci_link is not None:
          self.pci_link = pci_link
        if uplink is not None:
          self.uplink = uplink

    @property
    def object_type(self):
        """
        Gets the object_type of this VnicPlacementSettings.
        The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.

        :return: The object_type of this VnicPlacementSettings.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this VnicPlacementSettings.
        The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.

        :param object_type: The object_type of this VnicPlacementSettings.
        :type: str
        """

        self._object_type = object_type

    @property
    def id(self):
        """
        Gets the id of this VnicPlacementSettings.
        PCIe Slot where the VIC adapter is installed. Supported values are (1-15) and MLOM.

        :return: The id of this VnicPlacementSettings.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this VnicPlacementSettings.
        PCIe Slot where the VIC adapter is installed. Supported values are (1-15) and MLOM.

        :param id: The id of this VnicPlacementSettings.
        :type: str
        """

        self._id = id

    @property
    def pci_link(self):
        """
        Gets the pci_link of this VnicPlacementSettings.
        The PCI Link used as transport for the virtual interface. All VIC adapters have a single PCI link except VIC 1385 which has two.

        :return: The pci_link of this VnicPlacementSettings.
        :rtype: int
        """
        return self._pci_link

    @pci_link.setter
    def pci_link(self, pci_link):
        """
        Sets the pci_link of this VnicPlacementSettings.
        The PCI Link used as transport for the virtual interface. All VIC adapters have a single PCI link except VIC 1385 which has two.

        :param pci_link: The pci_link of this VnicPlacementSettings.
        :type: int
        """

        self._pci_link = pci_link

    @property
    def uplink(self):
        """
        Gets the uplink of this VnicPlacementSettings.
        Adapter port on which the virtual interface will be created.

        :return: The uplink of this VnicPlacementSettings.
        :rtype: int
        """
        return self._uplink

    @uplink.setter
    def uplink(self, uplink):
        """
        Sets the uplink of this VnicPlacementSettings.
        Adapter port on which the virtual interface will be created.

        :param uplink: The uplink of this VnicPlacementSettings.
        :type: int
        """

        self._uplink = uplink

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VnicPlacementSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
