# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ServerProfile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'config_changes': 'PolicyConfigChange',
        'assigned_server': 'ComputeRackUnit',
        'associated_server': 'ComputeRackUnit',
        'config_change_details': 'list[ServerConfigChangeDetail]',
        'config_result': 'ServerConfigResult',
        'organization': 'OrganizationOrganization',
        'running_workflows': 'list[WorkflowWorkflowInfo]'
    }

    attribute_map = {
        'config_changes': 'ConfigChanges',
        'assigned_server': 'AssignedServer',
        'associated_server': 'AssociatedServer',
        'config_change_details': 'ConfigChangeDetails',
        'config_result': 'ConfigResult',
        'organization': 'Organization',
        'running_workflows': 'RunningWorkflows'
    }

    def __init__(self,
                 config_changes=None,
                 assigned_server=None,
                 associated_server=None,
                 config_change_details=None,
                 config_result=None,
                 organization=None,
                 running_workflows=None,
                 local_vars_configuration=None):  # noqa: E501
        """ServerProfile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._config_changes = None
        self._assigned_server = None
        self._associated_server = None
        self._config_change_details = None
        self._config_result = None
        self._organization = None
        self._running_workflows = None
        self.discriminator = None

        if config_changes is not None:
            self.config_changes = config_changes
        if assigned_server is not None:
            self.assigned_server = assigned_server
        if associated_server is not None:
            self.associated_server = associated_server
        if config_change_details is not None:
            self.config_change_details = config_change_details
        if config_result is not None:
            self.config_result = config_result
        if organization is not None:
            self.organization = organization
        if running_workflows is not None:
            self.running_workflows = running_workflows

    @property
    def config_changes(self):
        """Gets the config_changes of this ServerProfile.  # noqa: E501


        :return: The config_changes of this ServerProfile.  # noqa: E501
        :rtype: PolicyConfigChange
        """
        return self._config_changes

    @config_changes.setter
    def config_changes(self, config_changes):
        """Sets the config_changes of this ServerProfile.


        :param config_changes: The config_changes of this ServerProfile.  # noqa: E501
        :type: PolicyConfigChange
        """

        self._config_changes = config_changes

    @property
    def assigned_server(self):
        """Gets the assigned_server of this ServerProfile.  # noqa: E501


        :return: The assigned_server of this ServerProfile.  # noqa: E501
        :rtype: ComputeRackUnit
        """
        return self._assigned_server

    @assigned_server.setter
    def assigned_server(self, assigned_server):
        """Sets the assigned_server of this ServerProfile.


        :param assigned_server: The assigned_server of this ServerProfile.  # noqa: E501
        :type: ComputeRackUnit
        """

        self._assigned_server = assigned_server

    @property
    def associated_server(self):
        """Gets the associated_server of this ServerProfile.  # noqa: E501


        :return: The associated_server of this ServerProfile.  # noqa: E501
        :rtype: ComputeRackUnit
        """
        return self._associated_server

    @associated_server.setter
    def associated_server(self, associated_server):
        """Sets the associated_server of this ServerProfile.


        :param associated_server: The associated_server of this ServerProfile.  # noqa: E501
        :type: ComputeRackUnit
        """

        self._associated_server = associated_server

    @property
    def config_change_details(self):
        """Gets the config_change_details of this ServerProfile.  # noqa: E501

        A reference to a serverConfigChangeDetail resource. When the $expand query parameter is specified, the referenced resource is returned inline. The configuration change details are captured here.   # noqa: E501

        :return: The config_change_details of this ServerProfile.  # noqa: E501
        :rtype: list[ServerConfigChangeDetail]
        """
        return self._config_change_details

    @config_change_details.setter
    def config_change_details(self, config_change_details):
        """Sets the config_change_details of this ServerProfile.

        A reference to a serverConfigChangeDetail resource. When the $expand query parameter is specified, the referenced resource is returned inline. The configuration change details are captured here.   # noqa: E501

        :param config_change_details: The config_change_details of this ServerProfile.  # noqa: E501
        :type: list[ServerConfigChangeDetail]
        """

        self._config_change_details = config_change_details

    @property
    def config_result(self):
        """Gets the config_result of this ServerProfile.  # noqa: E501


        :return: The config_result of this ServerProfile.  # noqa: E501
        :rtype: ServerConfigResult
        """
        return self._config_result

    @config_result.setter
    def config_result(self, config_result):
        """Sets the config_result of this ServerProfile.


        :param config_result: The config_result of this ServerProfile.  # noqa: E501
        :type: ServerConfigResult
        """

        self._config_result = config_result

    @property
    def organization(self):
        """Gets the organization of this ServerProfile.  # noqa: E501


        :return: The organization of this ServerProfile.  # noqa: E501
        :rtype: OrganizationOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ServerProfile.


        :param organization: The organization of this ServerProfile.  # noqa: E501
        :type: OrganizationOrganization
        """

        self._organization = organization

    @property
    def running_workflows(self):
        """Gets the running_workflows of this ServerProfile.  # noqa: E501

        A reference to a workflowWorkflowInfo resource. When the $expand query parameter is specified, the referenced resource is returned inline. The WorkflowInfos in the workflow engine that are running for this server Profile.   # noqa: E501

        :return: The running_workflows of this ServerProfile.  # noqa: E501
        :rtype: list[WorkflowWorkflowInfo]
        """
        return self._running_workflows

    @running_workflows.setter
    def running_workflows(self, running_workflows):
        """Sets the running_workflows of this ServerProfile.

        A reference to a workflowWorkflowInfo resource. When the $expand query parameter is specified, the referenced resource is returned inline. The WorkflowInfos in the workflow engine that are running for this server Profile.   # noqa: E501

        :param running_workflows: The running_workflows of this ServerProfile.  # noqa: E501
        :type: list[WorkflowWorkflowInfo]
        """

        self._running_workflows = running_workflows

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServerProfile):
            return True

        return self.to_dict() != other.to_dict()
