# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1415
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RecoveryOnDemandBackup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoOptionalTag]',
        'version_context': 'MoOptionalVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'description': 'str',
        'name': 'str',
        'file_name_prefix': 'str',
        'is_password_set': 'bool',
        'location_type': 'str',
        'password': 'str',
        'path': 'str',
        'protocol': 'str',
        'retention_count': 'int',
        'user_name': 'str',
        'config_result': 'RecoveryConfigResultRef',
        'device_id': 'AssetDeviceRegistrationRef',
        'organization': 'OrganizationOrganizationRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'description': 'Description',
        'name': 'Name',
        'file_name_prefix': 'FileNamePrefix',
        'is_password_set': 'IsPasswordSet',
        'location_type': 'LocationType',
        'password': 'Password',
        'path': 'Path',
        'protocol': 'Protocol',
        'retention_count': 'RetentionCount',
        'user_name': 'UserName',
        'config_result': 'ConfigResult',
        'device_id': 'DeviceId',
        'organization': 'Organization'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, description=None, name=None, file_name_prefix=None, is_password_set=None, location_type='Network Share', password=None, path=None, protocol='SCP', retention_count=None, user_name=None, config_result=None, device_id=None, organization=None):
        """
        RecoveryOnDemandBackup - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._description = None
        self._name = None
        self._file_name_prefix = None
        self._is_password_set = None
        self._location_type = None
        self._password = None
        self._path = None
        self._protocol = None
        self._retention_count = None
        self._user_name = None
        self._config_result = None
        self._device_id = None
        self._organization = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if description is not None:
          self.description = description
        if name is not None:
          self.name = name
        if file_name_prefix is not None:
          self.file_name_prefix = file_name_prefix
        if is_password_set is not None:
          self.is_password_set = is_password_set
        if location_type is not None:
          self.location_type = location_type
        if password is not None:
          self.password = password
        if path is not None:
          self.path = path
        if protocol is not None:
          self.protocol = protocol
        if retention_count is not None:
          self.retention_count = retention_count
        if user_name is not None:
          self.user_name = user_name
        if config_result is not None:
          self.config_result = config_result
        if device_id is not None:
          self.device_id = device_id
        if organization is not None:
          self.organization = organization

    @property
    def account_moid(self):
        """
        Gets the account_moid of this RecoveryOnDemandBackup.
        The Account ID for this managed object.  

        :return: The account_moid of this RecoveryOnDemandBackup.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this RecoveryOnDemandBackup.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this RecoveryOnDemandBackup.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this RecoveryOnDemandBackup.
        The time when this managed object was created.  

        :return: The create_time of this RecoveryOnDemandBackup.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this RecoveryOnDemandBackup.
        The time when this managed object was created.  

        :param create_time: The create_time of this RecoveryOnDemandBackup.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this RecoveryOnDemandBackup.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this RecoveryOnDemandBackup.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this RecoveryOnDemandBackup.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this RecoveryOnDemandBackup.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this RecoveryOnDemandBackup.
        The time when this managed object was last modified.  

        :return: The mod_time of this RecoveryOnDemandBackup.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this RecoveryOnDemandBackup.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this RecoveryOnDemandBackup.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this RecoveryOnDemandBackup.
        The unique identifier of this Managed Object instance.   

        :return: The moid of this RecoveryOnDemandBackup.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this RecoveryOnDemandBackup.
        The unique identifier of this Managed Object instance.   

        :param moid: The moid of this RecoveryOnDemandBackup.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this RecoveryOnDemandBackup.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :return: The object_type of this RecoveryOnDemandBackup.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this RecoveryOnDemandBackup.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :param object_type: The object_type of this RecoveryOnDemandBackup.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this RecoveryOnDemandBackup.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this RecoveryOnDemandBackup.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this RecoveryOnDemandBackup.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this RecoveryOnDemandBackup.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this RecoveryOnDemandBackup.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this RecoveryOnDemandBackup.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this RecoveryOnDemandBackup.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this RecoveryOnDemandBackup.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this RecoveryOnDemandBackup.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this RecoveryOnDemandBackup.
        :rtype: list[MoOptionalTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this RecoveryOnDemandBackup.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this RecoveryOnDemandBackup.
        :type: list[MoOptionalTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this RecoveryOnDemandBackup.
        The versioning info for this managed object.   

        :return: The version_context of this RecoveryOnDemandBackup.
        :rtype: MoOptionalVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this RecoveryOnDemandBackup.
        The versioning info for this managed object.   

        :param version_context: The version_context of this RecoveryOnDemandBackup.
        :type: MoOptionalVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this RecoveryOnDemandBackup.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this RecoveryOnDemandBackup.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this RecoveryOnDemandBackup.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this RecoveryOnDemandBackup.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this RecoveryOnDemandBackup.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this RecoveryOnDemandBackup.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this RecoveryOnDemandBackup.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this RecoveryOnDemandBackup.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this RecoveryOnDemandBackup.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :return: The permission_resources of this RecoveryOnDemandBackup.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this RecoveryOnDemandBackup.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :param permission_resources: The permission_resources of this RecoveryOnDemandBackup.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def description(self):
        """
        Gets the description of this RecoveryOnDemandBackup.
        Description of the policy.  

        :return: The description of this RecoveryOnDemandBackup.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this RecoveryOnDemandBackup.
        Description of the policy.  

        :param description: The description of this RecoveryOnDemandBackup.
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """
        Gets the name of this RecoveryOnDemandBackup.
        Name of the concrete policy.   

        :return: The name of this RecoveryOnDemandBackup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RecoveryOnDemandBackup.
        Name of the concrete policy.   

        :param name: The name of this RecoveryOnDemandBackup.
        :type: str
        """

        self._name = name

    @property
    def file_name_prefix(self):
        """
        Gets the file_name_prefix of this RecoveryOnDemandBackup.
        The file name for the backup image. This name is added as a prefix in the name for the backup image. A unique file name for the backup image is created along with a timestamp. For example: prefix-1572431305418   

        :return: The file_name_prefix of this RecoveryOnDemandBackup.
        :rtype: str
        """
        return self._file_name_prefix

    @file_name_prefix.setter
    def file_name_prefix(self, file_name_prefix):
        """
        Sets the file_name_prefix of this RecoveryOnDemandBackup.
        The file name for the backup image. This name is added as a prefix in the name for the backup image. A unique file name for the backup image is created along with a timestamp. For example: prefix-1572431305418   

        :param file_name_prefix: The file_name_prefix of this RecoveryOnDemandBackup.
        :type: str
        """

        self._file_name_prefix = file_name_prefix

    @property
    def is_password_set(self):
        """
        Gets the is_password_set of this RecoveryOnDemandBackup.

        :return: The is_password_set of this RecoveryOnDemandBackup.
        :rtype: bool
        """
        return self._is_password_set

    @is_password_set.setter
    def is_password_set(self, is_password_set):
        """
        Sets the is_password_set of this RecoveryOnDemandBackup.

        :param is_password_set: The is_password_set of this RecoveryOnDemandBackup.
        :type: bool
        """

        self._is_password_set = is_password_set

    @property
    def location_type(self):
        """
        Gets the location_type of this RecoveryOnDemandBackup.
        Specifies whether the backup will be stored locally or remotely.  

        :return: The location_type of this RecoveryOnDemandBackup.
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """
        Sets the location_type of this RecoveryOnDemandBackup.
        Specifies whether the backup will be stored locally or remotely.  

        :param location_type: The location_type of this RecoveryOnDemandBackup.
        :type: str
        """
        allowed_values = ["Network Share", "Local Storage"]
        if location_type not in allowed_values:
            raise ValueError(
                "Invalid value for `location_type` ({0}), must be one of {1}"
                .format(location_type, allowed_values)
            )

        self._location_type = location_type

    @property
    def password(self):
        """
        Gets the password of this RecoveryOnDemandBackup.
        Backup server password.  

        :return: The password of this RecoveryOnDemandBackup.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this RecoveryOnDemandBackup.
        Backup server password.  

        :param password: The password of this RecoveryOnDemandBackup.
        :type: str
        """

        self._password = password

    @property
    def path(self):
        """
        Gets the path of this RecoveryOnDemandBackup.
        The file system path where the backup images must be stored. Include the IP address/hostname of the network share location and the complete file system path. For example: 172.29.109.234/var/backups/   

        :return: The path of this RecoveryOnDemandBackup.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this RecoveryOnDemandBackup.
        The file system path where the backup images must be stored. Include the IP address/hostname of the network share location and the complete file system path. For example: 172.29.109.234/var/backups/   

        :param path: The path of this RecoveryOnDemandBackup.
        :type: str
        """

        self._path = path

    @property
    def protocol(self):
        """
        Gets the protocol of this RecoveryOnDemandBackup.
        Protocol for transferring the backup image to the network share location.  

        :return: The protocol of this RecoveryOnDemandBackup.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """
        Sets the protocol of this RecoveryOnDemandBackup.
        Protocol for transferring the backup image to the network share location.  

        :param protocol: The protocol of this RecoveryOnDemandBackup.
        :type: str
        """
        allowed_values = ["SCP", "SFTP", "FTP"]
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def retention_count(self):
        """
        Gets the retention_count of this RecoveryOnDemandBackup.
        Number of backup copies maintained on the local or remote server. When the created backup files exceed this number, the initial backup files are overwritten in a sequential manner.   

        :return: The retention_count of this RecoveryOnDemandBackup.
        :rtype: int
        """
        return self._retention_count

    @retention_count.setter
    def retention_count(self, retention_count):
        """
        Sets the retention_count of this RecoveryOnDemandBackup.
        Number of backup copies maintained on the local or remote server. When the created backup files exceed this number, the initial backup files are overwritten in a sequential manner.   

        :param retention_count: The retention_count of this RecoveryOnDemandBackup.
        :type: int
        """

        self._retention_count = retention_count

    @property
    def user_name(self):
        """
        Gets the user_name of this RecoveryOnDemandBackup.
        Backup server user name.   

        :return: The user_name of this RecoveryOnDemandBackup.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this RecoveryOnDemandBackup.
        Backup server user name.   

        :param user_name: The user_name of this RecoveryOnDemandBackup.
        :type: str
        """

        self._user_name = user_name

    @property
    def config_result(self):
        """
        Gets the config_result of this RecoveryOnDemandBackup.
        The status of ondemand backup. 

        :return: The config_result of this RecoveryOnDemandBackup.
        :rtype: RecoveryConfigResultRef
        """
        return self._config_result

    @config_result.setter
    def config_result(self, config_result):
        """
        Sets the config_result of this RecoveryOnDemandBackup.
        The status of ondemand backup. 

        :param config_result: The config_result of this RecoveryOnDemandBackup.
        :type: RecoveryConfigResultRef
        """

        self._config_result = config_result

    @property
    def device_id(self):
        """
        Gets the device_id of this RecoveryOnDemandBackup.
        Relationship to the end point on which back up is configured. 

        :return: The device_id of this RecoveryOnDemandBackup.
        :rtype: AssetDeviceRegistrationRef
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """
        Sets the device_id of this RecoveryOnDemandBackup.
        Relationship to the end point on which back up is configured. 

        :param device_id: The device_id of this RecoveryOnDemandBackup.
        :type: AssetDeviceRegistrationRef
        """

        self._device_id = device_id

    @property
    def organization(self):
        """
        Gets the organization of this RecoveryOnDemandBackup.
        Relationship to the Organization that owns the Managed Object. 

        :return: The organization of this RecoveryOnDemandBackup.
        :rtype: OrganizationOrganizationRef
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this RecoveryOnDemandBackup.
        Relationship to the Organization that owns the Managed Object. 

        :param organization: The organization of this RecoveryOnDemandBackup.
        :type: OrganizationOrganizationRef
        """

        self._organization = organization

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RecoveryOnDemandBackup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
