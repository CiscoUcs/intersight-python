# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class StoragePhysicalDiskUsageAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'number_of_blocks': 'str',
        'physical_drive': 'str',
        'span': 'str',
        'starting_block': 'str',
        'state': 'str',
        'virtual_drive': 'str',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'number_of_blocks': 'NumberOfBlocks',
        'physical_drive': 'PhysicalDrive',
        'span': 'Span',
        'starting_block': 'StartingBlock',
        'state': 'State',
        'virtual_drive': 'VirtualDrive',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 number_of_blocks=None,
                 physical_drive=None,
                 span=None,
                 starting_block=None,
                 state=None,
                 virtual_drive=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """StoragePhysicalDiskUsageAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._number_of_blocks = None
        self._physical_drive = None
        self._span = None
        self._starting_block = None
        self._state = None
        self._virtual_drive = None
        self._registered_device = None
        self.discriminator = None

        if number_of_blocks is not None:
            self.number_of_blocks = number_of_blocks
        if physical_drive is not None:
            self.physical_drive = physical_drive
        if span is not None:
            self.span = span
        if starting_block is not None:
            self.starting_block = starting_block
        if state is not None:
            self.state = state
        if virtual_drive is not None:
            self.virtual_drive = virtual_drive
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def number_of_blocks(self):
        """Gets the number_of_blocks of this StoragePhysicalDiskUsageAllOf.  # noqa: E501


        :return: The number_of_blocks of this StoragePhysicalDiskUsageAllOf.  # noqa: E501
        :rtype: str
        """
        return self._number_of_blocks

    @number_of_blocks.setter
    def number_of_blocks(self, number_of_blocks):
        """Sets the number_of_blocks of this StoragePhysicalDiskUsageAllOf.


        :param number_of_blocks: The number_of_blocks of this StoragePhysicalDiskUsageAllOf.  # noqa: E501
        :type: str
        """

        self._number_of_blocks = number_of_blocks

    @property
    def physical_drive(self):
        """Gets the physical_drive of this StoragePhysicalDiskUsageAllOf.  # noqa: E501


        :return: The physical_drive of this StoragePhysicalDiskUsageAllOf.  # noqa: E501
        :rtype: str
        """
        return self._physical_drive

    @physical_drive.setter
    def physical_drive(self, physical_drive):
        """Sets the physical_drive of this StoragePhysicalDiskUsageAllOf.


        :param physical_drive: The physical_drive of this StoragePhysicalDiskUsageAllOf.  # noqa: E501
        :type: str
        """

        self._physical_drive = physical_drive

    @property
    def span(self):
        """Gets the span of this StoragePhysicalDiskUsageAllOf.  # noqa: E501


        :return: The span of this StoragePhysicalDiskUsageAllOf.  # noqa: E501
        :rtype: str
        """
        return self._span

    @span.setter
    def span(self, span):
        """Sets the span of this StoragePhysicalDiskUsageAllOf.


        :param span: The span of this StoragePhysicalDiskUsageAllOf.  # noqa: E501
        :type: str
        """

        self._span = span

    @property
    def starting_block(self):
        """Gets the starting_block of this StoragePhysicalDiskUsageAllOf.  # noqa: E501


        :return: The starting_block of this StoragePhysicalDiskUsageAllOf.  # noqa: E501
        :rtype: str
        """
        return self._starting_block

    @starting_block.setter
    def starting_block(self, starting_block):
        """Sets the starting_block of this StoragePhysicalDiskUsageAllOf.


        :param starting_block: The starting_block of this StoragePhysicalDiskUsageAllOf.  # noqa: E501
        :type: str
        """

        self._starting_block = starting_block

    @property
    def state(self):
        """Gets the state of this StoragePhysicalDiskUsageAllOf.  # noqa: E501


        :return: The state of this StoragePhysicalDiskUsageAllOf.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StoragePhysicalDiskUsageAllOf.


        :param state: The state of this StoragePhysicalDiskUsageAllOf.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def virtual_drive(self):
        """Gets the virtual_drive of this StoragePhysicalDiskUsageAllOf.  # noqa: E501


        :return: The virtual_drive of this StoragePhysicalDiskUsageAllOf.  # noqa: E501
        :rtype: str
        """
        return self._virtual_drive

    @virtual_drive.setter
    def virtual_drive(self, virtual_drive):
        """Sets the virtual_drive of this StoragePhysicalDiskUsageAllOf.


        :param virtual_drive: The virtual_drive of this StoragePhysicalDiskUsageAllOf.  # noqa: E501
        :type: str
        """

        self._virtual_drive = virtual_drive

    @property
    def registered_device(self):
        """Gets the registered_device of this StoragePhysicalDiskUsageAllOf.  # noqa: E501


        :return: The registered_device of this StoragePhysicalDiskUsageAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this StoragePhysicalDiskUsageAllOf.


        :param registered_device: The registered_device of this StoragePhysicalDiskUsageAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoragePhysicalDiskUsageAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StoragePhysicalDiskUsageAllOf):
            return True

        return self.to_dict() != other.to_dict()
