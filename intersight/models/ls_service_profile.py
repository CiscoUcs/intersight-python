# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class LsServiceProfile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'assign_state': 'str',
        'assoc_state': 'str',
        'associated_server': 'str',
        'config_state': 'str',
        'name': 'str',
        'oper_state': 'str',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'assign_state': 'AssignState',
        'assoc_state': 'AssocState',
        'associated_server': 'AssociatedServer',
        'config_state': 'ConfigState',
        'name': 'Name',
        'oper_state': 'OperState',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 assign_state=None,
                 assoc_state=None,
                 associated_server=None,
                 config_state=None,
                 name=None,
                 oper_state=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """LsServiceProfile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._assign_state = None
        self._assoc_state = None
        self._associated_server = None
        self._config_state = None
        self._name = None
        self._oper_state = None
        self._registered_device = None
        self.discriminator = None

        if assign_state is not None:
            self.assign_state = assign_state
        if assoc_state is not None:
            self.assoc_state = assoc_state
        if associated_server is not None:
            self.associated_server = associated_server
        if config_state is not None:
            self.config_state = config_state
        if name is not None:
            self.name = name
        if oper_state is not None:
            self.oper_state = oper_state
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def assign_state(self):
        """Gets the assign_state of this LsServiceProfile.  # noqa: E501

        Assignment state of the service profile.    # noqa: E501

        :return: The assign_state of this LsServiceProfile.  # noqa: E501
        :rtype: str
        """
        return self._assign_state

    @assign_state.setter
    def assign_state(self, assign_state):
        """Sets the assign_state of this LsServiceProfile.

        Assignment state of the service profile.    # noqa: E501

        :param assign_state: The assign_state of this LsServiceProfile.  # noqa: E501
        :type: str
        """

        self._assign_state = assign_state

    @property
    def assoc_state(self):
        """Gets the assoc_state of this LsServiceProfile.  # noqa: E501

        Association state of the service profile.    # noqa: E501

        :return: The assoc_state of this LsServiceProfile.  # noqa: E501
        :rtype: str
        """
        return self._assoc_state

    @assoc_state.setter
    def assoc_state(self, assoc_state):
        """Sets the assoc_state of this LsServiceProfile.

        Association state of the service profile.    # noqa: E501

        :param assoc_state: The assoc_state of this LsServiceProfile.  # noqa: E501
        :type: str
        """

        self._assoc_state = assoc_state

    @property
    def associated_server(self):
        """Gets the associated_server of this LsServiceProfile.  # noqa: E501

        Server to which the UCS Manager service profile is associated to.    # noqa: E501

        :return: The associated_server of this LsServiceProfile.  # noqa: E501
        :rtype: str
        """
        return self._associated_server

    @associated_server.setter
    def associated_server(self, associated_server):
        """Sets the associated_server of this LsServiceProfile.

        Server to which the UCS Manager service profile is associated to.    # noqa: E501

        :param associated_server: The associated_server of this LsServiceProfile.  # noqa: E501
        :type: str
        """

        self._associated_server = associated_server

    @property
    def config_state(self):
        """Gets the config_state of this LsServiceProfile.  # noqa: E501

        Configuration state of the service profile.    # noqa: E501

        :return: The config_state of this LsServiceProfile.  # noqa: E501
        :rtype: str
        """
        return self._config_state

    @config_state.setter
    def config_state(self, config_state):
        """Sets the config_state of this LsServiceProfile.

        Configuration state of the service profile.    # noqa: E501

        :param config_state: The config_state of this LsServiceProfile.  # noqa: E501
        :type: str
        """

        self._config_state = config_state

    @property
    def name(self):
        """Gets the name of this LsServiceProfile.  # noqa: E501

        Name of the UCS Manager service profile.    # noqa: E501

        :return: The name of this LsServiceProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LsServiceProfile.

        Name of the UCS Manager service profile.    # noqa: E501

        :param name: The name of this LsServiceProfile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def oper_state(self):
        """Gets the oper_state of this LsServiceProfile.  # noqa: E501

        Operational state of the service profile.     # noqa: E501

        :return: The oper_state of this LsServiceProfile.  # noqa: E501
        :rtype: str
        """
        return self._oper_state

    @oper_state.setter
    def oper_state(self, oper_state):
        """Sets the oper_state of this LsServiceProfile.

        Operational state of the service profile.     # noqa: E501

        :param oper_state: The oper_state of this LsServiceProfile.  # noqa: E501
        :type: str
        """

        self._oper_state = oper_state

    @property
    def registered_device(self):
        """Gets the registered_device of this LsServiceProfile.  # noqa: E501


        :return: The registered_device of this LsServiceProfile.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this LsServiceProfile.


        :param registered_device: The registered_device of this LsServiceProfile.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LsServiceProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LsServiceProfile):
            return True

        return self.to_dict() != other.to_dict()
