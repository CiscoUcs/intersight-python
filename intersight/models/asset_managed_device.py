# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-961
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AssetManagedDevice(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'ancestors': 'list[MoBaseMoRef]',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'parent': 'MoBaseMoRef',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'account': 'IamAccountRef',
        'credential': 'CommCredential',
        'device_connector_manager': 'AssetDeviceRegistrationRef',
        'device_type': 'str',
        'is_enabled': 'bool',
        'management_address': 'str',
        'name': 'str',
        'registered_device': 'AssetDeviceRegistrationRef',
        'status': 'AssetManagedDeviceStatus'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'ancestors': 'Ancestors',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'parent': 'Parent',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'account': 'Account',
        'credential': 'Credential',
        'device_connector_manager': 'DeviceConnectorManager',
        'device_type': 'DeviceType',
        'is_enabled': 'IsEnabled',
        'management_address': 'ManagementAddress',
        'name': 'Name',
        'registered_device': 'RegisteredDevice',
        'status': 'Status'
    }

    def __init__(self, account_moid=None, ancestors=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, parent=None, shared_scope=None, tags=None, version_context=None, account=None, credential=None, device_connector_manager=None, device_type='PureStorage', is_enabled=None, management_address=None, name=None, registered_device=None, status=None):
        """
        AssetManagedDevice - a model defined in Swagger
        """

        self._account_moid = None
        self._ancestors = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._parent = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._account = None
        self._credential = None
        self._device_connector_manager = None
        self._device_type = None
        self._is_enabled = None
        self._management_address = None
        self._name = None
        self._registered_device = None
        self._status = None

        if account_moid is not None:
          self.account_moid = account_moid
        if ancestors is not None:
          self.ancestors = ancestors
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if parent is not None:
          self.parent = parent
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if account is not None:
          self.account = account
        if credential is not None:
          self.credential = credential
        if device_connector_manager is not None:
          self.device_connector_manager = device_connector_manager
        if device_type is not None:
          self.device_type = device_type
        if is_enabled is not None:
          self.is_enabled = is_enabled
        if management_address is not None:
          self.management_address = management_address
        if name is not None:
          self.name = name
        if registered_device is not None:
          self.registered_device = registered_device
        if status is not None:
          self.status = status

    @property
    def account_moid(self):
        """
        Gets the account_moid of this AssetManagedDevice.
        The Account ID for this managed object.  

        :return: The account_moid of this AssetManagedDevice.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this AssetManagedDevice.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this AssetManagedDevice.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def ancestors(self):
        """
        Gets the ancestors of this AssetManagedDevice.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this AssetManagedDevice.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this AssetManagedDevice.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this AssetManagedDevice.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def create_time(self):
        """
        Gets the create_time of this AssetManagedDevice.
        The time when this managed object was created.  

        :return: The create_time of this AssetManagedDevice.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this AssetManagedDevice.
        The time when this managed object was created.  

        :param create_time: The create_time of this AssetManagedDevice.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this AssetManagedDevice.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this AssetManagedDevice.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this AssetManagedDevice.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this AssetManagedDevice.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this AssetManagedDevice.
        The time when this managed object was last modified.  

        :return: The mod_time of this AssetManagedDevice.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this AssetManagedDevice.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this AssetManagedDevice.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this AssetManagedDevice.
        The unique identifier of this Managed Object instance.  

        :return: The moid of this AssetManagedDevice.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this AssetManagedDevice.
        The unique identifier of this Managed Object instance.  

        :param moid: The moid of this AssetManagedDevice.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this AssetManagedDevice.
        The fully-qualified type of this managed object, e.g. the class name.  

        :return: The object_type of this AssetManagedDevice.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this AssetManagedDevice.
        The fully-qualified type of this managed object, e.g. the class name.  

        :param object_type: The object_type of this AssetManagedDevice.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this AssetManagedDevice.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this AssetManagedDevice.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this AssetManagedDevice.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this AssetManagedDevice.
        :type: list[str]
        """

        self._owners = owners

    @property
    def parent(self):
        """
        Gets the parent of this AssetManagedDevice.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this AssetManagedDevice.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this AssetManagedDevice.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this AssetManagedDevice.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this AssetManagedDevice.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this AssetManagedDevice.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this AssetManagedDevice.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this AssetManagedDevice.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this AssetManagedDevice.
        The array of tags, which allow to add key, value meta-data to managed objects.  

        :return: The tags of this AssetManagedDevice.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this AssetManagedDevice.
        The array of tags, which allow to add key, value meta-data to managed objects.  

        :param tags: The tags of this AssetManagedDevice.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this AssetManagedDevice.
        The versioning info for this managed object.   

        :return: The version_context of this AssetManagedDevice.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this AssetManagedDevice.
        The versioning info for this managed object.   

        :param version_context: The version_context of this AssetManagedDevice.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def account(self):
        """
        Gets the account of this AssetManagedDevice.
        ManagedDevice to Account MO relationship. 

        :return: The account of this AssetManagedDevice.
        :rtype: IamAccountRef
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this AssetManagedDevice.
        ManagedDevice to Account MO relationship. 

        :param account: The account of this AssetManagedDevice.
        :type: IamAccountRef
        """

        self._account = account

    @property
    def credential(self):
        """
        Gets the credential of this AssetManagedDevice.
        Credentials to manage Managed Device.  

        :return: The credential of this AssetManagedDevice.
        :rtype: CommCredential
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """
        Sets the credential of this AssetManagedDevice.
        Credentials to manage Managed Device.  

        :param credential: The credential of this AssetManagedDevice.
        :type: CommCredential
        """

        self._credential = credential

    @property
    def device_connector_manager(self):
        """
        Gets the device_connector_manager of this AssetManagedDevice.
        Device Connector Manager (Intersight Appliance Device Connector tagged as 'Intersight Assist') within the asset Device Registration. 

        :return: The device_connector_manager of this AssetManagedDevice.
        :rtype: AssetDeviceRegistrationRef
        """
        return self._device_connector_manager

    @device_connector_manager.setter
    def device_connector_manager(self, device_connector_manager):
        """
        Sets the device_connector_manager of this AssetManagedDevice.
        Device Connector Manager (Intersight Appliance Device Connector tagged as 'Intersight Assist') within the asset Device Registration. 

        :param device_connector_manager: The device_connector_manager of this AssetManagedDevice.
        :type: AssetDeviceRegistrationRef
        """

        self._device_connector_manager = device_connector_manager

    @property
    def device_type(self):
        """
        Gets the device_type of this AssetManagedDevice.
        Type of the Device such as VMware, Pure Storage.  

        :return: The device_type of this AssetManagedDevice.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """
        Sets the device_type of this AssetManagedDevice.
        Type of the Device such as VMware, Pure Storage.  

        :param device_type: The device_type of this AssetManagedDevice.
        :type: str
        """
        allowed_values = ["PureStorage", "VMware"]
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def is_enabled(self):
        """
        Gets the is_enabled of this AssetManagedDevice.
        Device is Enabled/Disabled.  

        :return: The is_enabled of this AssetManagedDevice.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """
        Sets the is_enabled of this AssetManagedDevice.
        Device is Enabled/Disabled.  

        :param is_enabled: The is_enabled of this AssetManagedDevice.
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def management_address(self):
        """
        Gets the management_address of this AssetManagedDevice.
        Management address of the device. It can be IPv4, IPv6 or FQDN.  

        :return: The management_address of this AssetManagedDevice.
        :rtype: str
        """
        return self._management_address

    @management_address.setter
    def management_address(self, management_address):
        """
        Sets the management_address of this AssetManagedDevice.
        Management address of the device. It can be IPv4, IPv6 or FQDN.  

        :param management_address: The management_address of this AssetManagedDevice.
        :type: str
        """

        self._management_address = management_address

    @property
    def name(self):
        """
        Gets the name of this AssetManagedDevice.
        Name defined by the administrator for easier identification.  

        :return: The name of this AssetManagedDevice.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AssetManagedDevice.
        Name defined by the administrator for easier identification.  

        :param name: The name of this AssetManagedDevice.
        :type: str
        """

        self._name = name

    @property
    def registered_device(self):
        """
        Gets the registered_device of this AssetManagedDevice.
        ManagedDevice once auto claimed within the asset Device Registration. 

        :return: The registered_device of this AssetManagedDevice.
        :rtype: AssetDeviceRegistrationRef
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """
        Sets the registered_device of this AssetManagedDevice.
        ManagedDevice once auto claimed within the asset Device Registration. 

        :param registered_device: The registered_device of this AssetManagedDevice.
        :type: AssetDeviceRegistrationRef
        """

        self._registered_device = registered_device

    @property
    def status(self):
        """
        Gets the status of this AssetManagedDevice.
        Status of communication releated to Managed Device.   

        :return: The status of this AssetManagedDevice.
        :rtype: AssetManagedDeviceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this AssetManagedDevice.
        Status of communication releated to Managed Device.   

        :param status: The status of this AssetManagedDevice.
        :type: AssetManagedDeviceStatus
        """

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AssetManagedDevice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
