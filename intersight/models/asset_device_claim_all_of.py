# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class AssetDeviceClaimAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'device_updates': 'list[AssetConnectionControlMessage]',
        'security_token': 'str',
        'serial_number': 'str',
        'account': 'IamAccount',
        'device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'device_updates': 'DeviceUpdates',
        'security_token': 'SecurityToken',
        'serial_number': 'SerialNumber',
        'account': 'Account',
        'device': 'Device'
    }

    def __init__(self,
                 device_updates=None,
                 security_token=None,
                 serial_number=None,
                 account=None,
                 device=None,
                 local_vars_configuration=None):  # noqa: E501
        """AssetDeviceClaimAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._device_updates = None
        self._security_token = None
        self._serial_number = None
        self._account = None
        self._device = None
        self.discriminator = None

        if device_updates is not None:
            self.device_updates = device_updates
        if security_token is not None:
            self.security_token = security_token
        if serial_number is not None:
            self.serial_number = serial_number
        if account is not None:
            self.account = account
        if device is not None:
            self.device = device

    @property
    def device_updates(self):
        """Gets the device_updates of this AssetDeviceClaimAllOf.  # noqa: E501


        :return: The device_updates of this AssetDeviceClaimAllOf.  # noqa: E501
        :rtype: list[AssetConnectionControlMessage]
        """
        return self._device_updates

    @device_updates.setter
    def device_updates(self, device_updates):
        """Sets the device_updates of this AssetDeviceClaimAllOf.


        :param device_updates: The device_updates of this AssetDeviceClaimAllOf.  # noqa: E501
        :type: list[AssetConnectionControlMessage]
        """

        self._device_updates = device_updates

    @property
    def security_token(self):
        """Gets the security_token of this AssetDeviceClaimAllOf.  # noqa: E501

        Obtained from the device connector management UI or API (REST endpoint '/connector/SecurityTokens').    # noqa: E501

        :return: The security_token of this AssetDeviceClaimAllOf.  # noqa: E501
        :rtype: str
        """
        return self._security_token

    @security_token.setter
    def security_token(self, security_token):
        """Sets the security_token of this AssetDeviceClaimAllOf.

        Obtained from the device connector management UI or API (REST endpoint '/connector/SecurityTokens').    # noqa: E501

        :param security_token: The security_token of this AssetDeviceClaimAllOf.  # noqa: E501
        :type: str
        """

        self._security_token = security_token

    @property
    def serial_number(self):
        """Gets the serial_number of this AssetDeviceClaimAllOf.  # noqa: E501

        Obtained from the device connector management UI or API (REST endpoint '/connector/DeviceIdentifiers').     # noqa: E501

        :return: The serial_number of this AssetDeviceClaimAllOf.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this AssetDeviceClaimAllOf.

        Obtained from the device connector management UI or API (REST endpoint '/connector/DeviceIdentifiers').     # noqa: E501

        :param serial_number: The serial_number of this AssetDeviceClaimAllOf.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def account(self):
        """Gets the account of this AssetDeviceClaimAllOf.  # noqa: E501


        :return: The account of this AssetDeviceClaimAllOf.  # noqa: E501
        :rtype: IamAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AssetDeviceClaimAllOf.


        :param account: The account of this AssetDeviceClaimAllOf.  # noqa: E501
        :type: IamAccount
        """

        self._account = account

    @property
    def device(self):
        """Gets the device of this AssetDeviceClaimAllOf.  # noqa: E501


        :return: The device of this AssetDeviceClaimAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this AssetDeviceClaimAllOf.


        :param device: The device of this AssetDeviceClaimAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._device = device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetDeviceClaimAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetDeviceClaimAllOf):
            return True

        return self.to_dict() != other.to_dict()
