# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1295
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MemoryAbstractUnit(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'device_mo_id': 'str',
        'dn': 'str',
        'rn': 'str',
        'model': 'str',
        'revision': 'str',
        'serial': 'str',
        'vendor': 'str',
        'admin_state': 'str',
        'array_id': 'int',
        'bank': 'int',
        'capacity': 'str',
        'clock': 'str',
        'form_factor': 'str',
        'latency': 'str',
        'location': 'str',
        'oper_power_state': 'str',
        'oper_state': 'str',
        'operability': 'str',
        'presence': 'str',
        'set': 'int',
        'speed': 'str',
        'thermal': 'str',
        'type': 'str',
        'visibility': 'str',
        'width': 'str'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'device_mo_id': 'DeviceMoId',
        'dn': 'Dn',
        'rn': 'Rn',
        'model': 'Model',
        'revision': 'Revision',
        'serial': 'Serial',
        'vendor': 'Vendor',
        'admin_state': 'AdminState',
        'array_id': 'ArrayId',
        'bank': 'Bank',
        'capacity': 'Capacity',
        'clock': 'Clock',
        'form_factor': 'FormFactor',
        'latency': 'Latency',
        'location': 'Location',
        'oper_power_state': 'OperPowerState',
        'oper_state': 'OperState',
        'operability': 'Operability',
        'presence': 'Presence',
        'set': 'Set',
        'speed': 'Speed',
        'thermal': 'Thermal',
        'type': 'Type',
        'visibility': 'Visibility',
        'width': 'Width'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, device_mo_id=None, dn=None, rn=None, model=None, revision=None, serial=None, vendor=None, admin_state=None, array_id=None, bank=None, capacity=None, clock=None, form_factor=None, latency=None, location=None, oper_power_state=None, oper_state=None, operability=None, presence=None, set=None, speed=None, thermal=None, type=None, visibility=None, width=None):
        """
        MemoryAbstractUnit - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._device_mo_id = None
        self._dn = None
        self._rn = None
        self._model = None
        self._revision = None
        self._serial = None
        self._vendor = None
        self._admin_state = None
        self._array_id = None
        self._bank = None
        self._capacity = None
        self._clock = None
        self._form_factor = None
        self._latency = None
        self._location = None
        self._oper_power_state = None
        self._oper_state = None
        self._operability = None
        self._presence = None
        self._set = None
        self._speed = None
        self._thermal = None
        self._type = None
        self._visibility = None
        self._width = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if device_mo_id is not None:
          self.device_mo_id = device_mo_id
        if dn is not None:
          self.dn = dn
        if rn is not None:
          self.rn = rn
        if model is not None:
          self.model = model
        if revision is not None:
          self.revision = revision
        if serial is not None:
          self.serial = serial
        if vendor is not None:
          self.vendor = vendor
        if admin_state is not None:
          self.admin_state = admin_state
        if array_id is not None:
          self.array_id = array_id
        if bank is not None:
          self.bank = bank
        if capacity is not None:
          self.capacity = capacity
        if clock is not None:
          self.clock = clock
        if form_factor is not None:
          self.form_factor = form_factor
        if latency is not None:
          self.latency = latency
        if location is not None:
          self.location = location
        if oper_power_state is not None:
          self.oper_power_state = oper_power_state
        if oper_state is not None:
          self.oper_state = oper_state
        if operability is not None:
          self.operability = operability
        if presence is not None:
          self.presence = presence
        if set is not None:
          self.set = set
        if speed is not None:
          self.speed = speed
        if thermal is not None:
          self.thermal = thermal
        if type is not None:
          self.type = type
        if visibility is not None:
          self.visibility = visibility
        if width is not None:
          self.width = width

    @property
    def account_moid(self):
        """
        Gets the account_moid of this MemoryAbstractUnit.
        The Account ID for this managed object.  

        :return: The account_moid of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this MemoryAbstractUnit.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this MemoryAbstractUnit.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this MemoryAbstractUnit.
        The time when this managed object was created.  

        :return: The create_time of this MemoryAbstractUnit.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this MemoryAbstractUnit.
        The time when this managed object was created.  

        :param create_time: The create_time of this MemoryAbstractUnit.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this MemoryAbstractUnit.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this MemoryAbstractUnit.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this MemoryAbstractUnit.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this MemoryAbstractUnit.
        The time when this managed object was last modified.  

        :return: The mod_time of this MemoryAbstractUnit.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this MemoryAbstractUnit.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this MemoryAbstractUnit.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this MemoryAbstractUnit.
        The unique identifier of this Managed Object instance.   

        :return: The moid of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this MemoryAbstractUnit.
        The unique identifier of this Managed Object instance.   

        :param moid: The moid of this MemoryAbstractUnit.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this MemoryAbstractUnit.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :return: The object_type of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this MemoryAbstractUnit.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :param object_type: The object_type of this MemoryAbstractUnit.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this MemoryAbstractUnit.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this MemoryAbstractUnit.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this MemoryAbstractUnit.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this MemoryAbstractUnit.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this MemoryAbstractUnit.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this MemoryAbstractUnit.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this MemoryAbstractUnit.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this MemoryAbstractUnit.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this MemoryAbstractUnit.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this MemoryAbstractUnit.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this MemoryAbstractUnit.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this MemoryAbstractUnit.
        The versioning info for this managed object.   

        :return: The version_context of this MemoryAbstractUnit.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this MemoryAbstractUnit.
        The versioning info for this managed object.   

        :param version_context: The version_context of this MemoryAbstractUnit.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this MemoryAbstractUnit.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this MemoryAbstractUnit.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this MemoryAbstractUnit.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this MemoryAbstractUnit.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this MemoryAbstractUnit.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this MemoryAbstractUnit.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this MemoryAbstractUnit.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this MemoryAbstractUnit.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this MemoryAbstractUnit.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :return: The permission_resources of this MemoryAbstractUnit.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this MemoryAbstractUnit.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :param permission_resources: The permission_resources of this MemoryAbstractUnit.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def device_mo_id(self):
        """
        Gets the device_mo_id of this MemoryAbstractUnit.

        :return: The device_mo_id of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._device_mo_id

    @device_mo_id.setter
    def device_mo_id(self, device_mo_id):
        """
        Sets the device_mo_id of this MemoryAbstractUnit.

        :param device_mo_id: The device_mo_id of this MemoryAbstractUnit.
        :type: str
        """

        self._device_mo_id = device_mo_id

    @property
    def dn(self):
        """
        Gets the dn of this MemoryAbstractUnit.
        The Distinguished Name unambiguously identifies an object in the system.  

        :return: The dn of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """
        Sets the dn of this MemoryAbstractUnit.
        The Distinguished Name unambiguously identifies an object in the system.  

        :param dn: The dn of this MemoryAbstractUnit.
        :type: str
        """

        self._dn = dn

    @property
    def rn(self):
        """
        Gets the rn of this MemoryAbstractUnit.
        The Relative Name uniquely identifies an object within a given context.   

        :return: The rn of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """
        Sets the rn of this MemoryAbstractUnit.
        The Relative Name uniquely identifies an object within a given context.   

        :param rn: The rn of this MemoryAbstractUnit.
        :type: str
        """

        self._rn = rn

    @property
    def model(self):
        """
        Gets the model of this MemoryAbstractUnit.
        This field identifies the model of the given component.  

        :return: The model of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this MemoryAbstractUnit.
        This field identifies the model of the given component.  

        :param model: The model of this MemoryAbstractUnit.
        :type: str
        """

        self._model = model

    @property
    def revision(self):
        """
        Gets the revision of this MemoryAbstractUnit.

        :return: The revision of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this MemoryAbstractUnit.

        :param revision: The revision of this MemoryAbstractUnit.
        :type: str
        """

        self._revision = revision

    @property
    def serial(self):
        """
        Gets the serial of this MemoryAbstractUnit.
        This field identifies the serial of the given component.  

        :return: The serial of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """
        Sets the serial of this MemoryAbstractUnit.
        This field identifies the serial of the given component.  

        :param serial: The serial of this MemoryAbstractUnit.
        :type: str
        """

        self._serial = serial

    @property
    def vendor(self):
        """
        Gets the vendor of this MemoryAbstractUnit.
        This field identifies the vendor of the given component.   

        :return: The vendor of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """
        Sets the vendor of this MemoryAbstractUnit.
        This field identifies the vendor of the given component.   

        :param vendor: The vendor of this MemoryAbstractUnit.
        :type: str
        """

        self._vendor = vendor

    @property
    def admin_state(self):
        """
        Gets the admin_state of this MemoryAbstractUnit.
        This represents the administrative state of the memory unit on a server.  

        :return: The admin_state of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._admin_state

    @admin_state.setter
    def admin_state(self, admin_state):
        """
        Sets the admin_state of this MemoryAbstractUnit.
        This represents the administrative state of the memory unit on a server.  

        :param admin_state: The admin_state of this MemoryAbstractUnit.
        :type: str
        """

        self._admin_state = admin_state

    @property
    def array_id(self):
        """
        Gets the array_id of this MemoryAbstractUnit.
        This represents the memory array to which the memory unit belongs to.  

        :return: The array_id of this MemoryAbstractUnit.
        :rtype: int
        """
        return self._array_id

    @array_id.setter
    def array_id(self, array_id):
        """
        Sets the array_id of this MemoryAbstractUnit.
        This represents the memory array to which the memory unit belongs to.  

        :param array_id: The array_id of this MemoryAbstractUnit.
        :type: int
        """

        self._array_id = array_id

    @property
    def bank(self):
        """
        Gets the bank of this MemoryAbstractUnit.
        This represents the memory bank of the memory unit on a server.  

        :return: The bank of this MemoryAbstractUnit.
        :rtype: int
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """
        Sets the bank of this MemoryAbstractUnit.
        This represents the memory bank of the memory unit on a server.  

        :param bank: The bank of this MemoryAbstractUnit.
        :type: int
        """

        self._bank = bank

    @property
    def capacity(self):
        """
        Gets the capacity of this MemoryAbstractUnit.
        This represents the memory capacity in MiB of the memory unit on a server.  

        :return: The capacity of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """
        Sets the capacity of this MemoryAbstractUnit.
        This represents the memory capacity in MiB of the memory unit on a server.  

        :param capacity: The capacity of this MemoryAbstractUnit.
        :type: str
        """

        self._capacity = capacity

    @property
    def clock(self):
        """
        Gets the clock of this MemoryAbstractUnit.
        This represents the clock of the memory unit on a server.  

        :return: The clock of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._clock

    @clock.setter
    def clock(self, clock):
        """
        Sets the clock of this MemoryAbstractUnit.
        This represents the clock of the memory unit on a server.  

        :param clock: The clock of this MemoryAbstractUnit.
        :type: str
        """

        self._clock = clock

    @property
    def form_factor(self):
        """
        Gets the form_factor of this MemoryAbstractUnit.
        This represents the form factor of the memory unit on a server.  

        :return: The form_factor of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """
        Sets the form_factor of this MemoryAbstractUnit.
        This represents the form factor of the memory unit on a server.  

        :param form_factor: The form_factor of this MemoryAbstractUnit.
        :type: str
        """

        self._form_factor = form_factor

    @property
    def latency(self):
        """
        Gets the latency of this MemoryAbstractUnit.
        This represents the latency of the memory unit on a server.  

        :return: The latency of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """
        Sets the latency of this MemoryAbstractUnit.
        This represents the latency of the memory unit on a server.  

        :param latency: The latency of this MemoryAbstractUnit.
        :type: str
        """

        self._latency = latency

    @property
    def location(self):
        """
        Gets the location of this MemoryAbstractUnit.
        This represents the location of the memory unit on a server.  

        :return: The location of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this MemoryAbstractUnit.
        This represents the location of the memory unit on a server.  

        :param location: The location of this MemoryAbstractUnit.
        :type: str
        """

        self._location = location

    @property
    def oper_power_state(self):
        """
        Gets the oper_power_state of this MemoryAbstractUnit.
        This represents the operational power state of the memory unit on a server.  

        :return: The oper_power_state of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._oper_power_state

    @oper_power_state.setter
    def oper_power_state(self, oper_power_state):
        """
        Sets the oper_power_state of this MemoryAbstractUnit.
        This represents the operational power state of the memory unit on a server.  

        :param oper_power_state: The oper_power_state of this MemoryAbstractUnit.
        :type: str
        """

        self._oper_power_state = oper_power_state

    @property
    def oper_state(self):
        """
        Gets the oper_state of this MemoryAbstractUnit.
        This represents the operational state of the memory unit on a server.  

        :return: The oper_state of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._oper_state

    @oper_state.setter
    def oper_state(self, oper_state):
        """
        Sets the oper_state of this MemoryAbstractUnit.
        This represents the operational state of the memory unit on a server.  

        :param oper_state: The oper_state of this MemoryAbstractUnit.
        :type: str
        """

        self._oper_state = oper_state

    @property
    def operability(self):
        """
        Gets the operability of this MemoryAbstractUnit.
        This represents the operability of the memory unit on a server.  

        :return: The operability of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._operability

    @operability.setter
    def operability(self, operability):
        """
        Sets the operability of this MemoryAbstractUnit.
        This represents the operability of the memory unit on a server.  

        :param operability: The operability of this MemoryAbstractUnit.
        :type: str
        """

        self._operability = operability

    @property
    def presence(self):
        """
        Gets the presence of this MemoryAbstractUnit.
        This represents the presence state of the memory unit on a server.  

        :return: The presence of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """
        Sets the presence of this MemoryAbstractUnit.
        This represents the presence state of the memory unit on a server.  

        :param presence: The presence of this MemoryAbstractUnit.
        :type: str
        """

        self._presence = presence

    @property
    def set(self):
        """
        Gets the set of this MemoryAbstractUnit.
        This represents the set of the memory unit on a server.  

        :return: The set of this MemoryAbstractUnit.
        :rtype: int
        """
        return self._set

    @set.setter
    def set(self, set):
        """
        Sets the set of this MemoryAbstractUnit.
        This represents the set of the memory unit on a server.  

        :param set: The set of this MemoryAbstractUnit.
        :type: int
        """

        self._set = set

    @property
    def speed(self):
        """
        Gets the speed of this MemoryAbstractUnit.
        This represents the speed of the memory unit on a server.  

        :return: The speed of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """
        Sets the speed of this MemoryAbstractUnit.
        This represents the speed of the memory unit on a server.  

        :param speed: The speed of this MemoryAbstractUnit.
        :type: str
        """

        self._speed = speed

    @property
    def thermal(self):
        """
        Gets the thermal of this MemoryAbstractUnit.
        This represents the thremal state of the memory unit on a server.  

        :return: The thermal of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._thermal

    @thermal.setter
    def thermal(self, thermal):
        """
        Sets the thermal of this MemoryAbstractUnit.
        This represents the thremal state of the memory unit on a server.  

        :param thermal: The thermal of this MemoryAbstractUnit.
        :type: str
        """

        self._thermal = thermal

    @property
    def type(self):
        """
        Gets the type of this MemoryAbstractUnit.
        This represents the memory type of the memory unit on a server.  

        :return: The type of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this MemoryAbstractUnit.
        This represents the memory type of the memory unit on a server.  

        :param type: The type of this MemoryAbstractUnit.
        :type: str
        """

        self._type = type

    @property
    def visibility(self):
        """
        Gets the visibility of this MemoryAbstractUnit.
        This represents the visibility of the memory unit on a server.  

        :return: The visibility of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """
        Sets the visibility of this MemoryAbstractUnit.
        This represents the visibility of the memory unit on a server.  

        :param visibility: The visibility of this MemoryAbstractUnit.
        :type: str
        """

        self._visibility = visibility

    @property
    def width(self):
        """
        Gets the width of this MemoryAbstractUnit.
        This represents the width of the memory unit on a server.   

        :return: The width of this MemoryAbstractUnit.
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this MemoryAbstractUnit.
        This represents the width of the memory unit on a server.   

        :param width: The width of this MemoryAbstractUnit.
        :type: str
        """

        self._width = width

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MemoryAbstractUnit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
