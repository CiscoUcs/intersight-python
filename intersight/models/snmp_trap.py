# coding: utf-8

"""
    UCS Starship API

    This is the UCS Starship REST API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SnmpTrap(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'trap_destination': 'str',
        'trap_port': 'int',
        'trap_type': 'str',
        'trap_user': 'str',
        'trap_version': 'str'
    }

    attribute_map = {
        'enabled': 'Enabled',
        'trap_destination': 'TrapDestination',
        'trap_port': 'TrapPort',
        'trap_type': 'TrapType',
        'trap_user': 'TrapUser',
        'trap_version': 'TrapVersion'
    }

    def __init__(self, enabled=None, trap_destination=None, trap_port=None, trap_type='Trap', trap_user=None, trap_version='V3'):
        """
        SnmpTrap - a model defined in Swagger
        """

        self._enabled = None
        self._trap_destination = None
        self._trap_port = None
        self._trap_type = None
        self._trap_user = None
        self._trap_version = None

        if enabled is not None:
          self.enabled = enabled
        if trap_destination is not None:
          self.trap_destination = trap_destination
        if trap_port is not None:
          self.trap_port = trap_port
        if trap_type is not None:
          self.trap_type = trap_type
        if trap_user is not None:
          self.trap_user = trap_user
        if trap_version is not None:
          self.trap_version = trap_version

    @property
    def enabled(self):
        """
        Gets the enabled of this SnmpTrap.
        Enables/disables the trap on the server  

        :return: The enabled of this SnmpTrap.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this SnmpTrap.
        Enables/disables the trap on the server  

        :param enabled: The enabled of this SnmpTrap.
        :type: bool
        """

        self._enabled = enabled

    @property
    def trap_destination(self):
        """
        Gets the trap_destination of this SnmpTrap.
        Address to which the SNMP trap information is sent.  

        :return: The trap_destination of this SnmpTrap.
        :rtype: str
        """
        return self._trap_destination

    @trap_destination.setter
    def trap_destination(self, trap_destination):
        """
        Sets the trap_destination of this SnmpTrap.
        Address to which the SNMP trap information is sent.  

        :param trap_destination: The trap_destination of this SnmpTrap.
        :type: str
        """

        self._trap_destination = trap_destination

    @property
    def trap_port(self):
        """
        Gets the trap_port of this SnmpTrap.
        Port used by the server to communicate with trap destination.  

        :return: The trap_port of this SnmpTrap.
        :rtype: int
        """
        return self._trap_port

    @trap_port.setter
    def trap_port(self, trap_port):
        """
        Sets the trap_port of this SnmpTrap.
        Port used by the server to communicate with trap destination.  

        :param trap_port: The trap_port of this SnmpTrap.
        :type: int
        """

        self._trap_port = trap_port

    @property
    def trap_type(self):
        """
        Gets the trap_type of this SnmpTrap.
        Type of messages to send to the manager from the agent.  

        :return: The trap_type of this SnmpTrap.
        :rtype: str
        """
        return self._trap_type

    @trap_type.setter
    def trap_type(self, trap_type):
        """
        Sets the trap_type of this SnmpTrap.
        Type of messages to send to the manager from the agent.  

        :param trap_type: The trap_type of this SnmpTrap.
        :type: str
        """
        allowed_values = ["Trap", "Inform"]
        if trap_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trap_type` ({0}), must be one of {1}"
                .format(trap_type, allowed_values)
            )

        self._trap_type = trap_type

    @property
    def trap_user(self):
        """
        Gets the trap_user of this SnmpTrap.
        SNMP user for the trap. Applicable only to SNMPv3.  

        :return: The trap_user of this SnmpTrap.
        :rtype: str
        """
        return self._trap_user

    @trap_user.setter
    def trap_user(self, trap_user):
        """
        Sets the trap_user of this SnmpTrap.
        SNMP user for the trap. Applicable only to SNMPv3.  

        :param trap_user: The trap_user of this SnmpTrap.
        :type: str
        """

        self._trap_user = trap_user

    @property
    def trap_version(self):
        """
        Gets the trap_version of this SnmpTrap.
        SNMP version used for the trap.   

        :return: The trap_version of this SnmpTrap.
        :rtype: str
        """
        return self._trap_version

    @trap_version.setter
    def trap_version(self, trap_version):
        """
        Sets the trap_version of this SnmpTrap.
        SNMP version used for the trap.   

        :param trap_version: The trap_version of this SnmpTrap.
        :type: str
        """
        allowed_values = ["V3", "V2"]
        if trap_version not in allowed_values:
            raise ValueError(
                "Invalid value for `trap_version` ({0}), must be one of {1}"
                .format(trap_version, allowed_values)
            )

        self._trap_version = trap_version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SnmpTrap):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
