# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1461
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NetworkconfigPolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'description': 'str',
        'name': 'str',
        'alternate_ipv4dns_server': 'str',
        'alternate_ipv6dns_server': 'str',
        'dynamic_dns_domain': 'str',
        'enable_dynamic_dns': 'bool',
        'enable_ipv4dns_from_dhcp': 'bool',
        'enable_ipv6': 'bool',
        'enable_ipv6dns_from_dhcp': 'bool',
        'preferred_ipv4dns_server': 'str',
        'preferred_ipv6dns_server': 'str',
        'appliance_account': 'IamAccountRef',
        'organization': 'OrganizationOrganizationRef',
        'profiles': 'list[PolicyAbstractConfigProfileRef]'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'description': 'Description',
        'name': 'Name',
        'alternate_ipv4dns_server': 'AlternateIpv4dnsServer',
        'alternate_ipv6dns_server': 'AlternateIpv6dnsServer',
        'dynamic_dns_domain': 'DynamicDnsDomain',
        'enable_dynamic_dns': 'EnableDynamicDns',
        'enable_ipv4dns_from_dhcp': 'EnableIpv4dnsFromDhcp',
        'enable_ipv6': 'EnableIpv6',
        'enable_ipv6dns_from_dhcp': 'EnableIpv6dnsFromDhcp',
        'preferred_ipv4dns_server': 'PreferredIpv4dnsServer',
        'preferred_ipv6dns_server': 'PreferredIpv6dnsServer',
        'appliance_account': 'ApplianceAccount',
        'organization': 'Organization',
        'profiles': 'Profiles'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, description=None, name=None, alternate_ipv4dns_server=None, alternate_ipv6dns_server=None, dynamic_dns_domain=None, enable_dynamic_dns=None, enable_ipv4dns_from_dhcp=None, enable_ipv6=None, enable_ipv6dns_from_dhcp=None, preferred_ipv4dns_server=None, preferred_ipv6dns_server=None, appliance_account=None, organization=None, profiles=None):
        """
        NetworkconfigPolicy - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._description = None
        self._name = None
        self._alternate_ipv4dns_server = None
        self._alternate_ipv6dns_server = None
        self._dynamic_dns_domain = None
        self._enable_dynamic_dns = None
        self._enable_ipv4dns_from_dhcp = None
        self._enable_ipv6 = None
        self._enable_ipv6dns_from_dhcp = None
        self._preferred_ipv4dns_server = None
        self._preferred_ipv6dns_server = None
        self._appliance_account = None
        self._organization = None
        self._profiles = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if description is not None:
          self.description = description
        if name is not None:
          self.name = name
        if alternate_ipv4dns_server is not None:
          self.alternate_ipv4dns_server = alternate_ipv4dns_server
        if alternate_ipv6dns_server is not None:
          self.alternate_ipv6dns_server = alternate_ipv6dns_server
        if dynamic_dns_domain is not None:
          self.dynamic_dns_domain = dynamic_dns_domain
        if enable_dynamic_dns is not None:
          self.enable_dynamic_dns = enable_dynamic_dns
        if enable_ipv4dns_from_dhcp is not None:
          self.enable_ipv4dns_from_dhcp = enable_ipv4dns_from_dhcp
        if enable_ipv6 is not None:
          self.enable_ipv6 = enable_ipv6
        if enable_ipv6dns_from_dhcp is not None:
          self.enable_ipv6dns_from_dhcp = enable_ipv6dns_from_dhcp
        if preferred_ipv4dns_server is not None:
          self.preferred_ipv4dns_server = preferred_ipv4dns_server
        if preferred_ipv6dns_server is not None:
          self.preferred_ipv6dns_server = preferred_ipv6dns_server
        if appliance_account is not None:
          self.appliance_account = appliance_account
        if organization is not None:
          self.organization = organization
        if profiles is not None:
          self.profiles = profiles

    @property
    def account_moid(self):
        """
        Gets the account_moid of this NetworkconfigPolicy.
        The Account ID for this managed object.

        :return: The account_moid of this NetworkconfigPolicy.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this NetworkconfigPolicy.
        The Account ID for this managed object.

        :param account_moid: The account_moid of this NetworkconfigPolicy.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this NetworkconfigPolicy.
        The time when this managed object was created.

        :return: The create_time of this NetworkconfigPolicy.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this NetworkconfigPolicy.
        The time when this managed object was created.

        :param create_time: The create_time of this NetworkconfigPolicy.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this NetworkconfigPolicy.
        The DomainGroup ID for this managed object.

        :return: The domain_group_moid of this NetworkconfigPolicy.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this NetworkconfigPolicy.
        The DomainGroup ID for this managed object.

        :param domain_group_moid: The domain_group_moid of this NetworkconfigPolicy.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this NetworkconfigPolicy.
        The time when this managed object was last modified.

        :return: The mod_time of this NetworkconfigPolicy.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this NetworkconfigPolicy.
        The time when this managed object was last modified.

        :param mod_time: The mod_time of this NetworkconfigPolicy.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this NetworkconfigPolicy.
        The unique identifier of this Managed Object instance.

        :return: The moid of this NetworkconfigPolicy.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this NetworkconfigPolicy.
        The unique identifier of this Managed Object instance.

        :param moid: The moid of this NetworkconfigPolicy.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this NetworkconfigPolicy.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        :return: The object_type of this NetworkconfigPolicy.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this NetworkconfigPolicy.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        :param object_type: The object_type of this NetworkconfigPolicy.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this NetworkconfigPolicy.
        The array of owners which represent effective ownership of this object.

        :return: The owners of this NetworkconfigPolicy.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this NetworkconfigPolicy.
        The array of owners which represent effective ownership of this object.

        :param owners: The owners of this NetworkconfigPolicy.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this NetworkconfigPolicy.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.

        :return: The shared_scope of this NetworkconfigPolicy.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this NetworkconfigPolicy.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.

        :param shared_scope: The shared_scope of this NetworkconfigPolicy.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this NetworkconfigPolicy.
        The array of tags, which allow to add key, value meta-data to managed objects.

        :return: The tags of this NetworkconfigPolicy.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this NetworkconfigPolicy.
        The array of tags, which allow to add key, value meta-data to managed objects.

        :param tags: The tags of this NetworkconfigPolicy.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this NetworkconfigPolicy.
        The versioning info for this managed object.

        :return: The version_context of this NetworkconfigPolicy.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this NetworkconfigPolicy.
        The versioning info for this managed object.

        :param version_context: The version_context of this NetworkconfigPolicy.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this NetworkconfigPolicy.
        The array containing the MO references of the ancestors in the object containment hierarchy.

        :return: The ancestors of this NetworkconfigPolicy.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this NetworkconfigPolicy.
        The array containing the MO references of the ancestors in the object containment hierarchy.

        :param ancestors: The ancestors of this NetworkconfigPolicy.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this NetworkconfigPolicy.
        The direct ancestor of this managed object in the containment hierarchy.

        :return: The parent of this NetworkconfigPolicy.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this NetworkconfigPolicy.
        The direct ancestor of this managed object in the containment hierarchy.

        :param parent: The parent of this NetworkconfigPolicy.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this NetworkconfigPolicy.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.

        :return: The permission_resources of this NetworkconfigPolicy.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this NetworkconfigPolicy.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources.

        :param permission_resources: The permission_resources of this NetworkconfigPolicy.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def description(self):
        """
        Gets the description of this NetworkconfigPolicy.
        Description of the policy.

        :return: The description of this NetworkconfigPolicy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this NetworkconfigPolicy.
        Description of the policy.

        :param description: The description of this NetworkconfigPolicy.
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """
        Gets the name of this NetworkconfigPolicy.
        Name of the concrete policy.

        :return: The name of this NetworkconfigPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this NetworkconfigPolicy.
        Name of the concrete policy.

        :param name: The name of this NetworkconfigPolicy.
        :type: str
        """

        self._name = name

    @property
    def alternate_ipv4dns_server(self):
        """
        Gets the alternate_ipv4dns_server of this NetworkconfigPolicy.
        IP address of the secondary DNS server.

        :return: The alternate_ipv4dns_server of this NetworkconfigPolicy.
        :rtype: str
        """
        return self._alternate_ipv4dns_server

    @alternate_ipv4dns_server.setter
    def alternate_ipv4dns_server(self, alternate_ipv4dns_server):
        """
        Sets the alternate_ipv4dns_server of this NetworkconfigPolicy.
        IP address of the secondary DNS server.

        :param alternate_ipv4dns_server: The alternate_ipv4dns_server of this NetworkconfigPolicy.
        :type: str
        """

        self._alternate_ipv4dns_server = alternate_ipv4dns_server

    @property
    def alternate_ipv6dns_server(self):
        """
        Gets the alternate_ipv6dns_server of this NetworkconfigPolicy.
        IP address of the secondary DNS server.

        :return: The alternate_ipv6dns_server of this NetworkconfigPolicy.
        :rtype: str
        """
        return self._alternate_ipv6dns_server

    @alternate_ipv6dns_server.setter
    def alternate_ipv6dns_server(self, alternate_ipv6dns_server):
        """
        Sets the alternate_ipv6dns_server of this NetworkconfigPolicy.
        IP address of the secondary DNS server.

        :param alternate_ipv6dns_server: The alternate_ipv6dns_server of this NetworkconfigPolicy.
        :type: str
        """

        self._alternate_ipv6dns_server = alternate_ipv6dns_server

    @property
    def dynamic_dns_domain(self):
        """
        Gets the dynamic_dns_domain of this NetworkconfigPolicy.
        The domain name appended to a hostname for a Dynamic DNS (DDNS) update. If left blank, only a hostname is sent to the DDNS update request.

        :return: The dynamic_dns_domain of this NetworkconfigPolicy.
        :rtype: str
        """
        return self._dynamic_dns_domain

    @dynamic_dns_domain.setter
    def dynamic_dns_domain(self, dynamic_dns_domain):
        """
        Sets the dynamic_dns_domain of this NetworkconfigPolicy.
        The domain name appended to a hostname for a Dynamic DNS (DDNS) update. If left blank, only a hostname is sent to the DDNS update request.

        :param dynamic_dns_domain: The dynamic_dns_domain of this NetworkconfigPolicy.
        :type: str
        """

        self._dynamic_dns_domain = dynamic_dns_domain

    @property
    def enable_dynamic_dns(self):
        """
        Gets the enable_dynamic_dns of this NetworkconfigPolicy.
        If enabled, updates the resource records to the DNS from Cisco IMC.

        :return: The enable_dynamic_dns of this NetworkconfigPolicy.
        :rtype: bool
        """
        return self._enable_dynamic_dns

    @enable_dynamic_dns.setter
    def enable_dynamic_dns(self, enable_dynamic_dns):
        """
        Sets the enable_dynamic_dns of this NetworkconfigPolicy.
        If enabled, updates the resource records to the DNS from Cisco IMC.

        :param enable_dynamic_dns: The enable_dynamic_dns of this NetworkconfigPolicy.
        :type: bool
        """

        self._enable_dynamic_dns = enable_dynamic_dns

    @property
    def enable_ipv4dns_from_dhcp(self):
        """
        Gets the enable_ipv4dns_from_dhcp of this NetworkconfigPolicy.
        If enabled, Cisco IMC retrieves the DNS server addresses from DHCP. Use DHCP field must be enabled for IPv4 in Cisco IMC to enable it.

        :return: The enable_ipv4dns_from_dhcp of this NetworkconfigPolicy.
        :rtype: bool
        """
        return self._enable_ipv4dns_from_dhcp

    @enable_ipv4dns_from_dhcp.setter
    def enable_ipv4dns_from_dhcp(self, enable_ipv4dns_from_dhcp):
        """
        Sets the enable_ipv4dns_from_dhcp of this NetworkconfigPolicy.
        If enabled, Cisco IMC retrieves the DNS server addresses from DHCP. Use DHCP field must be enabled for IPv4 in Cisco IMC to enable it.

        :param enable_ipv4dns_from_dhcp: The enable_ipv4dns_from_dhcp of this NetworkconfigPolicy.
        :type: bool
        """

        self._enable_ipv4dns_from_dhcp = enable_ipv4dns_from_dhcp

    @property
    def enable_ipv6(self):
        """
        Gets the enable_ipv6 of this NetworkconfigPolicy.
        If enabled, allows to configure IPv6 properties.

        :return: The enable_ipv6 of this NetworkconfigPolicy.
        :rtype: bool
        """
        return self._enable_ipv6

    @enable_ipv6.setter
    def enable_ipv6(self, enable_ipv6):
        """
        Sets the enable_ipv6 of this NetworkconfigPolicy.
        If enabled, allows to configure IPv6 properties.

        :param enable_ipv6: The enable_ipv6 of this NetworkconfigPolicy.
        :type: bool
        """

        self._enable_ipv6 = enable_ipv6

    @property
    def enable_ipv6dns_from_dhcp(self):
        """
        Gets the enable_ipv6dns_from_dhcp of this NetworkconfigPolicy.
        If enabled, Cisco IMC retrieves the DNS server addresses from DHCP. Use DHCP field must be enabled for IPv6 in Cisco IMC to enable it.

        :return: The enable_ipv6dns_from_dhcp of this NetworkconfigPolicy.
        :rtype: bool
        """
        return self._enable_ipv6dns_from_dhcp

    @enable_ipv6dns_from_dhcp.setter
    def enable_ipv6dns_from_dhcp(self, enable_ipv6dns_from_dhcp):
        """
        Sets the enable_ipv6dns_from_dhcp of this NetworkconfigPolicy.
        If enabled, Cisco IMC retrieves the DNS server addresses from DHCP. Use DHCP field must be enabled for IPv6 in Cisco IMC to enable it.

        :param enable_ipv6dns_from_dhcp: The enable_ipv6dns_from_dhcp of this NetworkconfigPolicy.
        :type: bool
        """

        self._enable_ipv6dns_from_dhcp = enable_ipv6dns_from_dhcp

    @property
    def preferred_ipv4dns_server(self):
        """
        Gets the preferred_ipv4dns_server of this NetworkconfigPolicy.
        IP address of the primary DNS server.

        :return: The preferred_ipv4dns_server of this NetworkconfigPolicy.
        :rtype: str
        """
        return self._preferred_ipv4dns_server

    @preferred_ipv4dns_server.setter
    def preferred_ipv4dns_server(self, preferred_ipv4dns_server):
        """
        Sets the preferred_ipv4dns_server of this NetworkconfigPolicy.
        IP address of the primary DNS server.

        :param preferred_ipv4dns_server: The preferred_ipv4dns_server of this NetworkconfigPolicy.
        :type: str
        """

        self._preferred_ipv4dns_server = preferred_ipv4dns_server

    @property
    def preferred_ipv6dns_server(self):
        """
        Gets the preferred_ipv6dns_server of this NetworkconfigPolicy.
        IP address of the primary DNS server.

        :return: The preferred_ipv6dns_server of this NetworkconfigPolicy.
        :rtype: str
        """
        return self._preferred_ipv6dns_server

    @preferred_ipv6dns_server.setter
    def preferred_ipv6dns_server(self, preferred_ipv6dns_server):
        """
        Sets the preferred_ipv6dns_server of this NetworkconfigPolicy.
        IP address of the primary DNS server.

        :param preferred_ipv6dns_server: The preferred_ipv6dns_server of this NetworkconfigPolicy.
        :type: str
        """

        self._preferred_ipv6dns_server = preferred_ipv6dns_server

    @property
    def appliance_account(self):
        """
        Gets the appliance_account of this NetworkconfigPolicy.
        The appliance account to which the appliance Network Connectivity policy belongs.

        :return: The appliance_account of this NetworkconfigPolicy.
        :rtype: IamAccountRef
        """
        return self._appliance_account

    @appliance_account.setter
    def appliance_account(self, appliance_account):
        """
        Sets the appliance_account of this NetworkconfigPolicy.
        The appliance account to which the appliance Network Connectivity policy belongs.

        :param appliance_account: The appliance_account of this NetworkconfigPolicy.
        :type: IamAccountRef
        """

        self._appliance_account = appliance_account

    @property
    def organization(self):
        """
        Gets the organization of this NetworkconfigPolicy.
        The organization to which the Network Connectivity policy belongs.

        :return: The organization of this NetworkconfigPolicy.
        :rtype: OrganizationOrganizationRef
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this NetworkconfigPolicy.
        The organization to which the Network Connectivity policy belongs.

        :param organization: The organization of this NetworkconfigPolicy.
        :type: OrganizationOrganizationRef
        """

        self._organization = organization

    @property
    def profiles(self):
        """
        Gets the profiles of this NetworkconfigPolicy.
        Relationship to the profile object.

        :return: The profiles of this NetworkconfigPolicy.
        :rtype: list[PolicyAbstractConfigProfileRef]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """
        Sets the profiles of this NetworkconfigPolicy.
        Relationship to the profile object.

        :param profiles: The profiles of this NetworkconfigPolicy.
        :type: list[PolicyAbstractConfigProfileRef]
        """

        self._profiles = profiles

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NetworkconfigPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
