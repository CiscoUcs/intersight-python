# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class VnicEthAdapterPolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'advanced_filter': 'bool',
        'arfs_settings': 'VnicArfsSettings',
        'completion_queue_settings': 'VnicCompletionQueueSettings',
        'interrupt_settings': 'VnicEthInterruptSettings',
        'nvgre_settings': 'VnicNvgreSettings',
        'roce_settings': 'VnicRoceSettings',
        'rss_settings': 'bool',
        'rx_queue_settings': 'VnicEthRxQueueSettings',
        'tcp_offload_settings': 'VnicTcpOffloadSettings',
        'tx_queue_settings': 'VnicEthTxQueueSettings',
        'vxlan_settings': 'VnicVxlanSettings',
        'organization': 'OrganizationOrganization'
    }

    attribute_map = {
        'advanced_filter': 'AdvancedFilter',
        'arfs_settings': 'ArfsSettings',
        'completion_queue_settings': 'CompletionQueueSettings',
        'interrupt_settings': 'InterruptSettings',
        'nvgre_settings': 'NvgreSettings',
        'roce_settings': 'RoceSettings',
        'rss_settings': 'RssSettings',
        'rx_queue_settings': 'RxQueueSettings',
        'tcp_offload_settings': 'TcpOffloadSettings',
        'tx_queue_settings': 'TxQueueSettings',
        'vxlan_settings': 'VxlanSettings',
        'organization': 'Organization'
    }

    def __init__(self,
                 advanced_filter=None,
                 arfs_settings=None,
                 completion_queue_settings=None,
                 interrupt_settings=None,
                 nvgre_settings=None,
                 roce_settings=None,
                 rss_settings=None,
                 rx_queue_settings=None,
                 tcp_offload_settings=None,
                 tx_queue_settings=None,
                 vxlan_settings=None,
                 organization=None,
                 local_vars_configuration=None):  # noqa: E501
        """VnicEthAdapterPolicy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._advanced_filter = None
        self._arfs_settings = None
        self._completion_queue_settings = None
        self._interrupt_settings = None
        self._nvgre_settings = None
        self._roce_settings = None
        self._rss_settings = None
        self._rx_queue_settings = None
        self._tcp_offload_settings = None
        self._tx_queue_settings = None
        self._vxlan_settings = None
        self._organization = None
        self.discriminator = None

        if advanced_filter is not None:
            self.advanced_filter = advanced_filter
        if arfs_settings is not None:
            self.arfs_settings = arfs_settings
        if completion_queue_settings is not None:
            self.completion_queue_settings = completion_queue_settings
        if interrupt_settings is not None:
            self.interrupt_settings = interrupt_settings
        if nvgre_settings is not None:
            self.nvgre_settings = nvgre_settings
        if roce_settings is not None:
            self.roce_settings = roce_settings
        if rss_settings is not None:
            self.rss_settings = rss_settings
        if rx_queue_settings is not None:
            self.rx_queue_settings = rx_queue_settings
        if tcp_offload_settings is not None:
            self.tcp_offload_settings = tcp_offload_settings
        if tx_queue_settings is not None:
            self.tx_queue_settings = tx_queue_settings
        if vxlan_settings is not None:
            self.vxlan_settings = vxlan_settings
        if organization is not None:
            self.organization = organization

    @property
    def advanced_filter(self):
        """Gets the advanced_filter of this VnicEthAdapterPolicy.  # noqa: E501

        Enables advanced filtering on the interface.    # noqa: E501

        :return: The advanced_filter of this VnicEthAdapterPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._advanced_filter

    @advanced_filter.setter
    def advanced_filter(self, advanced_filter):
        """Sets the advanced_filter of this VnicEthAdapterPolicy.

        Enables advanced filtering on the interface.    # noqa: E501

        :param advanced_filter: The advanced_filter of this VnicEthAdapterPolicy.  # noqa: E501
        :type: bool
        """

        self._advanced_filter = advanced_filter

    @property
    def arfs_settings(self):
        """Gets the arfs_settings of this VnicEthAdapterPolicy.  # noqa: E501


        :return: The arfs_settings of this VnicEthAdapterPolicy.  # noqa: E501
        :rtype: VnicArfsSettings
        """
        return self._arfs_settings

    @arfs_settings.setter
    def arfs_settings(self, arfs_settings):
        """Sets the arfs_settings of this VnicEthAdapterPolicy.


        :param arfs_settings: The arfs_settings of this VnicEthAdapterPolicy.  # noqa: E501
        :type: VnicArfsSettings
        """

        self._arfs_settings = arfs_settings

    @property
    def completion_queue_settings(self):
        """Gets the completion_queue_settings of this VnicEthAdapterPolicy.  # noqa: E501


        :return: The completion_queue_settings of this VnicEthAdapterPolicy.  # noqa: E501
        :rtype: VnicCompletionQueueSettings
        """
        return self._completion_queue_settings

    @completion_queue_settings.setter
    def completion_queue_settings(self, completion_queue_settings):
        """Sets the completion_queue_settings of this VnicEthAdapterPolicy.


        :param completion_queue_settings: The completion_queue_settings of this VnicEthAdapterPolicy.  # noqa: E501
        :type: VnicCompletionQueueSettings
        """

        self._completion_queue_settings = completion_queue_settings

    @property
    def interrupt_settings(self):
        """Gets the interrupt_settings of this VnicEthAdapterPolicy.  # noqa: E501


        :return: The interrupt_settings of this VnicEthAdapterPolicy.  # noqa: E501
        :rtype: VnicEthInterruptSettings
        """
        return self._interrupt_settings

    @interrupt_settings.setter
    def interrupt_settings(self, interrupt_settings):
        """Sets the interrupt_settings of this VnicEthAdapterPolicy.


        :param interrupt_settings: The interrupt_settings of this VnicEthAdapterPolicy.  # noqa: E501
        :type: VnicEthInterruptSettings
        """

        self._interrupt_settings = interrupt_settings

    @property
    def nvgre_settings(self):
        """Gets the nvgre_settings of this VnicEthAdapterPolicy.  # noqa: E501


        :return: The nvgre_settings of this VnicEthAdapterPolicy.  # noqa: E501
        :rtype: VnicNvgreSettings
        """
        return self._nvgre_settings

    @nvgre_settings.setter
    def nvgre_settings(self, nvgre_settings):
        """Sets the nvgre_settings of this VnicEthAdapterPolicy.


        :param nvgre_settings: The nvgre_settings of this VnicEthAdapterPolicy.  # noqa: E501
        :type: VnicNvgreSettings
        """

        self._nvgre_settings = nvgre_settings

    @property
    def roce_settings(self):
        """Gets the roce_settings of this VnicEthAdapterPolicy.  # noqa: E501


        :return: The roce_settings of this VnicEthAdapterPolicy.  # noqa: E501
        :rtype: VnicRoceSettings
        """
        return self._roce_settings

    @roce_settings.setter
    def roce_settings(self, roce_settings):
        """Sets the roce_settings of this VnicEthAdapterPolicy.


        :param roce_settings: The roce_settings of this VnicEthAdapterPolicy.  # noqa: E501
        :type: VnicRoceSettings
        """

        self._roce_settings = roce_settings

    @property
    def rss_settings(self):
        """Gets the rss_settings of this VnicEthAdapterPolicy.  # noqa: E501

        Receive Side Scaling allows the incoming traffic to be spread across multiple CPU cores.    # noqa: E501

        :return: The rss_settings of this VnicEthAdapterPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._rss_settings

    @rss_settings.setter
    def rss_settings(self, rss_settings):
        """Sets the rss_settings of this VnicEthAdapterPolicy.

        Receive Side Scaling allows the incoming traffic to be spread across multiple CPU cores.    # noqa: E501

        :param rss_settings: The rss_settings of this VnicEthAdapterPolicy.  # noqa: E501
        :type: bool
        """

        self._rss_settings = rss_settings

    @property
    def rx_queue_settings(self):
        """Gets the rx_queue_settings of this VnicEthAdapterPolicy.  # noqa: E501


        :return: The rx_queue_settings of this VnicEthAdapterPolicy.  # noqa: E501
        :rtype: VnicEthRxQueueSettings
        """
        return self._rx_queue_settings

    @rx_queue_settings.setter
    def rx_queue_settings(self, rx_queue_settings):
        """Sets the rx_queue_settings of this VnicEthAdapterPolicy.


        :param rx_queue_settings: The rx_queue_settings of this VnicEthAdapterPolicy.  # noqa: E501
        :type: VnicEthRxQueueSettings
        """

        self._rx_queue_settings = rx_queue_settings

    @property
    def tcp_offload_settings(self):
        """Gets the tcp_offload_settings of this VnicEthAdapterPolicy.  # noqa: E501


        :return: The tcp_offload_settings of this VnicEthAdapterPolicy.  # noqa: E501
        :rtype: VnicTcpOffloadSettings
        """
        return self._tcp_offload_settings

    @tcp_offload_settings.setter
    def tcp_offload_settings(self, tcp_offload_settings):
        """Sets the tcp_offload_settings of this VnicEthAdapterPolicy.


        :param tcp_offload_settings: The tcp_offload_settings of this VnicEthAdapterPolicy.  # noqa: E501
        :type: VnicTcpOffloadSettings
        """

        self._tcp_offload_settings = tcp_offload_settings

    @property
    def tx_queue_settings(self):
        """Gets the tx_queue_settings of this VnicEthAdapterPolicy.  # noqa: E501


        :return: The tx_queue_settings of this VnicEthAdapterPolicy.  # noqa: E501
        :rtype: VnicEthTxQueueSettings
        """
        return self._tx_queue_settings

    @tx_queue_settings.setter
    def tx_queue_settings(self, tx_queue_settings):
        """Sets the tx_queue_settings of this VnicEthAdapterPolicy.


        :param tx_queue_settings: The tx_queue_settings of this VnicEthAdapterPolicy.  # noqa: E501
        :type: VnicEthTxQueueSettings
        """

        self._tx_queue_settings = tx_queue_settings

    @property
    def vxlan_settings(self):
        """Gets the vxlan_settings of this VnicEthAdapterPolicy.  # noqa: E501


        :return: The vxlan_settings of this VnicEthAdapterPolicy.  # noqa: E501
        :rtype: VnicVxlanSettings
        """
        return self._vxlan_settings

    @vxlan_settings.setter
    def vxlan_settings(self, vxlan_settings):
        """Sets the vxlan_settings of this VnicEthAdapterPolicy.


        :param vxlan_settings: The vxlan_settings of this VnicEthAdapterPolicy.  # noqa: E501
        :type: VnicVxlanSettings
        """

        self._vxlan_settings = vxlan_settings

    @property
    def organization(self):
        """Gets the organization of this VnicEthAdapterPolicy.  # noqa: E501


        :return: The organization of this VnicEthAdapterPolicy.  # noqa: E501
        :rtype: OrganizationOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this VnicEthAdapterPolicy.


        :param organization: The organization of this VnicEthAdapterPolicy.  # noqa: E501
        :type: OrganizationOrganization
        """

        self._organization = organization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VnicEthAdapterPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VnicEthAdapterPolicy):
            return True

        return self.to_dict() != other.to_dict()
