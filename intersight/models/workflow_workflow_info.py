# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1295
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorkflowWorkflowInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_moid': 'str',
        'create_time': 'datetime',
        'domain_group_moid': 'str',
        'mod_time': 'datetime',
        'moid': 'str',
        'object_type': 'str',
        'owners': 'list[str]',
        'shared_scope': 'str',
        'tags': 'list[MoTag]',
        'version_context': 'MoVersionContext',
        'ancestors': 'list[MoBaseMoRef]',
        'parent': 'MoBaseMoRef',
        'permission_resources': 'list[MoBaseMoRef]',
        'action': 'str',
        'cleanup_time': 'datetime',
        'end_time': 'datetime',
        'failed_workflow_cleanup_duration': 'int',
        'input': 'object',
        'inst_id': 'str',
        'internal': 'bool',
        'message': 'list[WorkflowMessage]',
        'meta_version': 'int',
        'name': 'str',
        'output': 'object',
        'progress': 'float',
        'src': 'str',
        'start_time': 'datetime',
        'status': 'str',
        'success_workflow_cleanup_duration': 'int',
        'trace_id': 'str',
        'type': 'str',
        'user_id': 'str',
        'wait_reason': 'str',
        'workflow_ctx': 'object',
        'workflow_meta_type': 'str',
        'workflow_task_count': 'int',
        '_0_cluster_profile': 'HyperflexClusterProfileRef',
        '_1_profile': 'ServerProfileRef',
        'account': 'IamAccountRef',
        'organization': 'OrganizationOrganizationRef',
        'parent_task_info': 'WorkflowTaskInfoRef',
        'pending_dynamic_workflow_info': 'WorkflowPendingDynamicWorkflowInfoRef',
        'permission': 'IamPermissionRef',
        'task_infos': 'list[WorkflowTaskInfoRef]',
        'workflow_definition': 'WorkflowWorkflowDefinitionRef'
    }

    attribute_map = {
        'account_moid': 'AccountMoid',
        'create_time': 'CreateTime',
        'domain_group_moid': 'DomainGroupMoid',
        'mod_time': 'ModTime',
        'moid': 'Moid',
        'object_type': 'ObjectType',
        'owners': 'Owners',
        'shared_scope': 'SharedScope',
        'tags': 'Tags',
        'version_context': 'VersionContext',
        'ancestors': 'Ancestors',
        'parent': 'Parent',
        'permission_resources': 'PermissionResources',
        'action': 'Action',
        'cleanup_time': 'CleanupTime',
        'end_time': 'EndTime',
        'failed_workflow_cleanup_duration': 'FailedWorkflowCleanupDuration',
        'input': 'Input',
        'inst_id': 'InstId',
        'internal': 'Internal',
        'message': 'Message',
        'meta_version': 'MetaVersion',
        'name': 'Name',
        'output': 'Output',
        'progress': 'Progress',
        'src': 'Src',
        'start_time': 'StartTime',
        'status': 'Status',
        'success_workflow_cleanup_duration': 'SuccessWorkflowCleanupDuration',
        'trace_id': 'TraceId',
        'type': 'Type',
        'user_id': 'UserId',
        'wait_reason': 'WaitReason',
        'workflow_ctx': 'WorkflowCtx',
        'workflow_meta_type': 'WorkflowMetaType',
        'workflow_task_count': 'WorkflowTaskCount',
        '_0_cluster_profile': '_0_ClusterProfile',
        '_1_profile': '_1_Profile',
        'account': 'Account',
        'organization': 'Organization',
        'parent_task_info': 'ParentTaskInfo',
        'pending_dynamic_workflow_info': 'PendingDynamicWorkflowInfo',
        'permission': 'Permission',
        'task_infos': 'TaskInfos',
        'workflow_definition': 'WorkflowDefinition'
    }

    def __init__(self, account_moid=None, create_time=None, domain_group_moid=None, mod_time=None, moid=None, object_type=None, owners=None, shared_scope=None, tags=None, version_context=None, ancestors=None, parent=None, permission_resources=None, action='Start', cleanup_time=None, end_time=None, failed_workflow_cleanup_duration=None, input=None, inst_id=None, internal=None, message=None, meta_version=None, name=None, output=None, progress=None, src=None, start_time=None, status=None, success_workflow_cleanup_duration=None, trace_id=None, type=None, user_id=None, wait_reason='None', workflow_ctx=None, workflow_meta_type='SystemDefined', workflow_task_count=None, _0_cluster_profile=None, _1_profile=None, account=None, organization=None, parent_task_info=None, pending_dynamic_workflow_info=None, permission=None, task_infos=None, workflow_definition=None):
        """
        WorkflowWorkflowInfo - a model defined in Swagger
        """

        self._account_moid = None
        self._create_time = None
        self._domain_group_moid = None
        self._mod_time = None
        self._moid = None
        self._object_type = None
        self._owners = None
        self._shared_scope = None
        self._tags = None
        self._version_context = None
        self._ancestors = None
        self._parent = None
        self._permission_resources = None
        self._action = None
        self._cleanup_time = None
        self._end_time = None
        self._failed_workflow_cleanup_duration = None
        self._input = None
        self._inst_id = None
        self._internal = None
        self._message = None
        self._meta_version = None
        self._name = None
        self._output = None
        self._progress = None
        self._src = None
        self._start_time = None
        self._status = None
        self._success_workflow_cleanup_duration = None
        self._trace_id = None
        self._type = None
        self._user_id = None
        self._wait_reason = None
        self._workflow_ctx = None
        self._workflow_meta_type = None
        self._workflow_task_count = None
        self.__0_cluster_profile = None
        self.__1_profile = None
        self._account = None
        self._organization = None
        self._parent_task_info = None
        self._pending_dynamic_workflow_info = None
        self._permission = None
        self._task_infos = None
        self._workflow_definition = None

        if account_moid is not None:
          self.account_moid = account_moid
        if create_time is not None:
          self.create_time = create_time
        if domain_group_moid is not None:
          self.domain_group_moid = domain_group_moid
        if mod_time is not None:
          self.mod_time = mod_time
        if moid is not None:
          self.moid = moid
        if object_type is not None:
          self.object_type = object_type
        if owners is not None:
          self.owners = owners
        if shared_scope is not None:
          self.shared_scope = shared_scope
        if tags is not None:
          self.tags = tags
        if version_context is not None:
          self.version_context = version_context
        if ancestors is not None:
          self.ancestors = ancestors
        if parent is not None:
          self.parent = parent
        if permission_resources is not None:
          self.permission_resources = permission_resources
        if action is not None:
          self.action = action
        if cleanup_time is not None:
          self.cleanup_time = cleanup_time
        if end_time is not None:
          self.end_time = end_time
        if failed_workflow_cleanup_duration is not None:
          self.failed_workflow_cleanup_duration = failed_workflow_cleanup_duration
        if input is not None:
          self.input = input
        if inst_id is not None:
          self.inst_id = inst_id
        if internal is not None:
          self.internal = internal
        if message is not None:
          self.message = message
        if meta_version is not None:
          self.meta_version = meta_version
        if name is not None:
          self.name = name
        if output is not None:
          self.output = output
        if progress is not None:
          self.progress = progress
        if src is not None:
          self.src = src
        if start_time is not None:
          self.start_time = start_time
        if status is not None:
          self.status = status
        if success_workflow_cleanup_duration is not None:
          self.success_workflow_cleanup_duration = success_workflow_cleanup_duration
        if trace_id is not None:
          self.trace_id = trace_id
        if type is not None:
          self.type = type
        if user_id is not None:
          self.user_id = user_id
        if wait_reason is not None:
          self.wait_reason = wait_reason
        if workflow_ctx is not None:
          self.workflow_ctx = workflow_ctx
        if workflow_meta_type is not None:
          self.workflow_meta_type = workflow_meta_type
        if workflow_task_count is not None:
          self.workflow_task_count = workflow_task_count
        if _0_cluster_profile is not None:
          self._0_cluster_profile = _0_cluster_profile
        if _1_profile is not None:
          self._1_profile = _1_profile
        if account is not None:
          self.account = account
        if organization is not None:
          self.organization = organization
        if parent_task_info is not None:
          self.parent_task_info = parent_task_info
        if pending_dynamic_workflow_info is not None:
          self.pending_dynamic_workflow_info = pending_dynamic_workflow_info
        if permission is not None:
          self.permission = permission
        if task_infos is not None:
          self.task_infos = task_infos
        if workflow_definition is not None:
          self.workflow_definition = workflow_definition

    @property
    def account_moid(self):
        """
        Gets the account_moid of this WorkflowWorkflowInfo.
        The Account ID for this managed object.  

        :return: The account_moid of this WorkflowWorkflowInfo.
        :rtype: str
        """
        return self._account_moid

    @account_moid.setter
    def account_moid(self, account_moid):
        """
        Sets the account_moid of this WorkflowWorkflowInfo.
        The Account ID for this managed object.  

        :param account_moid: The account_moid of this WorkflowWorkflowInfo.
        :type: str
        """

        self._account_moid = account_moid

    @property
    def create_time(self):
        """
        Gets the create_time of this WorkflowWorkflowInfo.
        The time when this managed object was created.  

        :return: The create_time of this WorkflowWorkflowInfo.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this WorkflowWorkflowInfo.
        The time when this managed object was created.  

        :param create_time: The create_time of this WorkflowWorkflowInfo.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def domain_group_moid(self):
        """
        Gets the domain_group_moid of this WorkflowWorkflowInfo.
        The DomainGroup ID for this managed object.  

        :return: The domain_group_moid of this WorkflowWorkflowInfo.
        :rtype: str
        """
        return self._domain_group_moid

    @domain_group_moid.setter
    def domain_group_moid(self, domain_group_moid):
        """
        Sets the domain_group_moid of this WorkflowWorkflowInfo.
        The DomainGroup ID for this managed object.  

        :param domain_group_moid: The domain_group_moid of this WorkflowWorkflowInfo.
        :type: str
        """

        self._domain_group_moid = domain_group_moid

    @property
    def mod_time(self):
        """
        Gets the mod_time of this WorkflowWorkflowInfo.
        The time when this managed object was last modified.  

        :return: The mod_time of this WorkflowWorkflowInfo.
        :rtype: datetime
        """
        return self._mod_time

    @mod_time.setter
    def mod_time(self, mod_time):
        """
        Sets the mod_time of this WorkflowWorkflowInfo.
        The time when this managed object was last modified.  

        :param mod_time: The mod_time of this WorkflowWorkflowInfo.
        :type: datetime
        """

        self._mod_time = mod_time

    @property
    def moid(self):
        """
        Gets the moid of this WorkflowWorkflowInfo.
        The unique identifier of this Managed Object instance.   

        :return: The moid of this WorkflowWorkflowInfo.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """
        Sets the moid of this WorkflowWorkflowInfo.
        The unique identifier of this Managed Object instance.   

        :param moid: The moid of this WorkflowWorkflowInfo.
        :type: str
        """

        self._moid = moid

    @property
    def object_type(self):
        """
        Gets the object_type of this WorkflowWorkflowInfo.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :return: The object_type of this WorkflowWorkflowInfo.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this WorkflowWorkflowInfo.
        The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.   

        :param object_type: The object_type of this WorkflowWorkflowInfo.
        :type: str
        """

        self._object_type = object_type

    @property
    def owners(self):
        """
        Gets the owners of this WorkflowWorkflowInfo.
        The array of owners which represent effective ownership of this object.   

        :return: The owners of this WorkflowWorkflowInfo.
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """
        Sets the owners of this WorkflowWorkflowInfo.
        The array of owners which represent effective ownership of this object.   

        :param owners: The owners of this WorkflowWorkflowInfo.
        :type: list[str]
        """

        self._owners = owners

    @property
    def shared_scope(self):
        """
        Gets the shared_scope of this WorkflowWorkflowInfo.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :return: The shared_scope of this WorkflowWorkflowInfo.
        :rtype: str
        """
        return self._shared_scope

    @shared_scope.setter
    def shared_scope(self, shared_scope):
        """
        Sets the shared_scope of this WorkflowWorkflowInfo.
        Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.  

        :param shared_scope: The shared_scope of this WorkflowWorkflowInfo.
        :type: str
        """

        self._shared_scope = shared_scope

    @property
    def tags(self):
        """
        Gets the tags of this WorkflowWorkflowInfo.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :return: The tags of this WorkflowWorkflowInfo.
        :rtype: list[MoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this WorkflowWorkflowInfo.
        The array of tags, which allow to add key, value meta-data to managed objects.   

        :param tags: The tags of this WorkflowWorkflowInfo.
        :type: list[MoTag]
        """

        self._tags = tags

    @property
    def version_context(self):
        """
        Gets the version_context of this WorkflowWorkflowInfo.
        The versioning info for this managed object.   

        :return: The version_context of this WorkflowWorkflowInfo.
        :rtype: MoVersionContext
        """
        return self._version_context

    @version_context.setter
    def version_context(self, version_context):
        """
        Sets the version_context of this WorkflowWorkflowInfo.
        The versioning info for this managed object.   

        :param version_context: The version_context of this WorkflowWorkflowInfo.
        :type: MoVersionContext
        """

        self._version_context = version_context

    @property
    def ancestors(self):
        """
        Gets the ancestors of this WorkflowWorkflowInfo.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :return: The ancestors of this WorkflowWorkflowInfo.
        :rtype: list[MoBaseMoRef]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this WorkflowWorkflowInfo.
        The array containing the MO references of the ancestors in the object containment hierarchy. 

        :param ancestors: The ancestors of this WorkflowWorkflowInfo.
        :type: list[MoBaseMoRef]
        """

        self._ancestors = ancestors

    @property
    def parent(self):
        """
        Gets the parent of this WorkflowWorkflowInfo.
        The direct ancestor of this managed object in the containment hierarchy. 

        :return: The parent of this WorkflowWorkflowInfo.
        :rtype: MoBaseMoRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this WorkflowWorkflowInfo.
        The direct ancestor of this managed object in the containment hierarchy. 

        :param parent: The parent of this WorkflowWorkflowInfo.
        :type: MoBaseMoRef
        """

        self._parent = parent

    @property
    def permission_resources(self):
        """
        Gets the permission_resources of this WorkflowWorkflowInfo.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :return: The permission_resources of this WorkflowWorkflowInfo.
        :rtype: list[MoBaseMoRef]
        """
        return self._permission_resources

    @permission_resources.setter
    def permission_resources(self, permission_resources):
        """
        Sets the permission_resources of this WorkflowWorkflowInfo.
        A slice of all permission resources (organizations) associated with this object. Permission ties resources and its associated roles/privileges. These resources which can be specified in a permission is PermissionResource. Currently only organizations can be specified in permission. All logical and physical resources part of an organization will have organization in PermissionResources field. If DeviceRegistration contains another DeviceRegistration and if parent is in org1 and child is part of org2, then child objects will have PermissionResources as org1 and org2. Parent Objects will have PermissionResources as org1. All profiles/policies created with in an organization will have the organization as PermissionResources. 

        :param permission_resources: The permission_resources of this WorkflowWorkflowInfo.
        :type: list[MoBaseMoRef]
        """

        self._permission_resources = permission_resources

    @property
    def action(self):
        """
        Gets the action of this WorkflowWorkflowInfo.
        The action of the workflow such as start, cancel, retry, pause.  

        :return: The action of this WorkflowWorkflowInfo.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this WorkflowWorkflowInfo.
        The action of the workflow such as start, cancel, retry, pause.  

        :param action: The action of this WorkflowWorkflowInfo.
        :type: str
        """
        allowed_values = ["Start", "Pause", "Resume", "Retry", "Cancel"]
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def cleanup_time(self):
        """
        Gets the cleanup_time of this WorkflowWorkflowInfo.
        The time when the workflow info will be removed from database.  

        :return: The cleanup_time of this WorkflowWorkflowInfo.
        :rtype: datetime
        """
        return self._cleanup_time

    @cleanup_time.setter
    def cleanup_time(self, cleanup_time):
        """
        Sets the cleanup_time of this WorkflowWorkflowInfo.
        The time when the workflow info will be removed from database.  

        :param cleanup_time: The cleanup_time of this WorkflowWorkflowInfo.
        :type: datetime
        """

        self._cleanup_time = cleanup_time

    @property
    def end_time(self):
        """
        Gets the end_time of this WorkflowWorkflowInfo.
        The time when the workflow reached a final state.  

        :return: The end_time of this WorkflowWorkflowInfo.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this WorkflowWorkflowInfo.
        The time when the workflow reached a final state.  

        :param end_time: The end_time of this WorkflowWorkflowInfo.
        :type: datetime
        """

        self._end_time = end_time

    @property
    def failed_workflow_cleanup_duration(self):
        """
        Gets the failed_workflow_cleanup_duration of this WorkflowWorkflowInfo.
        The duration in hours after which the workflow info for failed, terminated or timed out workflow will be removed from database.  

        :return: The failed_workflow_cleanup_duration of this WorkflowWorkflowInfo.
        :rtype: int
        """
        return self._failed_workflow_cleanup_duration

    @failed_workflow_cleanup_duration.setter
    def failed_workflow_cleanup_duration(self, failed_workflow_cleanup_duration):
        """
        Sets the failed_workflow_cleanup_duration of this WorkflowWorkflowInfo.
        The duration in hours after which the workflow info for failed, terminated or timed out workflow will be removed from database.  

        :param failed_workflow_cleanup_duration: The failed_workflow_cleanup_duration of this WorkflowWorkflowInfo.
        :type: int
        """

        self._failed_workflow_cleanup_duration = failed_workflow_cleanup_duration

    @property
    def input(self):
        """
        Gets the input of this WorkflowWorkflowInfo.
        All the given inputs for the workflow.  

        :return: The input of this WorkflowWorkflowInfo.
        :rtype: object
        """
        return self._input

    @input.setter
    def input(self, input):
        """
        Sets the input of this WorkflowWorkflowInfo.
        All the given inputs for the workflow.  

        :param input: The input of this WorkflowWorkflowInfo.
        :type: object
        """

        self._input = input

    @property
    def inst_id(self):
        """
        Gets the inst_id of this WorkflowWorkflowInfo.
        A workflow instance Id which is the unique identified for the workflow execution.  

        :return: The inst_id of this WorkflowWorkflowInfo.
        :rtype: str
        """
        return self._inst_id

    @inst_id.setter
    def inst_id(self, inst_id):
        """
        Sets the inst_id of this WorkflowWorkflowInfo.
        A workflow instance Id which is the unique identified for the workflow execution.  

        :param inst_id: The inst_id of this WorkflowWorkflowInfo.
        :type: str
        """

        self._inst_id = inst_id

    @property
    def internal(self):
        """
        Gets the internal of this WorkflowWorkflowInfo.
        Denotes if this workflow is internal and should be hidden from user view of running workflows.  

        :return: The internal of this WorkflowWorkflowInfo.
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """
        Sets the internal of this WorkflowWorkflowInfo.
        Denotes if this workflow is internal and should be hidden from user view of running workflows.  

        :param internal: The internal of this WorkflowWorkflowInfo.
        :type: bool
        """

        self._internal = internal

    @property
    def message(self):
        """
        Gets the message of this WorkflowWorkflowInfo.
        Collection of Workflow execution messages with severity.  

        :return: The message of this WorkflowWorkflowInfo.
        :rtype: list[WorkflowMessage]
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this WorkflowWorkflowInfo.
        Collection of Workflow execution messages with severity.  

        :param message: The message of this WorkflowWorkflowInfo.
        :type: list[WorkflowMessage]
        """

        self._message = message

    @property
    def meta_version(self):
        """
        Gets the meta_version of this WorkflowWorkflowInfo.
        Version of the workflow metadata for which this workflow execution was started.  

        :return: The meta_version of this WorkflowWorkflowInfo.
        :rtype: int
        """
        return self._meta_version

    @meta_version.setter
    def meta_version(self, meta_version):
        """
        Sets the meta_version of this WorkflowWorkflowInfo.
        Version of the workflow metadata for which this workflow execution was started.  

        :param meta_version: The meta_version of this WorkflowWorkflowInfo.
        :type: int
        """

        self._meta_version = meta_version

    @property
    def name(self):
        """
        Gets the name of this WorkflowWorkflowInfo.
        A name of the workflow execution instance.  

        :return: The name of this WorkflowWorkflowInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WorkflowWorkflowInfo.
        A name of the workflow execution instance.  

        :param name: The name of this WorkflowWorkflowInfo.
        :type: str
        """

        self._name = name

    @property
    def output(self):
        """
        Gets the output of this WorkflowWorkflowInfo.
        All the generated outputs for the workflow.  

        :return: The output of this WorkflowWorkflowInfo.
        :rtype: object
        """
        return self._output

    @output.setter
    def output(self, output):
        """
        Sets the output of this WorkflowWorkflowInfo.
        All the generated outputs for the workflow.  

        :param output: The output of this WorkflowWorkflowInfo.
        :type: object
        """

        self._output = output

    @property
    def progress(self):
        """
        Gets the progress of this WorkflowWorkflowInfo.
        This field indicates percentage of workflow task execution.   

        :return: The progress of this WorkflowWorkflowInfo.
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """
        Sets the progress of this WorkflowWorkflowInfo.
        This field indicates percentage of workflow task execution.   

        :param progress: The progress of this WorkflowWorkflowInfo.
        :type: float
        """

        self._progress = progress

    @property
    def src(self):
        """
        Gets the src of this WorkflowWorkflowInfo.
        The source microservice name which is the owner for this workflow.  

        :return: The src of this WorkflowWorkflowInfo.
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """
        Sets the src of this WorkflowWorkflowInfo.
        The source microservice name which is the owner for this workflow.  

        :param src: The src of this WorkflowWorkflowInfo.
        :type: str
        """

        self._src = src

    @property
    def start_time(self):
        """
        Gets the start_time of this WorkflowWorkflowInfo.
        The time when the workflow was started for execution.  

        :return: The start_time of this WorkflowWorkflowInfo.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this WorkflowWorkflowInfo.
        The time when the workflow was started for execution.  

        :param start_time: The start_time of this WorkflowWorkflowInfo.
        :type: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """
        Gets the status of this WorkflowWorkflowInfo.
        A status of the workflow (RUNNING, WAITING, COMPLETED, TIME_OUT, FAILED).  

        :return: The status of this WorkflowWorkflowInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this WorkflowWorkflowInfo.
        A status of the workflow (RUNNING, WAITING, COMPLETED, TIME_OUT, FAILED).  

        :param status: The status of this WorkflowWorkflowInfo.
        :type: str
        """

        self._status = status

    @property
    def success_workflow_cleanup_duration(self):
        """
        Gets the success_workflow_cleanup_duration of this WorkflowWorkflowInfo.
        The duration in hours after which the workflow info for successful workflow will be removed from database.  

        :return: The success_workflow_cleanup_duration of this WorkflowWorkflowInfo.
        :rtype: int
        """
        return self._success_workflow_cleanup_duration

    @success_workflow_cleanup_duration.setter
    def success_workflow_cleanup_duration(self, success_workflow_cleanup_duration):
        """
        Sets the success_workflow_cleanup_duration of this WorkflowWorkflowInfo.
        The duration in hours after which the workflow info for successful workflow will be removed from database.  

        :param success_workflow_cleanup_duration: The success_workflow_cleanup_duration of this WorkflowWorkflowInfo.
        :type: int
        """

        self._success_workflow_cleanup_duration = success_workflow_cleanup_duration

    @property
    def trace_id(self):
        """
        Gets the trace_id of this WorkflowWorkflowInfo.
        The trace id to keep track of workflow execution.  

        :return: The trace_id of this WorkflowWorkflowInfo.
        :rtype: str
        """
        return self._trace_id

    @trace_id.setter
    def trace_id(self, trace_id):
        """
        Sets the trace_id of this WorkflowWorkflowInfo.
        The trace id to keep track of workflow execution.  

        :param trace_id: The trace_id of this WorkflowWorkflowInfo.
        :type: str
        """

        self._trace_id = trace_id

    @property
    def type(self):
        """
        Gets the type of this WorkflowWorkflowInfo.
        A type of the workflow (serverconfig, ansible_monitoring).  

        :return: The type of this WorkflowWorkflowInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this WorkflowWorkflowInfo.
        A type of the workflow (serverconfig, ansible_monitoring).  

        :param type: The type of this WorkflowWorkflowInfo.
        :type: str
        """

        self._type = type

    @property
    def user_id(self):
        """
        Gets the user_id of this WorkflowWorkflowInfo.
        The user identifier which indicates the user that started this workflow.  

        :return: The user_id of this WorkflowWorkflowInfo.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this WorkflowWorkflowInfo.
        The user identifier which indicates the user that started this workflow.  

        :param user_id: The user_id of this WorkflowWorkflowInfo.
        :type: str
        """

        self._user_id = user_id

    @property
    def wait_reason(self):
        """
        Gets the wait_reason of this WorkflowWorkflowInfo.
        Denotes the reason workflow is in waiting status.  

        :return: The wait_reason of this WorkflowWorkflowInfo.
        :rtype: str
        """
        return self._wait_reason

    @wait_reason.setter
    def wait_reason(self, wait_reason):
        """
        Sets the wait_reason of this WorkflowWorkflowInfo.
        Denotes the reason workflow is in waiting status.  

        :param wait_reason: The wait_reason of this WorkflowWorkflowInfo.
        :type: str
        """
        allowed_values = ["None", "GatherTasks", "Duplicate", "RateLimit", "WaitTask"]
        if wait_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `wait_reason` ({0}), must be one of {1}"
                .format(wait_reason, allowed_values)
            )

        self._wait_reason = wait_reason

    @property
    def workflow_ctx(self):
        """
        Gets the workflow_ctx of this WorkflowWorkflowInfo.
        The workflow context which contains initiator and target information.   

        :return: The workflow_ctx of this WorkflowWorkflowInfo.
        :rtype: object
        """
        return self._workflow_ctx

    @workflow_ctx.setter
    def workflow_ctx(self, workflow_ctx):
        """
        Sets the workflow_ctx of this WorkflowWorkflowInfo.
        The workflow context which contains initiator and target information.   

        :param workflow_ctx: The workflow_ctx of this WorkflowWorkflowInfo.
        :type: object
        """

        self._workflow_ctx = workflow_ctx

    @property
    def workflow_meta_type(self):
        """
        Gets the workflow_meta_type of this WorkflowWorkflowInfo.
        The type of workflow meta. Derived from the workflow meta that is used to launch this workflow instance.  

        :return: The workflow_meta_type of this WorkflowWorkflowInfo.
        :rtype: str
        """
        return self._workflow_meta_type

    @workflow_meta_type.setter
    def workflow_meta_type(self, workflow_meta_type):
        """
        Sets the workflow_meta_type of this WorkflowWorkflowInfo.
        The type of workflow meta. Derived from the workflow meta that is used to launch this workflow instance.  

        :param workflow_meta_type: The workflow_meta_type of this WorkflowWorkflowInfo.
        :type: str
        """
        allowed_values = ["SystemDefined", "UserDefined", "Dynamic"]
        if workflow_meta_type not in allowed_values:
            raise ValueError(
                "Invalid value for `workflow_meta_type` ({0}), must be one of {1}"
                .format(workflow_meta_type, allowed_values)
            )

        self._workflow_meta_type = workflow_meta_type

    @property
    def workflow_task_count(self):
        """
        Gets the workflow_task_count of this WorkflowWorkflowInfo.
        Total number of workflow tasks in this workflow.   

        :return: The workflow_task_count of this WorkflowWorkflowInfo.
        :rtype: int
        """
        return self._workflow_task_count

    @workflow_task_count.setter
    def workflow_task_count(self, workflow_task_count):
        """
        Sets the workflow_task_count of this WorkflowWorkflowInfo.
        Total number of workflow tasks in this workflow.   

        :param workflow_task_count: The workflow_task_count of this WorkflowWorkflowInfo.
        :type: int
        """

        self._workflow_task_count = workflow_task_count

    @property
    def _0_cluster_profile(self):
        """
        Gets the _0_cluster_profile of this WorkflowWorkflowInfo.
        A collection of references to the [hyperflex.ClusterProfile](mo://hyperflex.ClusterProfile) Managed Object.  When this managed object is deleted, the referenced [hyperflex.ClusterProfile](mo://hyperflex.ClusterProfile) MO unsets its reference to this deleted MO. 

        :return: The _0_cluster_profile of this WorkflowWorkflowInfo.
        :rtype: HyperflexClusterProfileRef
        """
        return self.__0_cluster_profile

    @_0_cluster_profile.setter
    def _0_cluster_profile(self, _0_cluster_profile):
        """
        Sets the _0_cluster_profile of this WorkflowWorkflowInfo.
        A collection of references to the [hyperflex.ClusterProfile](mo://hyperflex.ClusterProfile) Managed Object.  When this managed object is deleted, the referenced [hyperflex.ClusterProfile](mo://hyperflex.ClusterProfile) MO unsets its reference to this deleted MO. 

        :param _0_cluster_profile: The _0_cluster_profile of this WorkflowWorkflowInfo.
        :type: HyperflexClusterProfileRef
        """

        self.__0_cluster_profile = _0_cluster_profile

    @property
    def _1_profile(self):
        """
        Gets the _1_profile of this WorkflowWorkflowInfo.
        A collection of references to the [server.Profile](mo://server.Profile) Managed Object.  When this managed object is deleted, the referenced [server.Profile](mo://server.Profile) MO unsets its reference to this deleted MO. 

        :return: The _1_profile of this WorkflowWorkflowInfo.
        :rtype: ServerProfileRef
        """
        return self.__1_profile

    @_1_profile.setter
    def _1_profile(self, _1_profile):
        """
        Sets the _1_profile of this WorkflowWorkflowInfo.
        A collection of references to the [server.Profile](mo://server.Profile) Managed Object.  When this managed object is deleted, the referenced [server.Profile](mo://server.Profile) MO unsets its reference to this deleted MO. 

        :param _1_profile: The _1_profile of this WorkflowWorkflowInfo.
        :type: ServerProfileRef
        """

        self.__1_profile = _1_profile

    @property
    def account(self):
        """
        Gets the account of this WorkflowWorkflowInfo.
        The Account to which the workflow is associated. 

        :return: The account of this WorkflowWorkflowInfo.
        :rtype: IamAccountRef
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this WorkflowWorkflowInfo.
        The Account to which the workflow is associated. 

        :param account: The account of this WorkflowWorkflowInfo.
        :type: IamAccountRef
        """

        self._account = account

    @property
    def organization(self):
        """
        Gets the organization of this WorkflowWorkflowInfo.
        The Organization to which the workflow is associated. 

        :return: The organization of this WorkflowWorkflowInfo.
        :rtype: OrganizationOrganizationRef
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this WorkflowWorkflowInfo.
        The Organization to which the workflow is associated. 

        :param organization: The organization of this WorkflowWorkflowInfo.
        :type: OrganizationOrganizationRef
        """

        self._organization = organization

    @property
    def parent_task_info(self):
        """
        Gets the parent_task_info of this WorkflowWorkflowInfo.
        Link to the task in the parent workflow which launched this workflow. 

        :return: The parent_task_info of this WorkflowWorkflowInfo.
        :rtype: WorkflowTaskInfoRef
        """
        return self._parent_task_info

    @parent_task_info.setter
    def parent_task_info(self, parent_task_info):
        """
        Sets the parent_task_info of this WorkflowWorkflowInfo.
        Link to the task in the parent workflow which launched this workflow. 

        :param parent_task_info: The parent_task_info of this WorkflowWorkflowInfo.
        :type: WorkflowTaskInfoRef
        """

        self._parent_task_info = parent_task_info

    @property
    def pending_dynamic_workflow_info(self):
        """
        Gets the pending_dynamic_workflow_info of this WorkflowWorkflowInfo.
        Reference to the PendingDynamicWorkflowInfo that was used to construct this workflow instance. 

        :return: The pending_dynamic_workflow_info of this WorkflowWorkflowInfo.
        :rtype: WorkflowPendingDynamicWorkflowInfoRef
        """
        return self._pending_dynamic_workflow_info

    @pending_dynamic_workflow_info.setter
    def pending_dynamic_workflow_info(self, pending_dynamic_workflow_info):
        """
        Sets the pending_dynamic_workflow_info of this WorkflowWorkflowInfo.
        Reference to the PendingDynamicWorkflowInfo that was used to construct this workflow instance. 

        :param pending_dynamic_workflow_info: The pending_dynamic_workflow_info of this WorkflowWorkflowInfo.
        :type: WorkflowPendingDynamicWorkflowInfoRef
        """

        self._pending_dynamic_workflow_info = pending_dynamic_workflow_info

    @property
    def permission(self):
        """
        Gets the permission of this WorkflowWorkflowInfo.
        Reference to the permission object for which user has access to start this workflow. 

        :return: The permission of this WorkflowWorkflowInfo.
        :rtype: IamPermissionRef
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """
        Sets the permission of this WorkflowWorkflowInfo.
        Reference to the permission object for which user has access to start this workflow. 

        :param permission: The permission of this WorkflowWorkflowInfo.
        :type: IamPermissionRef
        """

        self._permission = permission

    @property
    def task_infos(self):
        """
        Gets the task_infos of this WorkflowWorkflowInfo.
        List of task instances that ran as part of this workflow execution. 

        :return: The task_infos of this WorkflowWorkflowInfo.
        :rtype: list[WorkflowTaskInfoRef]
        """
        return self._task_infos

    @task_infos.setter
    def task_infos(self, task_infos):
        """
        Sets the task_infos of this WorkflowWorkflowInfo.
        List of task instances that ran as part of this workflow execution. 

        :param task_infos: The task_infos of this WorkflowWorkflowInfo.
        :type: list[WorkflowTaskInfoRef]
        """

        self._task_infos = task_infos

    @property
    def workflow_definition(self):
        """
        Gets the workflow_definition of this WorkflowWorkflowInfo.
        The workflow definition that was used to launch this workflow execution instance. 

        :return: The workflow_definition of this WorkflowWorkflowInfo.
        :rtype: WorkflowWorkflowDefinitionRef
        """
        return self._workflow_definition

    @workflow_definition.setter
    def workflow_definition(self, workflow_definition):
        """
        Sets the workflow_definition of this WorkflowWorkflowInfo.
        The workflow definition that was used to launch this workflow execution instance. 

        :param workflow_definition: The workflow_definition of this WorkflowWorkflowInfo.
        :type: WorkflowWorkflowDefinitionRef
        """

        self._workflow_definition = workflow_definition

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkflowWorkflowInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
