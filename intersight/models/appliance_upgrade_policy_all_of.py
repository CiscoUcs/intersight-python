# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ApplianceUpgradePolicyAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auto_upgrade': 'bool',
        'blackout_dates_enabled': 'bool',
        'blackout_end_date': 'datetime',
        'blackout_start_date': 'datetime',
        'schedule': 'OnpremSchedule',
        'account': 'IamAccount'
    }

    attribute_map = {
        'auto_upgrade': 'AutoUpgrade',
        'blackout_dates_enabled': 'BlackoutDatesEnabled',
        'blackout_end_date': 'BlackoutEndDate',
        'blackout_start_date': 'BlackoutStartDate',
        'schedule': 'Schedule',
        'account': 'Account'
    }

    def __init__(self,
                 auto_upgrade=None,
                 blackout_dates_enabled=None,
                 blackout_end_date=None,
                 blackout_start_date=None,
                 schedule=None,
                 account=None,
                 local_vars_configuration=None):  # noqa: E501
        """ApplianceUpgradePolicyAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._auto_upgrade = None
        self._blackout_dates_enabled = None
        self._blackout_end_date = None
        self._blackout_start_date = None
        self._schedule = None
        self._account = None
        self.discriminator = None

        if auto_upgrade is not None:
            self.auto_upgrade = auto_upgrade
        if blackout_dates_enabled is not None:
            self.blackout_dates_enabled = blackout_dates_enabled
        if blackout_end_date is not None:
            self.blackout_end_date = blackout_end_date
        if blackout_start_date is not None:
            self.blackout_start_date = blackout_start_date
        if schedule is not None:
            self.schedule = schedule
        if account is not None:
            self.account = account

    @property
    def auto_upgrade(self):
        """Gets the auto_upgrade of this ApplianceUpgradePolicyAllOf.  # noqa: E501

        Indicates if the upgrade service is set to automatically start the software upgrade or not. If autoUpgrade is true, then the value of the schedule field is ignored.    # noqa: E501

        :return: The auto_upgrade of this ApplianceUpgradePolicyAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._auto_upgrade

    @auto_upgrade.setter
    def auto_upgrade(self, auto_upgrade):
        """Sets the auto_upgrade of this ApplianceUpgradePolicyAllOf.

        Indicates if the upgrade service is set to automatically start the software upgrade or not. If autoUpgrade is true, then the value of the schedule field is ignored.    # noqa: E501

        :param auto_upgrade: The auto_upgrade of this ApplianceUpgradePolicyAllOf.  # noqa: E501
        :type: bool
        """

        self._auto_upgrade = auto_upgrade

    @property
    def blackout_dates_enabled(self):
        """Gets the blackout_dates_enabled of this ApplianceUpgradePolicyAllOf.  # noqa: E501

        If enabled, allows the user to define a blackout period during which the appliance will not be upgraded.    # noqa: E501

        :return: The blackout_dates_enabled of this ApplianceUpgradePolicyAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._blackout_dates_enabled

    @blackout_dates_enabled.setter
    def blackout_dates_enabled(self, blackout_dates_enabled):
        """Sets the blackout_dates_enabled of this ApplianceUpgradePolicyAllOf.

        If enabled, allows the user to define a blackout period during which the appliance will not be upgraded.    # noqa: E501

        :param blackout_dates_enabled: The blackout_dates_enabled of this ApplianceUpgradePolicyAllOf.  # noqa: E501
        :type: bool
        """

        self._blackout_dates_enabled = blackout_dates_enabled

    @property
    def blackout_end_date(self):
        """Gets the blackout_end_date of this ApplianceUpgradePolicyAllOf.  # noqa: E501

        End date of the black out period.    # noqa: E501

        :return: The blackout_end_date of this ApplianceUpgradePolicyAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._blackout_end_date

    @blackout_end_date.setter
    def blackout_end_date(self, blackout_end_date):
        """Sets the blackout_end_date of this ApplianceUpgradePolicyAllOf.

        End date of the black out period.    # noqa: E501

        :param blackout_end_date: The blackout_end_date of this ApplianceUpgradePolicyAllOf.  # noqa: E501
        :type: datetime
        """

        self._blackout_end_date = blackout_end_date

    @property
    def blackout_start_date(self):
        """Gets the blackout_start_date of this ApplianceUpgradePolicyAllOf.  # noqa: E501

        Start date of the black out period. The appliance will not be upgraded during this period.    # noqa: E501

        :return: The blackout_start_date of this ApplianceUpgradePolicyAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._blackout_start_date

    @blackout_start_date.setter
    def blackout_start_date(self, blackout_start_date):
        """Sets the blackout_start_date of this ApplianceUpgradePolicyAllOf.

        Start date of the black out period. The appliance will not be upgraded during this period.    # noqa: E501

        :param blackout_start_date: The blackout_start_date of this ApplianceUpgradePolicyAllOf.  # noqa: E501
        :type: datetime
        """

        self._blackout_start_date = blackout_start_date

    @property
    def schedule(self):
        """Gets the schedule of this ApplianceUpgradePolicyAllOf.  # noqa: E501


        :return: The schedule of this ApplianceUpgradePolicyAllOf.  # noqa: E501
        :rtype: OnpremSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this ApplianceUpgradePolicyAllOf.


        :param schedule: The schedule of this ApplianceUpgradePolicyAllOf.  # noqa: E501
        :type: OnpremSchedule
        """

        self._schedule = schedule

    @property
    def account(self):
        """Gets the account of this ApplianceUpgradePolicyAllOf.  # noqa: E501


        :return: The account of this ApplianceUpgradePolicyAllOf.  # noqa: E501
        :rtype: IamAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ApplianceUpgradePolicyAllOf.


        :param account: The account of this ApplianceUpgradePolicyAllOf.  # noqa: E501
        :type: IamAccount
        """

        self._account = account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplianceUpgradePolicyAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplianceUpgradePolicyAllOf):
            return True

        return self.to_dict() != other.to_dict()
