# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class ForecastInstanceAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alt_model': 'list[float]',
        'device_id': 'str',
        'full_cap_days': 'int',
        'metric_name': 'str',
        'min_days_for_forecast': 'int',
        'model': 'ForecastModel',
        'threshold_days': 'int',
        'forecast_def': 'ForecastDefinition',
        'registered_device': 'AssetDeviceRegistration'
    }

    attribute_map = {
        'alt_model': 'AltModel',
        'device_id': 'DeviceId',
        'full_cap_days': 'FullCapDays',
        'metric_name': 'MetricName',
        'min_days_for_forecast': 'MinDaysForForecast',
        'model': 'Model',
        'threshold_days': 'ThresholdDays',
        'forecast_def': 'ForecastDef',
        'registered_device': 'RegisteredDevice'
    }

    def __init__(self,
                 alt_model=None,
                 device_id=None,
                 full_cap_days=None,
                 metric_name=None,
                 min_days_for_forecast=None,
                 model=None,
                 threshold_days=None,
                 forecast_def=None,
                 registered_device=None,
                 local_vars_configuration=None):  # noqa: E501
        """ForecastInstanceAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._alt_model = None
        self._device_id = None
        self._full_cap_days = None
        self._metric_name = None
        self._min_days_for_forecast = None
        self._model = None
        self._threshold_days = None
        self._forecast_def = None
        self._registered_device = None
        self.discriminator = None

        if alt_model is not None:
            self.alt_model = alt_model
        if device_id is not None:
            self.device_id = device_id
        if full_cap_days is not None:
            self.full_cap_days = full_cap_days
        if metric_name is not None:
            self.metric_name = metric_name
        if min_days_for_forecast is not None:
            self.min_days_for_forecast = min_days_for_forecast
        if model is not None:
            self.model = model
        if threshold_days is not None:
            self.threshold_days = threshold_days
        if forecast_def is not None:
            self.forecast_def = forecast_def
        if registered_device is not None:
            self.registered_device = registered_device

    @property
    def alt_model(self):
        """Gets the alt_model of this ForecastInstanceAllOf.  # noqa: E501


        :return: The alt_model of this ForecastInstanceAllOf.  # noqa: E501
        :rtype: list[float]
        """
        return self._alt_model

    @alt_model.setter
    def alt_model(self, alt_model):
        """Sets the alt_model of this ForecastInstanceAllOf.


        :param alt_model: The alt_model of this ForecastInstanceAllOf.  # noqa: E501
        :type: list[float]
        """

        self._alt_model = alt_model

    @property
    def device_id(self):
        """Gets the device_id of this ForecastInstanceAllOf.  # noqa: E501

        The Moid of the Intersight managed device instance for which regression model is derived.    # noqa: E501

        :return: The device_id of this ForecastInstanceAllOf.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this ForecastInstanceAllOf.

        The Moid of the Intersight managed device instance for which regression model is derived.    # noqa: E501

        :param device_id: The device_id of this ForecastInstanceAllOf.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def full_cap_days(self):
        """Gets the full_cap_days of this ForecastInstanceAllOf.  # noqa: E501

        The number of days remaining before the device reaches its full functional capacity.    # noqa: E501

        :return: The full_cap_days of this ForecastInstanceAllOf.  # noqa: E501
        :rtype: int
        """
        return self._full_cap_days

    @full_cap_days.setter
    def full_cap_days(self, full_cap_days):
        """Sets the full_cap_days of this ForecastInstanceAllOf.

        The number of days remaining before the device reaches its full functional capacity.    # noqa: E501

        :param full_cap_days: The full_cap_days of this ForecastInstanceAllOf.  # noqa: E501
        :type: int
        """

        self._full_cap_days = full_cap_days

    @property
    def metric_name(self):
        """Gets the metric_name of this ForecastInstanceAllOf.  # noqa: E501

        The name of the metric for which regression model is generated.    # noqa: E501

        :return: The metric_name of this ForecastInstanceAllOf.  # noqa: E501
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this ForecastInstanceAllOf.

        The name of the metric for which regression model is generated.    # noqa: E501

        :param metric_name: The metric_name of this ForecastInstanceAllOf.  # noqa: E501
        :type: str
        """

        self._metric_name = metric_name

    @property
    def min_days_for_forecast(self):
        """Gets the min_days_for_forecast of this ForecastInstanceAllOf.  # noqa: E501

        The minimum number of days the HyperFlex cluster should be up for computing forecast.    # noqa: E501

        :return: The min_days_for_forecast of this ForecastInstanceAllOf.  # noqa: E501
        :rtype: int
        """
        return self._min_days_for_forecast

    @min_days_for_forecast.setter
    def min_days_for_forecast(self, min_days_for_forecast):
        """Sets the min_days_for_forecast of this ForecastInstanceAllOf.

        The minimum number of days the HyperFlex cluster should be up for computing forecast.    # noqa: E501

        :param min_days_for_forecast: The min_days_for_forecast of this ForecastInstanceAllOf.  # noqa: E501
        :type: int
        """

        self._min_days_for_forecast = min_days_for_forecast

    @property
    def model(self):
        """Gets the model of this ForecastInstanceAllOf.  # noqa: E501


        :return: The model of this ForecastInstanceAllOf.  # noqa: E501
        :rtype: ForecastModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ForecastInstanceAllOf.


        :param model: The model of this ForecastInstanceAllOf.  # noqa: E501
        :type: ForecastModel
        """

        self._model = model

    @property
    def threshold_days(self):
        """Gets the threshold_days of this ForecastInstanceAllOf.  # noqa: E501

        The number of days remaining before the device reaches the specified threshold for the metric as defined in definition.     # noqa: E501

        :return: The threshold_days of this ForecastInstanceAllOf.  # noqa: E501
        :rtype: int
        """
        return self._threshold_days

    @threshold_days.setter
    def threshold_days(self, threshold_days):
        """Sets the threshold_days of this ForecastInstanceAllOf.

        The number of days remaining before the device reaches the specified threshold for the metric as defined in definition.     # noqa: E501

        :param threshold_days: The threshold_days of this ForecastInstanceAllOf.  # noqa: E501
        :type: int
        """

        self._threshold_days = threshold_days

    @property
    def forecast_def(self):
        """Gets the forecast_def of this ForecastInstanceAllOf.  # noqa: E501


        :return: The forecast_def of this ForecastInstanceAllOf.  # noqa: E501
        :rtype: ForecastDefinition
        """
        return self._forecast_def

    @forecast_def.setter
    def forecast_def(self, forecast_def):
        """Sets the forecast_def of this ForecastInstanceAllOf.


        :param forecast_def: The forecast_def of this ForecastInstanceAllOf.  # noqa: E501
        :type: ForecastDefinition
        """

        self._forecast_def = forecast_def

    @property
    def registered_device(self):
        """Gets the registered_device of this ForecastInstanceAllOf.  # noqa: E501


        :return: The registered_device of this ForecastInstanceAllOf.  # noqa: E501
        :rtype: AssetDeviceRegistration
        """
        return self._registered_device

    @registered_device.setter
    def registered_device(self, registered_device):
        """Sets the registered_device of this ForecastInstanceAllOf.


        :param registered_device: The registered_device of this ForecastInstanceAllOf.  # noqa: E501
        :type: AssetDeviceRegistration
        """

        self._registered_device = registered_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForecastInstanceAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ForecastInstanceAllOf):
            return True

        return self.to_dict() != other.to_dict()
