# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class HclServiceStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'exemption_file_version': 'str',
        'identity': 'str',
        'last_hcl_data_modified_time': 'datetime',
        'last_imported_data_checksum': 'str',
        'status': 'str'
    }

    attribute_map = {
        'exemption_file_version': 'ExemptionFileVersion',
        'identity': 'Identity',
        'last_hcl_data_modified_time': 'LastHclDataModifiedTime',
        'last_imported_data_checksum': 'LastImportedDataChecksum',
        'status': 'Status'
    }

    def __init__(self,
                 exemption_file_version=None,
                 identity=None,
                 last_hcl_data_modified_time=None,
                 last_imported_data_checksum=None,
                 status='Unknown',
                 local_vars_configuration=None):  # noqa: E501
        """HclServiceStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._exemption_file_version = None
        self._identity = None
        self._last_hcl_data_modified_time = None
        self._last_imported_data_checksum = None
        self._status = None
        self.discriminator = None

        if exemption_file_version is not None:
            self.exemption_file_version = exemption_file_version
        if identity is not None:
            self.identity = identity
        if last_hcl_data_modified_time is not None:
            self.last_hcl_data_modified_time = last_hcl_data_modified_time
        if last_imported_data_checksum is not None:
            self.last_imported_data_checksum = last_imported_data_checksum
        if status is not None:
            self.status = status

    @property
    def exemption_file_version(self):
        """Gets the exemption_file_version of this HclServiceStatus.  # noqa: E501

        Version of the last modified exemption file.    # noqa: E501

        :return: The exemption_file_version of this HclServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._exemption_file_version

    @exemption_file_version.setter
    def exemption_file_version(self, exemption_file_version):
        """Sets the exemption_file_version of this HclServiceStatus.

        Version of the last modified exemption file.    # noqa: E501

        :param exemption_file_version: The exemption_file_version of this HclServiceStatus.  # noqa: E501
        :type: str
        """

        self._exemption_file_version = exemption_file_version

    @property
    def identity(self):
        """Gets the identity of this HclServiceStatus.  # noqa: E501

        A field to uniquely identify the document with the status.    # noqa: E501

        :return: The identity of this HclServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this HclServiceStatus.

        A field to uniquely identify the document with the status.    # noqa: E501

        :param identity: The identity of this HclServiceStatus.  # noqa: E501
        :type: str
        """

        self._identity = identity

    @property
    def last_hcl_data_modified_time(self):
        """Gets the last_hcl_data_modified_time of this HclServiceStatus.  # noqa: E501

        The timestamp of the last modified record in the HCL tool database. Used to query and get updated records.    # noqa: E501

        :return: The last_hcl_data_modified_time of this HclServiceStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_hcl_data_modified_time

    @last_hcl_data_modified_time.setter
    def last_hcl_data_modified_time(self, last_hcl_data_modified_time):
        """Sets the last_hcl_data_modified_time of this HclServiceStatus.

        The timestamp of the last modified record in the HCL tool database. Used to query and get updated records.    # noqa: E501

        :param last_hcl_data_modified_time: The last_hcl_data_modified_time of this HclServiceStatus.  # noqa: E501
        :type: datetime
        """

        self._last_hcl_data_modified_time = last_hcl_data_modified_time

    @property
    def last_imported_data_checksum(self):
        """Gets the last_imported_data_checksum of this HclServiceStatus.  # noqa: E501

        Checksum of the data dump used as the base for delta updates.    # noqa: E501

        :return: The last_imported_data_checksum of this HclServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._last_imported_data_checksum

    @last_imported_data_checksum.setter
    def last_imported_data_checksum(self, last_imported_data_checksum):
        """Sets the last_imported_data_checksum of this HclServiceStatus.

        Checksum of the data dump used as the base for delta updates.    # noqa: E501

        :param last_imported_data_checksum: The last_imported_data_checksum of this HclServiceStatus.  # noqa: E501
        :type: str
        """

        self._last_imported_data_checksum = last_imported_data_checksum

    @property
    def status(self):
        """Gets the status of this HclServiceStatus.  # noqa: E501

        Status of the service indicatating if the service is up or under maintenance due to data update.     # noqa: E501

        :return: The status of this HclServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HclServiceStatus.

        Status of the service indicatating if the service is up or under maintenance due to data update.     # noqa: E501

        :param status: The status of this HclServiceStatus.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "Unknown", "Initializing", "DataRefreshing", "Active"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values))

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HclServiceStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HclServiceStatus):
            return True

        return self.to_dict() != other.to_dict()
