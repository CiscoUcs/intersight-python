# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from intersight.configuration import Configuration


class SoftwarerepositoryFileAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'download_count': 'int',
        'import_action': 'str',
        'import_state': 'str',
        'imported_time': 'datetime',
        'last_access_time': 'datetime',
        'md5sum': 'str',
        'name': 'str',
        'release_date': 'datetime',
        'sha512sum': 'str',
        'size': 'int',
        'software_advisory_url': 'str',
        'source': 'SoftwarerepositoryFileServer',
        'version': 'str'
    }

    attribute_map = {
        'description': 'Description',
        'download_count': 'DownloadCount',
        'import_action': 'ImportAction',
        'import_state': 'ImportState',
        'imported_time': 'ImportedTime',
        'last_access_time': 'LastAccessTime',
        'md5sum': 'Md5sum',
        'name': 'Name',
        'release_date': 'ReleaseDate',
        'sha512sum': 'Sha512sum',
        'size': 'Size',
        'software_advisory_url': 'SoftwareAdvisoryUrl',
        'source': 'Source',
        'version': 'Version'
    }

    def __init__(self,
                 description=None,
                 download_count=None,
                 import_action='None',
                 import_state='ReadyForImport',
                 imported_time=None,
                 last_access_time=None,
                 md5sum=None,
                 name=None,
                 release_date=None,
                 sha512sum=None,
                 size=None,
                 software_advisory_url=None,
                 source=None,
                 version=None,
                 local_vars_configuration=None):  # noqa: E501
        """SoftwarerepositoryFileAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._download_count = None
        self._import_action = None
        self._import_state = None
        self._imported_time = None
        self._last_access_time = None
        self._md5sum = None
        self._name = None
        self._release_date = None
        self._sha512sum = None
        self._size = None
        self._software_advisory_url = None
        self._source = None
        self._version = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if download_count is not None:
            self.download_count = download_count
        if import_action is not None:
            self.import_action = import_action
        if import_state is not None:
            self.import_state = import_state
        if imported_time is not None:
            self.imported_time = imported_time
        if last_access_time is not None:
            self.last_access_time = last_access_time
        if md5sum is not None:
            self.md5sum = md5sum
        if name is not None:
            self.name = name
        if release_date is not None:
            self.release_date = release_date
        if sha512sum is not None:
            self.sha512sum = sha512sum
        if size is not None:
            self.size = size
        if software_advisory_url is not None:
            self.software_advisory_url = software_advisory_url
        if source is not None:
            self.source = source
        if version is not None:
            self.version = version

    @property
    def description(self):
        """Gets the description of this SoftwarerepositoryFileAllOf.  # noqa: E501

        User provided description about the file. Cisco provided description for image inventoried from a Cisco repository.    # noqa: E501

        :return: The description of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SoftwarerepositoryFileAllOf.

        User provided description about the file. Cisco provided description for image inventoried from a Cisco repository.    # noqa: E501

        :param description: The description of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def download_count(self):
        """Gets the download_count of this SoftwarerepositoryFileAllOf.  # noqa: E501

        The number of times this file has been downloaded from the local repository. It is used by the repository monitoring process to determine the files that are to be evicted from the cache.    # noqa: E501

        :return: The download_count of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :rtype: int
        """
        return self._download_count

    @download_count.setter
    def download_count(self, download_count):
        """Sets the download_count of this SoftwarerepositoryFileAllOf.

        The number of times this file has been downloaded from the local repository. It is used by the repository monitoring process to determine the files that are to be evicted from the cache.    # noqa: E501

        :param download_count: The download_count of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :type: int
        """

        self._download_count = download_count

    @property
    def import_action(self):
        """Gets the import_action of this SoftwarerepositoryFileAllOf.  # noqa: E501

        The action to be performed on the imported file. If 'PreCache' is set, the image will be cached in Appliance. Applicable in Intersight appliance deployment. If 'Evict' is set, the cached file will be removed. Applicable in Intersight appliance deployment. If 'GeneratePreSignedUploadUrl' is set, generates pre signed URL (s) for the file to be imported into the repository. Applicable for local machine source. The URL (s) will be populated under LocalMachine file server. If 'CompleteImportProcess' is set, the ImportState is marked as 'Imported'. Applicable for local machine source. If 'Cancel' is set, the ImportState is marked as 'Failed'. Applicable for local machine source.     # noqa: E501

        :return: The import_action of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :rtype: str
        """
        return self._import_action

    @import_action.setter
    def import_action(self, import_action):
        """Sets the import_action of this SoftwarerepositoryFileAllOf.

        The action to be performed on the imported file. If 'PreCache' is set, the image will be cached in Appliance. Applicable in Intersight appliance deployment. If 'Evict' is set, the cached file will be removed. Applicable in Intersight appliance deployment. If 'GeneratePreSignedUploadUrl' is set, generates pre signed URL (s) for the file to be imported into the repository. Applicable for local machine source. The URL (s) will be populated under LocalMachine file server. If 'CompleteImportProcess' is set, the ImportState is marked as 'Imported'. Applicable for local machine source. If 'Cancel' is set, the ImportState is marked as 'Failed'. Applicable for local machine source.     # noqa: E501

        :param import_action: The import_action of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "None", "GeneratePreSignedUploadUrl",
            "GeneratePreSignedDownloadUrl", "CompleteImportProcess",
            "PreCache", "Cancel", "Evict"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and import_action not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `import_action` ({0}), must be one of {1}"  # noqa: E501
                .format(import_action, allowed_values))

        self._import_action = import_action

    @property
    def import_state(self):
        """Gets the import_state of this SoftwarerepositoryFileAllOf.  # noqa: E501

        The state  of this file in the repository or Appliance. The importState is updated during the import operation and as part of the repository monitoring process.    # noqa: E501

        :return: The import_state of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :rtype: str
        """
        return self._import_state

    @import_state.setter
    def import_state(self, import_state):
        """Sets the import_state of this SoftwarerepositoryFileAllOf.

        The state  of this file in the repository or Appliance. The importState is updated during the import operation and as part of the repository monitoring process.    # noqa: E501

        :param import_state: The import_state of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "ReadyForImport", "Importing", "Imported", "Failed", "MetaOnly",
            "ReadyForCache", "Caching", "Cached", "CachingFailed", "Corrupted",
            "Evicted"
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and import_state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `import_state` ({0}), must be one of {1}"  # noqa: E501
                .format(import_state, allowed_values))

        self._import_state = import_state

    @property
    def imported_time(self):
        """Gets the imported_time of this SoftwarerepositoryFileAllOf.  # noqa: E501

        The time at which this image or file was imported/cached into the repositry. if the 'ImportState' is 'Imported', the time at which this image or file was imported. if the 'ImportState' is 'Cached', the time at which this image or file was cached.    # noqa: E501

        :return: The imported_time of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._imported_time

    @imported_time.setter
    def imported_time(self, imported_time):
        """Sets the imported_time of this SoftwarerepositoryFileAllOf.

        The time at which this image or file was imported/cached into the repositry. if the 'ImportState' is 'Imported', the time at which this image or file was imported. if the 'ImportState' is 'Cached', the time at which this image or file was cached.    # noqa: E501

        :param imported_time: The imported_time of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :type: datetime
        """

        self._imported_time = imported_time

    @property
    def last_access_time(self):
        """Gets the last_access_time of this SoftwarerepositoryFileAllOf.  # noqa: E501

        The time at which this file was last downloaded from the local repository. It is used by the repository monitoring process to determine the files that are to be evicted from the cache.    # noqa: E501

        :return: The last_access_time of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._last_access_time

    @last_access_time.setter
    def last_access_time(self, last_access_time):
        """Sets the last_access_time of this SoftwarerepositoryFileAllOf.

        The time at which this file was last downloaded from the local repository. It is used by the repository monitoring process to determine the files that are to be evicted from the cache.    # noqa: E501

        :param last_access_time: The last_access_time of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :type: datetime
        """

        self._last_access_time = last_access_time

    @property
    def md5sum(self):
        """Gets the md5sum of this SoftwarerepositoryFileAllOf.  # noqa: E501

        The md5sum checksum of the file. This information is available for all Cisco distributed images and files imported to the local repository.    # noqa: E501

        :return: The md5sum of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :rtype: str
        """
        return self._md5sum

    @md5sum.setter
    def md5sum(self, md5sum):
        """Sets the md5sum of this SoftwarerepositoryFileAllOf.

        The md5sum checksum of the file. This information is available for all Cisco distributed images and files imported to the local repository.    # noqa: E501

        :param md5sum: The md5sum of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :type: str
        """

        self._md5sum = md5sum

    @property
    def name(self):
        """Gets the name of this SoftwarerepositoryFileAllOf.  # noqa: E501

        The name of the file. It is populated as part of the image import operation.     # noqa: E501

        :return: The name of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SoftwarerepositoryFileAllOf.

        The name of the file. It is populated as part of the image import operation.     # noqa: E501

        :param name: The name of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def release_date(self):
        """Gets the release_date of this SoftwarerepositoryFileAllOf.  # noqa: E501

        The date on which the file was released or distributed by its vendor.    # noqa: E501

        :return: The release_date of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this SoftwarerepositoryFileAllOf.

        The date on which the file was released or distributed by its vendor.    # noqa: E501

        :param release_date: The release_date of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :type: datetime
        """

        self._release_date = release_date

    @property
    def sha512sum(self):
        """Gets the sha512sum of this SoftwarerepositoryFileAllOf.  # noqa: E501

        The sha512sum of the file. This information is available for all Cisco distributed images and files imported to the local repository.    # noqa: E501

        :return: The sha512sum of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :rtype: str
        """
        return self._sha512sum

    @sha512sum.setter
    def sha512sum(self, sha512sum):
        """Sets the sha512sum of this SoftwarerepositoryFileAllOf.

        The sha512sum of the file. This information is available for all Cisco distributed images and files imported to the local repository.    # noqa: E501

        :param sha512sum: The sha512sum of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :type: str
        """

        self._sha512sum = sha512sum

    @property
    def size(self):
        """Gets the size of this SoftwarerepositoryFileAllOf.  # noqa: E501

        The size (in bytes) of the file. This information is available for all Cisco distributed images and files imported to the local repository.    # noqa: E501

        :return: The size of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SoftwarerepositoryFileAllOf.

        The size (in bytes) of the file. This information is available for all Cisco distributed images and files imported to the local repository.    # noqa: E501

        :param size: The size of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def software_advisory_url(self):
        """Gets the software_advisory_url of this SoftwarerepositoryFileAllOf.  # noqa: E501

        The software advisory, if any, provided by the vendor for this file.    # noqa: E501

        :return: The software_advisory_url of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :rtype: str
        """
        return self._software_advisory_url

    @software_advisory_url.setter
    def software_advisory_url(self, software_advisory_url):
        """Sets the software_advisory_url of this SoftwarerepositoryFileAllOf.

        The software advisory, if any, provided by the vendor for this file.    # noqa: E501

        :param software_advisory_url: The software_advisory_url of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :type: str
        """

        self._software_advisory_url = software_advisory_url

    @property
    def source(self):
        """Gets the source of this SoftwarerepositoryFileAllOf.  # noqa: E501


        :return: The source of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :rtype: SoftwarerepositoryFileServer
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SoftwarerepositoryFileAllOf.


        :param source: The source of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :type: SoftwarerepositoryFileServer
        """

        self._source = source

    @property
    def version(self):
        """Gets the version of this SoftwarerepositoryFileAllOf.  # noqa: E501

        Vendor provided version for the file.     # noqa: E501

        :return: The version of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SoftwarerepositoryFileAllOf.

        Vendor provided version for the file.     # noqa: E501

        :param version: The version of this SoftwarerepositoryFileAllOf.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SoftwarerepositoryFileAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SoftwarerepositoryFileAllOf):
            return True

        return self.to_dict() != other.to_dict()
