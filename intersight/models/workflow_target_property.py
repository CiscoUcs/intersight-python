# coding: utf-8

"""
    Cisco Intersight OpenAPI specification.

    The Cisco Intersight OpenAPI specification.

    OpenAPI spec version: 1.0.9-1415
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorkflowTargetProperty(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'connector_attribute': 'str',
        'constraint_attributes': 'list[str]',
        'display_attributes': 'list[str]',
        'selector': 'str',
        'supported_objects': 'list[str]'
    }

    attribute_map = {
        'object_type': 'ObjectType',
        'connector_attribute': 'ConnectorAttribute',
        'constraint_attributes': 'ConstraintAttributes',
        'display_attributes': 'DisplayAttributes',
        'selector': 'Selector',
        'supported_objects': 'SupportedObjects'
    }

    def __init__(self, object_type=None, connector_attribute=None, constraint_attributes=None, display_attributes=None, selector=None, supported_objects=None):
        """
        WorkflowTargetProperty - a model defined in Swagger
        """

        self._object_type = None
        self._connector_attribute = None
        self._constraint_attributes = None
        self._display_attributes = None
        self._selector = None
        self._supported_objects = None

        if object_type is not None:
          self.object_type = object_type
        if connector_attribute is not None:
          self.connector_attribute = connector_attribute
        if constraint_attributes is not None:
          self.constraint_attributes = constraint_attributes
        if display_attributes is not None:
          self.display_attributes = display_attributes
        if selector is not None:
          self.selector = selector
        if supported_objects is not None:
          self.supported_objects = supported_objects

    @property
    def object_type(self):
        """
        Gets the object_type of this WorkflowTargetProperty.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :return: The object_type of this WorkflowTargetProperty.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this WorkflowTargetProperty.
        The concrete type of this complex type.  The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.    

        :param object_type: The object_type of this WorkflowTargetProperty.
        :type: str
        """

        self._object_type = object_type

    @property
    def connector_attribute(self):
        """
        Gets the connector_attribute of this WorkflowTargetProperty.
        A singleton value which will contain the path to connector object from the selected object.  

        :return: The connector_attribute of this WorkflowTargetProperty.
        :rtype: str
        """
        return self._connector_attribute

    @connector_attribute.setter
    def connector_attribute(self, connector_attribute):
        """
        Sets the connector_attribute of this WorkflowTargetProperty.
        A singleton value which will contain the path to connector object from the selected object.  

        :param connector_attribute: The connector_attribute of this WorkflowTargetProperty.
        :type: str
        """

        self._connector_attribute = connector_attribute

    @property
    def constraint_attributes(self):
        """
        Gets the constraint_attributes of this WorkflowTargetProperty.
        A collection of properties that will be used to match a specific implemented task. Using these values, the workflow engine will try to pick an implemented task definition when multiple implementations exist.  

        :return: The constraint_attributes of this WorkflowTargetProperty.
        :rtype: list[str]
        """
        return self._constraint_attributes

    @constraint_attributes.setter
    def constraint_attributes(self, constraint_attributes):
        """
        Sets the constraint_attributes of this WorkflowTargetProperty.
        A collection of properties that will be used to match a specific implemented task. Using these values, the workflow engine will try to pick an implemented task definition when multiple implementations exist.  

        :param constraint_attributes: The constraint_attributes of this WorkflowTargetProperty.
        :type: list[str]
        """

        self._constraint_attributes = constraint_attributes

    @property
    def display_attributes(self):
        """
        Gets the display_attributes of this WorkflowTargetProperty.
        List of properties from the Intersight object which can help to identify the object. Typically the set of identity constraints on the object can be listed here to help the user identity the managed object.  

        :return: The display_attributes of this WorkflowTargetProperty.
        :rtype: list[str]
        """
        return self._display_attributes

    @display_attributes.setter
    def display_attributes(self, display_attributes):
        """
        Sets the display_attributes of this WorkflowTargetProperty.
        List of properties from the Intersight object which can help to identify the object. Typically the set of identity constraints on the object can be listed here to help the user identity the managed object.  

        :param display_attributes: The display_attributes of this WorkflowTargetProperty.
        :type: list[str]
        """

        self._display_attributes = display_attributes

    @property
    def selector(self):
        """
        Gets the selector of this WorkflowTargetProperty.
        Field to hold an Intersight API along with an optional filter to narrow down the search options for target device.  

        :return: The selector of this WorkflowTargetProperty.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """
        Sets the selector of this WorkflowTargetProperty.
        Field to hold an Intersight API along with an optional filter to narrow down the search options for target device.  

        :param selector: The selector of this WorkflowTargetProperty.
        :type: str
        """

        self._selector = selector

    @property
    def supported_objects(self):
        """
        Gets the supported_objects of this WorkflowTargetProperty.
        An explicit set of concrete objectTypes supported as part of this property entry.   

        :return: The supported_objects of this WorkflowTargetProperty.
        :rtype: list[str]
        """
        return self._supported_objects

    @supported_objects.setter
    def supported_objects(self, supported_objects):
        """
        Sets the supported_objects of this WorkflowTargetProperty.
        An explicit set of concrete objectTypes supported as part of this property entry.   

        :param supported_objects: The supported_objects of this WorkflowTargetProperty.
        :type: list[str]
        """

        self._supported_objects = supported_objects

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkflowTargetProperty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
