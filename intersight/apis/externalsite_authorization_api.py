# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-228
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ExternalsiteAuthorizationApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def externalsite_authorizations_get(self, **kwargs):
        """
        Get a list of 'externalsiteAuthorization' instances
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.externalsite_authorizations_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool count: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top: The max number of records to return
        :param int skip: The number of records to skip
        :param str filter: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select: Specifies a subset of properties to return
        :param str orderby: Determines what values are used to order a collection of records
        :param str expand: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count2: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount2: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top2: The max number of records to return
        :param int skip2: The number of records to skip
        :param str filter2: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select2: Specifies a subset of properties to return
        :param str orderby2: Determines what values are used to order a collection of records
        :param str expand2: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply2: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count3: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount3: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top3: The max number of records to return
        :param int skip3: The number of records to skip
        :param str filter3: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select3: Specifies a subset of properties to return
        :param str orderby3: Determines what values are used to order a collection of records
        :param str expand3: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply3: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count4: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount4: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top4: The max number of records to return
        :param int skip4: The number of records to skip
        :param str filter4: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select4: Specifies a subset of properties to return
        :param str orderby4: Determines what values are used to order a collection of records
        :param str expand4: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply4: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :return: ExternalsiteAuthorizationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.externalsite_authorizations_get_with_http_info(**kwargs)
        else:
            (data) = self.externalsite_authorizations_get_with_http_info(**kwargs)
            return data

    def externalsite_authorizations_get_with_http_info(self, **kwargs):
        """
        Get a list of 'externalsiteAuthorization' instances
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.externalsite_authorizations_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool count: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top: The max number of records to return
        :param int skip: The number of records to skip
        :param str filter: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select: Specifies a subset of properties to return
        :param str orderby: Determines what values are used to order a collection of records
        :param str expand: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count2: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount2: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top2: The max number of records to return
        :param int skip2: The number of records to skip
        :param str filter2: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select2: Specifies a subset of properties to return
        :param str orderby2: Determines what values are used to order a collection of records
        :param str expand2: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply2: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count3: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount3: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top3: The max number of records to return
        :param int skip3: The number of records to skip
        :param str filter3: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select3: Specifies a subset of properties to return
        :param str orderby3: Determines what values are used to order a collection of records
        :param str expand3: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply3: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count4: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount4: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top4: The max number of records to return
        :param int skip4: The number of records to skip
        :param str filter4: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select4: Specifies a subset of properties to return
        :param str orderby4: Determines what values are used to order a collection of records
        :param str expand4: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply4: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :return: ExternalsiteAuthorizationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['count', 'inlinecount', 'top', 'skip', 'filter', 'select', 'orderby', 'expand', 'apply', 'count2', 'inlinecount2', 'top2', 'skip2', 'filter2', 'select2', 'orderby2', 'expand2', 'apply2', 'count3', 'inlinecount3', 'top3', 'skip3', 'filter3', 'select3', 'orderby3', 'expand3', 'apply3', 'count4', 'inlinecount4', 'top4', 'skip4', 'filter4', 'select4', 'orderby4', 'expand4', 'apply4']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method externalsite_authorizations_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('$count', params['count']))
        if 'inlinecount' in params:
            query_params.append(('$inlinecount', params['inlinecount']))
        if 'top' in params:
            query_params.append(('$top', params['top']))
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))
        if 'select' in params:
            query_params.append(('$select', params['select']))
        if 'orderby' in params:
            query_params.append(('$orderby', params['orderby']))
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))
        if 'apply' in params:
            query_params.append(('$apply', params['apply']))
        if 'count2' in params:
            query_params.append(('$count', params['count2']))
        if 'inlinecount2' in params:
            query_params.append(('$inlinecount', params['inlinecount2']))
        if 'top2' in params:
            query_params.append(('$top', params['top2']))
        if 'skip2' in params:
            query_params.append(('$skip', params['skip2']))
        if 'filter2' in params:
            query_params.append(('$filter', params['filter2']))
        if 'select2' in params:
            query_params.append(('$select', params['select2']))
        if 'orderby2' in params:
            query_params.append(('$orderby', params['orderby2']))
        if 'expand2' in params:
            query_params.append(('$expand', params['expand2']))
        if 'apply2' in params:
            query_params.append(('$apply', params['apply2']))
        if 'count3' in params:
            query_params.append(('$count', params['count3']))
        if 'inlinecount3' in params:
            query_params.append(('$inlinecount', params['inlinecount3']))
        if 'top3' in params:
            query_params.append(('$top', params['top3']))
        if 'skip3' in params:
            query_params.append(('$skip', params['skip3']))
        if 'filter3' in params:
            query_params.append(('$filter', params['filter3']))
        if 'select3' in params:
            query_params.append(('$select', params['select3']))
        if 'orderby3' in params:
            query_params.append(('$orderby', params['orderby3']))
        if 'expand3' in params:
            query_params.append(('$expand', params['expand3']))
        if 'apply3' in params:
            query_params.append(('$apply', params['apply3']))
        if 'count4' in params:
            query_params.append(('$count', params['count4']))
        if 'inlinecount4' in params:
            query_params.append(('$inlinecount', params['inlinecount4']))
        if 'top4' in params:
            query_params.append(('$top', params['top4']))
        if 'skip4' in params:
            query_params.append(('$skip', params['skip4']))
        if 'filter4' in params:
            query_params.append(('$filter', params['filter4']))
        if 'select4' in params:
            query_params.append(('$select', params['select4']))
        if 'orderby4' in params:
            query_params.append(('$orderby', params['orderby4']))
        if 'expand4' in params:
            query_params.append(('$expand', params['expand4']))
        if 'apply4' in params:
            query_params.append(('$apply', params['apply4']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/externalsite/Authorizations', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ExternalsiteAuthorizationList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def externalsite_authorizations_moid_get(self, moid, moid2, moid3, moid4, **kwargs):
        """
        Get a specific instance of 'externalsiteAuthorization'
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.externalsite_authorizations_moid_get(moid, moid2, moid3, moid4, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str moid: The moid of the externalsiteAuthorization instance. (required)
        :param str moid2: The moid of the externalsiteAuthorization instance. (required)
        :param str moid3: The moid of the externalsiteAuthorization instance. (required)
        :param str moid4: The moid of the externalsiteAuthorization instance. (required)
        :return: ExternalsiteAuthorization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.externalsite_authorizations_moid_get_with_http_info(moid, moid2, moid3, moid4, **kwargs)
        else:
            (data) = self.externalsite_authorizations_moid_get_with_http_info(moid, moid2, moid3, moid4, **kwargs)
            return data

    def externalsite_authorizations_moid_get_with_http_info(self, moid, moid2, moid3, moid4, **kwargs):
        """
        Get a specific instance of 'externalsiteAuthorization'
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.externalsite_authorizations_moid_get_with_http_info(moid, moid2, moid3, moid4, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str moid: The moid of the externalsiteAuthorization instance. (required)
        :param str moid2: The moid of the externalsiteAuthorization instance. (required)
        :param str moid3: The moid of the externalsiteAuthorization instance. (required)
        :param str moid4: The moid of the externalsiteAuthorization instance. (required)
        :return: ExternalsiteAuthorization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['moid', 'moid2', 'moid3', 'moid4']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method externalsite_authorizations_moid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'moid' is set
        if ('moid' not in params) or (params['moid'] is None):
            raise ValueError("Missing the required parameter `moid` when calling `externalsite_authorizations_moid_get`")
        # verify the required parameter 'moid2' is set
        if ('moid2' not in params) or (params['moid2'] is None):
            raise ValueError("Missing the required parameter `moid2` when calling `externalsite_authorizations_moid_get`")
        # verify the required parameter 'moid3' is set
        if ('moid3' not in params) or (params['moid3'] is None):
            raise ValueError("Missing the required parameter `moid3` when calling `externalsite_authorizations_moid_get`")
        # verify the required parameter 'moid4' is set
        if ('moid4' not in params) or (params['moid4'] is None):
            raise ValueError("Missing the required parameter `moid4` when calling `externalsite_authorizations_moid_get`")


        collection_formats = {}

        path_params = {}
        if 'moid' in params:
            path_params['moid'] = params['moid']
        if 'moid2' in params:
            path_params['moid'] = params['moid2']
        if 'moid3' in params:
            path_params['moid'] = params['moid3']
        if 'moid4' in params:
            path_params['moid'] = params['moid4']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/externalsite/Authorizations/{moid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ExternalsiteAuthorization',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def externalsite_authorizations_moid_patch(self, moid, body, moid2, body2, moid3, body3, moid4, body4, **kwargs):
        """
        Update an instance of 'externalsiteAuthorization'
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.externalsite_authorizations_moid_patch(moid, body, moid2, body2, moid3, body3, moid4, body4, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str moid: The moid of the externalsiteAuthorization instance. (required)
        :param ExternalsiteAuthorization body: externalsiteAuthorization to update (required)
        :param str moid2: The moid of the externalsiteAuthorization instance. (required)
        :param ExternalsiteAuthorization body2: externalsiteAuthorization to update (required)
        :param str moid3: The moid of the externalsiteAuthorization instance. (required)
        :param ExternalsiteAuthorization body3: externalsiteAuthorization to update (required)
        :param str moid4: The moid of the externalsiteAuthorization instance. (required)
        :param ExternalsiteAuthorization body4: externalsiteAuthorization to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.externalsite_authorizations_moid_patch_with_http_info(moid, body, moid2, body2, moid3, body3, moid4, body4, **kwargs)
        else:
            (data) = self.externalsite_authorizations_moid_patch_with_http_info(moid, body, moid2, body2, moid3, body3, moid4, body4, **kwargs)
            return data

    def externalsite_authorizations_moid_patch_with_http_info(self, moid, body, moid2, body2, moid3, body3, moid4, body4, **kwargs):
        """
        Update an instance of 'externalsiteAuthorization'
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.externalsite_authorizations_moid_patch_with_http_info(moid, body, moid2, body2, moid3, body3, moid4, body4, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str moid: The moid of the externalsiteAuthorization instance. (required)
        :param ExternalsiteAuthorization body: externalsiteAuthorization to update (required)
        :param str moid2: The moid of the externalsiteAuthorization instance. (required)
        :param ExternalsiteAuthorization body2: externalsiteAuthorization to update (required)
        :param str moid3: The moid of the externalsiteAuthorization instance. (required)
        :param ExternalsiteAuthorization body3: externalsiteAuthorization to update (required)
        :param str moid4: The moid of the externalsiteAuthorization instance. (required)
        :param ExternalsiteAuthorization body4: externalsiteAuthorization to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['moid', 'body', 'moid2', 'body2', 'moid3', 'body3', 'moid4', 'body4']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method externalsite_authorizations_moid_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'moid' is set
        if ('moid' not in params) or (params['moid'] is None):
            raise ValueError("Missing the required parameter `moid` when calling `externalsite_authorizations_moid_patch`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `externalsite_authorizations_moid_patch`")
        # verify the required parameter 'moid2' is set
        if ('moid2' not in params) or (params['moid2'] is None):
            raise ValueError("Missing the required parameter `moid2` when calling `externalsite_authorizations_moid_patch`")
        # verify the required parameter 'body2' is set
        if ('body2' not in params) or (params['body2'] is None):
            raise ValueError("Missing the required parameter `body2` when calling `externalsite_authorizations_moid_patch`")
        # verify the required parameter 'moid3' is set
        if ('moid3' not in params) or (params['moid3'] is None):
            raise ValueError("Missing the required parameter `moid3` when calling `externalsite_authorizations_moid_patch`")
        # verify the required parameter 'body3' is set
        if ('body3' not in params) or (params['body3'] is None):
            raise ValueError("Missing the required parameter `body3` when calling `externalsite_authorizations_moid_patch`")
        # verify the required parameter 'moid4' is set
        if ('moid4' not in params) or (params['moid4'] is None):
            raise ValueError("Missing the required parameter `moid4` when calling `externalsite_authorizations_moid_patch`")
        # verify the required parameter 'body4' is set
        if ('body4' not in params) or (params['body4'] is None):
            raise ValueError("Missing the required parameter `body4` when calling `externalsite_authorizations_moid_patch`")


        collection_formats = {}

        path_params = {}
        if 'moid' in params:
            path_params['moid'] = params['moid']
        if 'moid2' in params:
            path_params['moid'] = params['moid2']
        if 'moid3' in params:
            path_params['moid'] = params['moid3']
        if 'moid4' in params:
            path_params['moid'] = params['moid4']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body4' in params:
            body_params = params['body4']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/externalsite/Authorizations/{moid}', 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def externalsite_authorizations_moid_post(self, moid, body, moid2, body2, moid3, body3, moid4, body4, **kwargs):
        """
        Update an instance of 'externalsiteAuthorization'
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.externalsite_authorizations_moid_post(moid, body, moid2, body2, moid3, body3, moid4, body4, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str moid: The moid of the externalsiteAuthorization instance. (required)
        :param ExternalsiteAuthorization body: externalsiteAuthorization to update (required)
        :param str moid2: The moid of the externalsiteAuthorization instance. (required)
        :param ExternalsiteAuthorization body2: externalsiteAuthorization to update (required)
        :param str moid3: The moid of the externalsiteAuthorization instance. (required)
        :param ExternalsiteAuthorization body3: externalsiteAuthorization to update (required)
        :param str moid4: The moid of the externalsiteAuthorization instance. (required)
        :param ExternalsiteAuthorization body4: externalsiteAuthorization to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.externalsite_authorizations_moid_post_with_http_info(moid, body, moid2, body2, moid3, body3, moid4, body4, **kwargs)
        else:
            (data) = self.externalsite_authorizations_moid_post_with_http_info(moid, body, moid2, body2, moid3, body3, moid4, body4, **kwargs)
            return data

    def externalsite_authorizations_moid_post_with_http_info(self, moid, body, moid2, body2, moid3, body3, moid4, body4, **kwargs):
        """
        Update an instance of 'externalsiteAuthorization'
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.externalsite_authorizations_moid_post_with_http_info(moid, body, moid2, body2, moid3, body3, moid4, body4, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str moid: The moid of the externalsiteAuthorization instance. (required)
        :param ExternalsiteAuthorization body: externalsiteAuthorization to update (required)
        :param str moid2: The moid of the externalsiteAuthorization instance. (required)
        :param ExternalsiteAuthorization body2: externalsiteAuthorization to update (required)
        :param str moid3: The moid of the externalsiteAuthorization instance. (required)
        :param ExternalsiteAuthorization body3: externalsiteAuthorization to update (required)
        :param str moid4: The moid of the externalsiteAuthorization instance. (required)
        :param ExternalsiteAuthorization body4: externalsiteAuthorization to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['moid', 'body', 'moid2', 'body2', 'moid3', 'body3', 'moid4', 'body4']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method externalsite_authorizations_moid_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'moid' is set
        if ('moid' not in params) or (params['moid'] is None):
            raise ValueError("Missing the required parameter `moid` when calling `externalsite_authorizations_moid_post`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `externalsite_authorizations_moid_post`")
        # verify the required parameter 'moid2' is set
        if ('moid2' not in params) or (params['moid2'] is None):
            raise ValueError("Missing the required parameter `moid2` when calling `externalsite_authorizations_moid_post`")
        # verify the required parameter 'body2' is set
        if ('body2' not in params) or (params['body2'] is None):
            raise ValueError("Missing the required parameter `body2` when calling `externalsite_authorizations_moid_post`")
        # verify the required parameter 'moid3' is set
        if ('moid3' not in params) or (params['moid3'] is None):
            raise ValueError("Missing the required parameter `moid3` when calling `externalsite_authorizations_moid_post`")
        # verify the required parameter 'body3' is set
        if ('body3' not in params) or (params['body3'] is None):
            raise ValueError("Missing the required parameter `body3` when calling `externalsite_authorizations_moid_post`")
        # verify the required parameter 'moid4' is set
        if ('moid4' not in params) or (params['moid4'] is None):
            raise ValueError("Missing the required parameter `moid4` when calling `externalsite_authorizations_moid_post`")
        # verify the required parameter 'body4' is set
        if ('body4' not in params) or (params['body4'] is None):
            raise ValueError("Missing the required parameter `body4` when calling `externalsite_authorizations_moid_post`")


        collection_formats = {}

        path_params = {}
        if 'moid' in params:
            path_params['moid'] = params['moid']
        if 'moid2' in params:
            path_params['moid'] = params['moid2']
        if 'moid3' in params:
            path_params['moid'] = params['moid3']
        if 'moid4' in params:
            path_params['moid'] = params['moid4']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body4' in params:
            body_params = params['body4']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/externalsite/Authorizations/{moid}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def externalsite_authorizations_post(self, body, body2, body3, body4, **kwargs):
        """
        Create an instance of 'externalsiteAuthorization'
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.externalsite_authorizations_post(body, body2, body3, body4, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ExternalsiteAuthorization body: externalsiteAuthorization to add (required)
        :param ExternalsiteAuthorization body2: externalsiteAuthorization to add (required)
        :param ExternalsiteAuthorization body3: externalsiteAuthorization to add (required)
        :param ExternalsiteAuthorization body4: externalsiteAuthorization to add (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.externalsite_authorizations_post_with_http_info(body, body2, body3, body4, **kwargs)
        else:
            (data) = self.externalsite_authorizations_post_with_http_info(body, body2, body3, body4, **kwargs)
            return data

    def externalsite_authorizations_post_with_http_info(self, body, body2, body3, body4, **kwargs):
        """
        Create an instance of 'externalsiteAuthorization'
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.externalsite_authorizations_post_with_http_info(body, body2, body3, body4, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ExternalsiteAuthorization body: externalsiteAuthorization to add (required)
        :param ExternalsiteAuthorization body2: externalsiteAuthorization to add (required)
        :param ExternalsiteAuthorization body3: externalsiteAuthorization to add (required)
        :param ExternalsiteAuthorization body4: externalsiteAuthorization to add (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'body2', 'body3', 'body4']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method externalsite_authorizations_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `externalsite_authorizations_post`")
        # verify the required parameter 'body2' is set
        if ('body2' not in params) or (params['body2'] is None):
            raise ValueError("Missing the required parameter `body2` when calling `externalsite_authorizations_post`")
        # verify the required parameter 'body3' is set
        if ('body3' not in params) or (params['body3'] is None):
            raise ValueError("Missing the required parameter `body3` when calling `externalsite_authorizations_post`")
        # verify the required parameter 'body4' is set
        if ('body4' not in params) or (params['body4'] is None):
            raise ValueError("Missing the required parameter `body4` when calling `externalsite_authorizations_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body4' in params:
            body_params = params['body4']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/externalsite/Authorizations', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
