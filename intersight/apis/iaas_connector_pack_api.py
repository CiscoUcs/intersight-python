# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-228
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class IaasConnectorPackApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def iaas_connector_packs_get(self, **kwargs):
        """
        Get a list of 'iaasConnectorPack' instances
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.iaas_connector_packs_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool count: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top: The max number of records to return
        :param int skip: The number of records to skip
        :param str filter: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select: Specifies a subset of properties to return
        :param str orderby: Determines what values are used to order a collection of records
        :param str expand: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for records to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at=VersionType eq 'Configured' at=InterestedMos.Moid eq '5b5877e56c6730367acf46cd' 
        :param bool count2: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount2: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top2: The max number of records to return
        :param int skip2: The number of records to skip
        :param str filter2: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select2: Specifies a subset of properties to return
        :param str orderby2: Determines what values are used to order a collection of records
        :param str expand2: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply2: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param str at2: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for records to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at=VersionType eq 'Configured' at=InterestedMos.Moid eq '5b5877e56c6730367acf46cd' 
        :param bool count3: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount3: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top3: The max number of records to return
        :param int skip3: The number of records to skip
        :param str filter3: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select3: Specifies a subset of properties to return
        :param str orderby3: Determines what values are used to order a collection of records
        :param str expand3: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply3: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param str at3: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for records to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at=VersionType eq 'Configured' at=InterestedMos.Moid eq '5b5877e56c6730367acf46cd' 
        :param bool count4: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount4: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top4: The max number of records to return
        :param int skip4: The number of records to skip
        :param str filter4: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select4: Specifies a subset of properties to return
        :param str orderby4: Determines what values are used to order a collection of records
        :param str expand4: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply4: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param str at4: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for records to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at=VersionType eq 'Configured' at=InterestedMos.Moid eq '5b5877e56c6730367acf46cd' 
        :param bool count5: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount5: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top5: The max number of records to return
        :param int skip5: The number of records to skip
        :param str filter5: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select5: Specifies a subset of properties to return
        :param str orderby5: Determines what values are used to order a collection of records
        :param str expand5: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply5: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param str at5: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for records to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at=VersionType eq 'Configured' at=InterestedMos.Moid eq '5b5877e56c6730367acf46cd' 
        :param bool count6: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount6: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top6: The max number of records to return
        :param int skip6: The number of records to skip
        :param str filter6: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select6: Specifies a subset of properties to return
        :param str orderby6: Determines what values are used to order a collection of records
        :param str expand6: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply6: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param str at6: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for records to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at=VersionType eq 'Configured' at=InterestedMos.Moid eq '5b5877e56c6730367acf46cd' 
        :param bool count7: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount7: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top7: The max number of records to return
        :param int skip7: The number of records to skip
        :param str filter7: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select7: Specifies a subset of properties to return
        :param str orderby7: Determines what values are used to order a collection of records
        :param str expand7: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply7: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count8: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount8: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top8: The max number of records to return
        :param int skip8: The number of records to skip
        :param str filter8: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select8: Specifies a subset of properties to return
        :param str orderby8: Determines what values are used to order a collection of records
        :param str expand8: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply8: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count9: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount9: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top9: The max number of records to return
        :param int skip9: The number of records to skip
        :param str filter9: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select9: Specifies a subset of properties to return
        :param str orderby9: Determines what values are used to order a collection of records
        :param str expand9: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply9: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count10: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount10: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top10: The max number of records to return
        :param int skip10: The number of records to skip
        :param str filter10: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select10: Specifies a subset of properties to return
        :param str orderby10: Determines what values are used to order a collection of records
        :param str expand10: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply10: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count11: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount11: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top11: The max number of records to return
        :param int skip11: The number of records to skip
        :param str filter11: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select11: Specifies a subset of properties to return
        :param str orderby11: Determines what values are used to order a collection of records
        :param str expand11: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply11: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count12: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount12: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top12: The max number of records to return
        :param int skip12: The number of records to skip
        :param str filter12: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select12: Specifies a subset of properties to return
        :param str orderby12: Determines what values are used to order a collection of records
        :param str expand12: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply12: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count13: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount13: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top13: The max number of records to return
        :param int skip13: The number of records to skip
        :param str filter13: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select13: Specifies a subset of properties to return
        :param str orderby13: Determines what values are used to order a collection of records
        :param str expand13: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply13: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count14: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount14: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top14: The max number of records to return
        :param int skip14: The number of records to skip
        :param str filter14: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select14: Specifies a subset of properties to return
        :param str orderby14: Determines what values are used to order a collection of records
        :param str expand14: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply14: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count15: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount15: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top15: The max number of records to return
        :param int skip15: The number of records to skip
        :param str filter15: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select15: Specifies a subset of properties to return
        :param str orderby15: Determines what values are used to order a collection of records
        :param str expand15: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply15: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :return: IaasConnectorPackList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.iaas_connector_packs_get_with_http_info(**kwargs)
        else:
            (data) = self.iaas_connector_packs_get_with_http_info(**kwargs)
            return data

    def iaas_connector_packs_get_with_http_info(self, **kwargs):
        """
        Get a list of 'iaasConnectorPack' instances
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.iaas_connector_packs_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool count: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top: The max number of records to return
        :param int skip: The number of records to skip
        :param str filter: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select: Specifies a subset of properties to return
        :param str orderby: Determines what values are used to order a collection of records
        :param str expand: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for records to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at=VersionType eq 'Configured' at=InterestedMos.Moid eq '5b5877e56c6730367acf46cd' 
        :param bool count2: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount2: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top2: The max number of records to return
        :param int skip2: The number of records to skip
        :param str filter2: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select2: Specifies a subset of properties to return
        :param str orderby2: Determines what values are used to order a collection of records
        :param str expand2: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply2: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param str at2: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for records to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at=VersionType eq 'Configured' at=InterestedMos.Moid eq '5b5877e56c6730367acf46cd' 
        :param bool count3: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount3: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top3: The max number of records to return
        :param int skip3: The number of records to skip
        :param str filter3: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select3: Specifies a subset of properties to return
        :param str orderby3: Determines what values are used to order a collection of records
        :param str expand3: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply3: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param str at3: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for records to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at=VersionType eq 'Configured' at=InterestedMos.Moid eq '5b5877e56c6730367acf46cd' 
        :param bool count4: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount4: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top4: The max number of records to return
        :param int skip4: The number of records to skip
        :param str filter4: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select4: Specifies a subset of properties to return
        :param str orderby4: Determines what values are used to order a collection of records
        :param str expand4: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply4: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param str at4: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for records to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at=VersionType eq 'Configured' at=InterestedMos.Moid eq '5b5877e56c6730367acf46cd' 
        :param bool count5: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount5: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top5: The max number of records to return
        :param int skip5: The number of records to skip
        :param str filter5: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select5: Specifies a subset of properties to return
        :param str orderby5: Determines what values are used to order a collection of records
        :param str expand5: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply5: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param str at5: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for records to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at=VersionType eq 'Configured' at=InterestedMos.Moid eq '5b5877e56c6730367acf46cd' 
        :param bool count6: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount6: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top6: The max number of records to return
        :param int skip6: The number of records to skip
        :param str filter6: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select6: Specifies a subset of properties to return
        :param str orderby6: Determines what values are used to order a collection of records
        :param str expand6: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply6: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param str at6: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for records to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at=VersionType eq 'Configured' at=InterestedMos.Moid eq '5b5877e56c6730367acf46cd' 
        :param bool count7: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount7: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top7: The max number of records to return
        :param int skip7: The number of records to skip
        :param str filter7: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select7: Specifies a subset of properties to return
        :param str orderby7: Determines what values are used to order a collection of records
        :param str expand7: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply7: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count8: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount8: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top8: The max number of records to return
        :param int skip8: The number of records to skip
        :param str filter8: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select8: Specifies a subset of properties to return
        :param str orderby8: Determines what values are used to order a collection of records
        :param str expand8: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply8: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count9: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount9: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top9: The max number of records to return
        :param int skip9: The number of records to skip
        :param str filter9: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select9: Specifies a subset of properties to return
        :param str orderby9: Determines what values are used to order a collection of records
        :param str expand9: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply9: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count10: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount10: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top10: The max number of records to return
        :param int skip10: The number of records to skip
        :param str filter10: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select10: Specifies a subset of properties to return
        :param str orderby10: Determines what values are used to order a collection of records
        :param str expand10: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply10: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count11: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount11: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top11: The max number of records to return
        :param int skip11: The number of records to skip
        :param str filter11: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select11: Specifies a subset of properties to return
        :param str orderby11: Determines what values are used to order a collection of records
        :param str expand11: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply11: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count12: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount12: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top12: The max number of records to return
        :param int skip12: The number of records to skip
        :param str filter12: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select12: Specifies a subset of properties to return
        :param str orderby12: Determines what values are used to order a collection of records
        :param str expand12: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply12: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count13: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount13: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top13: The max number of records to return
        :param int skip13: The number of records to skip
        :param str filter13: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select13: Specifies a subset of properties to return
        :param str orderby13: Determines what values are used to order a collection of records
        :param str expand13: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply13: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count14: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount14: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top14: The max number of records to return
        :param int skip14: The number of records to skip
        :param str filter14: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select14: Specifies a subset of properties to return
        :param str orderby14: Determines what values are used to order a collection of records
        :param str expand14: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply14: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :param bool count15: The $count query option allows clients to request a count of the matching resources.
        :param str inlinecount15: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response
        :param int top15: The max number of records to return
        :param int skip15: The number of records to skip
        :param str filter15: Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter=Name eq 'Bob' $filter=Tags/any(t: t/Key eq 'Site') $filter=Tags/any(t: t/Key eq 'Site' and t/Value eq 'London') 
        :param str select15: Specifies a subset of properties to return
        :param str orderby15: Determines what values are used to order a collection of records
        :param str expand15: Specify additional attributes or related records to return. Supports only 'DisplayNames' attribute now. Query examples: $expand=DisplayNames 
        :param str apply15: Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply=groupby((Model), aggregate($count as Total)) $apply=groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory)) 
        :return: IaasConnectorPackList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['count', 'inlinecount', 'top', 'skip', 'filter', 'select', 'orderby', 'expand', 'apply', 'at', 'count2', 'inlinecount2', 'top2', 'skip2', 'filter2', 'select2', 'orderby2', 'expand2', 'apply2', 'at2', 'count3', 'inlinecount3', 'top3', 'skip3', 'filter3', 'select3', 'orderby3', 'expand3', 'apply3', 'at3', 'count4', 'inlinecount4', 'top4', 'skip4', 'filter4', 'select4', 'orderby4', 'expand4', 'apply4', 'at4', 'count5', 'inlinecount5', 'top5', 'skip5', 'filter5', 'select5', 'orderby5', 'expand5', 'apply5', 'at5', 'count6', 'inlinecount6', 'top6', 'skip6', 'filter6', 'select6', 'orderby6', 'expand6', 'apply6', 'at6', 'count7', 'inlinecount7', 'top7', 'skip7', 'filter7', 'select7', 'orderby7', 'expand7', 'apply7', 'count8', 'inlinecount8', 'top8', 'skip8', 'filter8', 'select8', 'orderby8', 'expand8', 'apply8', 'count9', 'inlinecount9', 'top9', 'skip9', 'filter9', 'select9', 'orderby9', 'expand9', 'apply9', 'count10', 'inlinecount10', 'top10', 'skip10', 'filter10', 'select10', 'orderby10', 'expand10', 'apply10', 'count11', 'inlinecount11', 'top11', 'skip11', 'filter11', 'select11', 'orderby11', 'expand11', 'apply11', 'count12', 'inlinecount12', 'top12', 'skip12', 'filter12', 'select12', 'orderby12', 'expand12', 'apply12', 'count13', 'inlinecount13', 'top13', 'skip13', 'filter13', 'select13', 'orderby13', 'expand13', 'apply13', 'count14', 'inlinecount14', 'top14', 'skip14', 'filter14', 'select14', 'orderby14', 'expand14', 'apply14', 'count15', 'inlinecount15', 'top15', 'skip15', 'filter15', 'select15', 'orderby15', 'expand15', 'apply15']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method iaas_connector_packs_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('$count', params['count']))
        if 'inlinecount' in params:
            query_params.append(('$inlinecount', params['inlinecount']))
        if 'top' in params:
            query_params.append(('$top', params['top']))
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))
        if 'select' in params:
            query_params.append(('$select', params['select']))
        if 'orderby' in params:
            query_params.append(('$orderby', params['orderby']))
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))
        if 'apply' in params:
            query_params.append(('$apply', params['apply']))
        if 'at' in params:
            query_params.append(('at', params['at']))
        if 'count2' in params:
            query_params.append(('$count', params['count2']))
        if 'inlinecount2' in params:
            query_params.append(('$inlinecount', params['inlinecount2']))
        if 'top2' in params:
            query_params.append(('$top', params['top2']))
        if 'skip2' in params:
            query_params.append(('$skip', params['skip2']))
        if 'filter2' in params:
            query_params.append(('$filter', params['filter2']))
        if 'select2' in params:
            query_params.append(('$select', params['select2']))
        if 'orderby2' in params:
            query_params.append(('$orderby', params['orderby2']))
        if 'expand2' in params:
            query_params.append(('$expand', params['expand2']))
        if 'apply2' in params:
            query_params.append(('$apply', params['apply2']))
        if 'at2' in params:
            query_params.append(('at', params['at2']))
        if 'count3' in params:
            query_params.append(('$count', params['count3']))
        if 'inlinecount3' in params:
            query_params.append(('$inlinecount', params['inlinecount3']))
        if 'top3' in params:
            query_params.append(('$top', params['top3']))
        if 'skip3' in params:
            query_params.append(('$skip', params['skip3']))
        if 'filter3' in params:
            query_params.append(('$filter', params['filter3']))
        if 'select3' in params:
            query_params.append(('$select', params['select3']))
        if 'orderby3' in params:
            query_params.append(('$orderby', params['orderby3']))
        if 'expand3' in params:
            query_params.append(('$expand', params['expand3']))
        if 'apply3' in params:
            query_params.append(('$apply', params['apply3']))
        if 'at3' in params:
            query_params.append(('at', params['at3']))
        if 'count4' in params:
            query_params.append(('$count', params['count4']))
        if 'inlinecount4' in params:
            query_params.append(('$inlinecount', params['inlinecount4']))
        if 'top4' in params:
            query_params.append(('$top', params['top4']))
        if 'skip4' in params:
            query_params.append(('$skip', params['skip4']))
        if 'filter4' in params:
            query_params.append(('$filter', params['filter4']))
        if 'select4' in params:
            query_params.append(('$select', params['select4']))
        if 'orderby4' in params:
            query_params.append(('$orderby', params['orderby4']))
        if 'expand4' in params:
            query_params.append(('$expand', params['expand4']))
        if 'apply4' in params:
            query_params.append(('$apply', params['apply4']))
        if 'at4' in params:
            query_params.append(('at', params['at4']))
        if 'count5' in params:
            query_params.append(('$count', params['count5']))
        if 'inlinecount5' in params:
            query_params.append(('$inlinecount', params['inlinecount5']))
        if 'top5' in params:
            query_params.append(('$top', params['top5']))
        if 'skip5' in params:
            query_params.append(('$skip', params['skip5']))
        if 'filter5' in params:
            query_params.append(('$filter', params['filter5']))
        if 'select5' in params:
            query_params.append(('$select', params['select5']))
        if 'orderby5' in params:
            query_params.append(('$orderby', params['orderby5']))
        if 'expand5' in params:
            query_params.append(('$expand', params['expand5']))
        if 'apply5' in params:
            query_params.append(('$apply', params['apply5']))
        if 'at5' in params:
            query_params.append(('at', params['at5']))
        if 'count6' in params:
            query_params.append(('$count', params['count6']))
        if 'inlinecount6' in params:
            query_params.append(('$inlinecount', params['inlinecount6']))
        if 'top6' in params:
            query_params.append(('$top', params['top6']))
        if 'skip6' in params:
            query_params.append(('$skip', params['skip6']))
        if 'filter6' in params:
            query_params.append(('$filter', params['filter6']))
        if 'select6' in params:
            query_params.append(('$select', params['select6']))
        if 'orderby6' in params:
            query_params.append(('$orderby', params['orderby6']))
        if 'expand6' in params:
            query_params.append(('$expand', params['expand6']))
        if 'apply6' in params:
            query_params.append(('$apply', params['apply6']))
        if 'at6' in params:
            query_params.append(('at', params['at6']))
        if 'count7' in params:
            query_params.append(('$count', params['count7']))
        if 'inlinecount7' in params:
            query_params.append(('$inlinecount', params['inlinecount7']))
        if 'top7' in params:
            query_params.append(('$top', params['top7']))
        if 'skip7' in params:
            query_params.append(('$skip', params['skip7']))
        if 'filter7' in params:
            query_params.append(('$filter', params['filter7']))
        if 'select7' in params:
            query_params.append(('$select', params['select7']))
        if 'orderby7' in params:
            query_params.append(('$orderby', params['orderby7']))
        if 'expand7' in params:
            query_params.append(('$expand', params['expand7']))
        if 'apply7' in params:
            query_params.append(('$apply', params['apply7']))
        if 'count8' in params:
            query_params.append(('$count', params['count8']))
        if 'inlinecount8' in params:
            query_params.append(('$inlinecount', params['inlinecount8']))
        if 'top8' in params:
            query_params.append(('$top', params['top8']))
        if 'skip8' in params:
            query_params.append(('$skip', params['skip8']))
        if 'filter8' in params:
            query_params.append(('$filter', params['filter8']))
        if 'select8' in params:
            query_params.append(('$select', params['select8']))
        if 'orderby8' in params:
            query_params.append(('$orderby', params['orderby8']))
        if 'expand8' in params:
            query_params.append(('$expand', params['expand8']))
        if 'apply8' in params:
            query_params.append(('$apply', params['apply8']))
        if 'count9' in params:
            query_params.append(('$count', params['count9']))
        if 'inlinecount9' in params:
            query_params.append(('$inlinecount', params['inlinecount9']))
        if 'top9' in params:
            query_params.append(('$top', params['top9']))
        if 'skip9' in params:
            query_params.append(('$skip', params['skip9']))
        if 'filter9' in params:
            query_params.append(('$filter', params['filter9']))
        if 'select9' in params:
            query_params.append(('$select', params['select9']))
        if 'orderby9' in params:
            query_params.append(('$orderby', params['orderby9']))
        if 'expand9' in params:
            query_params.append(('$expand', params['expand9']))
        if 'apply9' in params:
            query_params.append(('$apply', params['apply9']))
        if 'count10' in params:
            query_params.append(('$count', params['count10']))
        if 'inlinecount10' in params:
            query_params.append(('$inlinecount', params['inlinecount10']))
        if 'top10' in params:
            query_params.append(('$top', params['top10']))
        if 'skip10' in params:
            query_params.append(('$skip', params['skip10']))
        if 'filter10' in params:
            query_params.append(('$filter', params['filter10']))
        if 'select10' in params:
            query_params.append(('$select', params['select10']))
        if 'orderby10' in params:
            query_params.append(('$orderby', params['orderby10']))
        if 'expand10' in params:
            query_params.append(('$expand', params['expand10']))
        if 'apply10' in params:
            query_params.append(('$apply', params['apply10']))
        if 'count11' in params:
            query_params.append(('$count', params['count11']))
        if 'inlinecount11' in params:
            query_params.append(('$inlinecount', params['inlinecount11']))
        if 'top11' in params:
            query_params.append(('$top', params['top11']))
        if 'skip11' in params:
            query_params.append(('$skip', params['skip11']))
        if 'filter11' in params:
            query_params.append(('$filter', params['filter11']))
        if 'select11' in params:
            query_params.append(('$select', params['select11']))
        if 'orderby11' in params:
            query_params.append(('$orderby', params['orderby11']))
        if 'expand11' in params:
            query_params.append(('$expand', params['expand11']))
        if 'apply11' in params:
            query_params.append(('$apply', params['apply11']))
        if 'count12' in params:
            query_params.append(('$count', params['count12']))
        if 'inlinecount12' in params:
            query_params.append(('$inlinecount', params['inlinecount12']))
        if 'top12' in params:
            query_params.append(('$top', params['top12']))
        if 'skip12' in params:
            query_params.append(('$skip', params['skip12']))
        if 'filter12' in params:
            query_params.append(('$filter', params['filter12']))
        if 'select12' in params:
            query_params.append(('$select', params['select12']))
        if 'orderby12' in params:
            query_params.append(('$orderby', params['orderby12']))
        if 'expand12' in params:
            query_params.append(('$expand', params['expand12']))
        if 'apply12' in params:
            query_params.append(('$apply', params['apply12']))
        if 'count13' in params:
            query_params.append(('$count', params['count13']))
        if 'inlinecount13' in params:
            query_params.append(('$inlinecount', params['inlinecount13']))
        if 'top13' in params:
            query_params.append(('$top', params['top13']))
        if 'skip13' in params:
            query_params.append(('$skip', params['skip13']))
        if 'filter13' in params:
            query_params.append(('$filter', params['filter13']))
        if 'select13' in params:
            query_params.append(('$select', params['select13']))
        if 'orderby13' in params:
            query_params.append(('$orderby', params['orderby13']))
        if 'expand13' in params:
            query_params.append(('$expand', params['expand13']))
        if 'apply13' in params:
            query_params.append(('$apply', params['apply13']))
        if 'count14' in params:
            query_params.append(('$count', params['count14']))
        if 'inlinecount14' in params:
            query_params.append(('$inlinecount', params['inlinecount14']))
        if 'top14' in params:
            query_params.append(('$top', params['top14']))
        if 'skip14' in params:
            query_params.append(('$skip', params['skip14']))
        if 'filter14' in params:
            query_params.append(('$filter', params['filter14']))
        if 'select14' in params:
            query_params.append(('$select', params['select14']))
        if 'orderby14' in params:
            query_params.append(('$orderby', params['orderby14']))
        if 'expand14' in params:
            query_params.append(('$expand', params['expand14']))
        if 'apply14' in params:
            query_params.append(('$apply', params['apply14']))
        if 'count15' in params:
            query_params.append(('$count', params['count15']))
        if 'inlinecount15' in params:
            query_params.append(('$inlinecount', params['inlinecount15']))
        if 'top15' in params:
            query_params.append(('$top', params['top15']))
        if 'skip15' in params:
            query_params.append(('$skip', params['skip15']))
        if 'filter15' in params:
            query_params.append(('$filter', params['filter15']))
        if 'select15' in params:
            query_params.append(('$select', params['select15']))
        if 'orderby15' in params:
            query_params.append(('$orderby', params['orderby15']))
        if 'expand15' in params:
            query_params.append(('$expand', params['expand15']))
        if 'apply15' in params:
            query_params.append(('$apply', params['apply15']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/iaas/ConnectorPacks', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='IaasConnectorPackList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def iaas_connector_packs_moid_get(self, moid, moid2, moid3, moid4, moid5, moid6, moid7, moid8, moid9, moid10, moid11, moid12, moid13, moid14, moid15, **kwargs):
        """
        Get a specific instance of 'iaasConnectorPack'
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.iaas_connector_packs_moid_get(moid, moid2, moid3, moid4, moid5, moid6, moid7, moid8, moid9, moid10, moid11, moid12, moid13, moid14, moid15, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str moid: The moid of the iaasConnectorPack instance. (required)
        :param str moid2: The moid of the iaasConnectorPack instance. (required)
        :param str moid3: The moid of the iaasConnectorPack instance. (required)
        :param str moid4: The moid of the iaasConnectorPack instance. (required)
        :param str moid5: The moid of the iaasConnectorPack instance. (required)
        :param str moid6: The moid of the iaasConnectorPack instance. (required)
        :param str moid7: The moid of the iaasConnectorPack instance. (required)
        :param str moid8: The moid of the iaasConnectorPack instance. (required)
        :param str moid9: The moid of the iaasConnectorPack instance. (required)
        :param str moid10: The moid of the iaasConnectorPack instance. (required)
        :param str moid11: The moid of the iaasConnectorPack instance. (required)
        :param str moid12: The moid of the iaasConnectorPack instance. (required)
        :param str moid13: The moid of the iaasConnectorPack instance. (required)
        :param str moid14: The moid of the iaasConnectorPack instance. (required)
        :param str moid15: The moid of the iaasConnectorPack instance. (required)
        :return: IaasConnectorPack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.iaas_connector_packs_moid_get_with_http_info(moid, moid2, moid3, moid4, moid5, moid6, moid7, moid8, moid9, moid10, moid11, moid12, moid13, moid14, moid15, **kwargs)
        else:
            (data) = self.iaas_connector_packs_moid_get_with_http_info(moid, moid2, moid3, moid4, moid5, moid6, moid7, moid8, moid9, moid10, moid11, moid12, moid13, moid14, moid15, **kwargs)
            return data

    def iaas_connector_packs_moid_get_with_http_info(self, moid, moid2, moid3, moid4, moid5, moid6, moid7, moid8, moid9, moid10, moid11, moid12, moid13, moid14, moid15, **kwargs):
        """
        Get a specific instance of 'iaasConnectorPack'
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.iaas_connector_packs_moid_get_with_http_info(moid, moid2, moid3, moid4, moid5, moid6, moid7, moid8, moid9, moid10, moid11, moid12, moid13, moid14, moid15, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str moid: The moid of the iaasConnectorPack instance. (required)
        :param str moid2: The moid of the iaasConnectorPack instance. (required)
        :param str moid3: The moid of the iaasConnectorPack instance. (required)
        :param str moid4: The moid of the iaasConnectorPack instance. (required)
        :param str moid5: The moid of the iaasConnectorPack instance. (required)
        :param str moid6: The moid of the iaasConnectorPack instance. (required)
        :param str moid7: The moid of the iaasConnectorPack instance. (required)
        :param str moid8: The moid of the iaasConnectorPack instance. (required)
        :param str moid9: The moid of the iaasConnectorPack instance. (required)
        :param str moid10: The moid of the iaasConnectorPack instance. (required)
        :param str moid11: The moid of the iaasConnectorPack instance. (required)
        :param str moid12: The moid of the iaasConnectorPack instance. (required)
        :param str moid13: The moid of the iaasConnectorPack instance. (required)
        :param str moid14: The moid of the iaasConnectorPack instance. (required)
        :param str moid15: The moid of the iaasConnectorPack instance. (required)
        :return: IaasConnectorPack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['moid', 'moid2', 'moid3', 'moid4', 'moid5', 'moid6', 'moid7', 'moid8', 'moid9', 'moid10', 'moid11', 'moid12', 'moid13', 'moid14', 'moid15']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method iaas_connector_packs_moid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'moid' is set
        if ('moid' not in params) or (params['moid'] is None):
            raise ValueError("Missing the required parameter `moid` when calling `iaas_connector_packs_moid_get`")
        # verify the required parameter 'moid2' is set
        if ('moid2' not in params) or (params['moid2'] is None):
            raise ValueError("Missing the required parameter `moid2` when calling `iaas_connector_packs_moid_get`")
        # verify the required parameter 'moid3' is set
        if ('moid3' not in params) or (params['moid3'] is None):
            raise ValueError("Missing the required parameter `moid3` when calling `iaas_connector_packs_moid_get`")
        # verify the required parameter 'moid4' is set
        if ('moid4' not in params) or (params['moid4'] is None):
            raise ValueError("Missing the required parameter `moid4` when calling `iaas_connector_packs_moid_get`")
        # verify the required parameter 'moid5' is set
        if ('moid5' not in params) or (params['moid5'] is None):
            raise ValueError("Missing the required parameter `moid5` when calling `iaas_connector_packs_moid_get`")
        # verify the required parameter 'moid6' is set
        if ('moid6' not in params) or (params['moid6'] is None):
            raise ValueError("Missing the required parameter `moid6` when calling `iaas_connector_packs_moid_get`")
        # verify the required parameter 'moid7' is set
        if ('moid7' not in params) or (params['moid7'] is None):
            raise ValueError("Missing the required parameter `moid7` when calling `iaas_connector_packs_moid_get`")
        # verify the required parameter 'moid8' is set
        if ('moid8' not in params) or (params['moid8'] is None):
            raise ValueError("Missing the required parameter `moid8` when calling `iaas_connector_packs_moid_get`")
        # verify the required parameter 'moid9' is set
        if ('moid9' not in params) or (params['moid9'] is None):
            raise ValueError("Missing the required parameter `moid9` when calling `iaas_connector_packs_moid_get`")
        # verify the required parameter 'moid10' is set
        if ('moid10' not in params) or (params['moid10'] is None):
            raise ValueError("Missing the required parameter `moid10` when calling `iaas_connector_packs_moid_get`")
        # verify the required parameter 'moid11' is set
        if ('moid11' not in params) or (params['moid11'] is None):
            raise ValueError("Missing the required parameter `moid11` when calling `iaas_connector_packs_moid_get`")
        # verify the required parameter 'moid12' is set
        if ('moid12' not in params) or (params['moid12'] is None):
            raise ValueError("Missing the required parameter `moid12` when calling `iaas_connector_packs_moid_get`")
        # verify the required parameter 'moid13' is set
        if ('moid13' not in params) or (params['moid13'] is None):
            raise ValueError("Missing the required parameter `moid13` when calling `iaas_connector_packs_moid_get`")
        # verify the required parameter 'moid14' is set
        if ('moid14' not in params) or (params['moid14'] is None):
            raise ValueError("Missing the required parameter `moid14` when calling `iaas_connector_packs_moid_get`")
        # verify the required parameter 'moid15' is set
        if ('moid15' not in params) or (params['moid15'] is None):
            raise ValueError("Missing the required parameter `moid15` when calling `iaas_connector_packs_moid_get`")


        collection_formats = {}

        path_params = {}
        if 'moid' in params:
            path_params['moid'] = params['moid']
        if 'moid2' in params:
            path_params['moid'] = params['moid2']
        if 'moid3' in params:
            path_params['moid'] = params['moid3']
        if 'moid4' in params:
            path_params['moid'] = params['moid4']
        if 'moid5' in params:
            path_params['moid'] = params['moid5']
        if 'moid6' in params:
            path_params['moid'] = params['moid6']
        if 'moid7' in params:
            path_params['moid'] = params['moid7']
        if 'moid8' in params:
            path_params['moid'] = params['moid8']
        if 'moid9' in params:
            path_params['moid'] = params['moid9']
        if 'moid10' in params:
            path_params['moid'] = params['moid10']
        if 'moid11' in params:
            path_params['moid'] = params['moid11']
        if 'moid12' in params:
            path_params['moid'] = params['moid12']
        if 'moid13' in params:
            path_params['moid'] = params['moid13']
        if 'moid14' in params:
            path_params['moid'] = params['moid14']
        if 'moid15' in params:
            path_params['moid'] = params['moid15']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/iaas/ConnectorPacks/{moid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='IaasConnectorPack',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
