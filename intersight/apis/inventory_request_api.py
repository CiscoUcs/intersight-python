# coding: utf-8

"""
    Intersight REST API

    This is Intersight REST API 

    OpenAPI spec version: 1.0.9-228
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class InventoryRequestApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def inventory_requests_post(self, body, body2, body3, body4, body5, body6, body7, body8, body9, body10, body11, body12, body13, body14, body15, **kwargs):
        """
        Create an instance of 'inventoryRequest'
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.inventory_requests_post(body, body2, body3, body4, body5, body6, body7, body8, body9, body10, body11, body12, body13, body14, body15, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param InventoryRequest body: inventoryRequest to add (required)
        :param InventoryRequest body2: inventoryRequest to add (required)
        :param InventoryRequest body3: inventoryRequest to add (required)
        :param InventoryRequest body4: inventoryRequest to add (required)
        :param InventoryRequest body5: inventoryRequest to add (required)
        :param InventoryRequest body6: inventoryRequest to add (required)
        :param InventoryRequest body7: inventoryRequest to add (required)
        :param InventoryRequest body8: inventoryRequest to add (required)
        :param InventoryRequest body9: inventoryRequest to add (required)
        :param InventoryRequest body10: inventoryRequest to add (required)
        :param InventoryRequest body11: inventoryRequest to add (required)
        :param InventoryRequest body12: inventoryRequest to add (required)
        :param InventoryRequest body13: inventoryRequest to add (required)
        :param InventoryRequest body14: inventoryRequest to add (required)
        :param InventoryRequest body15: inventoryRequest to add (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.inventory_requests_post_with_http_info(body, body2, body3, body4, body5, body6, body7, body8, body9, body10, body11, body12, body13, body14, body15, **kwargs)
        else:
            (data) = self.inventory_requests_post_with_http_info(body, body2, body3, body4, body5, body6, body7, body8, body9, body10, body11, body12, body13, body14, body15, **kwargs)
            return data

    def inventory_requests_post_with_http_info(self, body, body2, body3, body4, body5, body6, body7, body8, body9, body10, body11, body12, body13, body14, body15, **kwargs):
        """
        Create an instance of 'inventoryRequest'
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.inventory_requests_post_with_http_info(body, body2, body3, body4, body5, body6, body7, body8, body9, body10, body11, body12, body13, body14, body15, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param InventoryRequest body: inventoryRequest to add (required)
        :param InventoryRequest body2: inventoryRequest to add (required)
        :param InventoryRequest body3: inventoryRequest to add (required)
        :param InventoryRequest body4: inventoryRequest to add (required)
        :param InventoryRequest body5: inventoryRequest to add (required)
        :param InventoryRequest body6: inventoryRequest to add (required)
        :param InventoryRequest body7: inventoryRequest to add (required)
        :param InventoryRequest body8: inventoryRequest to add (required)
        :param InventoryRequest body9: inventoryRequest to add (required)
        :param InventoryRequest body10: inventoryRequest to add (required)
        :param InventoryRequest body11: inventoryRequest to add (required)
        :param InventoryRequest body12: inventoryRequest to add (required)
        :param InventoryRequest body13: inventoryRequest to add (required)
        :param InventoryRequest body14: inventoryRequest to add (required)
        :param InventoryRequest body15: inventoryRequest to add (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'body2', 'body3', 'body4', 'body5', 'body6', 'body7', 'body8', 'body9', 'body10', 'body11', 'body12', 'body13', 'body14', 'body15']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventory_requests_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `inventory_requests_post`")
        # verify the required parameter 'body2' is set
        if ('body2' not in params) or (params['body2'] is None):
            raise ValueError("Missing the required parameter `body2` when calling `inventory_requests_post`")
        # verify the required parameter 'body3' is set
        if ('body3' not in params) or (params['body3'] is None):
            raise ValueError("Missing the required parameter `body3` when calling `inventory_requests_post`")
        # verify the required parameter 'body4' is set
        if ('body4' not in params) or (params['body4'] is None):
            raise ValueError("Missing the required parameter `body4` when calling `inventory_requests_post`")
        # verify the required parameter 'body5' is set
        if ('body5' not in params) or (params['body5'] is None):
            raise ValueError("Missing the required parameter `body5` when calling `inventory_requests_post`")
        # verify the required parameter 'body6' is set
        if ('body6' not in params) or (params['body6'] is None):
            raise ValueError("Missing the required parameter `body6` when calling `inventory_requests_post`")
        # verify the required parameter 'body7' is set
        if ('body7' not in params) or (params['body7'] is None):
            raise ValueError("Missing the required parameter `body7` when calling `inventory_requests_post`")
        # verify the required parameter 'body8' is set
        if ('body8' not in params) or (params['body8'] is None):
            raise ValueError("Missing the required parameter `body8` when calling `inventory_requests_post`")
        # verify the required parameter 'body9' is set
        if ('body9' not in params) or (params['body9'] is None):
            raise ValueError("Missing the required parameter `body9` when calling `inventory_requests_post`")
        # verify the required parameter 'body10' is set
        if ('body10' not in params) or (params['body10'] is None):
            raise ValueError("Missing the required parameter `body10` when calling `inventory_requests_post`")
        # verify the required parameter 'body11' is set
        if ('body11' not in params) or (params['body11'] is None):
            raise ValueError("Missing the required parameter `body11` when calling `inventory_requests_post`")
        # verify the required parameter 'body12' is set
        if ('body12' not in params) or (params['body12'] is None):
            raise ValueError("Missing the required parameter `body12` when calling `inventory_requests_post`")
        # verify the required parameter 'body13' is set
        if ('body13' not in params) or (params['body13'] is None):
            raise ValueError("Missing the required parameter `body13` when calling `inventory_requests_post`")
        # verify the required parameter 'body14' is set
        if ('body14' not in params) or (params['body14'] is None):
            raise ValueError("Missing the required parameter `body14` when calling `inventory_requests_post`")
        # verify the required parameter 'body15' is set
        if ('body15' not in params) or (params['body15'] is None):
            raise ValueError("Missing the required parameter `body15` when calling `inventory_requests_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body15' in params:
            body_params = params['body15']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/inventory/Requests', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
