# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from intersight.api_client import ApiClient
from intersight.exceptions import (ApiTypeError, ApiValueError)


class EquipmentApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_equipment_chassis_by_moid(self, moid, **kwargs):  # noqa: E501
        """Read a 'equipment.Chassis' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_chassis_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentChassis
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_chassis_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_equipment_chassis_by_moid_with_http_info(self, moid,
                                                     **kwargs):  # noqa: E501
        """Read a 'equipment.Chassis' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_chassis_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentChassis, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_equipment_chassis_by_moid" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_equipment_chassis_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/Chasses/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentChassis',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_chassis_list(self, **kwargs):  # noqa: E501
        """Read a 'equipment.Chassis' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_chassis_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentChassisList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_chassis_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_equipment_chassis_list_with_http_info(self,
                                                  **kwargs):  # noqa: E501
        """Read a 'equipment.Chassis' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_chassis_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentChassisList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_equipment_chassis_list" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/Chasses',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentChassisList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_device_summary_by_moid(self, moid,
                                             **kwargs):  # noqa: E501
        """Read a 'equipment.DeviceSummary' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_device_summary_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentDeviceSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_device_summary_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_equipment_device_summary_by_moid_with_http_info(
            self, moid, **kwargs):  # noqa: E501
        """Read a 'equipment.DeviceSummary' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_device_summary_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentDeviceSummary, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_device_summary_by_moid" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_equipment_device_summary_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/DeviceSummaries/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentDeviceSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_device_summary_list(self, **kwargs):  # noqa: E501
        """Read a 'equipment.DeviceSummary' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_device_summary_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentDeviceSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_device_summary_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_equipment_device_summary_list_with_http_info(
            self, **kwargs):  # noqa: E501
        """Read a 'equipment.DeviceSummary' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_device_summary_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentDeviceSummaryList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_device_summary_list" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/DeviceSummaries',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentDeviceSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_fan_by_moid(self, moid, **kwargs):  # noqa: E501
        """Read a 'equipment.Fan' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_fan_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentFan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_fan_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_equipment_fan_by_moid_with_http_info(self, moid,
                                                 **kwargs):  # noqa: E501
        """Read a 'equipment.Fan' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_fan_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentFan, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_equipment_fan_by_moid" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_equipment_fan_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/Fans/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentFan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_fan_list(self, **kwargs):  # noqa: E501
        """Read a 'equipment.Fan' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_fan_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentFanList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_fan_list_with_http_info(**
                                                          kwargs)  # noqa: E501

    def get_equipment_fan_list_with_http_info(self, **kwargs):  # noqa: E501
        """Read a 'equipment.Fan' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_fan_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentFanList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_equipment_fan_list" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/Fans',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentFanList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_fan_module_by_moid(self, moid, **kwargs):  # noqa: E501
        """Read a 'equipment.FanModule' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_fan_module_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentFanModule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_fan_module_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_equipment_fan_module_by_moid_with_http_info(
            self, moid, **kwargs):  # noqa: E501
        """Read a 'equipment.FanModule' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_fan_module_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentFanModule, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_fan_module_by_moid" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_equipment_fan_module_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/FanModules/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentFanModule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_fan_module_list(self, **kwargs):  # noqa: E501
        """Read a 'equipment.FanModule' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_fan_module_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentFanModuleList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_fan_module_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_equipment_fan_module_list_with_http_info(self,
                                                     **kwargs):  # noqa: E501
        """Read a 'equipment.FanModule' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_fan_module_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentFanModuleList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_equipment_fan_module_list" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/FanModules',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentFanModuleList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_fex_by_moid(self, moid, **kwargs):  # noqa: E501
        """Read a 'equipment.Fex' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_fex_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentFex
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_fex_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_equipment_fex_by_moid_with_http_info(self, moid,
                                                 **kwargs):  # noqa: E501
        """Read a 'equipment.Fex' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_fex_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentFex, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_equipment_fex_by_moid" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_equipment_fex_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/Fexes/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentFex',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_fex_list(self, **kwargs):  # noqa: E501
        """Read a 'equipment.Fex' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_fex_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentFexList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_fex_list_with_http_info(**
                                                          kwargs)  # noqa: E501

    def get_equipment_fex_list_with_http_info(self, **kwargs):  # noqa: E501
        """Read a 'equipment.Fex' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_fex_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentFexList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_equipment_fex_list" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/Fexes',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentFexList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_io_card_by_moid(self, moid, **kwargs):  # noqa: E501
        """Read a 'equipment.IoCard' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_io_card_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentIoCard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_io_card_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_equipment_io_card_by_moid_with_http_info(self, moid,
                                                     **kwargs):  # noqa: E501
        """Read a 'equipment.IoCard' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_io_card_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentIoCard, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_equipment_io_card_by_moid" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_equipment_io_card_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/IoCards/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentIoCard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_io_card_list(self, **kwargs):  # noqa: E501
        """Read a 'equipment.IoCard' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_io_card_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentIoCardList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_io_card_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_equipment_io_card_list_with_http_info(self,
                                                  **kwargs):  # noqa: E501
        """Read a 'equipment.IoCard' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_io_card_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentIoCardList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_equipment_io_card_list" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/IoCards',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentIoCardList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_io_expander_by_moid(self, moid, **kwargs):  # noqa: E501
        """Read a 'equipment.IoExpander' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_io_expander_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentIoExpander
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_io_expander_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_equipment_io_expander_by_moid_with_http_info(
            self, moid, **kwargs):  # noqa: E501
        """Read a 'equipment.IoExpander' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_io_expander_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentIoExpander, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_io_expander_by_moid" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_equipment_io_expander_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/IoExpanders/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentIoExpander',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_io_expander_list(self, **kwargs):  # noqa: E501
        """Read a 'equipment.IoExpander' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_io_expander_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentIoExpanderList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_io_expander_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_equipment_io_expander_list_with_http_info(self,
                                                      **kwargs):  # noqa: E501
        """Read a 'equipment.IoExpander' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_io_expander_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentIoExpanderList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_io_expander_list" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/IoExpanders',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentIoExpanderList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_locator_led_by_moid(self, moid, **kwargs):  # noqa: E501
        """Read a 'equipment.LocatorLed' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_locator_led_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentLocatorLed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_locator_led_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_equipment_locator_led_by_moid_with_http_info(
            self, moid, **kwargs):  # noqa: E501
        """Read a 'equipment.LocatorLed' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_locator_led_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentLocatorLed, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_locator_led_by_moid" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_equipment_locator_led_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/LocatorLeds/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentLocatorLed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_locator_led_list(self, **kwargs):  # noqa: E501
        """Read a 'equipment.LocatorLed' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_locator_led_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentLocatorLedList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_locator_led_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_equipment_locator_led_list_with_http_info(self,
                                                      **kwargs):  # noqa: E501
        """Read a 'equipment.LocatorLed' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_locator_led_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentLocatorLedList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_locator_led_list" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/LocatorLeds',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentLocatorLedList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_psu_by_moid(self, moid, **kwargs):  # noqa: E501
        """Read a 'equipment.Psu' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_psu_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentPsu
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_psu_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_equipment_psu_by_moid_with_http_info(self, moid,
                                                 **kwargs):  # noqa: E501
        """Read a 'equipment.Psu' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_psu_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentPsu, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_equipment_psu_by_moid" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_equipment_psu_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/Psus/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentPsu',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_psu_list(self, **kwargs):  # noqa: E501
        """Read a 'equipment.Psu' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_psu_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentPsuList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_psu_list_with_http_info(**
                                                          kwargs)  # noqa: E501

    def get_equipment_psu_list_with_http_info(self, **kwargs):  # noqa: E501
        """Read a 'equipment.Psu' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_psu_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentPsuList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_equipment_psu_list" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/Psus',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentPsuList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_rack_enclosure_by_moid(self, moid,
                                             **kwargs):  # noqa: E501
        """Read a 'equipment.RackEnclosure' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_rack_enclosure_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentRackEnclosure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_rack_enclosure_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_equipment_rack_enclosure_by_moid_with_http_info(
            self, moid, **kwargs):  # noqa: E501
        """Read a 'equipment.RackEnclosure' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_rack_enclosure_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentRackEnclosure, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_rack_enclosure_by_moid" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_equipment_rack_enclosure_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/RackEnclosures/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentRackEnclosure',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_rack_enclosure_list(self, **kwargs):  # noqa: E501
        """Read a 'equipment.RackEnclosure' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_rack_enclosure_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentRackEnclosureList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_rack_enclosure_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_equipment_rack_enclosure_list_with_http_info(
            self, **kwargs):  # noqa: E501
        """Read a 'equipment.RackEnclosure' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_rack_enclosure_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentRackEnclosureList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_rack_enclosure_list" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/RackEnclosures',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentRackEnclosureList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_rack_enclosure_slot_by_moid(self, moid,
                                                  **kwargs):  # noqa: E501
        """Read a 'equipment.RackEnclosureSlot' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_rack_enclosure_slot_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentRackEnclosureSlot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_rack_enclosure_slot_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_equipment_rack_enclosure_slot_by_moid_with_http_info(
            self, moid, **kwargs):  # noqa: E501
        """Read a 'equipment.RackEnclosureSlot' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_rack_enclosure_slot_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentRackEnclosureSlot, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_rack_enclosure_slot_by_moid" %
                    key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_equipment_rack_enclosure_slot_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/RackEnclosureSlots/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentRackEnclosureSlot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_rack_enclosure_slot_list(self, **kwargs):  # noqa: E501
        """Read a 'equipment.RackEnclosureSlot' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_rack_enclosure_slot_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentRackEnclosureSlotList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_rack_enclosure_slot_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_equipment_rack_enclosure_slot_list_with_http_info(
            self, **kwargs):  # noqa: E501
        """Read a 'equipment.RackEnclosureSlot' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_rack_enclosure_slot_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentRackEnclosureSlotList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_rack_enclosure_slot_list" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/RackEnclosureSlots',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentRackEnclosureSlotList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_shared_io_module_by_moid(self, moid,
                                               **kwargs):  # noqa: E501
        """Read a 'equipment.SharedIoModule' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_shared_io_module_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentSharedIoModule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_shared_io_module_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_equipment_shared_io_module_by_moid_with_http_info(
            self, moid, **kwargs):  # noqa: E501
        """Read a 'equipment.SharedIoModule' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_shared_io_module_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentSharedIoModule, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_shared_io_module_by_moid" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_equipment_shared_io_module_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/SharedIoModules/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentSharedIoModule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_shared_io_module_list(self, **kwargs):  # noqa: E501
        """Read a 'equipment.SharedIoModule' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_shared_io_module_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentSharedIoModuleList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_shared_io_module_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_equipment_shared_io_module_list_with_http_info(
            self, **kwargs):  # noqa: E501
        """Read a 'equipment.SharedIoModule' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_shared_io_module_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentSharedIoModuleList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_shared_io_module_list" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/SharedIoModules',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentSharedIoModuleList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_switch_card_by_moid(self, moid, **kwargs):  # noqa: E501
        """Read a 'equipment.SwitchCard' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_switch_card_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentSwitchCard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_switch_card_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_equipment_switch_card_by_moid_with_http_info(
            self, moid, **kwargs):  # noqa: E501
        """Read a 'equipment.SwitchCard' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_switch_card_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentSwitchCard, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_switch_card_by_moid" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_equipment_switch_card_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/SwitchCards/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentSwitchCard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_switch_card_list(self, **kwargs):  # noqa: E501
        """Read a 'equipment.SwitchCard' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_switch_card_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentSwitchCardList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_switch_card_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_equipment_switch_card_list_with_http_info(self,
                                                      **kwargs):  # noqa: E501
        """Read a 'equipment.SwitchCard' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_switch_card_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentSwitchCardList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_switch_card_list" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/SwitchCards',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentSwitchCardList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_system_io_controller_by_moid(self, moid,
                                                   **kwargs):  # noqa: E501
        """Read a 'equipment.SystemIoController' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_system_io_controller_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentSystemIoController
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_system_io_controller_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_equipment_system_io_controller_by_moid_with_http_info(
            self, moid, **kwargs):  # noqa: E501
        """Read a 'equipment.SystemIoController' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_system_io_controller_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentSystemIoController, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_system_io_controller_by_moid" %
                    key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_equipment_system_io_controller_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/SystemIoControllers/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentSystemIoController',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_system_io_controller_list(self, **kwargs):  # noqa: E501
        """Read a 'equipment.SystemIoController' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_system_io_controller_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentSystemIoControllerList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_system_io_controller_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_equipment_system_io_controller_list_with_http_info(
            self, **kwargs):  # noqa: E501
        """Read a 'equipment.SystemIoController' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_system_io_controller_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentSystemIoControllerList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_system_io_controller_list" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/SystemIoControllers',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentSystemIoControllerList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_tpm_by_moid(self, moid, **kwargs):  # noqa: E501
        """Read a 'equipment.Tpm' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_tpm_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentTpm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_tpm_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_equipment_tpm_by_moid_with_http_info(self, moid,
                                                 **kwargs):  # noqa: E501
        """Read a 'equipment.Tpm' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_tpm_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentTpm, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_equipment_tpm_by_moid" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_equipment_tpm_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/Tpms/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentTpm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_tpm_list(self, **kwargs):  # noqa: E501
        """Read a 'equipment.Tpm' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_tpm_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentTpmList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_equipment_tpm_list_with_http_info(**
                                                          kwargs)  # noqa: E501

    def get_equipment_tpm_list_with_http_info(self, **kwargs):  # noqa: E501
        """Read a 'equipment.Tpm' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_tpm_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentTpmList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_equipment_tpm_list" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/Tpms',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentTpmList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_equipment_chassis(self, moid, equipment_chassis,
                                **kwargs):  # noqa: E501
        """Update a 'equipment.Chassis' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_chassis(moid, equipment_chassis, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentChassis equipment_chassis: The 'equipment.Chassis' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentChassis
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_equipment_chassis_with_http_info(
            moid, equipment_chassis, **kwargs)  # noqa: E501

    def patch_equipment_chassis_with_http_info(self, moid, equipment_chassis,
                                               **kwargs):  # noqa: E501
        """Update a 'equipment.Chassis' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_chassis_with_http_info(moid, equipment_chassis, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentChassis equipment_chassis: The 'equipment.Chassis' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentChassis, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_chassis']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method patch_equipment_chassis" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_equipment_chassis`"
            )  # noqa: E501
        # verify the required parameter 'equipment_chassis' is set
        if self.api_client.client_side_validation and (
                'equipment_chassis' not in local_var_params or  # noqa: E501
                local_var_params['equipment_chassis'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_chassis` when calling `patch_equipment_chassis`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_chassis' in local_var_params:
            body_params = local_var_params['equipment_chassis']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/Chasses/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentChassis',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_equipment_fan(self, moid, equipment_fan, **kwargs):  # noqa: E501
        """Update a 'equipment.Fan' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_fan(moid, equipment_fan, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentFan equipment_fan: The 'equipment.Fan' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentFan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_equipment_fan_with_http_info(moid, equipment_fan,
                                                       **kwargs)  # noqa: E501

    def patch_equipment_fan_with_http_info(self, moid, equipment_fan,
                                           **kwargs):  # noqa: E501
        """Update a 'equipment.Fan' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_fan_with_http_info(moid, equipment_fan, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentFan equipment_fan: The 'equipment.Fan' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentFan, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_fan']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method patch_equipment_fan" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_equipment_fan`"
            )  # noqa: E501
        # verify the required parameter 'equipment_fan' is set
        if self.api_client.client_side_validation and (
                'equipment_fan' not in local_var_params or  # noqa: E501
                local_var_params['equipment_fan'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_fan` when calling `patch_equipment_fan`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_fan' in local_var_params:
            body_params = local_var_params['equipment_fan']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/Fans/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentFan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_equipment_fan_module(self, moid, equipment_fan_module,
                                   **kwargs):  # noqa: E501
        """Update a 'equipment.FanModule' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_fan_module(moid, equipment_fan_module, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentFanModule equipment_fan_module: The 'equipment.FanModule' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentFanModule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_equipment_fan_module_with_http_info(
            moid, equipment_fan_module, **kwargs)  # noqa: E501

    def patch_equipment_fan_module_with_http_info(self, moid,
                                                  equipment_fan_module,
                                                  **kwargs):  # noqa: E501
        """Update a 'equipment.FanModule' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_fan_module_with_http_info(moid, equipment_fan_module, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentFanModule equipment_fan_module: The 'equipment.FanModule' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentFanModule, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_fan_module']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method patch_equipment_fan_module" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_equipment_fan_module`"
            )  # noqa: E501
        # verify the required parameter 'equipment_fan_module' is set
        if self.api_client.client_side_validation and (
                'equipment_fan_module' not in local_var_params or  # noqa: E501
                local_var_params['equipment_fan_module'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_fan_module` when calling `patch_equipment_fan_module`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_fan_module' in local_var_params:
            body_params = local_var_params['equipment_fan_module']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/FanModules/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentFanModule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_equipment_fex(self, moid, equipment_fex, **kwargs):  # noqa: E501
        """Update a 'equipment.Fex' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_fex(moid, equipment_fex, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentFex equipment_fex: The 'equipment.Fex' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentFex
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_equipment_fex_with_http_info(moid, equipment_fex,
                                                       **kwargs)  # noqa: E501

    def patch_equipment_fex_with_http_info(self, moid, equipment_fex,
                                           **kwargs):  # noqa: E501
        """Update a 'equipment.Fex' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_fex_with_http_info(moid, equipment_fex, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentFex equipment_fex: The 'equipment.Fex' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentFex, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_fex']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method patch_equipment_fex" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_equipment_fex`"
            )  # noqa: E501
        # verify the required parameter 'equipment_fex' is set
        if self.api_client.client_side_validation and (
                'equipment_fex' not in local_var_params or  # noqa: E501
                local_var_params['equipment_fex'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_fex` when calling `patch_equipment_fex`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_fex' in local_var_params:
            body_params = local_var_params['equipment_fex']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/Fexes/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentFex',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_equipment_io_card(self, moid, equipment_io_card,
                                **kwargs):  # noqa: E501
        """Update a 'equipment.IoCard' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_io_card(moid, equipment_io_card, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentIoCard equipment_io_card: The 'equipment.IoCard' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentIoCard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_equipment_io_card_with_http_info(
            moid, equipment_io_card, **kwargs)  # noqa: E501

    def patch_equipment_io_card_with_http_info(self, moid, equipment_io_card,
                                               **kwargs):  # noqa: E501
        """Update a 'equipment.IoCard' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_io_card_with_http_info(moid, equipment_io_card, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentIoCard equipment_io_card: The 'equipment.IoCard' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentIoCard, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_io_card']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method patch_equipment_io_card" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_equipment_io_card`"
            )  # noqa: E501
        # verify the required parameter 'equipment_io_card' is set
        if self.api_client.client_side_validation and (
                'equipment_io_card' not in local_var_params or  # noqa: E501
                local_var_params['equipment_io_card'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_io_card` when calling `patch_equipment_io_card`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_io_card' in local_var_params:
            body_params = local_var_params['equipment_io_card']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/IoCards/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentIoCard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_equipment_io_expander(self, moid, equipment_io_expander,
                                    **kwargs):  # noqa: E501
        """Update a 'equipment.IoExpander' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_io_expander(moid, equipment_io_expander, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentIoExpander equipment_io_expander: The 'equipment.IoExpander' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentIoExpander
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_equipment_io_expander_with_http_info(
            moid, equipment_io_expander, **kwargs)  # noqa: E501

    def patch_equipment_io_expander_with_http_info(self, moid,
                                                   equipment_io_expander,
                                                   **kwargs):  # noqa: E501
        """Update a 'equipment.IoExpander' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_io_expander_with_http_info(moid, equipment_io_expander, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentIoExpander equipment_io_expander: The 'equipment.IoExpander' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentIoExpander, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_io_expander']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method patch_equipment_io_expander" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_equipment_io_expander`"
            )  # noqa: E501
        # verify the required parameter 'equipment_io_expander' is set
        if self.api_client.client_side_validation and (
                'equipment_io_expander' not in local_var_params
                or  # noqa: E501
                local_var_params['equipment_io_expander'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_io_expander` when calling `patch_equipment_io_expander`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_io_expander' in local_var_params:
            body_params = local_var_params['equipment_io_expander']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/IoExpanders/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentIoExpander',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_equipment_locator_led(self, moid, equipment_locator_led,
                                    **kwargs):  # noqa: E501
        """Update a 'equipment.LocatorLed' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_locator_led(moid, equipment_locator_led, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentLocatorLed equipment_locator_led: The 'equipment.LocatorLed' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentLocatorLed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_equipment_locator_led_with_http_info(
            moid, equipment_locator_led, **kwargs)  # noqa: E501

    def patch_equipment_locator_led_with_http_info(self, moid,
                                                   equipment_locator_led,
                                                   **kwargs):  # noqa: E501
        """Update a 'equipment.LocatorLed' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_locator_led_with_http_info(moid, equipment_locator_led, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentLocatorLed equipment_locator_led: The 'equipment.LocatorLed' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentLocatorLed, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_locator_led']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method patch_equipment_locator_led" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_equipment_locator_led`"
            )  # noqa: E501
        # verify the required parameter 'equipment_locator_led' is set
        if self.api_client.client_side_validation and (
                'equipment_locator_led' not in local_var_params
                or  # noqa: E501
                local_var_params['equipment_locator_led'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_locator_led` when calling `patch_equipment_locator_led`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_locator_led' in local_var_params:
            body_params = local_var_params['equipment_locator_led']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/LocatorLeds/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentLocatorLed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_equipment_psu(self, moid, equipment_psu, **kwargs):  # noqa: E501
        """Update a 'equipment.Psu' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_psu(moid, equipment_psu, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentPsu equipment_psu: The 'equipment.Psu' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentPsu
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_equipment_psu_with_http_info(moid, equipment_psu,
                                                       **kwargs)  # noqa: E501

    def patch_equipment_psu_with_http_info(self, moid, equipment_psu,
                                           **kwargs):  # noqa: E501
        """Update a 'equipment.Psu' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_psu_with_http_info(moid, equipment_psu, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentPsu equipment_psu: The 'equipment.Psu' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentPsu, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_psu']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method patch_equipment_psu" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_equipment_psu`"
            )  # noqa: E501
        # verify the required parameter 'equipment_psu' is set
        if self.api_client.client_side_validation and (
                'equipment_psu' not in local_var_params or  # noqa: E501
                local_var_params['equipment_psu'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_psu` when calling `patch_equipment_psu`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_psu' in local_var_params:
            body_params = local_var_params['equipment_psu']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/Psus/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentPsu',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_equipment_rack_enclosure(self, moid, equipment_rack_enclosure,
                                       **kwargs):  # noqa: E501
        """Update a 'equipment.RackEnclosure' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_rack_enclosure(moid, equipment_rack_enclosure, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentRackEnclosure equipment_rack_enclosure: The 'equipment.RackEnclosure' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentRackEnclosure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_equipment_rack_enclosure_with_http_info(
            moid, equipment_rack_enclosure, **kwargs)  # noqa: E501

    def patch_equipment_rack_enclosure_with_http_info(self, moid,
                                                      equipment_rack_enclosure,
                                                      **kwargs):  # noqa: E501
        """Update a 'equipment.RackEnclosure' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_rack_enclosure_with_http_info(moid, equipment_rack_enclosure, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentRackEnclosure equipment_rack_enclosure: The 'equipment.RackEnclosure' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentRackEnclosure, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_rack_enclosure']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_equipment_rack_enclosure" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_equipment_rack_enclosure`"
            )  # noqa: E501
        # verify the required parameter 'equipment_rack_enclosure' is set
        if self.api_client.client_side_validation and (
                'equipment_rack_enclosure' not in local_var_params
                or  # noqa: E501
                local_var_params['equipment_rack_enclosure'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_rack_enclosure` when calling `patch_equipment_rack_enclosure`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_rack_enclosure' in local_var_params:
            body_params = local_var_params['equipment_rack_enclosure']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/RackEnclosures/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentRackEnclosure',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_equipment_rack_enclosure_slot(self, moid,
                                            equipment_rack_enclosure_slot,
                                            **kwargs):  # noqa: E501
        """Update a 'equipment.RackEnclosureSlot' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_rack_enclosure_slot(moid, equipment_rack_enclosure_slot, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentRackEnclosureSlot equipment_rack_enclosure_slot: The 'equipment.RackEnclosureSlot' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentRackEnclosureSlot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_equipment_rack_enclosure_slot_with_http_info(
            moid, equipment_rack_enclosure_slot, **kwargs)  # noqa: E501

    def patch_equipment_rack_enclosure_slot_with_http_info(
            self, moid, equipment_rack_enclosure_slot, **kwargs):  # noqa: E501
        """Update a 'equipment.RackEnclosureSlot' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_rack_enclosure_slot_with_http_info(moid, equipment_rack_enclosure_slot, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentRackEnclosureSlot equipment_rack_enclosure_slot: The 'equipment.RackEnclosureSlot' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentRackEnclosureSlot, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_rack_enclosure_slot']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_equipment_rack_enclosure_slot" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_equipment_rack_enclosure_slot`"
            )  # noqa: E501
        # verify the required parameter 'equipment_rack_enclosure_slot' is set
        if self.api_client.client_side_validation and (
                'equipment_rack_enclosure_slot' not in local_var_params
                or  # noqa: E501
                local_var_params['equipment_rack_enclosure_slot'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_rack_enclosure_slot` when calling `patch_equipment_rack_enclosure_slot`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_rack_enclosure_slot' in local_var_params:
            body_params = local_var_params['equipment_rack_enclosure_slot']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/RackEnclosureSlots/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentRackEnclosureSlot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_equipment_shared_io_module(self, moid,
                                         equipment_shared_io_module,
                                         **kwargs):  # noqa: E501
        """Update a 'equipment.SharedIoModule' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_shared_io_module(moid, equipment_shared_io_module, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentSharedIoModule equipment_shared_io_module: The 'equipment.SharedIoModule' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentSharedIoModule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_equipment_shared_io_module_with_http_info(
            moid, equipment_shared_io_module, **kwargs)  # noqa: E501

    def patch_equipment_shared_io_module_with_http_info(
            self, moid, equipment_shared_io_module, **kwargs):  # noqa: E501
        """Update a 'equipment.SharedIoModule' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_shared_io_module_with_http_info(moid, equipment_shared_io_module, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentSharedIoModule equipment_shared_io_module: The 'equipment.SharedIoModule' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentSharedIoModule, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_shared_io_module']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_equipment_shared_io_module" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_equipment_shared_io_module`"
            )  # noqa: E501
        # verify the required parameter 'equipment_shared_io_module' is set
        if self.api_client.client_side_validation and (
                'equipment_shared_io_module' not in local_var_params
                or  # noqa: E501
                local_var_params['equipment_shared_io_module'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_shared_io_module` when calling `patch_equipment_shared_io_module`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_shared_io_module' in local_var_params:
            body_params = local_var_params['equipment_shared_io_module']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/SharedIoModules/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentSharedIoModule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_equipment_switch_card(self, moid, equipment_switch_card,
                                    **kwargs):  # noqa: E501
        """Update a 'equipment.SwitchCard' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_switch_card(moid, equipment_switch_card, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentSwitchCard equipment_switch_card: The 'equipment.SwitchCard' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentSwitchCard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_equipment_switch_card_with_http_info(
            moid, equipment_switch_card, **kwargs)  # noqa: E501

    def patch_equipment_switch_card_with_http_info(self, moid,
                                                   equipment_switch_card,
                                                   **kwargs):  # noqa: E501
        """Update a 'equipment.SwitchCard' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_switch_card_with_http_info(moid, equipment_switch_card, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentSwitchCard equipment_switch_card: The 'equipment.SwitchCard' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentSwitchCard, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_switch_card']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method patch_equipment_switch_card" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_equipment_switch_card`"
            )  # noqa: E501
        # verify the required parameter 'equipment_switch_card' is set
        if self.api_client.client_side_validation and (
                'equipment_switch_card' not in local_var_params
                or  # noqa: E501
                local_var_params['equipment_switch_card'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_switch_card` when calling `patch_equipment_switch_card`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_switch_card' in local_var_params:
            body_params = local_var_params['equipment_switch_card']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/SwitchCards/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentSwitchCard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_equipment_system_io_controller(self, moid,
                                             equipment_system_io_controller,
                                             **kwargs):  # noqa: E501
        """Update a 'equipment.SystemIoController' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_system_io_controller(moid, equipment_system_io_controller, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentSystemIoController equipment_system_io_controller: The 'equipment.SystemIoController' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentSystemIoController
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_equipment_system_io_controller_with_http_info(
            moid, equipment_system_io_controller, **kwargs)  # noqa: E501

    def patch_equipment_system_io_controller_with_http_info(
            self, moid, equipment_system_io_controller,
            **kwargs):  # noqa: E501
        """Update a 'equipment.SystemIoController' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_system_io_controller_with_http_info(moid, equipment_system_io_controller, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentSystemIoController equipment_system_io_controller: The 'equipment.SystemIoController' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentSystemIoController, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_system_io_controller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_equipment_system_io_controller" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_equipment_system_io_controller`"
            )  # noqa: E501
        # verify the required parameter 'equipment_system_io_controller' is set
        if self.api_client.client_side_validation and (
                'equipment_system_io_controller' not in local_var_params
                or  # noqa: E501
                local_var_params['equipment_system_io_controller'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_system_io_controller` when calling `patch_equipment_system_io_controller`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_system_io_controller' in local_var_params:
            body_params = local_var_params['equipment_system_io_controller']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/SystemIoControllers/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentSystemIoController',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_equipment_tpm(self, moid, equipment_tpm, **kwargs):  # noqa: E501
        """Update a 'equipment.Tpm' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_tpm(moid, equipment_tpm, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentTpm equipment_tpm: The 'equipment.Tpm' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentTpm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_equipment_tpm_with_http_info(moid, equipment_tpm,
                                                       **kwargs)  # noqa: E501

    def patch_equipment_tpm_with_http_info(self, moid, equipment_tpm,
                                           **kwargs):  # noqa: E501
        """Update a 'equipment.Tpm' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_equipment_tpm_with_http_info(moid, equipment_tpm, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentTpm equipment_tpm: The 'equipment.Tpm' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentTpm, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_tpm']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method patch_equipment_tpm" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_equipment_tpm`"
            )  # noqa: E501
        # verify the required parameter 'equipment_tpm' is set
        if self.api_client.client_side_validation and (
                'equipment_tpm' not in local_var_params or  # noqa: E501
                local_var_params['equipment_tpm'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_tpm` when calling `patch_equipment_tpm`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_tpm' in local_var_params:
            body_params = local_var_params['equipment_tpm']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/Tpms/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentTpm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_equipment_chassis(self, moid, equipment_chassis,
                                 **kwargs):  # noqa: E501
        """Update a 'equipment.Chassis' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_chassis(moid, equipment_chassis, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentChassis equipment_chassis: The 'equipment.Chassis' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentChassis
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_equipment_chassis_with_http_info(
            moid, equipment_chassis, **kwargs)  # noqa: E501

    def update_equipment_chassis_with_http_info(self, moid, equipment_chassis,
                                                **kwargs):  # noqa: E501
        """Update a 'equipment.Chassis' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_chassis_with_http_info(moid, equipment_chassis, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentChassis equipment_chassis: The 'equipment.Chassis' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentChassis, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_chassis']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method update_equipment_chassis" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_equipment_chassis`"
            )  # noqa: E501
        # verify the required parameter 'equipment_chassis' is set
        if self.api_client.client_side_validation and (
                'equipment_chassis' not in local_var_params or  # noqa: E501
                local_var_params['equipment_chassis'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_chassis` when calling `update_equipment_chassis`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_chassis' in local_var_params:
            body_params = local_var_params['equipment_chassis']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/Chasses/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentChassis',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_equipment_fan(self, moid, equipment_fan,
                             **kwargs):  # noqa: E501
        """Update a 'equipment.Fan' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_fan(moid, equipment_fan, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentFan equipment_fan: The 'equipment.Fan' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentFan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_equipment_fan_with_http_info(
            moid, equipment_fan, **kwargs)  # noqa: E501

    def update_equipment_fan_with_http_info(self, moid, equipment_fan,
                                            **kwargs):  # noqa: E501
        """Update a 'equipment.Fan' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_fan_with_http_info(moid, equipment_fan, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentFan equipment_fan: The 'equipment.Fan' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentFan, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_fan']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method update_equipment_fan" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_equipment_fan`"
            )  # noqa: E501
        # verify the required parameter 'equipment_fan' is set
        if self.api_client.client_side_validation and (
                'equipment_fan' not in local_var_params or  # noqa: E501
                local_var_params['equipment_fan'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_fan` when calling `update_equipment_fan`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_fan' in local_var_params:
            body_params = local_var_params['equipment_fan']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/Fans/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentFan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_equipment_fan_module(self, moid, equipment_fan_module,
                                    **kwargs):  # noqa: E501
        """Update a 'equipment.FanModule' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_fan_module(moid, equipment_fan_module, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentFanModule equipment_fan_module: The 'equipment.FanModule' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentFanModule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_equipment_fan_module_with_http_info(
            moid, equipment_fan_module, **kwargs)  # noqa: E501

    def update_equipment_fan_module_with_http_info(self, moid,
                                                   equipment_fan_module,
                                                   **kwargs):  # noqa: E501
        """Update a 'equipment.FanModule' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_fan_module_with_http_info(moid, equipment_fan_module, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentFanModule equipment_fan_module: The 'equipment.FanModule' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentFanModule, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_fan_module']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method update_equipment_fan_module" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_equipment_fan_module`"
            )  # noqa: E501
        # verify the required parameter 'equipment_fan_module' is set
        if self.api_client.client_side_validation and (
                'equipment_fan_module' not in local_var_params or  # noqa: E501
                local_var_params['equipment_fan_module'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_fan_module` when calling `update_equipment_fan_module`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_fan_module' in local_var_params:
            body_params = local_var_params['equipment_fan_module']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/FanModules/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentFanModule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_equipment_fex(self, moid, equipment_fex,
                             **kwargs):  # noqa: E501
        """Update a 'equipment.Fex' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_fex(moid, equipment_fex, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentFex equipment_fex: The 'equipment.Fex' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentFex
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_equipment_fex_with_http_info(
            moid, equipment_fex, **kwargs)  # noqa: E501

    def update_equipment_fex_with_http_info(self, moid, equipment_fex,
                                            **kwargs):  # noqa: E501
        """Update a 'equipment.Fex' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_fex_with_http_info(moid, equipment_fex, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentFex equipment_fex: The 'equipment.Fex' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentFex, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_fex']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method update_equipment_fex" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_equipment_fex`"
            )  # noqa: E501
        # verify the required parameter 'equipment_fex' is set
        if self.api_client.client_side_validation and (
                'equipment_fex' not in local_var_params or  # noqa: E501
                local_var_params['equipment_fex'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_fex` when calling `update_equipment_fex`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_fex' in local_var_params:
            body_params = local_var_params['equipment_fex']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/Fexes/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentFex',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_equipment_io_card(self, moid, equipment_io_card,
                                 **kwargs):  # noqa: E501
        """Update a 'equipment.IoCard' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_io_card(moid, equipment_io_card, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentIoCard equipment_io_card: The 'equipment.IoCard' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentIoCard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_equipment_io_card_with_http_info(
            moid, equipment_io_card, **kwargs)  # noqa: E501

    def update_equipment_io_card_with_http_info(self, moid, equipment_io_card,
                                                **kwargs):  # noqa: E501
        """Update a 'equipment.IoCard' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_io_card_with_http_info(moid, equipment_io_card, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentIoCard equipment_io_card: The 'equipment.IoCard' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentIoCard, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_io_card']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method update_equipment_io_card" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_equipment_io_card`"
            )  # noqa: E501
        # verify the required parameter 'equipment_io_card' is set
        if self.api_client.client_side_validation and (
                'equipment_io_card' not in local_var_params or  # noqa: E501
                local_var_params['equipment_io_card'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_io_card` when calling `update_equipment_io_card`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_io_card' in local_var_params:
            body_params = local_var_params['equipment_io_card']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/IoCards/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentIoCard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_equipment_io_expander(self, moid, equipment_io_expander,
                                     **kwargs):  # noqa: E501
        """Update a 'equipment.IoExpander' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_io_expander(moid, equipment_io_expander, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentIoExpander equipment_io_expander: The 'equipment.IoExpander' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentIoExpander
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_equipment_io_expander_with_http_info(
            moid, equipment_io_expander, **kwargs)  # noqa: E501

    def update_equipment_io_expander_with_http_info(self, moid,
                                                    equipment_io_expander,
                                                    **kwargs):  # noqa: E501
        """Update a 'equipment.IoExpander' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_io_expander_with_http_info(moid, equipment_io_expander, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentIoExpander equipment_io_expander: The 'equipment.IoExpander' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentIoExpander, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_io_expander']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method update_equipment_io_expander" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_equipment_io_expander`"
            )  # noqa: E501
        # verify the required parameter 'equipment_io_expander' is set
        if self.api_client.client_side_validation and (
                'equipment_io_expander' not in local_var_params
                or  # noqa: E501
                local_var_params['equipment_io_expander'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_io_expander` when calling `update_equipment_io_expander`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_io_expander' in local_var_params:
            body_params = local_var_params['equipment_io_expander']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/IoExpanders/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentIoExpander',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_equipment_locator_led(self, moid, equipment_locator_led,
                                     **kwargs):  # noqa: E501
        """Update a 'equipment.LocatorLed' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_locator_led(moid, equipment_locator_led, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentLocatorLed equipment_locator_led: The 'equipment.LocatorLed' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentLocatorLed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_equipment_locator_led_with_http_info(
            moid, equipment_locator_led, **kwargs)  # noqa: E501

    def update_equipment_locator_led_with_http_info(self, moid,
                                                    equipment_locator_led,
                                                    **kwargs):  # noqa: E501
        """Update a 'equipment.LocatorLed' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_locator_led_with_http_info(moid, equipment_locator_led, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentLocatorLed equipment_locator_led: The 'equipment.LocatorLed' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentLocatorLed, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_locator_led']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method update_equipment_locator_led" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_equipment_locator_led`"
            )  # noqa: E501
        # verify the required parameter 'equipment_locator_led' is set
        if self.api_client.client_side_validation and (
                'equipment_locator_led' not in local_var_params
                or  # noqa: E501
                local_var_params['equipment_locator_led'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_locator_led` when calling `update_equipment_locator_led`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_locator_led' in local_var_params:
            body_params = local_var_params['equipment_locator_led']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/LocatorLeds/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentLocatorLed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_equipment_psu(self, moid, equipment_psu,
                             **kwargs):  # noqa: E501
        """Update a 'equipment.Psu' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_psu(moid, equipment_psu, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentPsu equipment_psu: The 'equipment.Psu' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentPsu
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_equipment_psu_with_http_info(
            moid, equipment_psu, **kwargs)  # noqa: E501

    def update_equipment_psu_with_http_info(self, moid, equipment_psu,
                                            **kwargs):  # noqa: E501
        """Update a 'equipment.Psu' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_psu_with_http_info(moid, equipment_psu, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentPsu equipment_psu: The 'equipment.Psu' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentPsu, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_psu']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method update_equipment_psu" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_equipment_psu`"
            )  # noqa: E501
        # verify the required parameter 'equipment_psu' is set
        if self.api_client.client_side_validation and (
                'equipment_psu' not in local_var_params or  # noqa: E501
                local_var_params['equipment_psu'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_psu` when calling `update_equipment_psu`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_psu' in local_var_params:
            body_params = local_var_params['equipment_psu']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/Psus/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentPsu',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_equipment_rack_enclosure(self, moid, equipment_rack_enclosure,
                                        **kwargs):  # noqa: E501
        """Update a 'equipment.RackEnclosure' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_rack_enclosure(moid, equipment_rack_enclosure, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentRackEnclosure equipment_rack_enclosure: The 'equipment.RackEnclosure' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentRackEnclosure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_equipment_rack_enclosure_with_http_info(
            moid, equipment_rack_enclosure, **kwargs)  # noqa: E501

    def update_equipment_rack_enclosure_with_http_info(
            self, moid, equipment_rack_enclosure, **kwargs):  # noqa: E501
        """Update a 'equipment.RackEnclosure' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_rack_enclosure_with_http_info(moid, equipment_rack_enclosure, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentRackEnclosure equipment_rack_enclosure: The 'equipment.RackEnclosure' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentRackEnclosure, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_rack_enclosure']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_equipment_rack_enclosure" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_equipment_rack_enclosure`"
            )  # noqa: E501
        # verify the required parameter 'equipment_rack_enclosure' is set
        if self.api_client.client_side_validation and (
                'equipment_rack_enclosure' not in local_var_params
                or  # noqa: E501
                local_var_params['equipment_rack_enclosure'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_rack_enclosure` when calling `update_equipment_rack_enclosure`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_rack_enclosure' in local_var_params:
            body_params = local_var_params['equipment_rack_enclosure']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/RackEnclosures/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentRackEnclosure',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_equipment_rack_enclosure_slot(self, moid,
                                             equipment_rack_enclosure_slot,
                                             **kwargs):  # noqa: E501
        """Update a 'equipment.RackEnclosureSlot' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_rack_enclosure_slot(moid, equipment_rack_enclosure_slot, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentRackEnclosureSlot equipment_rack_enclosure_slot: The 'equipment.RackEnclosureSlot' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentRackEnclosureSlot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_equipment_rack_enclosure_slot_with_http_info(
            moid, equipment_rack_enclosure_slot, **kwargs)  # noqa: E501

    def update_equipment_rack_enclosure_slot_with_http_info(
            self, moid, equipment_rack_enclosure_slot, **kwargs):  # noqa: E501
        """Update a 'equipment.RackEnclosureSlot' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_rack_enclosure_slot_with_http_info(moid, equipment_rack_enclosure_slot, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentRackEnclosureSlot equipment_rack_enclosure_slot: The 'equipment.RackEnclosureSlot' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentRackEnclosureSlot, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_rack_enclosure_slot']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_equipment_rack_enclosure_slot" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_equipment_rack_enclosure_slot`"
            )  # noqa: E501
        # verify the required parameter 'equipment_rack_enclosure_slot' is set
        if self.api_client.client_side_validation and (
                'equipment_rack_enclosure_slot' not in local_var_params
                or  # noqa: E501
                local_var_params['equipment_rack_enclosure_slot'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_rack_enclosure_slot` when calling `update_equipment_rack_enclosure_slot`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_rack_enclosure_slot' in local_var_params:
            body_params = local_var_params['equipment_rack_enclosure_slot']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/RackEnclosureSlots/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentRackEnclosureSlot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_equipment_shared_io_module(self, moid,
                                          equipment_shared_io_module,
                                          **kwargs):  # noqa: E501
        """Update a 'equipment.SharedIoModule' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_shared_io_module(moid, equipment_shared_io_module, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentSharedIoModule equipment_shared_io_module: The 'equipment.SharedIoModule' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentSharedIoModule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_equipment_shared_io_module_with_http_info(
            moid, equipment_shared_io_module, **kwargs)  # noqa: E501

    def update_equipment_shared_io_module_with_http_info(
            self, moid, equipment_shared_io_module, **kwargs):  # noqa: E501
        """Update a 'equipment.SharedIoModule' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_shared_io_module_with_http_info(moid, equipment_shared_io_module, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentSharedIoModule equipment_shared_io_module: The 'equipment.SharedIoModule' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentSharedIoModule, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_shared_io_module']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_equipment_shared_io_module" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_equipment_shared_io_module`"
            )  # noqa: E501
        # verify the required parameter 'equipment_shared_io_module' is set
        if self.api_client.client_side_validation and (
                'equipment_shared_io_module' not in local_var_params
                or  # noqa: E501
                local_var_params['equipment_shared_io_module'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_shared_io_module` when calling `update_equipment_shared_io_module`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_shared_io_module' in local_var_params:
            body_params = local_var_params['equipment_shared_io_module']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/SharedIoModules/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentSharedIoModule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_equipment_switch_card(self, moid, equipment_switch_card,
                                     **kwargs):  # noqa: E501
        """Update a 'equipment.SwitchCard' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_switch_card(moid, equipment_switch_card, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentSwitchCard equipment_switch_card: The 'equipment.SwitchCard' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentSwitchCard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_equipment_switch_card_with_http_info(
            moid, equipment_switch_card, **kwargs)  # noqa: E501

    def update_equipment_switch_card_with_http_info(self, moid,
                                                    equipment_switch_card,
                                                    **kwargs):  # noqa: E501
        """Update a 'equipment.SwitchCard' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_switch_card_with_http_info(moid, equipment_switch_card, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentSwitchCard equipment_switch_card: The 'equipment.SwitchCard' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentSwitchCard, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_switch_card']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method update_equipment_switch_card" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_equipment_switch_card`"
            )  # noqa: E501
        # verify the required parameter 'equipment_switch_card' is set
        if self.api_client.client_side_validation and (
                'equipment_switch_card' not in local_var_params
                or  # noqa: E501
                local_var_params['equipment_switch_card'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_switch_card` when calling `update_equipment_switch_card`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_switch_card' in local_var_params:
            body_params = local_var_params['equipment_switch_card']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/SwitchCards/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentSwitchCard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_equipment_system_io_controller(self, moid,
                                              equipment_system_io_controller,
                                              **kwargs):  # noqa: E501
        """Update a 'equipment.SystemIoController' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_system_io_controller(moid, equipment_system_io_controller, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentSystemIoController equipment_system_io_controller: The 'equipment.SystemIoController' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentSystemIoController
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_equipment_system_io_controller_with_http_info(
            moid, equipment_system_io_controller, **kwargs)  # noqa: E501

    def update_equipment_system_io_controller_with_http_info(
            self, moid, equipment_system_io_controller,
            **kwargs):  # noqa: E501
        """Update a 'equipment.SystemIoController' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_system_io_controller_with_http_info(moid, equipment_system_io_controller, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentSystemIoController equipment_system_io_controller: The 'equipment.SystemIoController' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentSystemIoController, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_system_io_controller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_equipment_system_io_controller" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_equipment_system_io_controller`"
            )  # noqa: E501
        # verify the required parameter 'equipment_system_io_controller' is set
        if self.api_client.client_side_validation and (
                'equipment_system_io_controller' not in local_var_params
                or  # noqa: E501
                local_var_params['equipment_system_io_controller'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_system_io_controller` when calling `update_equipment_system_io_controller`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_system_io_controller' in local_var_params:
            body_params = local_var_params['equipment_system_io_controller']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/SystemIoControllers/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentSystemIoController',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_equipment_tpm(self, moid, equipment_tpm,
                             **kwargs):  # noqa: E501
        """Update a 'equipment.Tpm' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_tpm(moid, equipment_tpm, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentTpm equipment_tpm: The 'equipment.Tpm' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EquipmentTpm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_equipment_tpm_with_http_info(
            moid, equipment_tpm, **kwargs)  # noqa: E501

    def update_equipment_tpm_with_http_info(self, moid, equipment_tpm,
                                            **kwargs):  # noqa: E501
        """Update a 'equipment.Tpm' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_tpm_with_http_info(moid, equipment_tpm, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param EquipmentTpm equipment_tpm: The 'equipment.Tpm' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EquipmentTpm, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'equipment_tpm']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method update_equipment_tpm" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_equipment_tpm`"
            )  # noqa: E501
        # verify the required parameter 'equipment_tpm' is set
        if self.api_client.client_side_validation and (
                'equipment_tpm' not in local_var_params or  # noqa: E501
                local_var_params['equipment_tpm'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `equipment_tpm` when calling `update_equipment_tpm`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'equipment_tpm' in local_var_params:
            body_params = local_var_params['equipment_tpm']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/equipment/Tpms/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentTpm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
