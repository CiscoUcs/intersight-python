# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from intersight.api_client import ApiClient
from intersight.exceptions import (ApiTypeError, ApiValueError)


class TamApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_tam_advisory_count(self, tam_advisory_count,
                                  **kwargs):  # noqa: E501
        """Create a 'tam.AdvisoryCount' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_tam_advisory_count(tam_advisory_count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param TamAdvisoryCount tam_advisory_count: The 'tam.AdvisoryCount' resource to create. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TamAdvisoryCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_tam_advisory_count_with_http_info(
            tam_advisory_count, **kwargs)  # noqa: E501

    def create_tam_advisory_count_with_http_info(self, tam_advisory_count,
                                                 **kwargs):  # noqa: E501
        """Create a 'tam.AdvisoryCount' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_tam_advisory_count_with_http_info(tam_advisory_count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param TamAdvisoryCount tam_advisory_count: The 'tam.AdvisoryCount' resource to create. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TamAdvisoryCount, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['tam_advisory_count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method create_tam_advisory_count" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tam_advisory_count' is set
        if self.api_client.client_side_validation and (
                'tam_advisory_count' not in local_var_params or  # noqa: E501
                local_var_params['tam_advisory_count'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `tam_advisory_count` when calling `create_tam_advisory_count`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tam_advisory_count' in local_var_params:
            body_params = local_var_params['tam_advisory_count']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/AdvisoryCounts',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TamAdvisoryCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_tam_advisory_info(self, tam_advisory_info,
                                 **kwargs):  # noqa: E501
        """Create a 'tam.AdvisoryInfo' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_tam_advisory_info(tam_advisory_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param TamAdvisoryInfo tam_advisory_info: The 'tam.AdvisoryInfo' resource to create. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TamAdvisoryInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_tam_advisory_info_with_http_info(
            tam_advisory_info, **kwargs)  # noqa: E501

    def create_tam_advisory_info_with_http_info(self, tam_advisory_info,
                                                **kwargs):  # noqa: E501
        """Create a 'tam.AdvisoryInfo' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_tam_advisory_info_with_http_info(tam_advisory_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param TamAdvisoryInfo tam_advisory_info: The 'tam.AdvisoryInfo' resource to create. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TamAdvisoryInfo, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['tam_advisory_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method create_tam_advisory_info" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tam_advisory_info' is set
        if self.api_client.client_side_validation and (
                'tam_advisory_info' not in local_var_params or  # noqa: E501
                local_var_params['tam_advisory_info'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `tam_advisory_info` when calling `create_tam_advisory_info`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tam_advisory_info' in local_var_params:
            body_params = local_var_params['tam_advisory_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/AdvisoryInfos',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TamAdvisoryInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_tam_advisory_instance(self, tam_advisory_instance,
                                     **kwargs):  # noqa: E501
        """Create a 'tam.AdvisoryInstance' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_tam_advisory_instance(tam_advisory_instance, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param TamAdvisoryInstance tam_advisory_instance: The 'tam.AdvisoryInstance' resource to create. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TamAdvisoryInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_tam_advisory_instance_with_http_info(
            tam_advisory_instance, **kwargs)  # noqa: E501

    def create_tam_advisory_instance_with_http_info(self,
                                                    tam_advisory_instance,
                                                    **kwargs):  # noqa: E501
        """Create a 'tam.AdvisoryInstance' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_tam_advisory_instance_with_http_info(tam_advisory_instance, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param TamAdvisoryInstance tam_advisory_instance: The 'tam.AdvisoryInstance' resource to create. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TamAdvisoryInstance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['tam_advisory_instance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method create_tam_advisory_instance" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tam_advisory_instance' is set
        if self.api_client.client_side_validation and (
                'tam_advisory_instance' not in local_var_params
                or  # noqa: E501
                local_var_params['tam_advisory_instance'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `tam_advisory_instance` when calling `create_tam_advisory_instance`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tam_advisory_instance' in local_var_params:
            body_params = local_var_params['tam_advisory_instance']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/AdvisoryInstances',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TamAdvisoryInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_tam_security_advisory(self, tam_security_advisory,
                                     **kwargs):  # noqa: E501
        """Create a 'tam.SecurityAdvisory' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_tam_security_advisory(tam_security_advisory, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param TamSecurityAdvisory tam_security_advisory: The 'tam.SecurityAdvisory' resource to create. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TamSecurityAdvisory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_tam_security_advisory_with_http_info(
            tam_security_advisory, **kwargs)  # noqa: E501

    def create_tam_security_advisory_with_http_info(self,
                                                    tam_security_advisory,
                                                    **kwargs):  # noqa: E501
        """Create a 'tam.SecurityAdvisory' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_tam_security_advisory_with_http_info(tam_security_advisory, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param TamSecurityAdvisory tam_security_advisory: The 'tam.SecurityAdvisory' resource to create. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TamSecurityAdvisory, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['tam_security_advisory']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method create_tam_security_advisory" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tam_security_advisory' is set
        if self.api_client.client_side_validation and (
                'tam_security_advisory' not in local_var_params
                or  # noqa: E501
                local_var_params['tam_security_advisory'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `tam_security_advisory` when calling `create_tam_security_advisory`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tam_security_advisory' in local_var_params:
            body_params = local_var_params['tam_security_advisory']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/SecurityAdvisories',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TamSecurityAdvisory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_tam_advisory_count(self, moid, **kwargs):  # noqa: E501
        """Delete a 'tam.AdvisoryCount' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tam_advisory_count(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_tam_advisory_count_with_http_info(
            moid, **kwargs)  # noqa: E501

    def delete_tam_advisory_count_with_http_info(self, moid,
                                                 **kwargs):  # noqa: E501
        """Delete a 'tam.AdvisoryCount' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tam_advisory_count_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method delete_tam_advisory_count" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `delete_tam_advisory_count`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/AdvisoryCounts/{Moid}',
            'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_tam_advisory_info(self, moid, **kwargs):  # noqa: E501
        """Delete a 'tam.AdvisoryInfo' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tam_advisory_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_tam_advisory_info_with_http_info(
            moid, **kwargs)  # noqa: E501

    def delete_tam_advisory_info_with_http_info(self, moid,
                                                **kwargs):  # noqa: E501
        """Delete a 'tam.AdvisoryInfo' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tam_advisory_info_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method delete_tam_advisory_info" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `delete_tam_advisory_info`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/AdvisoryInfos/{Moid}',
            'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_tam_advisory_instance(self, moid, **kwargs):  # noqa: E501
        """Delete a 'tam.AdvisoryInstance' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tam_advisory_instance(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_tam_advisory_instance_with_http_info(
            moid, **kwargs)  # noqa: E501

    def delete_tam_advisory_instance_with_http_info(self, moid,
                                                    **kwargs):  # noqa: E501
        """Delete a 'tam.AdvisoryInstance' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tam_advisory_instance_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method delete_tam_advisory_instance" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `delete_tam_advisory_instance`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/AdvisoryInstances/{Moid}',
            'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_tam_security_advisory(self, moid, **kwargs):  # noqa: E501
        """Delete a 'tam.SecurityAdvisory' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tam_security_advisory(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_tam_security_advisory_with_http_info(
            moid, **kwargs)  # noqa: E501

    def delete_tam_security_advisory_with_http_info(self, moid,
                                                    **kwargs):  # noqa: E501
        """Delete a 'tam.SecurityAdvisory' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tam_security_advisory_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method delete_tam_security_advisory" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `delete_tam_security_advisory`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/SecurityAdvisories/{Moid}',
            'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tam_advisory_count_by_moid(self, moid, **kwargs):  # noqa: E501
        """Read a 'tam.AdvisoryCount' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tam_advisory_count_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TamAdvisoryCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_tam_advisory_count_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_tam_advisory_count_by_moid_with_http_info(self, moid,
                                                      **kwargs):  # noqa: E501
        """Read a 'tam.AdvisoryCount' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tam_advisory_count_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TamAdvisoryCount, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tam_advisory_count_by_moid" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_tam_advisory_count_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/AdvisoryCounts/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TamAdvisoryCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tam_advisory_count_list(self, **kwargs):  # noqa: E501
        """Read a 'tam.AdvisoryCount' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tam_advisory_count_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TamAdvisoryCountList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_tam_advisory_count_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_tam_advisory_count_list_with_http_info(self,
                                                   **kwargs):  # noqa: E501
        """Read a 'tam.AdvisoryCount' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tam_advisory_count_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TamAdvisoryCountList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_tam_advisory_count_list" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/AdvisoryCounts',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TamAdvisoryCountList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tam_advisory_info_by_moid(self, moid, **kwargs):  # noqa: E501
        """Read a 'tam.AdvisoryInfo' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tam_advisory_info_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TamAdvisoryInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_tam_advisory_info_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_tam_advisory_info_by_moid_with_http_info(self, moid,
                                                     **kwargs):  # noqa: E501
        """Read a 'tam.AdvisoryInfo' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tam_advisory_info_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TamAdvisoryInfo, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_tam_advisory_info_by_moid" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_tam_advisory_info_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/AdvisoryInfos/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TamAdvisoryInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tam_advisory_info_list(self, **kwargs):  # noqa: E501
        """Read a 'tam.AdvisoryInfo' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tam_advisory_info_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TamAdvisoryInfoList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_tam_advisory_info_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_tam_advisory_info_list_with_http_info(self,
                                                  **kwargs):  # noqa: E501
        """Read a 'tam.AdvisoryInfo' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tam_advisory_info_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TamAdvisoryInfoList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_tam_advisory_info_list" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/AdvisoryInfos',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TamAdvisoryInfoList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tam_advisory_instance_by_moid(self, moid, **kwargs):  # noqa: E501
        """Read a 'tam.AdvisoryInstance' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tam_advisory_instance_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TamAdvisoryInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_tam_advisory_instance_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_tam_advisory_instance_by_moid_with_http_info(
            self, moid, **kwargs):  # noqa: E501
        """Read a 'tam.AdvisoryInstance' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tam_advisory_instance_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TamAdvisoryInstance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tam_advisory_instance_by_moid" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_tam_advisory_instance_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/AdvisoryInstances/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TamAdvisoryInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tam_advisory_instance_list(self, **kwargs):  # noqa: E501
        """Read a 'tam.AdvisoryInstance' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tam_advisory_instance_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TamAdvisoryInstanceList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_tam_advisory_instance_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_tam_advisory_instance_list_with_http_info(self,
                                                      **kwargs):  # noqa: E501
        """Read a 'tam.AdvisoryInstance' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tam_advisory_instance_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TamAdvisoryInstanceList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tam_advisory_instance_list" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/AdvisoryInstances',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TamAdvisoryInstanceList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tam_security_advisory_by_moid(self, moid, **kwargs):  # noqa: E501
        """Read a 'tam.SecurityAdvisory' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tam_security_advisory_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TamSecurityAdvisory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_tam_security_advisory_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_tam_security_advisory_by_moid_with_http_info(
            self, moid, **kwargs):  # noqa: E501
        """Read a 'tam.SecurityAdvisory' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tam_security_advisory_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TamSecurityAdvisory, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tam_security_advisory_by_moid" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_tam_security_advisory_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/SecurityAdvisories/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TamSecurityAdvisory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tam_security_advisory_list(self, **kwargs):  # noqa: E501
        """Read a 'tam.SecurityAdvisory' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tam_security_advisory_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TamSecurityAdvisoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_tam_security_advisory_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_tam_security_advisory_list_with_http_info(self,
                                                      **kwargs):  # noqa: E501
        """Read a 'tam.SecurityAdvisory' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tam_security_advisory_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TamSecurityAdvisoryList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tam_security_advisory_list" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/SecurityAdvisories',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TamSecurityAdvisoryList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_tam_advisory_count(self, moid, tam_advisory_count,
                                 **kwargs):  # noqa: E501
        """Update a 'tam.AdvisoryCount' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_tam_advisory_count(moid, tam_advisory_count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param TamAdvisoryCount tam_advisory_count: The 'tam.AdvisoryCount' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TamAdvisoryCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_tam_advisory_count_with_http_info(
            moid, tam_advisory_count, **kwargs)  # noqa: E501

    def patch_tam_advisory_count_with_http_info(self, moid, tam_advisory_count,
                                                **kwargs):  # noqa: E501
        """Update a 'tam.AdvisoryCount' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_tam_advisory_count_with_http_info(moid, tam_advisory_count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param TamAdvisoryCount tam_advisory_count: The 'tam.AdvisoryCount' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TamAdvisoryCount, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'tam_advisory_count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method patch_tam_advisory_count" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_tam_advisory_count`"
            )  # noqa: E501
        # verify the required parameter 'tam_advisory_count' is set
        if self.api_client.client_side_validation and (
                'tam_advisory_count' not in local_var_params or  # noqa: E501
                local_var_params['tam_advisory_count'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `tam_advisory_count` when calling `patch_tam_advisory_count`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tam_advisory_count' in local_var_params:
            body_params = local_var_params['tam_advisory_count']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/AdvisoryCounts/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TamAdvisoryCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_tam_advisory_info(self, moid, tam_advisory_info,
                                **kwargs):  # noqa: E501
        """Update a 'tam.AdvisoryInfo' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_tam_advisory_info(moid, tam_advisory_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param TamAdvisoryInfo tam_advisory_info: The 'tam.AdvisoryInfo' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TamAdvisoryInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_tam_advisory_info_with_http_info(
            moid, tam_advisory_info, **kwargs)  # noqa: E501

    def patch_tam_advisory_info_with_http_info(self, moid, tam_advisory_info,
                                               **kwargs):  # noqa: E501
        """Update a 'tam.AdvisoryInfo' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_tam_advisory_info_with_http_info(moid, tam_advisory_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param TamAdvisoryInfo tam_advisory_info: The 'tam.AdvisoryInfo' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TamAdvisoryInfo, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'tam_advisory_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method patch_tam_advisory_info" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_tam_advisory_info`"
            )  # noqa: E501
        # verify the required parameter 'tam_advisory_info' is set
        if self.api_client.client_side_validation and (
                'tam_advisory_info' not in local_var_params or  # noqa: E501
                local_var_params['tam_advisory_info'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `tam_advisory_info` when calling `patch_tam_advisory_info`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tam_advisory_info' in local_var_params:
            body_params = local_var_params['tam_advisory_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/AdvisoryInfos/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TamAdvisoryInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_tam_advisory_instance(self, moid, tam_advisory_instance,
                                    **kwargs):  # noqa: E501
        """Update a 'tam.AdvisoryInstance' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_tam_advisory_instance(moid, tam_advisory_instance, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param TamAdvisoryInstance tam_advisory_instance: The 'tam.AdvisoryInstance' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TamAdvisoryInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_tam_advisory_instance_with_http_info(
            moid, tam_advisory_instance, **kwargs)  # noqa: E501

    def patch_tam_advisory_instance_with_http_info(self, moid,
                                                   tam_advisory_instance,
                                                   **kwargs):  # noqa: E501
        """Update a 'tam.AdvisoryInstance' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_tam_advisory_instance_with_http_info(moid, tam_advisory_instance, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param TamAdvisoryInstance tam_advisory_instance: The 'tam.AdvisoryInstance' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TamAdvisoryInstance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'tam_advisory_instance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method patch_tam_advisory_instance" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_tam_advisory_instance`"
            )  # noqa: E501
        # verify the required parameter 'tam_advisory_instance' is set
        if self.api_client.client_side_validation and (
                'tam_advisory_instance' not in local_var_params
                or  # noqa: E501
                local_var_params['tam_advisory_instance'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `tam_advisory_instance` when calling `patch_tam_advisory_instance`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tam_advisory_instance' in local_var_params:
            body_params = local_var_params['tam_advisory_instance']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/AdvisoryInstances/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TamAdvisoryInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_tam_security_advisory(self, moid, tam_security_advisory,
                                    **kwargs):  # noqa: E501
        """Update a 'tam.SecurityAdvisory' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_tam_security_advisory(moid, tam_security_advisory, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param TamSecurityAdvisory tam_security_advisory: The 'tam.SecurityAdvisory' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TamSecurityAdvisory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_tam_security_advisory_with_http_info(
            moid, tam_security_advisory, **kwargs)  # noqa: E501

    def patch_tam_security_advisory_with_http_info(self, moid,
                                                   tam_security_advisory,
                                                   **kwargs):  # noqa: E501
        """Update a 'tam.SecurityAdvisory' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_tam_security_advisory_with_http_info(moid, tam_security_advisory, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param TamSecurityAdvisory tam_security_advisory: The 'tam.SecurityAdvisory' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TamSecurityAdvisory, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'tam_security_advisory']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method patch_tam_security_advisory" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_tam_security_advisory`"
            )  # noqa: E501
        # verify the required parameter 'tam_security_advisory' is set
        if self.api_client.client_side_validation and (
                'tam_security_advisory' not in local_var_params
                or  # noqa: E501
                local_var_params['tam_security_advisory'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `tam_security_advisory` when calling `patch_tam_security_advisory`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tam_security_advisory' in local_var_params:
            body_params = local_var_params['tam_security_advisory']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/SecurityAdvisories/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TamSecurityAdvisory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_tam_advisory_count(self, moid, tam_advisory_count,
                                  **kwargs):  # noqa: E501
        """Update a 'tam.AdvisoryCount' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tam_advisory_count(moid, tam_advisory_count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param TamAdvisoryCount tam_advisory_count: The 'tam.AdvisoryCount' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TamAdvisoryCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_tam_advisory_count_with_http_info(
            moid, tam_advisory_count, **kwargs)  # noqa: E501

    def update_tam_advisory_count_with_http_info(self, moid,
                                                 tam_advisory_count,
                                                 **kwargs):  # noqa: E501
        """Update a 'tam.AdvisoryCount' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tam_advisory_count_with_http_info(moid, tam_advisory_count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param TamAdvisoryCount tam_advisory_count: The 'tam.AdvisoryCount' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TamAdvisoryCount, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'tam_advisory_count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method update_tam_advisory_count" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_tam_advisory_count`"
            )  # noqa: E501
        # verify the required parameter 'tam_advisory_count' is set
        if self.api_client.client_side_validation and (
                'tam_advisory_count' not in local_var_params or  # noqa: E501
                local_var_params['tam_advisory_count'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `tam_advisory_count` when calling `update_tam_advisory_count`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tam_advisory_count' in local_var_params:
            body_params = local_var_params['tam_advisory_count']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/AdvisoryCounts/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TamAdvisoryCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_tam_advisory_info(self, moid, tam_advisory_info,
                                 **kwargs):  # noqa: E501
        """Update a 'tam.AdvisoryInfo' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tam_advisory_info(moid, tam_advisory_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param TamAdvisoryInfo tam_advisory_info: The 'tam.AdvisoryInfo' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TamAdvisoryInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_tam_advisory_info_with_http_info(
            moid, tam_advisory_info, **kwargs)  # noqa: E501

    def update_tam_advisory_info_with_http_info(self, moid, tam_advisory_info,
                                                **kwargs):  # noqa: E501
        """Update a 'tam.AdvisoryInfo' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tam_advisory_info_with_http_info(moid, tam_advisory_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param TamAdvisoryInfo tam_advisory_info: The 'tam.AdvisoryInfo' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TamAdvisoryInfo, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'tam_advisory_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method update_tam_advisory_info" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_tam_advisory_info`"
            )  # noqa: E501
        # verify the required parameter 'tam_advisory_info' is set
        if self.api_client.client_side_validation and (
                'tam_advisory_info' not in local_var_params or  # noqa: E501
                local_var_params['tam_advisory_info'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `tam_advisory_info` when calling `update_tam_advisory_info`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tam_advisory_info' in local_var_params:
            body_params = local_var_params['tam_advisory_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/AdvisoryInfos/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TamAdvisoryInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_tam_advisory_instance(self, moid, tam_advisory_instance,
                                     **kwargs):  # noqa: E501
        """Update a 'tam.AdvisoryInstance' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tam_advisory_instance(moid, tam_advisory_instance, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param TamAdvisoryInstance tam_advisory_instance: The 'tam.AdvisoryInstance' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TamAdvisoryInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_tam_advisory_instance_with_http_info(
            moid, tam_advisory_instance, **kwargs)  # noqa: E501

    def update_tam_advisory_instance_with_http_info(self, moid,
                                                    tam_advisory_instance,
                                                    **kwargs):  # noqa: E501
        """Update a 'tam.AdvisoryInstance' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tam_advisory_instance_with_http_info(moid, tam_advisory_instance, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param TamAdvisoryInstance tam_advisory_instance: The 'tam.AdvisoryInstance' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TamAdvisoryInstance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'tam_advisory_instance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method update_tam_advisory_instance" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_tam_advisory_instance`"
            )  # noqa: E501
        # verify the required parameter 'tam_advisory_instance' is set
        if self.api_client.client_side_validation and (
                'tam_advisory_instance' not in local_var_params
                or  # noqa: E501
                local_var_params['tam_advisory_instance'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `tam_advisory_instance` when calling `update_tam_advisory_instance`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tam_advisory_instance' in local_var_params:
            body_params = local_var_params['tam_advisory_instance']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/AdvisoryInstances/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TamAdvisoryInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_tam_security_advisory(self, moid, tam_security_advisory,
                                     **kwargs):  # noqa: E501
        """Update a 'tam.SecurityAdvisory' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tam_security_advisory(moid, tam_security_advisory, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param TamSecurityAdvisory tam_security_advisory: The 'tam.SecurityAdvisory' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TamSecurityAdvisory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_tam_security_advisory_with_http_info(
            moid, tam_security_advisory, **kwargs)  # noqa: E501

    def update_tam_security_advisory_with_http_info(self, moid,
                                                    tam_security_advisory,
                                                    **kwargs):  # noqa: E501
        """Update a 'tam.SecurityAdvisory' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tam_security_advisory_with_http_info(moid, tam_security_advisory, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param TamSecurityAdvisory tam_security_advisory: The 'tam.SecurityAdvisory' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TamSecurityAdvisory, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'tam_security_advisory']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method update_tam_security_advisory" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_tam_security_advisory`"
            )  # noqa: E501
        # verify the required parameter 'tam_security_advisory' is set
        if self.api_client.client_side_validation and (
                'tam_security_advisory' not in local_var_params
                or  # noqa: E501
                local_var_params['tam_security_advisory'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `tam_security_advisory` when calling `update_tam_security_advisory`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tam_security_advisory' in local_var_params:
            body_params = local_var_params['tam_security_advisory']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/tam/SecurityAdvisories/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TamSecurityAdvisory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
