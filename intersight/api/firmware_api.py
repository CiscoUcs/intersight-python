# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from intersight.api_client import ApiClient
from intersight.exceptions import (ApiTypeError, ApiValueError)


class FirmwareApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_firmware_distributable(self, firmware_distributable,
                                      **kwargs):  # noqa: E501
        """Create a 'firmware.Distributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_firmware_distributable(firmware_distributable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param FirmwareDistributable firmware_distributable: The 'firmware.Distributable' resource to create. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareDistributable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_firmware_distributable_with_http_info(
            firmware_distributable, **kwargs)  # noqa: E501

    def create_firmware_distributable_with_http_info(self,
                                                     firmware_distributable,
                                                     **kwargs):  # noqa: E501
        """Create a 'firmware.Distributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_firmware_distributable_with_http_info(firmware_distributable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param FirmwareDistributable firmware_distributable: The 'firmware.Distributable' resource to create. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareDistributable, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['firmware_distributable']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method create_firmware_distributable" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'firmware_distributable' is set
        if self.api_client.client_side_validation and (
                'firmware_distributable' not in local_var_params
                or  # noqa: E501
                local_var_params['firmware_distributable'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `firmware_distributable` when calling `create_firmware_distributable`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'firmware_distributable' in local_var_params:
            body_params = local_var_params['firmware_distributable']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/Distributables',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareDistributable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_firmware_driver_distributable(self,
                                             firmware_driver_distributable,
                                             **kwargs):  # noqa: E501
        """Create a 'firmware.DriverDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_firmware_driver_distributable(firmware_driver_distributable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param FirmwareDriverDistributable firmware_driver_distributable: The 'firmware.DriverDistributable' resource to create. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareDriverDistributable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_firmware_driver_distributable_with_http_info(
            firmware_driver_distributable, **kwargs)  # noqa: E501

    def create_firmware_driver_distributable_with_http_info(
            self, firmware_driver_distributable, **kwargs):  # noqa: E501
        """Create a 'firmware.DriverDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_firmware_driver_distributable_with_http_info(firmware_driver_distributable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param FirmwareDriverDistributable firmware_driver_distributable: The 'firmware.DriverDistributable' resource to create. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareDriverDistributable, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['firmware_driver_distributable']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_firmware_driver_distributable" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'firmware_driver_distributable' is set
        if self.api_client.client_side_validation and (
                'firmware_driver_distributable' not in local_var_params
                or  # noqa: E501
                local_var_params['firmware_driver_distributable'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `firmware_driver_distributable` when calling `create_firmware_driver_distributable`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'firmware_driver_distributable' in local_var_params:
            body_params = local_var_params['firmware_driver_distributable']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/DriverDistributables',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareDriverDistributable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_firmware_eula(self, firmware_eula, **kwargs):  # noqa: E501
        """Create a 'firmware.Eula' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_firmware_eula(firmware_eula, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param FirmwareEula firmware_eula: The 'firmware.Eula' resource to create. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareEula
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_firmware_eula_with_http_info(
            firmware_eula, **kwargs)  # noqa: E501

    def create_firmware_eula_with_http_info(self, firmware_eula,
                                            **kwargs):  # noqa: E501
        """Create a 'firmware.Eula' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_firmware_eula_with_http_info(firmware_eula, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param FirmwareEula firmware_eula: The 'firmware.Eula' resource to create. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareEula, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['firmware_eula']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method create_firmware_eula" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'firmware_eula' is set
        if self.api_client.client_side_validation and (
                'firmware_eula' not in local_var_params or  # noqa: E501
                local_var_params['firmware_eula'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `firmware_eula` when calling `create_firmware_eula`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'firmware_eula' in local_var_params:
            body_params = local_var_params['firmware_eula']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/Eulas',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareEula',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_firmware_server_configuration_utility_distributable(
            self, firmware_server_configuration_utility_distributable,
            **kwargs):  # noqa: E501
        """Create a 'firmware.ServerConfigurationUtilityDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_firmware_server_configuration_utility_distributable(firmware_server_configuration_utility_distributable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param FirmwareServerConfigurationUtilityDistributable firmware_server_configuration_utility_distributable: The 'firmware.ServerConfigurationUtilityDistributable' resource to create. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareServerConfigurationUtilityDistributable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_firmware_server_configuration_utility_distributable_with_http_info(
            firmware_server_configuration_utility_distributable,
            **kwargs)  # noqa: E501

    def create_firmware_server_configuration_utility_distributable_with_http_info(
            self, firmware_server_configuration_utility_distributable,
            **kwargs):  # noqa: E501
        """Create a 'firmware.ServerConfigurationUtilityDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_firmware_server_configuration_utility_distributable_with_http_info(firmware_server_configuration_utility_distributable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param FirmwareServerConfigurationUtilityDistributable firmware_server_configuration_utility_distributable: The 'firmware.ServerConfigurationUtilityDistributable' resource to create. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareServerConfigurationUtilityDistributable, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['firmware_server_configuration_utility_distributable'
                      ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_firmware_server_configuration_utility_distributable"
                    % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'firmware_server_configuration_utility_distributable' is set
        if self.api_client.client_side_validation and (
                'firmware_server_configuration_utility_distributable' not in
                local_var_params or  # noqa: E501
                local_var_params[
                    'firmware_server_configuration_utility_distributable'] is
                None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `firmware_server_configuration_utility_distributable` when calling `create_firmware_server_configuration_utility_distributable`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'firmware_server_configuration_utility_distributable' in local_var_params:
            body_params = local_var_params[
                'firmware_server_configuration_utility_distributable']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/ServerConfigurationUtilityDistributables',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=
            'FirmwareServerConfigurationUtilityDistributable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_firmware_upgrade(self, firmware_upgrade,
                                **kwargs):  # noqa: E501
        """Create a 'firmware.Upgrade' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_firmware_upgrade(firmware_upgrade, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param FirmwareUpgrade firmware_upgrade: The 'firmware.Upgrade' resource to create. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareUpgrade
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_firmware_upgrade_with_http_info(
            firmware_upgrade, **kwargs)  # noqa: E501

    def create_firmware_upgrade_with_http_info(self, firmware_upgrade,
                                               **kwargs):  # noqa: E501
        """Create a 'firmware.Upgrade' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_firmware_upgrade_with_http_info(firmware_upgrade, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param FirmwareUpgrade firmware_upgrade: The 'firmware.Upgrade' resource to create. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareUpgrade, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['firmware_upgrade']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method create_firmware_upgrade" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'firmware_upgrade' is set
        if self.api_client.client_side_validation and (
                'firmware_upgrade' not in local_var_params or  # noqa: E501
                local_var_params['firmware_upgrade'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `firmware_upgrade` when calling `create_firmware_upgrade`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'firmware_upgrade' in local_var_params:
            body_params = local_var_params['firmware_upgrade']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/Upgrades',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareUpgrade',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_firmware_distributable(self, moid, **kwargs):  # noqa: E501
        """Delete a 'firmware.Distributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_firmware_distributable(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_firmware_distributable_with_http_info(
            moid, **kwargs)  # noqa: E501

    def delete_firmware_distributable_with_http_info(self, moid,
                                                     **kwargs):  # noqa: E501
        """Delete a 'firmware.Distributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_firmware_distributable_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method delete_firmware_distributable" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `delete_firmware_distributable`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/Distributables/{Moid}',
            'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_firmware_driver_distributable(self, moid,
                                             **kwargs):  # noqa: E501
        """Delete a 'firmware.DriverDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_firmware_driver_distributable(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_firmware_driver_distributable_with_http_info(
            moid, **kwargs)  # noqa: E501

    def delete_firmware_driver_distributable_with_http_info(
            self, moid, **kwargs):  # noqa: E501
        """Delete a 'firmware.DriverDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_firmware_driver_distributable_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_firmware_driver_distributable" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `delete_firmware_driver_distributable`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/DriverDistributables/{Moid}',
            'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_firmware_server_configuration_utility_distributable(
            self, moid, **kwargs):  # noqa: E501
        """Delete a 'firmware.ServerConfigurationUtilityDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_firmware_server_configuration_utility_distributable(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_firmware_server_configuration_utility_distributable_with_http_info(
            moid, **kwargs)  # noqa: E501

    def delete_firmware_server_configuration_utility_distributable_with_http_info(
            self, moid, **kwargs):  # noqa: E501
        """Delete a 'firmware.ServerConfigurationUtilityDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_firmware_server_configuration_utility_distributable_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_firmware_server_configuration_utility_distributable"
                    % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `delete_firmware_server_configuration_utility_distributable`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/ServerConfigurationUtilityDistributables/{Moid}',
            'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_firmware_upgrade(self, moid, **kwargs):  # noqa: E501
        """Delete a 'firmware.Upgrade' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_firmware_upgrade(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_firmware_upgrade_with_http_info(
            moid, **kwargs)  # noqa: E501

    def delete_firmware_upgrade_with_http_info(self, moid,
                                               **kwargs):  # noqa: E501
        """Delete a 'firmware.Upgrade' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_firmware_upgrade_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method delete_firmware_upgrade" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `delete_firmware_upgrade`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/Upgrades/{Moid}',
            'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_distributable_by_moid(self, moid, **kwargs):  # noqa: E501
        """Read a 'firmware.Distributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_distributable_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareDistributable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_firmware_distributable_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_firmware_distributable_by_moid_with_http_info(
            self, moid, **kwargs):  # noqa: E501
        """Read a 'firmware.Distributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_distributable_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareDistributable, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_firmware_distributable_by_moid" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_firmware_distributable_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/Distributables/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareDistributable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_distributable_list(self, **kwargs):  # noqa: E501
        """Read a 'firmware.Distributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_distributable_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareDistributableList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_firmware_distributable_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_firmware_distributable_list_with_http_info(self,
                                                       **kwargs):  # noqa: E501
        """Read a 'firmware.Distributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_distributable_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareDistributableList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_firmware_distributable_list" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/Distributables',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareDistributableList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_driver_distributable_by_moid(self, moid,
                                                  **kwargs):  # noqa: E501
        """Read a 'firmware.DriverDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_driver_distributable_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareDriverDistributable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_firmware_driver_distributable_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_firmware_driver_distributable_by_moid_with_http_info(
            self, moid, **kwargs):  # noqa: E501
        """Read a 'firmware.DriverDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_driver_distributable_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareDriverDistributable, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_firmware_driver_distributable_by_moid" %
                    key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_firmware_driver_distributable_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/DriverDistributables/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareDriverDistributable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_driver_distributable_list(self, **kwargs):  # noqa: E501
        """Read a 'firmware.DriverDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_driver_distributable_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareDriverDistributableList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_firmware_driver_distributable_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_firmware_driver_distributable_list_with_http_info(
            self, **kwargs):  # noqa: E501
        """Read a 'firmware.DriverDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_driver_distributable_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareDriverDistributableList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_firmware_driver_distributable_list" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/DriverDistributables',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareDriverDistributableList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_eula_by_moid(self, moid, **kwargs):  # noqa: E501
        """Read a 'firmware.Eula' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_eula_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareEula
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_firmware_eula_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_firmware_eula_by_moid_with_http_info(self, moid,
                                                 **kwargs):  # noqa: E501
        """Read a 'firmware.Eula' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_eula_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareEula, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_firmware_eula_by_moid" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_firmware_eula_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/Eulas/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareEula',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_eula_list(self, **kwargs):  # noqa: E501
        """Read a 'firmware.Eula' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_eula_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareEulaList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_firmware_eula_list_with_http_info(**
                                                          kwargs)  # noqa: E501

    def get_firmware_eula_list_with_http_info(self, **kwargs):  # noqa: E501
        """Read a 'firmware.Eula' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_eula_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareEulaList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_firmware_eula_list" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/Eulas',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareEulaList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_running_firmware_by_moid(self, moid,
                                              **kwargs):  # noqa: E501
        """Read a 'firmware.RunningFirmware' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_running_firmware_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareRunningFirmware
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_firmware_running_firmware_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_firmware_running_firmware_by_moid_with_http_info(
            self, moid, **kwargs):  # noqa: E501
        """Read a 'firmware.RunningFirmware' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_running_firmware_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareRunningFirmware, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_firmware_running_firmware_by_moid" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_firmware_running_firmware_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/RunningFirmwares/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareRunningFirmware',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_running_firmware_list(self, **kwargs):  # noqa: E501
        """Read a 'firmware.RunningFirmware' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_running_firmware_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareRunningFirmwareList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_firmware_running_firmware_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_firmware_running_firmware_list_with_http_info(
            self, **kwargs):  # noqa: E501
        """Read a 'firmware.RunningFirmware' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_running_firmware_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareRunningFirmwareList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_firmware_running_firmware_list" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/RunningFirmwares',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareRunningFirmwareList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_server_configuration_utility_distributable_by_moid(
            self, moid, **kwargs):  # noqa: E501
        """Read a 'firmware.ServerConfigurationUtilityDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_server_configuration_utility_distributable_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareServerConfigurationUtilityDistributable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_firmware_server_configuration_utility_distributable_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_firmware_server_configuration_utility_distributable_by_moid_with_http_info(
            self, moid, **kwargs):  # noqa: E501
        """Read a 'firmware.ServerConfigurationUtilityDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_server_configuration_utility_distributable_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareServerConfigurationUtilityDistributable, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_firmware_server_configuration_utility_distributable_by_moid"
                    % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_firmware_server_configuration_utility_distributable_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/ServerConfigurationUtilityDistributables/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=
            'FirmwareServerConfigurationUtilityDistributable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_server_configuration_utility_distributable_list(
            self, **kwargs):  # noqa: E501
        """Read a 'firmware.ServerConfigurationUtilityDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_server_configuration_utility_distributable_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareServerConfigurationUtilityDistributableList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_firmware_server_configuration_utility_distributable_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_firmware_server_configuration_utility_distributable_list_with_http_info(
            self, **kwargs):  # noqa: E501
        """Read a 'firmware.ServerConfigurationUtilityDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_server_configuration_utility_distributable_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareServerConfigurationUtilityDistributableList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_firmware_server_configuration_utility_distributable_list"
                    % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/ServerConfigurationUtilityDistributables',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=
            'FirmwareServerConfigurationUtilityDistributableList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_upgrade_by_moid(self, moid, **kwargs):  # noqa: E501
        """Read a 'firmware.Upgrade' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_upgrade_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareUpgrade
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_firmware_upgrade_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_firmware_upgrade_by_moid_with_http_info(self, moid,
                                                    **kwargs):  # noqa: E501
        """Read a 'firmware.Upgrade' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_upgrade_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareUpgrade, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_firmware_upgrade_by_moid" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_firmware_upgrade_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/Upgrades/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareUpgrade',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_upgrade_list(self, **kwargs):  # noqa: E501
        """Read a 'firmware.Upgrade' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_upgrade_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareUpgradeList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_firmware_upgrade_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_firmware_upgrade_list_with_http_info(self, **kwargs):  # noqa: E501
        """Read a 'firmware.Upgrade' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_upgrade_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareUpgradeList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_firmware_upgrade_list" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/Upgrades',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareUpgradeList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_upgrade_status_by_moid(self, moid,
                                            **kwargs):  # noqa: E501
        """Read a 'firmware.UpgradeStatus' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_upgrade_status_by_moid(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareUpgradeStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_firmware_upgrade_status_by_moid_with_http_info(
            moid, **kwargs)  # noqa: E501

    def get_firmware_upgrade_status_by_moid_with_http_info(
            self, moid, **kwargs):  # noqa: E501
        """Read a 'firmware.UpgradeStatus' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_upgrade_status_by_moid_with_http_info(moid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareUpgradeStatus, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_firmware_upgrade_status_by_moid" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `get_firmware_upgrade_status_by_moid`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/UpgradeStatuses/{Moid}',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareUpgradeStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_upgrade_status_list(self, **kwargs):  # noqa: E501
        """Read a 'firmware.UpgradeStatus' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_upgrade_status_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareUpgradeStatusList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_firmware_upgrade_status_list_with_http_info(
            **kwargs)  # noqa: E501

    def get_firmware_upgrade_status_list_with_http_info(
            self, **kwargs):  # noqa: E501
        """Read a 'firmware.UpgradeStatus' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_upgrade_status_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str filter: Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). 
        :param str orderby: Determines what properties are used to sort the collection of resources.
        :param int top: Specifies the maximum number of resources to return in the response.
        :param int skip: Specifies the number of resources to skip in the response.
        :param str select: Specifies a subset of properties to return.
        :param str expand: Specify additional attributes or related resources to return in addition to the primary resources.
        :param str apply: Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \"$apply\" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \"aggregate\" and \"groupby\". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set. 
        :param bool count: The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
        :param str inlinecount: The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
        :param str at: Similar to \"$filter\", but \"at\" is specifically used to filter versioning information properties for resources to return. A URI with an \"at\" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareUpgradeStatusList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'filter', 'orderby', 'top', 'skip', 'select', 'expand', 'apply',
            'count', 'inlinecount', 'at'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_firmware_upgrade_status_list" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in local_var_params and local_var_params[
                'filter'] is not None:  # noqa: E501
            query_params.append(
                ('$filter', local_var_params['filter']))  # noqa: E501
        if 'orderby' in local_var_params and local_var_params[
                'orderby'] is not None:  # noqa: E501
            query_params.append(
                ('$orderby', local_var_params['orderby']))  # noqa: E501
        if 'top' in local_var_params and local_var_params[
                'top'] is not None:  # noqa: E501
            query_params.append(
                ('$top', local_var_params['top']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('$skip', local_var_params['skip']))  # noqa: E501
        if 'select' in local_var_params and local_var_params[
                'select'] is not None:  # noqa: E501
            query_params.append(
                ('$select', local_var_params['select']))  # noqa: E501
        if 'expand' in local_var_params and local_var_params[
                'expand'] is not None:  # noqa: E501
            query_params.append(
                ('$expand', local_var_params['expand']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params[
                'apply'] is not None:  # noqa: E501
            query_params.append(
                ('$apply', local_var_params['apply']))  # noqa: E501
        if 'count' in local_var_params and local_var_params[
                'count'] is not None:  # noqa: E501
            query_params.append(
                ('$count', local_var_params['count']))  # noqa: E501
        if 'inlinecount' in local_var_params and local_var_params[
                'inlinecount'] is not None:  # noqa: E501
            query_params.append(
                ('$inlinecount',
                 local_var_params['inlinecount']))  # noqa: E501
        if 'at' in local_var_params and local_var_params[
                'at'] is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([
            'application/json', 'text/csv',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/UpgradeStatuses',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareUpgradeStatusList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_firmware_distributable(self, moid, firmware_distributable,
                                     **kwargs):  # noqa: E501
        """Update a 'firmware.Distributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_firmware_distributable(moid, firmware_distributable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param FirmwareDistributable firmware_distributable: The 'firmware.Distributable' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareDistributable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_firmware_distributable_with_http_info(
            moid, firmware_distributable, **kwargs)  # noqa: E501

    def patch_firmware_distributable_with_http_info(self, moid,
                                                    firmware_distributable,
                                                    **kwargs):  # noqa: E501
        """Update a 'firmware.Distributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_firmware_distributable_with_http_info(moid, firmware_distributable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param FirmwareDistributable firmware_distributable: The 'firmware.Distributable' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareDistributable, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'firmware_distributable']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method patch_firmware_distributable" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_firmware_distributable`"
            )  # noqa: E501
        # verify the required parameter 'firmware_distributable' is set
        if self.api_client.client_side_validation and (
                'firmware_distributable' not in local_var_params
                or  # noqa: E501
                local_var_params['firmware_distributable'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `firmware_distributable` when calling `patch_firmware_distributable`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'firmware_distributable' in local_var_params:
            body_params = local_var_params['firmware_distributable']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/Distributables/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareDistributable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_firmware_driver_distributable(self, moid,
                                            firmware_driver_distributable,
                                            **kwargs):  # noqa: E501
        """Update a 'firmware.DriverDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_firmware_driver_distributable(moid, firmware_driver_distributable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param FirmwareDriverDistributable firmware_driver_distributable: The 'firmware.DriverDistributable' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareDriverDistributable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_firmware_driver_distributable_with_http_info(
            moid, firmware_driver_distributable, **kwargs)  # noqa: E501

    def patch_firmware_driver_distributable_with_http_info(
            self, moid, firmware_driver_distributable, **kwargs):  # noqa: E501
        """Update a 'firmware.DriverDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_firmware_driver_distributable_with_http_info(moid, firmware_driver_distributable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param FirmwareDriverDistributable firmware_driver_distributable: The 'firmware.DriverDistributable' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareDriverDistributable, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'firmware_driver_distributable']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_firmware_driver_distributable" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_firmware_driver_distributable`"
            )  # noqa: E501
        # verify the required parameter 'firmware_driver_distributable' is set
        if self.api_client.client_side_validation and (
                'firmware_driver_distributable' not in local_var_params
                or  # noqa: E501
                local_var_params['firmware_driver_distributable'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `firmware_driver_distributable` when calling `patch_firmware_driver_distributable`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'firmware_driver_distributable' in local_var_params:
            body_params = local_var_params['firmware_driver_distributable']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/DriverDistributables/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareDriverDistributable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_firmware_running_firmware(self, moid, firmware_running_firmware,
                                        **kwargs):  # noqa: E501
        """Update a 'firmware.RunningFirmware' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_firmware_running_firmware(moid, firmware_running_firmware, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param FirmwareRunningFirmware firmware_running_firmware: The 'firmware.RunningFirmware' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareRunningFirmware
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_firmware_running_firmware_with_http_info(
            moid, firmware_running_firmware, **kwargs)  # noqa: E501

    def patch_firmware_running_firmware_with_http_info(
            self, moid, firmware_running_firmware, **kwargs):  # noqa: E501
        """Update a 'firmware.RunningFirmware' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_firmware_running_firmware_with_http_info(moid, firmware_running_firmware, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param FirmwareRunningFirmware firmware_running_firmware: The 'firmware.RunningFirmware' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareRunningFirmware, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'firmware_running_firmware']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_firmware_running_firmware" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_firmware_running_firmware`"
            )  # noqa: E501
        # verify the required parameter 'firmware_running_firmware' is set
        if self.api_client.client_side_validation and (
                'firmware_running_firmware' not in local_var_params
                or  # noqa: E501
                local_var_params['firmware_running_firmware'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `firmware_running_firmware` when calling `patch_firmware_running_firmware`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'firmware_running_firmware' in local_var_params:
            body_params = local_var_params['firmware_running_firmware']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/RunningFirmwares/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareRunningFirmware',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_firmware_server_configuration_utility_distributable(
            self, moid, firmware_server_configuration_utility_distributable,
            **kwargs):  # noqa: E501
        """Update a 'firmware.ServerConfigurationUtilityDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_firmware_server_configuration_utility_distributable(moid, firmware_server_configuration_utility_distributable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param FirmwareServerConfigurationUtilityDistributable firmware_server_configuration_utility_distributable: The 'firmware.ServerConfigurationUtilityDistributable' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareServerConfigurationUtilityDistributable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_firmware_server_configuration_utility_distributable_with_http_info(
            moid, firmware_server_configuration_utility_distributable,
            **kwargs)  # noqa: E501

    def patch_firmware_server_configuration_utility_distributable_with_http_info(
            self, moid, firmware_server_configuration_utility_distributable,
            **kwargs):  # noqa: E501
        """Update a 'firmware.ServerConfigurationUtilityDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_firmware_server_configuration_utility_distributable_with_http_info(moid, firmware_server_configuration_utility_distributable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param FirmwareServerConfigurationUtilityDistributable firmware_server_configuration_utility_distributable: The 'firmware.ServerConfigurationUtilityDistributable' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareServerConfigurationUtilityDistributable, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'moid', 'firmware_server_configuration_utility_distributable'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_firmware_server_configuration_utility_distributable"
                    % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `patch_firmware_server_configuration_utility_distributable`"
            )  # noqa: E501
        # verify the required parameter 'firmware_server_configuration_utility_distributable' is set
        if self.api_client.client_side_validation and (
                'firmware_server_configuration_utility_distributable' not in
                local_var_params or  # noqa: E501
                local_var_params[
                    'firmware_server_configuration_utility_distributable'] is
                None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `firmware_server_configuration_utility_distributable` when calling `patch_firmware_server_configuration_utility_distributable`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'firmware_server_configuration_utility_distributable' in local_var_params:
            body_params = local_var_params[
                'firmware_server_configuration_utility_distributable']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/ServerConfigurationUtilityDistributables/{Moid}',
            'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=
            'FirmwareServerConfigurationUtilityDistributable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_firmware_distributable(self, moid, firmware_distributable,
                                      **kwargs):  # noqa: E501
        """Update a 'firmware.Distributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_firmware_distributable(moid, firmware_distributable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param FirmwareDistributable firmware_distributable: The 'firmware.Distributable' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareDistributable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_firmware_distributable_with_http_info(
            moid, firmware_distributable, **kwargs)  # noqa: E501

    def update_firmware_distributable_with_http_info(self, moid,
                                                     firmware_distributable,
                                                     **kwargs):  # noqa: E501
        """Update a 'firmware.Distributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_firmware_distributable_with_http_info(moid, firmware_distributable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param FirmwareDistributable firmware_distributable: The 'firmware.Distributable' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareDistributable, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'firmware_distributable']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method update_firmware_distributable" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_firmware_distributable`"
            )  # noqa: E501
        # verify the required parameter 'firmware_distributable' is set
        if self.api_client.client_side_validation and (
                'firmware_distributable' not in local_var_params
                or  # noqa: E501
                local_var_params['firmware_distributable'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `firmware_distributable` when calling `update_firmware_distributable`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'firmware_distributable' in local_var_params:
            body_params = local_var_params['firmware_distributable']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/Distributables/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareDistributable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_firmware_driver_distributable(self, moid,
                                             firmware_driver_distributable,
                                             **kwargs):  # noqa: E501
        """Update a 'firmware.DriverDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_firmware_driver_distributable(moid, firmware_driver_distributable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param FirmwareDriverDistributable firmware_driver_distributable: The 'firmware.DriverDistributable' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareDriverDistributable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_firmware_driver_distributable_with_http_info(
            moid, firmware_driver_distributable, **kwargs)  # noqa: E501

    def update_firmware_driver_distributable_with_http_info(
            self, moid, firmware_driver_distributable, **kwargs):  # noqa: E501
        """Update a 'firmware.DriverDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_firmware_driver_distributable_with_http_info(moid, firmware_driver_distributable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param FirmwareDriverDistributable firmware_driver_distributable: The 'firmware.DriverDistributable' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareDriverDistributable, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'firmware_driver_distributable']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_firmware_driver_distributable" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_firmware_driver_distributable`"
            )  # noqa: E501
        # verify the required parameter 'firmware_driver_distributable' is set
        if self.api_client.client_side_validation and (
                'firmware_driver_distributable' not in local_var_params
                or  # noqa: E501
                local_var_params['firmware_driver_distributable'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `firmware_driver_distributable` when calling `update_firmware_driver_distributable`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'firmware_driver_distributable' in local_var_params:
            body_params = local_var_params['firmware_driver_distributable']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/DriverDistributables/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareDriverDistributable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_firmware_running_firmware(self, moid, firmware_running_firmware,
                                         **kwargs):  # noqa: E501
        """Update a 'firmware.RunningFirmware' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_firmware_running_firmware(moid, firmware_running_firmware, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param FirmwareRunningFirmware firmware_running_firmware: The 'firmware.RunningFirmware' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareRunningFirmware
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_firmware_running_firmware_with_http_info(
            moid, firmware_running_firmware, **kwargs)  # noqa: E501

    def update_firmware_running_firmware_with_http_info(
            self, moid, firmware_running_firmware, **kwargs):  # noqa: E501
        """Update a 'firmware.RunningFirmware' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_firmware_running_firmware_with_http_info(moid, firmware_running_firmware, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param FirmwareRunningFirmware firmware_running_firmware: The 'firmware.RunningFirmware' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareRunningFirmware, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['moid', 'firmware_running_firmware']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_firmware_running_firmware" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_firmware_running_firmware`"
            )  # noqa: E501
        # verify the required parameter 'firmware_running_firmware' is set
        if self.api_client.client_side_validation and (
                'firmware_running_firmware' not in local_var_params
                or  # noqa: E501
                local_var_params['firmware_running_firmware'] is None
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `firmware_running_firmware` when calling `update_firmware_running_firmware`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'firmware_running_firmware' in local_var_params:
            body_params = local_var_params['firmware_running_firmware']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/RunningFirmwares/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareRunningFirmware',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_firmware_server_configuration_utility_distributable(
            self, moid, firmware_server_configuration_utility_distributable,
            **kwargs):  # noqa: E501
        """Update a 'firmware.ServerConfigurationUtilityDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_firmware_server_configuration_utility_distributable(moid, firmware_server_configuration_utility_distributable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param FirmwareServerConfigurationUtilityDistributable firmware_server_configuration_utility_distributable: The 'firmware.ServerConfigurationUtilityDistributable' resource to update. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FirmwareServerConfigurationUtilityDistributable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_firmware_server_configuration_utility_distributable_with_http_info(
            moid, firmware_server_configuration_utility_distributable,
            **kwargs)  # noqa: E501

    def update_firmware_server_configuration_utility_distributable_with_http_info(
            self, moid, firmware_server_configuration_utility_distributable,
            **kwargs):  # noqa: E501
        """Update a 'firmware.ServerConfigurationUtilityDistributable' resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_firmware_server_configuration_utility_distributable_with_http_info(moid, firmware_server_configuration_utility_distributable, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str moid: The unique Moid identifier of a resource instance. (required)
        :param FirmwareServerConfigurationUtilityDistributable firmware_server_configuration_utility_distributable: The 'firmware.ServerConfigurationUtilityDistributable' resource to update. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FirmwareServerConfigurationUtilityDistributable, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'moid', 'firmware_server_configuration_utility_distributable'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_firmware_server_configuration_utility_distributable"
                    % key)
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'moid' is set
        if self.api_client.client_side_validation and (
                'moid' not in local_var_params or  # noqa: E501
                local_var_params['moid'] is None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `moid` when calling `update_firmware_server_configuration_utility_distributable`"
            )  # noqa: E501
        # verify the required parameter 'firmware_server_configuration_utility_distributable' is set
        if self.api_client.client_side_validation and (
                'firmware_server_configuration_utility_distributable' not in
                local_var_params or  # noqa: E501
                local_var_params[
                    'firmware_server_configuration_utility_distributable'] is
                None):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `firmware_server_configuration_utility_distributable` when calling `update_firmware_server_configuration_utility_distributable`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'moid' in local_var_params:
            path_params['Moid'] = local_var_params['moid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'firmware_server_configuration_utility_distributable' in local_var_params:
            body_params = local_var_params[
                'firmware_server_configuration_utility_distributable']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            'Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
                ['application/json',
                 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/firmware/ServerConfigurationUtilityDistributables/{Moid}',
            'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=
            'FirmwareServerConfigurationUtilityDistributable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
