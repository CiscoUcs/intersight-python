# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

from __future__ import absolute_import

import unittest

import intersight
from intersight.api.tam_api import TamApi  # noqa: E501
from intersight.rest import ApiException


class TestTamApi(unittest.TestCase):
    """TamApi unit test stubs"""
    def setUp(self):
        self.api = intersight.api.tam_api.TamApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_create_tam_advisory_count(self):
        """Test case for create_tam_advisory_count

        Create a 'tam.AdvisoryCount' resource.  # noqa: E501
        """
        pass

    def test_create_tam_advisory_info(self):
        """Test case for create_tam_advisory_info

        Create a 'tam.AdvisoryInfo' resource.  # noqa: E501
        """
        pass

    def test_create_tam_advisory_instance(self):
        """Test case for create_tam_advisory_instance

        Create a 'tam.AdvisoryInstance' resource.  # noqa: E501
        """
        pass

    def test_create_tam_security_advisory(self):
        """Test case for create_tam_security_advisory

        Create a 'tam.SecurityAdvisory' resource.  # noqa: E501
        """
        pass

    def test_delete_tam_advisory_count(self):
        """Test case for delete_tam_advisory_count

        Delete a 'tam.AdvisoryCount' resource.  # noqa: E501
        """
        pass

    def test_delete_tam_advisory_info(self):
        """Test case for delete_tam_advisory_info

        Delete a 'tam.AdvisoryInfo' resource.  # noqa: E501
        """
        pass

    def test_delete_tam_advisory_instance(self):
        """Test case for delete_tam_advisory_instance

        Delete a 'tam.AdvisoryInstance' resource.  # noqa: E501
        """
        pass

    def test_delete_tam_security_advisory(self):
        """Test case for delete_tam_security_advisory

        Delete a 'tam.SecurityAdvisory' resource.  # noqa: E501
        """
        pass

    def test_get_tam_advisory_count_by_moid(self):
        """Test case for get_tam_advisory_count_by_moid

        Read a 'tam.AdvisoryCount' resource.  # noqa: E501
        """
        pass

    def test_get_tam_advisory_count_list(self):
        """Test case for get_tam_advisory_count_list

        Read a 'tam.AdvisoryCount' resource.  # noqa: E501
        """
        pass

    def test_get_tam_advisory_info_by_moid(self):
        """Test case for get_tam_advisory_info_by_moid

        Read a 'tam.AdvisoryInfo' resource.  # noqa: E501
        """
        pass

    def test_get_tam_advisory_info_list(self):
        """Test case for get_tam_advisory_info_list

        Read a 'tam.AdvisoryInfo' resource.  # noqa: E501
        """
        pass

    def test_get_tam_advisory_instance_by_moid(self):
        """Test case for get_tam_advisory_instance_by_moid

        Read a 'tam.AdvisoryInstance' resource.  # noqa: E501
        """
        pass

    def test_get_tam_advisory_instance_list(self):
        """Test case for get_tam_advisory_instance_list

        Read a 'tam.AdvisoryInstance' resource.  # noqa: E501
        """
        pass

    def test_get_tam_security_advisory_by_moid(self):
        """Test case for get_tam_security_advisory_by_moid

        Read a 'tam.SecurityAdvisory' resource.  # noqa: E501
        """
        pass

    def test_get_tam_security_advisory_list(self):
        """Test case for get_tam_security_advisory_list

        Read a 'tam.SecurityAdvisory' resource.  # noqa: E501
        """
        pass

    def test_patch_tam_advisory_count(self):
        """Test case for patch_tam_advisory_count

        Update a 'tam.AdvisoryCount' resource.  # noqa: E501
        """
        pass

    def test_patch_tam_advisory_info(self):
        """Test case for patch_tam_advisory_info

        Update a 'tam.AdvisoryInfo' resource.  # noqa: E501
        """
        pass

    def test_patch_tam_advisory_instance(self):
        """Test case for patch_tam_advisory_instance

        Update a 'tam.AdvisoryInstance' resource.  # noqa: E501
        """
        pass

    def test_patch_tam_security_advisory(self):
        """Test case for patch_tam_security_advisory

        Update a 'tam.SecurityAdvisory' resource.  # noqa: E501
        """
        pass

    def test_update_tam_advisory_count(self):
        """Test case for update_tam_advisory_count

        Update a 'tam.AdvisoryCount' resource.  # noqa: E501
        """
        pass

    def test_update_tam_advisory_info(self):
        """Test case for update_tam_advisory_info

        Update a 'tam.AdvisoryInfo' resource.  # noqa: E501
        """
        pass

    def test_update_tam_advisory_instance(self):
        """Test case for update_tam_advisory_instance

        Update a 'tam.AdvisoryInstance' resource.  # noqa: E501
        """
        pass

    def test_update_tam_security_advisory(self):
        """Test case for update_tam_security_advisory

        Update a 'tam.SecurityAdvisory' resource.  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
