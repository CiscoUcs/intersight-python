# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

from __future__ import absolute_import

import unittest

import intersight
from intersight.api.software_api import SoftwareApi  # noqa: E501
from intersight.rest import ApiException


class TestSoftwareApi(unittest.TestCase):
    """SoftwareApi unit test stubs"""
    def setUp(self):
        self.api = intersight.api.software_api.SoftwareApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_create_software_hcl_meta(self):
        """Test case for create_software_hcl_meta

        Create a 'software.HclMeta' resource.  # noqa: E501
        """
        pass

    def test_create_software_hyperflex_distributable(self):
        """Test case for create_software_hyperflex_distributable

        Create a 'software.HyperflexDistributable' resource.  # noqa: E501
        """
        pass

    def test_delete_software_hcl_meta(self):
        """Test case for delete_software_hcl_meta

        Delete a 'software.HclMeta' resource.  # noqa: E501
        """
        pass

    def test_delete_software_hyperflex_distributable(self):
        """Test case for delete_software_hyperflex_distributable

        Delete a 'software.HyperflexDistributable' resource.  # noqa: E501
        """
        pass

    def test_get_software_hcl_meta_by_moid(self):
        """Test case for get_software_hcl_meta_by_moid

        Read a 'software.HclMeta' resource.  # noqa: E501
        """
        pass

    def test_get_software_hcl_meta_list(self):
        """Test case for get_software_hcl_meta_list

        Read a 'software.HclMeta' resource.  # noqa: E501
        """
        pass

    def test_get_software_hyperflex_distributable_by_moid(self):
        """Test case for get_software_hyperflex_distributable_by_moid

        Read a 'software.HyperflexDistributable' resource.  # noqa: E501
        """
        pass

    def test_get_software_hyperflex_distributable_list(self):
        """Test case for get_software_hyperflex_distributable_list

        Read a 'software.HyperflexDistributable' resource.  # noqa: E501
        """
        pass

    def test_patch_software_hcl_meta(self):
        """Test case for patch_software_hcl_meta

        Update a 'software.HclMeta' resource.  # noqa: E501
        """
        pass

    def test_patch_software_hyperflex_distributable(self):
        """Test case for patch_software_hyperflex_distributable

        Update a 'software.HyperflexDistributable' resource.  # noqa: E501
        """
        pass

    def test_update_software_hcl_meta(self):
        """Test case for update_software_hcl_meta

        Update a 'software.HclMeta' resource.  # noqa: E501
        """
        pass

    def test_update_software_hyperflex_distributable(self):
        """Test case for update_software_hyperflex_distributable

        Update a 'software.HyperflexDistributable' resource.  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
