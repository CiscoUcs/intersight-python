# coding: utf-8
"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations.   # noqa: E501

    The version of the OpenAPI document: 1.0.9-1295
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""

from __future__ import absolute_import

import unittest

import intersight
from intersight.api.boot_api import BootApi  # noqa: E501
from intersight.rest import ApiException


class TestBootApi(unittest.TestCase):
    """BootApi unit test stubs"""
    def setUp(self):
        self.api = intersight.api.boot_api.BootApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_create_boot_precision_policy(self):
        """Test case for create_boot_precision_policy

        Create a 'boot.PrecisionPolicy' resource.  # noqa: E501
        """
        pass

    def test_delete_boot_precision_policy(self):
        """Test case for delete_boot_precision_policy

        Delete a 'boot.PrecisionPolicy' resource.  # noqa: E501
        """
        pass

    def test_get_boot_device_boot_mode_by_moid(self):
        """Test case for get_boot_device_boot_mode_by_moid

        Read a 'boot.DeviceBootMode' resource.  # noqa: E501
        """
        pass

    def test_get_boot_device_boot_mode_list(self):
        """Test case for get_boot_device_boot_mode_list

        Read a 'boot.DeviceBootMode' resource.  # noqa: E501
        """
        pass

    def test_get_boot_precision_policy_by_moid(self):
        """Test case for get_boot_precision_policy_by_moid

        Read a 'boot.PrecisionPolicy' resource.  # noqa: E501
        """
        pass

    def test_get_boot_precision_policy_list(self):
        """Test case for get_boot_precision_policy_list

        Read a 'boot.PrecisionPolicy' resource.  # noqa: E501
        """
        pass

    def test_patch_boot_device_boot_mode(self):
        """Test case for patch_boot_device_boot_mode

        Update a 'boot.DeviceBootMode' resource.  # noqa: E501
        """
        pass

    def test_patch_boot_precision_policy(self):
        """Test case for patch_boot_precision_policy

        Update a 'boot.PrecisionPolicy' resource.  # noqa: E501
        """
        pass

    def test_update_boot_device_boot_mode(self):
        """Test case for update_boot_device_boot_mode

        Update a 'boot.DeviceBootMode' resource.  # noqa: E501
        """
        pass

    def test_update_boot_precision_policy(self):
        """Test case for update_boot_precision_policy

        Update a 'boot.PrecisionPolicy' resource.  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
